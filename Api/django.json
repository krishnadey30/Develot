[{"link": "https://docs.djangoproject.com/en/2.2/#getting-help", "para": "Having trouble? We d like to help!"}, {"link": "https://docs.djangoproject.com/en/2.2/#how-the-documentation-is-organized", "para": "Django has a lot of documentation. A high-level overview of how it s organized will help you know where to look for certain things:"}, {"link": "https://docs.djangoproject.com/en/2.2/#first-steps", "para": "Are you new to Django or to programming? This is the place to start!"}, {"link": "https://docs.djangoproject.com/en/2.2/#the-model-layer", "para": "Django provides an abstraction layer (the  models ) for structuring and manipulating the data of your Web application. Learn more about it below:"}, {"link": "https://docs.djangoproject.com/en/2.2/#the-view-layer", "para": "Django has the concept of  views  to encapsulate the logic responsible for processing a user s request and for returning the response. Find all you need to know about views via the links below:"}, {"link": "https://docs.djangoproject.com/en/2.2/#the-template-layer", "para": "The template layer provides a designer-friendly syntax for rendering the information to be presented to the user. Learn how this syntax can be used by designers and how it can be extended by programmers:"}, {"link": "https://docs.djangoproject.com/en/2.2/#forms", "para": "Django provides a rich framework to facilitate the creation of forms and the manipulation of form data."}, {"link": "https://docs.djangoproject.com/en/2.2/#the-development-process", "para": "Learn about the various components and tools to help you in the development and testing of Django applications:"}, {"link": "https://docs.djangoproject.com/en/2.2/#the-admin", "para": "Find all you need to know about the automated admin interface, one of Django s most popular features:"}, {"link": "https://docs.djangoproject.com/en/2.2/#security", "para": "Security is a topic of paramount importance in the development of Web applications and Django provides multiple protection tools and mechanisms:"}, {"link": "https://docs.djangoproject.com/en/2.2/#internationalization-and-localization", "para": "Django offers a robust internationalization and localization framework to assist you in the development of applications for multiple languages and world regions:"}, {"link": "https://docs.djangoproject.com/en/2.2/#performance-and-optimization", "para": "There are a variety of techniques and tools that can help get your code running more efficiently - faster, and using fewer system resources."}, {"link": "https://docs.djangoproject.com/en/2.2/#geographic-framework", "para": "GeoDjango intends to be a world-class geographic Web framework. Its goal is to make it as easy as possible to build GIS Web applications and harness the power of spatially enabled data."}, {"link": "https://docs.djangoproject.com/en/2.2/#common-web-application-tools", "para": "Django offers multiple tools commonly needed in the development of Web applications:"}, {"link": "https://docs.djangoproject.com/en/2.2/#other-core-functionalities", "para": "Learn about some other core functionalities of the Django framework:"}, {"link": "https://docs.djangoproject.com/en/2.2/#the-django-open-source-project", "para": "Learn about the development process for the Django project itself and about how you can contribute:"}, {"link": "https://docs.djangoproject.com/en/2.2/contents/#indices-glossary-and-tables", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/internals/mailing-lists/#django-users", "para": "This is the right place if you are looking to ask any question regarding the installation, usage, or debugging of Django.NoteIf it s the first time you send an email to this list, your email must be accepted first so don t worry if your message does not appear instantly."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/mailing-lists/#django-core-mentorship", "para": "The Django Core Mentorship list is intended to provide a welcoming introductory environment for community members interested in contributing to the Django Project."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/mailing-lists/#django-developers", "para": "The discussion about the development of Django itself takes place here.Before asking a question about how to contribute, read Contributing to Django. Many frequently asked questions are answered there.NotePlease make use of django-users mailing list if you want to ask for tech support, doing so in this list is inappropriate."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/mailing-lists/#django-i18n", "para": "This is the place to discuss the internationalization and localization of Django s components."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/mailing-lists/#django-announce", "para": "A (very) low-traffic list for announcing upcoming security releases, new releases of Django, and security advisories."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/mailing-lists/#django-updates", "para": "All the ticket updates are mailed automatically to this list, which is tracked by developers and interested community members."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/overview/#design-your-model", "para": "Although you can use Django without a database, it comes with an object-relational mapper in which you describe your database layout in Python code.The data-model syntax offers many rich ways of representing your models   so far, it s been solving many years  worth of database-schema problems. Here s a quick example:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/overview/#install-it", "para": "Next, run the Django command-line utility to create the database tables automatically:The migrate command looks at all your available models and creates tables in your database for whichever tables don t already exist, as well as optionally providing much richer schema control."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/overview/#enjoy-the-free-api", "para": "With that, you ve got a free, and rich, Python API to access your data. The API is created on the fly, no code generation necessary:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/overview/#a-dynamic-admin-interface-it-s-not-just-scaffolding-it-s-the-whole-house", "para": "Once your models are defined, Django can automatically create a professional, production ready administrative interface   a website that lets authenticated users add, change and delete objects. It s as easy as registering your model in the admin site:The philosophy here is that your site is edited by a staff, or a client, or maybe just you   and you don t want to have to deal with creating backend interfaces just to manage content.One typical workflow in creating Django apps is to create models and get the admin sites up and running as fast as possible, so your staff (or clients) can start populating data. Then, develop the way data is presented to the public."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/overview/#design-your-urls", "para": "A clean, elegant URL scheme is an important detail in a high-quality Web application. Django encourages beautiful URL design and doesn t put any cruft in URLs, like .php or .asp.To design URLs for an app, you create a Python module called a URLconf. A table of contents for your app, it contains a simple mapping between URL patterns and Python callback functions. URLconfs also serve to decouple URLs from Python code.Here s what a URLconf might look like for the Reporter/Article example above:The code above maps URL paths to Python callback functions ( views ). The path strings use parameter tags to  capture  values from the URLs. When a user requests a page, Django runs through each path, in order, and stops at the first one that matches the requested URL. (If none of them matches, Django calls a special-case 404 view.) This is blazingly fast, because the paths are compiled into regular expressions at load time.Once one of the URL patterns matches, Django calls the given view, which is a Python function. Each view gets passed a request object   which contains request metadata   and the values captured in the pattern.For example, if a user requested the URL  /articles/2005/05/39323/ , Django would call the function news.views.article_detail(request, year=2005, month=5, pk=39323)."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/overview/#write-your-views", "para": "Each view is responsible for doing one of two things: Returning an HttpResponse object containing the content for the requested page, or raising an exception such as Http404. The rest is up to you.Generally, a view retrieves data according to the parameters, loads a template and renders the template with the retrieved data. Here s an example view for year_archive from above:This example uses Django s template system, which has several powerful features but strives to stay simple enough for non-programmers to use."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/overview/#design-your-templates", "para": "The code above loads the news/year_archive.html template.Django has a template search path, which allows you to minimize redundancy among templates. In your Django settings, you specify a list of directories to check for templates with DIRS. If a template doesn t exist in the first directory, it checks the second, and so on.Let s say the news/year_archive.html template was found. Here s what that might look like:Variables are surrounded by double-curly braces. {{ article.headline }} means  Output the value of the article s headline attribute.  But dots aren t used only for attribute lookup. They also can do dictionary-key lookup, index lookup and function calls.Note {{ article.pub_date|date:\"F j, Y\" }} uses a Unix-style  pipe  (the  |  character). This is called a template filter, and it s a way to filter the value of a variable. In this case, the date filter formats a Python datetime object in the given format (as found in PHP s date function).You can chain together as many filters as you d like. You can write custom template filters. You can write custom template tags, which run custom Python code behind the scenes.Finally, Django uses the concept of  template inheritance . That s what the {% extends \"base.html\" %} does. It means  First load the template called  base , which has defined a bunch of blocks, and fill the blocks with the following blocks.  In short, that lets you dramatically cut down on redundancy in templates: each template has to define only what s unique to that template.Here s what the  base.html  template, including the use of static files, might look like:Simplistically, it defines the look-and-feel of the site (with the site s logo), and provides  holes  for child templates to fill. This makes a site redesign as easy as changing a single file   the base template.It also lets you create multiple versions of a site, with different base templates, while reusing child templates. Django s creators have used this technique to create strikingly different mobile versions of sites   simply by creating a new base template.Note that you don t have to use Django s template system if you prefer another system. While Django s template system is particularly well-integrated with Django s model layer, nothing forces you to use it. For that matter, you don t have to use Django s database API, either. You can use another database abstraction layer, you can read XML files, you can read files off disk, or anything you want. Each piece of Django   models, views, templates   is decoupled from the next."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/overview/#this-is-just-the-surface", "para": "This has been only a quick overview of Django s functionality. Some more useful features:The next obvious steps are for you to download Django, read the tutorial and join the community. Thanks for your interest!"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/install/#install-python", "para": "Being a Python Web framework, Django requires Python. See What Python version can I use with Django? for details. Python includes a lightweight database called SQLite so you won t need to set up a database just yet.Get the latest version of Python at https://www.python.org/downloads/ or with your operating system s package manager.You can verify that Python is installed by typing python from your shell; you should see something like:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/install/#set-up-a-database", "para": "This step is only necessary if you d like to work with a  large  database engine like PostgreSQL, MySQL, or Oracle. To install such a database, consult the database installation information."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/install/#install-django", "para": "You ve got three easy options to install Django:Always refer to the documentation that corresponds to the version of Django you re using!If you do either of the first two steps, keep an eye out for parts of the documentation marked new in development version. That phrase flags features that are only available in development versions of Django, and they likely won t work with an official release."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/install/#verifying", "para": "To verify that Django can be seen by Python, type python from your shell. Then at the Python prompt, try to import Django:You may have another version of Django installed."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/install/#that-s-it", "para": "That s it   you can now move onto the tutorial."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial01/#creating-a-project", "para": "If this is your first time using Django, you ll have to take care of some initial setup. Namely, you ll need to auto-generate some code that establishes a Django project   a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings.From the command line, cd into a directory where you d like to store your code, then run the following command:This will create a mysite directory in your current directory. If it didn t work, see Problems running django-admin.NoteYou ll need to avoid naming projects after built-in Python or Django components. In particular, this means you should avoid using names like django (which will conflict with Django itself) or test (which conflicts with a built-in Python package).Where should this code live?If your background is in plain old PHP (with no use of modern frameworks), you re probably used to putting code under the Web server s document root (in a place such as /var/www). With Django, you don t do that. It s not a good idea to put any of this Python code within your Web server s document root, because it risks the possibility that people may be able to view your code over the Web. That s not good for security.Put your code in some directory outside of the document root, such as /home/mycode.Let s look at what startproject created:These files are:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial01/#the-development-server", "para": "Let s verify your Django project works. Change into the outer mysite directory, if you haven t already, and run the following commands:You ll see the following output on the command line:NoteIgnore the warning about unapplied database migrations for now; we ll deal with the database shortly.You ve started the Django development server, a lightweight Web server written purely in Python. We ve included this with Django so you can develop things rapidly, without having to deal with configuring a production server   such as Apache   until you re ready for production.Now s a good time to note: don t use this server in anything resembling a production environment. It s intended only for use while developing. (We re in the business of making Web frameworks, not Web servers.)Now that the server s running, visit http://127.0.0.1:8000/ with your Web browser. You ll see a  Congratulations!  page, with a rocket taking off. It worked!Changing the portBy default, the runserver command starts the development server on the internal IP at port 8000.If you want to change the server s port, pass it as a command-line argument. For instance, this command starts the server on port 8080:If you want to change the server s IP, pass it along with the port. For example, to listen on all available public IPs (which is useful if you are running Vagrant or want to show off your work on other computers on the network), use:0 is a shortcut for 0.0.0.0. Full docs for the development server can be found in the runserver reference.Automatic reloading of runserverThe development server automatically reloads Python code for each request as needed. You don t need to restart the server for code changes to take effect. However, some actions like adding files don t trigger a restart, so you ll have to restart the server in these cases."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial01/#creating-the-polls-app", "para": "Now that your environment   a  project    is set up, you re set to start doing work.Each application you write in Django consists of a Python package that follows a certain convention. Django comes with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories.Projects vs. appsWhat s the difference between a project and an app? An app is a Web application that does something   e.g., a Weblog system, a database of public records or a simple poll app. A project is a collection of configuration and apps for a particular website. A project can contain multiple apps. An app can be in multiple projects.Your apps can live anywhere on your Python path. In this tutorial, we ll create our poll app right next to your manage.py file so that it can be imported as its own top-level module, rather than a submodule of mysite.To create your app, make sure you re in the same directory as manage.py and type this command:That ll create a directory polls, which is laid out like this:This directory structure will house the poll application."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial01/#write-your-first-view", "para": "Let s write the first view. Open the file polls/views.py and put the following Python code in it:This is the simplest view possible in Django. To call the view, we need to map it to a URL - and for this we need a URLconf.To create a URLconf in the polls directory, create a file called urls.py. Your app directory should now look like:In the polls/urls.py file include the following code:The next step is to point the root URLconf at the polls.urls module. In mysite/urls.py, add an import for django.urls.include and insert an include() in the urlpatterns list, so you have:The include() function allows referencing other URLconfs. Whenever Django encounters include(), it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.The idea behind include() is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (polls/urls.py), they can be placed under  /polls/ , or under  /fun_polls/ , or under  /content/polls/ , or any other path root, and the app will still work.When to use include()You should always use include() when you include other URL patterns. admin.site.urls is the only exception to this.You have now wired an index view into the URLconf. Verify it s working with the following command:Go to http://localhost:8000/polls/ in your browser, and you should see the text  Hello, world. You re at the polls index. , which you defined in the index view.Page not found?If you get an error page here, check that you re going to http://localhost:8000/polls/ and not http://localhost:8000/.The path() function is passed four arguments, two required: route and view, and two optional: kwargs, and name. At this point, it s worth reviewing what these arguments are for.route is a string that contains a URL pattern. When processing a request, Django starts at the first pattern in urlpatterns and makes its way down the list, comparing the requested URL against each pattern until it finds one that matches.Patterns don t search GET and POST parameters, or the domain name. For example, in a request to https://www.example.com/myapp/, the URLconf will look for myapp/. In a request to https://www.example.com/myapp/?page=3, the URLconf will also look for myapp/.When Django finds a matching pattern, it calls the specified view function with an HttpRequest object as the first argument and any  captured  values from the route as keyword arguments. We ll give an example of this in a bit.Arbitrary keyword arguments can be passed in a dictionary to the target view. We aren t going to use this feature of Django in the tutorial.Naming your URL lets you refer to it unambiguously from elsewhere in Django, especially from within templates. This powerful feature allows you to make global changes to the URL patterns of your project while only touching a single file.When you re comfortable with the basic request and response flow, read part 2 of this tutorial to start working with the database."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial02/#database-setup", "para": "Now, open up mysite/settings.py. It s a normal Python module with module-level variables representing Django settings.By default, the configuration uses SQLite. If you re new to databases, or you re just interested in trying Django, this is the easiest choice. SQLite is included in Python, so you won t need to install anything else to support your database. When starting your first real project, however, you may want to use a more scalable database like PostgreSQL, to avoid database-switching headaches down the road.If you wish to use another database, install the appropriate database bindings and change the following keys in the DATABASES 'default' item to match your database connection settings:If you are not using SQLite as your database, additional settings such as USER, PASSWORD, and HOST must be added. For more details, see the reference documentation for DATABASES.For databases other than SQLiteIf you re using a database besides SQLite, make sure you ve created a database by this point. Do that with  CREATE DATABASE database_name;  within your database s interactive prompt.Also make sure that the database user provided in mysite/settings.py has  create database  privileges. This allows automatic creation of a test database which will be needed in a later tutorial.If you re using SQLite, you don t need to create anything beforehand - the database file will be created automatically when it is needed.While you re editing mysite/settings.py, set TIME_ZONE to your time zone.Also, note the INSTALLED_APPS setting at the top of the file. That holds the names of all Django applications that are activated in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects.By default, INSTALLED_APPS contains the following apps, all of which come with Django:These applications are included by default as a convenience for the common case.Some of these applications make use of at least one database table, though, so we need to create the tables in the database before we can use them. To do that, run the following command:The migrate command looks at the INSTALLED_APPS setting and creates any necessary database tables according to the database settings in your mysite/settings.py file and the database migrations shipped with the app (we ll cover those later). You ll see a message for each migration it applies. If you re interested, run the command-line client for your database and type \\dt (PostgreSQL), SHOW TABLES; (MySQL), .schema (SQLite), or SELECT TABLE_NAME FROM USER_TABLES; (Oracle) to display the tables Django created.For the minimalistsLike we said above, the default applications are included for the common case, but not everybody needs them. If you don t need any or all of them, feel free to comment-out or delete the appropriate line(s) from INSTALLED_APPS before running migrate. The migrate command will only run migrations for apps in INSTALLED_APPS."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial02/#creating-models", "para": "Now we ll define your models   essentially, your database layout, with additional metadata.PhilosophyA model is the single, definitive source of truth about your data. It contains the essential fields and behaviors of the data you re storing. Django follows the DRY Principle. The goal is to define your data model in one place and automatically derive things from it.This includes the migrations - unlike in Ruby On Rails, for example, migrations are entirely derived from your models file, and are essentially just a history that Django can roll through to update your database schema to match your current models.In our simple poll app, we ll create two models: Question and Choice. A Question has a question and a publication date. A Choice has two fields: the text of the choice and a vote tally. Each Choice is associated with a Question.These concepts are represented by simple Python classes. Edit the polls/models.py file so it looks like this:The code is straightforward. Each model is represented by a class that subclasses django.db.models.Model. Each model has a number of class variables, each of which represents a database field in the model.Each field is represented by an instance of a Field class   e.g., CharField for character fields and DateTimeField for datetimes. This tells Django what type of data each field holds.The name of each Field instance (e.g. question_text or pub_date) is the field s name, in machine-friendly format. You ll use this value in your Python code, and your database will use it as the column name.You can use an optional first positional argument to a Field to designate a human-readable name. That s used in a couple of introspective parts of Django, and it doubles as documentation. If this field isn t provided, Django will use the machine-readable name. In this example, we ve only defined a human-readable name for Question.pub_date. For all other fields in this model, the field s machine-readable name will suffice as its human-readable name.Some Field classes have required arguments. CharField, for example, requires that you give it a max_length. That s used not only in the database schema, but in validation, as we ll soon see.A Field can also have various optional arguments; in this case, we ve set the default value of votes to 0.Finally, note a relationship is defined, using ForeignKey. That tells Django each Choice is related to a single Question. Django supports all the common database relationships: many-to-one, many-to-many, and one-to-one."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial02/#activating-models", "para": "That small bit of model code gives Django a lot of information. With it, Django is able to:But first we need to tell our project that the polls app is installed.PhilosophyDjango apps are  pluggable : You can use an app in multiple projects, and you can distribute apps, because they don t have to be tied to a given Django installation.To include the app in our project, we need to add a reference to its configuration class in the INSTALLED_APPS setting. The PollsConfig class is in the polls/apps.py file, so its dotted path is 'polls.apps.PollsConfig'. Edit the mysite/settings.py file and add that dotted path to the INSTALLED_APPS setting. It ll look like this:Now Django knows to include the polls app. Let s run another command:You should see something similar to the following:By running makemigrations, you re telling Django that you ve made some changes to your models (in this case, you ve made new ones) and that you d like the changes to be stored as a migration.Migrations are how Django stores changes to your models (and thus your database schema) - they re just files on disk. You can read the migration for your new model if you like; it s the file polls/migrations/0001_initial.py. Don t worry, you re not expected to read them every time Django makes one, but they re designed to be human-editable in case you want to manually tweak how Django changes things.There s a command that will run the migrations for you and manage your database schema automatically - that s called migrate, and we ll come to it in a moment - but first, let s see what SQL that migration would run. The sqlmigrate command takes migration names and returns their SQL:You should see something similar to the following (we ve reformatted it for readability):Note the following:If you re interested, you can also run python manage.py check; this checks for any problems in your project without making migrations or touching the database.Now, run migrate again to create those model tables in your database:The migrate command takes all the migrations that haven t been applied (Django tracks which ones are applied using a special table in your database called django_migrations) and runs them against your database - essentially, synchronizing the changes you made to your models with the schema in the database.Migrations are very powerful and let you change your models over time, as you develop your project, without the need to delete your database or tables and make new ones - it specializes in upgrading your database live, without losing data. We ll cover them in more depth in a later part of the tutorial, but for now, remember the three-step guide to making model changes:The reason that there are separate commands to make and apply migrations is because you ll commit migrations to your version control system and ship them with your app; they not only make your development easier, they re also usable by other developers and in production.Read the django-admin documentation for full information on what the manage.py utility can do."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial02/#playing-with-the-api", "para": "Now, let s hop into the interactive Python shell and play around with the free API Django gives you. To invoke the Python shell, use this command:We re using this instead of simply typing  python , because manage.py sets the DJANGO_SETTINGS_MODULE environment variable, which gives Django the Python import path to your mysite/settings.py file.Once you re in the shell, explore the database API:Wait a minute. <Question: Question object (1)> isn t a helpful representation of this object. Let s fix that by editing the Question model (in the polls/models.py file) and adding a __str__() method to both Question and Choice:It s important to add __str__() methods to your models, not only for your own convenience when dealing with the interactive prompt, but also because objects  representations are used throughout Django s automatically-generated admin.Note these are normal Python methods. Let s add a custom method, just for demonstration:Note the addition of import datetime and from django.utils import timezone, to reference Python s standard datetime module and Django s time-zone-related utilities in django.utils.timezone, respectively. If you aren t familiar with time zone handling in Python, you can learn more in the time zone support docs.Save these changes and start a new Python interactive shell by running python manage.py shell again:For more information on model relations, see Accessing related objects. For more on how to use double underscores to perform field lookups via the API, see Field lookups. For full details on the database API, see our Database API reference."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial02/#introducing-the-django-admin", "para": "PhilosophyGenerating admin sites for your staff or clients to add, change, and delete content is tedious work that doesn t require much creativity. For that reason, Django entirely automates creation of admin interfaces for models.Django was written in a newsroom environment, with a very clear separation between  content publishers  and the  public  site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content.The admin isn t intended to be used by site visitors. It s for site managers.First we ll need to create a user who can login to the admin site. Run the following command:Enter your desired username and press enter.You will then be prompted for your desired email address:The final step is to enter your password. You will be asked to enter your password twice, the second time as a confirmation of the first.The Django admin site is activated by default. Let s start the development server and explore it.If the server is not running start it like so:Now, open a Web browser and go to  /admin/  on your local domain   e.g., http://127.0.0.1:8000/admin/. You should see the admin s login screen:Since translation is turned on by default, the login screen may be displayed in your own language, depending on your browser s settings and if Django has a translation for this language.Now, try logging in with the superuser account you created in the previous step. You should see the Django admin index page:You should see a few types of editable content: groups and users. They are provided by django.contrib.auth, the authentication framework shipped by Django.But where s our poll app? It s not displayed on the admin index page.Just one thing to do: we need to tell the admin that Question objects have an admin interface. To do this, open the polls/admin.py file, and edit it to look like this:Now that we ve registered Question, Django knows that it should be displayed on the admin index page:Click  Questions . Now you re at the  change list  page for questions. This page displays all the questions in the database and lets you choose one to change it. There s the  What s up?  question we created earlier:Click the  What s up?  question to edit it:Things to note here:The bottom part of the page gives you a couple of options:If the value of  Date published  doesn t match the time when you created the question in Tutorial 1, it probably means you forgot to set the correct value for the TIME_ZONE setting. Change it, reload the page and check that the correct value appears.Change the  Date published  by clicking the  Today  and  Now  shortcuts. Then click  Save and continue editing.  Then click  History  in the upper right. You ll see a page listing all changes made to this object via the Django admin, with the timestamp and username of the person who made the change:When you re comfortable with the models API and have familiarized yourself with the admin site, read part 3 of this tutorial to learn about how to add more views to our polls app."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial03/#overview", "para": "A view is a  type  of Web page in your Django application that generally serves a specific function and has a specific template. For example, in a blog application, you might have the following views:In our poll application, we ll have the following four views:In Django, web pages and other content are delivered by views. Each view is represented by a simple Python function (or method, in the case of class-based views). Django will choose a view by examining the URL that s requested (to be precise, the part of the URL after the domain name).Now in your time on the web you may have come across such beauties as  ME2/Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B . You will be pleased to know that Django allows us much more elegant URL patterns than that.A URL pattern is simply the general form of a URL - for example: /newsarchive/<year>/<month>/.To get from a URL to a view, Django uses what are known as  URLconfs . A URLconf maps URL patterns to views.This tutorial provides basic instruction in the use of URLconfs, and you can refer to URL dispatcher for more information."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial03/#writing-more-views", "para": "Now let s add a few more views to polls/views.py. These views are slightly different, because they take an argument:Wire these new views into the polls.urls module by adding the following path() calls:Take a look in your browser, at  /polls/34/ . It ll run the detail() method and display whatever ID you provide in the URL. Try  /polls/34/results/  and  /polls/34/vote/  too   these will display the placeholder results and voting pages.When somebody requests a page from your website   say,  /polls/34/ , Django will load the mysite.urls Python module because it s pointed to by the ROOT_URLCONF setting. It finds the variable named urlpatterns and traverses the patterns in order. After finding the match at 'polls/', it strips off the matching text (\"polls/\") and sends the remaining text   \"34/\"   to the  polls.urls  URLconf for further processing. There it matches '<int:question_id>/', resulting in a call to the detail() view like so:The question_id=34 part comes from <int:question_id>. Using angle brackets  captures  part of the URL and sends it as a keyword argument to the view function. The :question_id> part of the string defines the name that will be used to identify the matched pattern, and the <int: part is a converter that determines what patterns should match this part of the URL path.There s no need to add URL cruft such as .html   unless you want to, in which case you can do something like this:But, don t do that. It s silly."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial03/#write-views-that-actually-do-something", "para": "Each view is responsible for doing one of two things: returning an HttpResponse object containing the content for the requested page, or raising an exception such as Http404. The rest is up to you.Your view can read records from a database, or not. It can use a template system such as Django s   or a third-party Python template system   or not. It can generate a PDF file, output XML, create a ZIP file on the fly, anything you want, using whatever Python libraries you want.All Django wants is that HttpResponse. Or an exception.Because it s convenient, let s use Django s own database API, which we covered in Tutorial 2. Here s one stab at a new index() view, which displays the latest 5 poll questions in the system, separated by commas, according to publication date:There s a problem here, though: the page s design is hard-coded in the view. If you want to change the way the page looks, you ll have to edit this Python code. So let s use Django s template system to separate the design from Python by creating a template that the view can use.First, create a directory called templates in your polls directory. Django will look for templates in there.Your project s TEMPLATES setting describes how Django will load and render templates. The default settings file configures a DjangoTemplates backend whose APP_DIRS option is set to True. By convention DjangoTemplates looks for a  templates  subdirectory in each of the INSTALLED_APPS.Within the templates directory you have just created, create another directory called polls, and within that create a file called index.html. In other words, your template should be at polls/templates/polls/index.html. Because of how the app_directories template loader works as described above, you can refer to this template within Django simply as polls/index.html.Template namespacingNow we might be able to get away with putting our templates directly in polls/templates (rather than creating another polls subdirectory), but it would actually be a bad idea. Django will choose the first template it finds whose name matches, and if you had a template with the same name in a different application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the easiest way to ensure this is by namespacing them. That is, by putting those templates inside another directory named for the application itself.Put the following code in that template:Now let s update our index view in polls/views.py to use the template:That code loads the template called  polls/index.html and passes it a context. The context is a dictionary mapping template variable names to Python objects.Load the page by pointing your browser at  /polls/ , and you should see a bulleted-list containing the  What s up  question from Tutorial 2. The link points to the question s detail page.It s a very common idiom to load a template, fill a context and return an HttpResponse object with the result of the rendered template. Django provides a shortcut. Here s the full index() view, rewritten:Note that once we ve done this in all these views, we no longer need to import loader and HttpResponse (you ll want to keep HttpResponse if you still have the stub methods for detail, results, and vote).The render() function takes the request object as its first argument, a template name as its second argument and a dictionary as its optional third argument. It returns an HttpResponse object of the given template rendered with the given context."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial03/#raising-a-404-error", "para": "Now, let s tackle the question detail view   the page that displays the question text for a given poll. Here s the view:The new concept here: The view raises the Http404 exception if a question with the requested ID doesn t exist.We ll discuss what you could put in that polls/detail.html template a bit later, but if you d like to quickly get the above example working, a file containing just:will get you started for now.It s a very common idiom to use get() and raise Http404 if the object doesn t exist. Django provides a shortcut. Here s the detail() view, rewritten:The get_object_or_404() function takes a Django model as its first argument and an arbitrary number of keyword arguments, which it passes to the get() function of the model s manager. It raises Http404 if the object doesn t exist.PhilosophyWhy do we use a helper function get_object_or_404() instead of automatically catching the ObjectDoesNotExist exceptions at a higher level, or having the model API raise Http404 instead of ObjectDoesNotExist?Because that would couple the model layer to the view layer. One of the foremost design goals of Django is to maintain loose coupling. Some controlled coupling is introduced in the django.shortcuts module.There s also a get_list_or_404() function, which works just as get_object_or_404()   except using filter() instead of get(). It raises Http404 if the list is empty."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial03/#use-the-template-system", "para": "Back to the detail() view for our poll application. Given the context variable question, here s what the polls/detail.html template might look like:The template system uses dot-lookup syntax to access variable attributes. In the example of {{ question.question_text }}, first Django does a dictionary lookup on the object question. Failing that, it tries an attribute lookup   which works, in this case. If attribute lookup had failed, it would ve tried a list-index lookup.Method-calling happens in the {% for %} loop: question.choice_set.all is interpreted as the Python code question.choice_set.all(), which returns an iterable of Choice objects and is suitable for use in the {% for %} tag.See the template guide for more about templates."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial03/#removing-hardcoded-urls-in-templates", "para": "Remember, when we wrote the link to a question in the polls/index.html template, the link was partially hardcoded like this:The problem with this hardcoded, tightly-coupled approach is that it becomes challenging to change URLs on projects with a lot of templates. However, since you defined the name argument in the path() functions in the polls.urls module, you can remove a reliance on specific URL paths defined in your url configurations by using the {% url %} template tag:The way this works is by looking up the URL definition as specified in the polls.urls module. You can see exactly where the URL name of  detail  is defined below:If you want to change the URL of the polls detail view to something else, perhaps to something like polls/specifics/12/ instead of doing it in the template (or templates) you would change it in polls/urls.py:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial03/#namespacing-url-names", "para": "The tutorial project has just one app, polls. In real Django projects, there might be five, ten, twenty apps or more. How does Django differentiate the URL names between them? For example, the polls app has a detail view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the {% url %} template tag?The answer is to add namespaces to your  URLconf. In the polls/urls.py file, go ahead and add an app_name to set the application namespace:Now change your polls/index.html template from:to point at the namespaced detail view:When you re comfortable with writing views, read part 4 of this tutorial to learn about simple form processing and generic views."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial04/#write-a-simple-form", "para": "Let s update our poll detail template ( polls/detail.html ) from the last tutorial, so that the template contains an HTML <form> element:A quick rundown:Now, let s create a Django view that handles the submitted data and does something with it. Remember, in Tutorial 3, we created a URLconf for the polls application that includes this line:We also created a dummy implementation of the vote() function. Let s create a real version. Add the following to polls/views.py:This code includes a few things we haven t covered yet in this tutorial:request.POST is a dictionary-like object that lets you access submitted data by key name. In this case, request.POST['choice'] returns the ID of the selected choice, as a string. request.POST values are always strings.Note that Django also provides request.GET for accessing GET data in the same way   but we re explicitly using request.POST in our code, to ensure that data is only altered via a POST call.request.POST['choice'] will raise KeyError if choice wasn t provided in POST data. The above code checks for KeyError and redisplays the question form with an error message if choice isn t given.After incrementing the choice count, the code returns an HttpResponseRedirect rather than a normal HttpResponse. HttpResponseRedirect takes a single argument: the URL to which the user will be redirected (see the following point for how we construct the URL in this case).As the Python comment above points out, you should always return an HttpResponseRedirect after successfully dealing with POST data. This tip isn t specific to Django; it s just good Web development practice.We are using the reverse() function in the HttpResponseRedirect constructor in this example. This function helps avoid having to hardcode a URL in the view function. It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view. In this case, using the URLconf we set up in Tutorial 3, this reverse() call will return a string likewhere the 3 is the value of question.id. This redirected URL will then call the 'results' view to display the final page.As mentioned in Tutorial 3, request is an HttpRequest object. For more on HttpRequest objects, see the request and response documentation.After somebody votes in a question, the vote() view redirects to the results page for the question. Let s write that view:This is almost exactly the same as the detail() view from Tutorial 3. The only difference is the template name. We ll fix this redundancy later.Now, create a polls/results.html template:Now, go to /polls/1/ in your browser and vote in the question. You should see a results page that gets updated each time you vote. If you submit the form without having chosen a choice, you should see the error message.NoteThe code for our vote() view does have a small problem. It first gets the selected_choice object from the database, then computes the new value of votes, and then saves it back to the database. If two users of your website try to vote at exactly the same time, this might go wrong: The same value, let s say 42, will be retrieved for votes. Then, for both users the new value of 43 is computed and saved, but 44 would be the expected value.This is called a race condition. If you are interested, you can read Avoiding race conditions using F() to learn how you can solve this issue."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial04/#use-generic-views-less-code-is-better", "para": "The detail() (from Tutorial 3) and results() views are very simple   and, as mentioned above, redundant. The index() view, which displays a list of polls, is similar.These views represent a common case of basic Web development: getting data from the database according to a parameter passed in the URL, loading a template and returning the rendered template. Because this is so common, Django provides a shortcut, called the  generic views  system.Generic views abstract common patterns to the point where you don t even need to write Python code to write an app.Let s convert our poll app to use the generic views system, so we can delete a bunch of our own code. We ll just have to take a few steps to make the conversion. We will:Read on for details.Why the code-shuffle?Generally, when writing a Django app, you ll evaluate whether generic views are a good fit for your problem, and you ll use them from the beginning, rather than refactoring your code halfway through. But this tutorial intentionally has focused on writing the views  the hard way  until now, to focus on core concepts.You should know basic math before you start using a calculator.First, open the polls/urls.py URLconf and change it like so:Note that the name of the matched pattern in the path strings of the second and third patterns has changed from <question_id> to <pk>.Next, we re going to remove our old index, detail, and results views and use Django s generic views instead. To do so, open the polls/views.py file and change it like so:We re using two generic views here: ListView and DetailView. Respectively, those two views abstract the concepts of  display a list of objects  and  display a detail page for a particular type of object. By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html. In our case, it would use the template \"polls/question_detail.html\". The template_name attribute is used to tell Django to use a specific template name instead of the autogenerated default template name. We also specify the template_name for the results list view   this ensures that the results view and the detail view have a different appearance when rendered, even though they re both a DetailView behind the scenes.Similarly, the ListView generic view uses a default template called <app name>/<model name>_list.html; we use template_name to tell ListView to use our existing \"polls/index.html\" template.In previous parts of the tutorial, the templates have been provided with a context that contains the question and latest_question_list context variables. For DetailView the question variable is provided automatically   since we re using a Django model (Question), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is question_list. To override this we provide the context_object_name attribute, specifying that we want to use latest_question_list instead. As an alternative approach, you could change your templates to match the new default context variables   but it s a lot easier to just tell Django to use the variable you want.Run the server, and use your new polling app based on generic views.For full details on generic views, see the generic views documentation.When you re comfortable with forms and generic views, read part 5 of this tutorial to learn about testing our polls app."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial05/#introducing-automated-testing", "para": "Tests are simple routines that check the operation of your code.Testing operates at different levels. Some tests might apply to a tiny detail (does a particular model method return values as expected?) while others examine the overall operation of the software (does a sequence of user inputs on the site produce the desired result?). That s no different from the kind of testing you did earlier in Tutorial 2, using the shell to examine the behavior of a method, or running the application and entering data to check how it behaves.What s different in automated tests is that the testing work is done for you by the system. You create a set of tests once, and then as you make changes to your app, you can check that your code still works as you originally intended, without having to perform time consuming manual testing.So why create tests, and why now?You may feel that you have quite enough on your plate just learning Python/Django, and having yet another thing to learn and do may seem overwhelming and perhaps unnecessary. After all, our polls application is working quite happily now; going through the trouble of creating automated tests is not going to make it work any better. If creating the polls application is the last bit of Django programming you will ever do, then true, you don t need to know how to create automated tests. But, if that s not the case, now is an excellent time to learn.Up to a certain point,  checking that it seems to work  will be a satisfactory test. In a more sophisticated application, you might have dozens of complex interactions between components.A change in any of those components could have unexpected consequences on the application s behavior. Checking that it still  seems to work  could mean running through your code s functionality with twenty different variations of your test data just to make sure you haven t broken something - not a good use of your time.That s especially true when automated tests could do this for you in seconds. If something s gone wrong, tests will also assist in identifying the code that s causing the unexpected behavior.Sometimes it may seem a chore to tear yourself away from your productive, creative programming work to face the unglamorous and unexciting business of writing tests, particularly when you know your code is working properly.However, the task of writing tests is a lot more fulfilling than spending hours testing your application manually or trying to identify the cause of a newly-introduced problem.It s a mistake to think of tests merely as a negative aspect of development.Without tests, the purpose or intended behavior of an application might be rather opaque. Even when it s your own code, you will sometimes find yourself poking around in it trying to find out what exactly it s doing.Tests change that; they light up your code from the inside, and when something goes wrong, they focus light on the part that has gone wrong - even if you hadn t even realized it had gone wrong.You might have created a brilliant piece of software, but you will find that many other developers will simply refuse to look at it because it lacks tests; without tests, they won t trust it. Jacob Kaplan-Moss, one of Django s original developers, says  Code without tests is broken by design. That other developers want to see tests in your software before they take it seriously is yet another reason for you to start writing tests.The previous points are written from the point of view of a single developer maintaining an application. Complex applications will be maintained by teams. Tests guarantee that colleagues don t inadvertently break your code (and that you don t break theirs without knowing). If you want to make a living as a Django programmer, you must be good at writing tests!"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial05/#basic-testing-strategies", "para": "There are many ways to approach writing tests.Some programmers follow a discipline called  test-driven development ; they actually write their tests before they write their code. This might seem counter-intuitive, but in fact it s similar to what most people will often do anyway: they describe a problem, then create some code to solve it. Test-driven development simply formalizes the problem in a Python test case.More often, a newcomer to testing will create some code and later decide that it should have some tests. Perhaps it would have been better to write some tests earlier, but it s never too late to get started.Sometimes it s difficult to figure out where to get started with writing tests. If you have written several thousand lines of Python, choosing something to test might not be easy. In such a case, it s fruitful to write your first test the next time you make a change, either when you add a new feature or fix a bug.So let s do that right away."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial05/#writing-our-first-test", "para": "Fortunately, there s a little bug in the polls application for us to fix right away: the Question.was_published_recently() method returns True if the Question was published within the last day (which is correct) but also if the Question s pub_date field is in the future (which certainly isn t).Confirm the bug by using the shell to check the method on a question whose date lies in the future:Since things in the future are not  recent , this is clearly wrong.What we ve just done in the shell to test for the problem is exactly what we can do in an automated test, so let s turn that into an automated test.A conventional place for an application s tests is in the application s tests.py file; the testing system will automatically find tests in any file whose name begins with test.Put the following in the tests.py file in the polls application:Here we have created a django.test.TestCase subclass with a method that creates a Question instance with a pub_date in the future. We then check the output of was_published_recently() - which ought to be False.In the terminal, we can run our test:and you ll see something like:What happened is this:The test informs us which test failed and even the line on which the failure occurred.We already know what the problem is: Question.was_published_recently() should return False if its pub_date is in the future. Amend the method in models.py, so that it will only return True if the date is also in the past:and run the test again:After identifying a bug, we wrote a test that exposes it and corrected the bug in the code so our test passes.Many other things might go wrong with our application in the future, but we can be sure that we won t inadvertently reintroduce this bug, because simply running the test will warn us immediately. We can consider this little portion of the application pinned down safely forever.While we re here, we can further pin down the was_published_recently() method; in fact, it would be positively embarrassing if in fixing one bug we had introduced another.Add two more test methods to the same class, to test the behavior of the method more comprehensively:And now we have three tests that confirm that Question.was_published_recently() returns sensible values for past, recent, and future questions.Again, polls is a simple application, but however complex it grows in the future and whatever other code it interacts with, we now have some guarantee that the method we have written tests for will behave in expected ways."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial05/#test-a-view", "para": "The polls application is fairly undiscriminating: it will publish any question, including ones whose pub_date field lies in the future. We should improve this. Setting a pub_date in the future should mean that the Question is published at that moment, but invisible until then.When we fixed the bug above, we wrote the test first and then the code to fix it. In fact that was a simple example of test-driven development, but it doesn t really matter in which order we do the work.In our first test, we focused closely on the internal behavior of the code. For this test, we want to check its behavior as it would be experienced by a user through a web browser.Before we try to fix anything, let s have a look at the tools at our disposal.Django provides a test Client to simulate a user interacting with the code at the view level.  We can use it in tests.py or even in the shell.We will start again with the shell, where we need to do a couple of things that won t be necessary in tests.py. The first is to set up the test environment in the shell:setup_test_environment() installs a template renderer which will allow us to examine some additional attributes on responses such as response.context that otherwise wouldn t be available. Note that this method does not setup a test database, so the following will be run against the existing database and the output may differ slightly depending on what questions you already created. You might get unexpected results if your TIME_ZONE in settings.py isn t correct. If you don t remember setting it earlier, check it before continuing.Next we need to import the test client class (later in tests.py we will use the django.test.TestCase class, which comes with its own client, so this won t be required):With that ready, we can ask the client to do some work for us:The list of polls shows polls that aren t published yet (i.e. those that have a pub_date in the future). Let s fix that.In Tutorial 4 we introduced a class-based view, based on ListView:We need to amend the get_queryset() method and change it so that it also checks the date by comparing it with timezone.now(). First we need to add an import:and then we must amend the get_queryset method like so:Question.objects.filter(pub_date__lte=timezone.now()) returns a queryset containing Questions whose pub_date is less than or equal to - that is, earlier than or equal to - timezone.now.Now you can satisfy yourself that this behaves as expected by firing up runserver, loading the site in your browser, creating Questions with dates in the past and future, and checking that only those that have been published are listed. You don t want to have to do that every single time you make any change that might affect this - so let s also create a test, based on our shell session above.Add the following to polls/tests.py:and we ll create a shortcut function to create questions as well as a new test class:Let s look at some of these more closely.First is a question shortcut function, create_question, to take some repetition out of the process of creating questions.test_no_questions doesn t create any questions, but checks the message:  No polls are available.  and verifies the latest_question_list is empty. Note that the django.test.TestCase class provides some additional assertion methods. In these examples, we use assertContains() and assertQuerysetEqual().In test_past_question, we create a question and verify that it appears in the list.In test_future_question, we create a question with a pub_date in the future. The database is reset for each test method, so the first question is no longer there, and so again the index shouldn t have any questions in it.And so on. In effect, we are using the tests to tell a story of admin input and user experience on the site, and checking that at every state and for every new change in the state of the system, the expected results are published.What we have works well; however, even though future questions don t appear in the index, users can still reach them if they know or guess the right URL. So we need to add a similar  constraint to DetailView:And of course, we will add some tests, to check that a Question whose pub_date is in the past can be displayed, and that one with a pub_date in the future is not:We ought to add a similar get_queryset method to ResultsView and create a new test class for that view. It ll be very similar to what we have just created; in fact there will be a lot of repetition.We could also improve our application in other ways, adding tests along the way. For example, it s silly that Questions can be published on the site that have no Choices. So, our views could check for this, and exclude such Questions. Our tests would create a Question without Choices and then test that it s not published, as well as create a similar Question with Choices, and test that it is published.Perhaps logged-in admin users should be allowed to see unpublished Questions, but not ordinary visitors. Again: whatever needs to be added to the software to accomplish this should be accompanied by a test, whether you write the test first and then make the code pass the test, or work out the logic in your code first and then write a test to prove it.At a certain point you are bound to look at your tests and wonder whether your code is suffering from test bloat, which brings us to:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial05/#when-testing-more-is-better", "para": "It might seem that our tests are growing out of control. At this rate there will soon be more code in our tests than in our application, and the repetition is unaesthetic, compared to the elegant conciseness of the rest of our code.It doesn t matter. Let them grow. For the most part, you can write a test once and then forget about it. It will continue performing its useful function as you continue to develop your program.Sometimes tests will need to be updated. Suppose that we amend our views so that only Questions with Choices are published. In that case, many of our existing tests will fail - telling us exactly which tests need to be amended to bring them up to date, so to that extent tests help look after themselves.At worst, as you continue developing, you might find that you have some tests that are now redundant. Even that s not a problem; in testing redundancy is a good thing.As long as your tests are sensibly arranged, they won t become unmanageable. Good rules-of-thumb include having:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial05/#further-testing", "para": "This tutorial only introduces some of the basics of testing. There s a great deal more you can do, and a number of very useful tools at your disposal to achieve some very clever things.For example, while our tests here have covered some of the internal logic of a model and the way our views publish information, you can use an  in-browser  framework such as Selenium to test the way your HTML actually renders in a browser. These tools allow you to check not just the behavior of your Django code, but also, for example, of your JavaScript. It s quite something to see the tests launch a browser, and start interacting with your site, as if a human being were driving it! Django includes LiveServerTestCase to facilitate integration with tools like Selenium.If you have a complex application, you may want to run tests automatically with every commit for the purposes of continuous integration, so that quality control is itself - at least partially - automated.A good way to spot untested parts of your application is to check code coverage. This also helps identify fragile or even dead code. If you can t test a piece of code, it usually means that code should be refactored or removed. Coverage will help to identify dead code. See Integration with coverage.py for details.Testing in Django has comprehensive information about testing."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial05/#what-s-next", "para": "For full details on testing, see Testing in Django.When you re comfortable with testing Django views, read part 6 of this tutorial to learn about static files management."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial06/#customize-your-app-s-look-and-feel", "para": "First, create a directory called static in your polls directory. Django will look for static files there, similarly to how Django finds templates inside polls/templates/.Django s STATICFILES_FINDERS setting contains a list of finders that know how to discover static files from various sources. One of the defaults is AppDirectoriesFinder which looks for a  static  subdirectory in each of the INSTALLED_APPS, like the one in polls we just created. The admin site uses the same directory structure for its static files.Within the static directory you have just created, create another directory called polls and within that create a file called style.css. In other words, your stylesheet should be at polls/static/polls/style.css. Because of how the AppDirectoriesFinder staticfile finder works, you can refer to this static file in Django simply as polls/style.css, similar to how you reference the path for templates.Static file namespacingJust like templates, we might be able to get away with putting our static files directly in polls/static (rather than creating another polls subdirectory), but it would actually be a bad idea. Django will choose the first static file it finds whose name matches, and if you had a static file with the same name in a different application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the easiest way to ensure this is by namespacing them. That is, by putting those static files inside another directory named for the application itself.Put the following code in that stylesheet (polls/static/polls/style.css):Next, add the following at the top of polls/templates/polls/index.html:The {% static %} template tag generates the absolute URL of static files.That s all you need to do for development.Start the server (or restart it if it s already running):Reload http://localhost:8000/polls/ and you should see that the question links are green (Django style!) which means that your stylesheet was properly loaded."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial06/#adding-a-background-image", "para": "Next, we ll create a subdirectory for images. Create an images subdirectory in the polls/static/polls/ directory. Inside this directory, put an image called background.gif. In other words, put your image in polls/static/polls/images/background.gif.Then, add to your stylesheet (polls/static/polls/style.css):Reload http://localhost:8000/polls/ and you should see the background loaded in the top left of the screen.WarningOf course the {% static %} template tag is not available for use in static files like your stylesheet which aren t generated by Django. You should always use relative paths to link your static files between each other, because then you can change STATIC_URL (used by the static template tag to generate its URLs) without having to modify a bunch of paths in your static files as well.These are the basics. For more details on settings and other bits included with the framework see the static files howto and the staticfiles reference. Deploying static files discusses how to use static files on a real server.When you re comfortable with the static files, read part 7 of this tutorial to learn how to customize Django s automatically-generated admin site."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial07/#customize-the-admin-form", "para": "By registering the Question model with admin.site.register(Question), Django was able to construct a default form representation. Often, you ll want to customize how the admin form looks and works. You ll do this by telling Django the options you want when you register the object.Let s see how this works by reordering the fields on the edit form. Replace the admin.site.register(Question) line with:You ll follow this pattern   create a model admin class, then pass it as the second argument to admin.site.register()   any time you need to change the admin options for a model.This particular change above makes the  Publication date  come before the  Question  field:This isn t impressive with only two fields, but for admin forms with dozens of fields, choosing an intuitive order is an important usability detail.And speaking of forms with dozens of fields, you might want to split the form up into fieldsets:The first element of each tuple in fieldsets is the title of the fieldset. Here s what our form looks like now:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial07/#adding-related-objects", "para": "OK, we have our Question admin page, but a Question has multiple Choices, and the admin page doesn t display choices.Yet.There are two ways to solve this problem. The first is to register Choice with the admin just as we did with Question. That s easy:Now  Choices  is an available option in the Django admin. The  Add choice  form looks like this:In that form, the  Question  field is a select box containing every question in the database. Django knows that a ForeignKey should be represented in the admin as a <select> box. In our case, only one question exists at this point.Also note the  Add Another  link next to  Question.  Every object with a ForeignKey relationship to another gets this for free. When you click  Add Another , you ll get a popup window with the  Add question  form. If you add a question in that window and click  Save , Django will save the question to the database and dynamically add it as the selected choice on the  Add choice  form you re looking at.But, really, this is an inefficient way of adding Choice objects to the system. It d be better if you could add a bunch of Choices directly when you create the Question object. Let s make that happen.Remove the register() call for the Choice model. Then, edit the Question registration code to read:This tells Django:  Choice objects are edited on the Question admin page. By default, provide enough fields for 3 choices. Load the  Add question  page to see how that looks:It works like this: There are three slots for related Choices   as specified by extra   and each time you come back to the  Change  page for an already-created object, you get another three extra slots.At the end of the three current slots you will find an  Add another Choice  link.  If you click on it, a new slot will be added. If you want to remove the added slot, you can click on the X to the top right of the added slot. Note that you can t remove the original three slots. This image shows an added slot:One small problem, though. It takes a lot of screen space to display all the fields for entering related Choice objects. For that reason, Django offers a tabular way of displaying inline related objects; you just need to change the ChoiceInline declaration to read:With that TabularInline (instead of StackedInline), the related objects are displayed in a more compact, table-based format:Note that there is an extra  Delete?  column that allows removing rows added using the  Add Another Choice  button and rows that have already been saved."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial07/#customize-the-admin-change-list", "para": "Now that the Question admin page is looking good, let s make some tweaks to the  change list  page   the one that displays all the questions in the system.Here s what it looks like at this point:By default, Django displays the str() of each object. But sometimes it d be more helpful if we could display individual fields. To do that, use the list_display admin option, which is a tuple of field names to display, as columns, on the change list page for the object:Just for good measure, let s also include the was_published_recently() method from Tutorial 2:Now the question change list page looks like this:You can click on the column headers to sort by those values   except in the case of the was_published_recently header, because sorting by the output of an arbitrary method is not supported. Also note that the column header for was_published_recently is, by default, the name of the method (with underscores replaced with spaces), and that each line contains the string representation of the output.You can improve that by giving that method (in polls/models.py) a few attributes, as follows:For more information on these method properties, see list_display.Edit your polls/admin.py file again and add an improvement to the Question change list page: filters using the list_filter. Add the following line to QuestionAdmin:That adds a  Filter  sidebar that lets people filter the change list by the pub_date field:The type of filter displayed depends on the type of field you re filtering on. Because pub_date is a DateTimeField, Django knows to give appropriate filter options:  Any date ,  Today ,  Past 7 days ,  This month ,  This year .This is shaping up well. Let s add some search capability:That adds a search box at the top of the change list. When somebody enters search terms, Django will search the question_text field. You can use as many fields as you d like   although because it uses a LIKE query behind the scenes, limiting the number of search fields to a reasonable number will make it easier for your database to do the search.Now s also a good time to note that change lists give you free pagination. The default is to display 100 items per page. Change list pagination, search boxes, filters, date-hierarchies, and column-header-ordering all work together like you think they should."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial07/#customize-the-admin-look-and-feel", "para": "Clearly, having  Django administration  at the top of each admin page is ridiculous. It s just placeholder text.That s easy to change, though, using Django s template system. The Django admin is powered by Django itself, and its interfaces use Django s own template system.Create a templates directory in your project directory (the one that contains manage.py). Templates can live anywhere on your filesystem that Django can access. (Django runs as whatever user your server runs.) However, keeping your templates within the project is a good convention to follow.Open your settings file (mysite/settings.py, remember) and add a DIRS option in the TEMPLATES setting:DIRS is a list of filesystem directories to check when loading Django templates; it s a search path.Organizing templatesJust like the static files, we could have all our templates together, in one big templates directory, and it would work perfectly well. However, templates that belong to a particular application should be placed in that application s template directory (e.g. polls/templates) rather than the project s (templates). We ll discuss in more detail in the reusable apps tutorial why we do this.Now create a directory called admin inside templates, and copy the template admin/base_site.html from within the default Django admin template directory in the source code of Django itself (django/contrib/admin/templates) into that directory.Where are the Django source files?If you have difficulty finding where the Django source files are located on your system, run the following command:Then, just edit the file and replace {{ site_header|default:_('Django administration') }} (including the curly braces) with your own site s name as you see fit. You should end up with a section of code like:We use this approach to teach you how to override templates. In an actual project, you would probably use the django.contrib.admin.AdminSite.site_header attribute to more easily make this particular customization.This template file contains lots of text like {% block branding %} and {{ title }}. The {% and {{ tags are part of Django s template language. When Django renders admin/base_site.html, this template language will be evaluated to produce the final HTML page, just like we saw in Tutorial 3.Note that any of Django s default admin templates can be overridden. To override a template, just do the same thing you did with base_site.html   copy it from the default directory into your custom directory, and make changes.Astute readers will ask: But if DIRS was empty by default, how was Django finding the default admin templates? The answer is that, since APP_DIRS is set to True, Django automatically looks for a templates/ subdirectory within each application package, for use as a fallback (don t forget that django.contrib.admin is an application).Our poll application is not very complex and doesn t need custom admin templates. But if it grew more sophisticated and required modification of Django s standard admin templates for some of its functionality, it would be more sensible to modify the application s templates, rather than those in the project. That way, you could include the polls application in any new project and be assured that it would find the custom templates it needed.See the template loading documentation for more information about how Django finds its templates."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial07/#customize-the-admin-index-page", "para": "On a similar note, you might want to customize the look and feel of the Django admin index page.By default, it displays all the apps in INSTALLED_APPS that have been registered with the admin application, in alphabetical order. You may want to make significant changes to the layout. After all, the index is probably the most important page of the admin, and it should be easy to use.The template to customize is admin/index.html. (Do the same as with admin/base_site.html in the previous section   copy it from the default directory to your custom template directory). Edit the file, and you ll see it uses a template variable called app_list. That variable contains every installed Django app. Instead of using that, you can hard-code links to object-specific admin pages in whatever way you think is best."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/tutorial07/#what-s-next", "para": "The beginner tutorial ends here. In the meantime, you might want to check out some pointers on where to go from here.If you are familiar with Python packaging and interested in learning how to turn polls into a  reusable app , check out Advanced tutorial: How to write reusable apps."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/reusable-apps/#reusability-matters", "para": "It s a lot of work to design, build, test and maintain a web application. Many Python and Django projects share common problems. Wouldn t it be great if we could save some of this repeated work?Reusability is the way of life in Python. The Python Package Index (PyPI) has a vast range of packages you can use in your own Python programs. Check out Django Packages for existing reusable apps you could incorporate in your project. Django itself is also just a Python package. This means that you can take existing Python packages or Django apps and compose them into your own web project. You only need to write the parts that make your project unique.Let s say you were starting a new project that needed a polls app like the one we ve been working on. How do you make this app reusable? Luckily, you re well on the way already. In Tutorial 1, we saw how we could decouple polls from the project-level URLconf using an include. In this tutorial, we ll take further steps to make the app easy to use in new projects and ready to publish for others to install and use.Package? App?A Python package provides a way of grouping related Python code for easy reuse. A package contains one or more files of Python code (also known as  modules ).A package can be imported with import foo.bar or from foo import bar. For a directory (like polls) to form a package, it must contain a special file __init__.py, even if this file is empty.A Django application is just a Python package that is specifically intended for use in a Django project. An application may use common Django conventions, such as having models, tests, urls, and views submodules.Later on we use the term packaging to describe the process of making a Python package easy for others to install. It can be a little confusing, we know."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/reusable-apps/#your-project-and-your-reusable-app", "para": "After the previous tutorials, our project should look like this:You created mysite/templates in Tutorial 7, and polls/templates in Tutorial 3. Now perhaps it is clearer why we chose to have separate template directories for the project and application: everything that is part of the polls application is in polls. It makes the application self-contained and easier to drop into a new project.The polls directory could now be copied into a new Django project and immediately reused. It s not quite ready to be published though. For that, we need to package the app to make it easy for others to install."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/reusable-apps/#installing-some-prerequisites", "para": "The current state of Python packaging is a bit muddled with various tools. For this tutorial, we re going to use setuptools to build our package. It s the recommended packaging tool (merged with the distribute fork). We ll also be using pip to install and uninstall it. You should install these two packages now. If you need help, you can refer to how to install Django with pip. You can install setuptools the same way."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/reusable-apps/#packaging-your-app", "para": "Python packaging refers to preparing your app in a specific format that can be easily installed and used. Django itself is packaged very much like this. For a small app like polls, this process isn t too difficult.First, create a parent directory for polls, outside of your Django project. Call this directory django-polls.Choosing a name for your appWhen choosing a name for your package, check resources like PyPI to avoid naming conflicts with existing packages. It s often useful to prepend django- to your module name when creating a package to distribute. This helps others looking for Django apps identify your app as Django specific.Application labels (that is, the final part of the dotted path to application packages) must be unique in INSTALLED_APPS. Avoid using the same label as any of the Django contrib packages, for example auth, admin, or messages.Move the polls directory into the django-polls directory.Create a file django-polls/README.rst with the following contents:Create a django-polls/LICENSE file. Choosing a license is beyond the scope of this tutorial, but suffice it to say that code released publicly without a license is useless. Django and many Django-compatible apps are distributed under the BSD license; however, you re free to pick your own license. Just be aware that your licensing choice will affect who is able to use your code.Next we ll create a setup.py file which provides details about how to build and install the app.  A full explanation of this file is beyond the scope of this tutorial, but the setuptools docs have a good explanation. Create a file django-polls/setup.py with the following contents:Only Python modules and packages are included in the package by default. To include additional files, we ll need to create a MANIFEST.in file. The setuptools docs referred to in the previous step discuss this file in more details. To include the templates, the README.rst and our LICENSE file, create a file django-polls/MANIFEST.in with the following contents:It s optional, but recommended, to include detailed documentation with your app. Create an empty directory django-polls/docs for future documentation. Add an additional line to django-polls/MANIFEST.in:Note that the docs directory won t be included in your package unless you add some files to it. Many Django apps also provide their documentation online through sites like readthedocs.org.Try building your package with python setup.py sdist (run from inside django-polls). This creates a directory called dist and builds your new package, django-polls-0.1.tar.gz.For more information on packaging, see Python s Tutorial on Packaging and Distributing Projects."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/reusable-apps/#using-your-own-package", "para": "Since we moved the polls directory out of the project, it s no longer working. We ll now fix this by installing our new django-polls package.Installing as a user libraryThe following steps install django-polls as a user library. Per-user installs have a lot of advantages over installing the package system-wide, such as being usable on systems where you don t have administrator access as well as preventing the package from affecting system services and other users of the machine.Note that per-user installations can still affect the behavior of system tools that run as that user, so virtualenv is a more robust solution (see below).To install the package, use pip (you already installed it, right?):With luck, your Django project should now work correctly again. Run the server again to confirm this.To uninstall the package, use pip:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/reusable-apps/#publishing-your-app", "para": "Now that we ve packaged and tested django-polls, it s ready to share with the world! If this wasn t just an example, you could now:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/reusable-apps/#installing-python-packages-with-virtualenv", "para": "Earlier, we installed the polls app as a user library. This has some disadvantages:Typically, these situations only arise once you re maintaining several Django projects. When they do, the best solution is to use virtualenv. This tool allows you to maintain multiple isolated Python environments, each with its own copy of the libraries and package namespace."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#introduction", "para": "Interested in giving back to the community a little? Maybe you ve found a bug in Django that you d like to see fixed, or maybe there s a small feature you want added.Contributing back to Django itself is the best way to see your own concerns addressed. This may seem daunting at first, but it s really pretty simple. We ll walk you through the entire process, so you can learn by example.See alsoIf you are looking for a reference on how to submit patches, see the Submitting patches documentation.For this tutorial, we expect that you have at least a basic understanding of how Django works. This means you should be comfortable going through the existing tutorials on writing your first Django app. In addition, you should have a good understanding of Python itself. But if you don t, Dive Into Python is a fantastic (and free) online book for beginning Python programmers.Those of you who are unfamiliar with version control systems and Trac will find that this tutorial and its links include just enough information to get started. However, you ll probably want to read some more about these different tools if you plan on contributing to Django regularly.For the most part though, this tutorial tries to explain as much as possible, so that it can be of use to the widest audience.Where to get help:If you re having trouble going through this tutorial, please post a message to django-developers or drop by #django-dev on irc.freenode.net to chat with other Django users who might be able to help.We ll be walking you through contributing a patch to Django for the first time. By the end of this tutorial, you should have a basic understanding of both the tools and the processes involved. Specifically, we ll be covering the following:Once you re done with the tutorial, you can look through the rest of Django s documentation on contributing. It contains lots of great information and is a must read for anyone who d like to become a regular contributor to Django. If you ve got questions, it s probably got the answers.Python 3 required!The current version of Django doesn t support Python 2.7. Get Python 3 at Python s download page or with your operating system s package manager.For Windows usersWhen installing Python on Windows, make sure you check the option  Add python.exe to Path , so that it is always available on the command line."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#code-of-conduct", "para": "As a contributor, you can help us keep the Django community open and inclusive. Please read and follow our Code of Conduct."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#installing-git", "para": "For this tutorial, you ll need Git installed to download the current development version of Django and to generate patch files for the changes you make.To check whether or not you have Git installed, enter git into the command line. If you get messages saying that this command could not be found, you ll have to download and install it, see Git s download page.If you re not that familiar with Git, you can always find out more about its commands (once it s installed) by typing git help into the command line."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#getting-a-copy-of-django-s-development-version", "para": "The first step to contributing to Django is to get a copy of the source code. First, fork Django on GitHub. Then, from the command line, use the cd command to navigate to the directory where you ll want your local copy of Django to live.Download the Django source code repository using the following command:Low bandwidth connection?You can add the --depth 1 argument to git clone to skip downloading all of Django s commit history, which reduces data transfer from  ~250 MB to ~70 MB.Now that you have a local copy of Django, you can install it just like you would install any package using pip. The most convenient way to do so is by using a virtual environment, which is a feature built into Python that allows you to keep a separate directory of installed packages for each of your projects so that they don t interfere with each other.It s a good idea to keep all your virtual environments in one place, for example in .virtualenvs/ in your home directory.Create a new virtual environment by running:The path is where the new environment will be saved on your computer.The final step in setting up your virtual environment is to activate it:If the source command is not available, you can try using a dot instead:For Windows usersTo activate your virtual environment on Windows, run:You have to activate the virtual environment whenever you open a new terminal window. virtualenvwrapper is a useful tool for making this more convenient.The name of the currently activated virtual environment is displayed on the command line to help you keep track of which one you are using. Anything you install through pip while this name is displayed will be installed in that virtual environment, isolated from other environments and system-wide packages.Go ahead and install the previously cloned copy of Django:The installed version of Django is now pointing at your local copy. You will immediately see any changes you make to it, which is of great help when writing your first patch."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#running-django-s-test-suite-for-the-first-time", "para": "When contributing to Django it s very important that your code changes don t introduce bugs into other areas of Django. One way to check that Django still works after you make your changes is by running Django s test suite. If all the tests still pass, then you can be reasonably sure that your changes work and haven t broken other parts Django. If you ve never run Django s test suite before, it s a good idea to run it once beforehand to get familiar with its output.Before running the test suite, install its dependencies by cd-ing into the Django tests/ directory and then running:If you encounter an error during the installation, your system might be missing a dependency for one or more of the Python packages. Consult the failing package s documentation or search the Web with the error message that you encounter.Now we are ready to run the test suite. If you re using GNU/Linux, macOS, or some other flavor of Unix, run:Now sit back and relax. Django s entire test suite has thousands of tests, and it takes at least a few minutes run, depending on the speed of your computer.While Django s test suite is running, you ll see a stream of characters representing the status of each test as it completes. E indicates that an error was raised during a test, and F indicates that a test s assertions failed. Both of these are considered to be test failures. Meanwhile, x and s indicated expected failures and skipped tests, respectively. Dots indicate passing tests.Skipped tests are typically due to missing external libraries required to run the test; see Running all the tests for a list of dependencies and be sure to install any for tests related to the changes you are making (we won t need any for this tutorial). Some tests are specific to a particular database backend and will be skipped if not testing with that backend. SQLite is the database backend for the default settings. To run the tests using a different backend, see Using another settings module.Once the tests complete, you should be greeted with a message informing you whether the test suite passed or failed. Since you haven t yet made any changes to Django s code, the entire test suite should pass. If you get failures or errors make sure you ve followed all of the previous steps properly. See Running the unit tests for more information.Note that the latest Django master may not always be stable. When developing against master, you can check Django s continuous integration builds to determine if the failures are specific to your machine or if they are also present in Django s official builds. If you click to view a particular build, you can view the  Configuration Matrix  which shows failures broken down by Python version and database backend.NoteFor this tutorial and the ticket we re working on, testing against SQLite is sufficient, however, it s possible (and sometimes necessary) to run the tests using a different database."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#working-on-a-feature", "para": "For this tutorial, we ll work on a  fake ticket  as a case study. Here are the imaginary details:Ticket #99999   Allow making toastDjango should provide a function django.shortcuts.make_toast() that returns 'toast'.We ll now implement this feature and associated tests."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#creating-a-branch-for-your-patch", "para": "Before making any changes, create a new branch for the ticket:You can choose any name that you want for the branch,  ticket_99999  is an example. All changes made in this branch will be specific to the ticket and won t affect the main copy of the code that we cloned earlier."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#writing-some-tests-for-your-ticket", "para": "In most cases, for a patch to be accepted into Django it has to include tests. For bug fix patches, this means writing a regression test to ensure that the bug is never reintroduced into Django later on. A regression test should be written in such a way that it will fail while the bug still exists and pass once the bug has been fixed. For patches containing new features, you ll need to include tests which ensure that the new features are working correctly. They too should fail when the new feature is not present, and then pass once it has been implemented.A good way to do this is to write your new tests first, before making any changes to the code. This style of development is called test-driven development and can be applied to both entire projects and single patches. After writing your tests, you then run them to make sure that they do indeed fail (since you haven t fixed that bug or added that feature yet). If your new tests don t fail, you ll need to fix them so that they do. After all, a regression test that passes regardless of whether a bug is present is not very helpful at preventing that bug from reoccurring down the road.Now for our hands-on example.In order to resolve this ticket, we ll add a make_toast() function to the top-level django module. First we are going to write a test that tries to use the function and check that its output looks correct.Navigate to Django s tests/shortcuts/ folder and create a new file test_make_toast.py. Add the following code:This test checks that the make_toast() returns 'toast'.But this testing thing looks kinda hard If you ve never had to deal with tests before, they can look a little hard to write at first glance. Fortunately, testing is a very big subject in computer programming, so there s lots of information out there:Since we haven t made any modifications to django.shortcuts yet, our test should fail. Let s run all the tests in the shortcuts folder to make sure that s really what happens. cd to the Django tests/ directory and run:If the tests ran correctly, you should see one failure corresponding to the test method we added, with this error:If all of the tests passed, then you ll want to make sure that you added the new test shown above to the appropriate folder and file name."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#writing-the-code-for-your-ticket", "para": "Next we ll be adding the make_toast() function.Navigate to the django/ folder and open the shortcuts.py file. At the bottom, add:Now we need to make sure that the test we wrote earlier passes, so we can see whether the code we added is working correctly. Again, navigate to the Django tests/ directory and run:Everything should pass. If it doesn t, make sure you correctly added the function to the correct file."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#running-django-s-test-suite-for-the-second-time", "para": "Once you ve verified that your patch and your test are working correctly, it s a good idea to run the entire Django test suite just to verify that your change hasn t introduced any bugs into other areas of Django. While successfully passing the entire test suite doesn t guarantee your code is bug free, it does help identify many bugs and regressions that might otherwise go unnoticed.To run the entire Django test suite, cd into the Django tests/ directory and run:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#writing-documentation", "para": "This is a new feature, so it should be documented. Open the file docs/topics/http/shortcuts.txt and add the following at the end of the file:Since this new feature will be in an upcoming release it is also added to the release notes for the next version of Django. Open the release notes for the latest version in docs/releases/, which at time of writing is 2.2.txt. Add a note under the  Minor Features  header:For more information on writing documentation, including an explanation of what the versionadded bit is all about, see Writing documentation. That page also includes an explanation of how to build a copy of the documentation locally, so you can preview the HTML that will be generated."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#previewing-your-changes", "para": "Now it s time to go through all the changes made in our patch. To stage all the changes ready for commit, run:Then display the differences between your current copy of Django (with your changes) and the revision that you initially checked out earlier in the tutorial with:Use the arrow keys to move up and down.When you re done previewing the patch, hit the q key to return to the command line. If the patch s content looked okay, it s time to commit the changes."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#committing-the-changes-in-the-patch", "para": "To commit the changes:This opens up a text editor to type the commit message. Follow the commit message guidelines and write a message like:"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#pushing-the-commit-and-making-a-pull-request", "para": "After committing the patch, send it to your fork on GitHub (substitute  ticket_99999  with the name of your branch if it s different):You can create a pull request by visiting the Django GitHub page. You ll see your branch under  Your recently pushed branches . Click  Compare & pull request  next to it.Please don t do it for this tutorial, but on the next page that displays a preview of the patch, you would click  Create pull request ."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/contributing/#next-steps", "para": "Congratulations, you ve learned how to make a pull request to Django! Details of more advanced techniques you may need are in Working with Git and GitHub.Now you can put those skills to good use by helping to improve Django s codebase.Before you get too into writing patches for Django, there s a little more information on contributing that you should probably take a look at:Once you ve looked through some of that information, you ll be ready to go out and find a ticket of your own to write a patch for. Pay special attention to tickets with the  easy pickings  criterion. These tickets are often much simpler in nature and are great for first time contributors. Once you re familiar with contributing to Django, you can move on to writing patches for more difficult and complicated tickets.If you just want to get started already (and nobody would blame you!), try taking a look at the list of easy tickets that need patches and the easy tickets that have patches which need improvement. If you re familiar with writing tests, you can also look at the list of easy tickets that need tests. Just remember to follow the guidelines about claiming tickets that were mentioned in the link to Django s documentation on claiming tickets and submitting patches.After a ticket has a patch, it needs to be reviewed by a second set of eyes. After submitting a pull request, update the ticket metadata by setting the flags on the ticket to say  has patch ,  doesn t need tests , etc, so others can find it for review. Contributing doesn t necessarily always mean writing a patch from scratch. Reviewing existing patches is also a very helpful contribution. See Triaging tickets for details."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/models/#quick-example", "para": "This example model defines a Person, which has a first_name and last_name:first_name and last_name are fields of the model. Each field is specified as a class attribute, and each attribute maps to a database column.The above Person model would create a database table like this:Some technical notes:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/models/#using-models", "para": "Once you have defined your models, you need to tell Django you re going to use those models. Do this by editing your settings file and changing the INSTALLED_APPS setting to add the name of the module that contains your models.py.For example, if the models for your application live in the module myapp.models (the package structure that is created for an application by the manage.py startapp script), INSTALLED_APPS should read, in part:When you add new apps to INSTALLED_APPS, be sure to run manage.py migrate, optionally making migrations for them first with manage.py makemigrations."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/models/#fields", "para": "The most important part of a model   and the only required part of a model   is the list of database fields it defines. Fields are specified by class attributes. Be careful not to choose field names that conflict with the models API like clean, save, or delete.Example:Each field in your model should be an instance of the appropriate Field class. Django uses the field class types to determine a few things:Django ships with dozens of built-in field types; you can find the complete list in the model field reference. You can easily write your own fields if Django s built-in ones don t do the trick; see Writing custom model fields.Each field takes a certain set of field-specific arguments (documented in the model field reference). For example, CharField (and its subclasses) require a max_length argument which specifies the size of the VARCHAR database field used to store the data.There s also a set of common arguments available to all field types. All are optional. They re fully explained in the reference, but here s a quick summary of the most often-used ones:If True, the field is allowed to be blank. Default is False.Note that this is different than null. null is purely database-related, whereas blank is validation-related. If a field has blank=True, form validation will allow entry of an empty value. If a field has blank=False, the field will be required.An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field. If this is given, the default form widget will be a select box instead of the standard text field and will limit choices to the choices given.A choices list looks like this:The first element in each tuple is the value that will be stored in the database. The second element is displayed by the field s form widget.Given a model instance, the display value for a field with choices can be accessed using the get_FOO_display() method. For example:If True, this field is the primary key for the model.If you don t specify primary_key=True for any fields in your model, Django will automatically add an IntegerField to hold the primary key, so you don t need to set primary_key=True on any of your fields unless you want to override the default primary-key behavior. For more, see Automatic primary key fields.The primary key field is read-only. If you change the value of the primary key on an existing object and then save it, a new object will be created alongside the old one. For example:Again, these are just short descriptions of the most common field options. Full details can be found in the common model field option reference.By default, Django gives each model the following field:This is an auto-incrementing primary key.If you d like to specify a custom primary key, just specify primary_key=True on one of your fields. If Django sees you ve explicitly set Field.primary_key, it won t add the automatic id column.Each model requires exactly one field to have primary_key=True (either explicitly declared or automatically added).Each field type, except for ForeignKey, ManyToManyField and OneToOneField, takes an optional first positional argument   a verbose name. If the verbose name isn t given, Django will automatically create it using the field s attribute name, converting underscores to spaces.In this example, the verbose name is \"person's first name\":In this example, the verbose name is \"first name\":ForeignKey, ManyToManyField and OneToOneField require the first argument to be a model class, so use the verbose_name keyword argument:The convention is not to capitalize the first letter of the verbose_name. Django will automatically capitalize the first letter where it needs to.Clearly, the power of relational databases lies in relating tables to each other. Django offers ways to define the three most common types of database relationships: many-to-one, many-to-many and one-to-one.To define a many-to-one relationship, use django.db.models.ForeignKey. You use it just like any other Field type: by including it as a class attribute of your model.ForeignKey requires a positional argument: the class to which the model is related.For example, if a Car model has a Manufacturer   that is, a Manufacturer makes multiple cars but each Car only has one Manufacturer   use the following definitions:You can also create recursive relationships (an object with a many-to-one relationship to itself) and relationships to models not yet defined; see the model field reference for details.It s suggested, but not required, that the name of a ForeignKey field (manufacturer in the example above) be the name of the model, lowercase. You can, of course, call the field whatever you want. For example:See alsoForeignKey fields accept a number of extra arguments which are explained in the model field reference. These options help define how the relationship should work; all are optional.For details on accessing backwards-related objects, see the Following relationships backward example.For sample code, see the Many-to-one relationship model example.To define a many-to-many relationship, use ManyToManyField. You use it just like any other Field type: by including it as a class attribute of your model.ManyToManyField requires a positional argument: the class to which the model is related.For example, if a Pizza has multiple Topping objects   that is, a Topping can be on multiple pizzas and each Pizza has multiple toppings   here s how you d represent that:As with ForeignKey, you can also create recursive relationships (an object with a many-to-many relationship to itself) and relationships to models not yet defined.It s suggested, but not required, that the name of a ManyToManyField (toppings in the example above) be a plural describing the set of related model objects.It doesn t matter which model has the ManyToManyField, but you should only put it in one of the models   not both.Generally, ManyToManyField instances should go in the object that s going to be edited on a form. In the above example, toppings is in Pizza (rather than Topping having a pizzas ManyToManyField ) because it s more natural to think about a pizza having toppings than a topping being on multiple pizzas. The way it s set up above, the Pizza form would let users select the toppings.See alsoSee the Many-to-many relationship model example for a full example.ManyToManyField fields also accept a number of extra arguments which are explained in the model field reference. These options help define how the relationship should work; all are optional.When you re only dealing with simple many-to-many relationships such as mixing and matching pizzas and toppings, a standard ManyToManyField is all you need. However, sometimes you may need to associate data with the relationship between two models.For example, consider the case of an application tracking the musical groups which musicians belong to. There is a many-to-many relationship between a person and the groups of which they are a member, so you could use a ManyToManyField to represent this relationship. However, there is a lot of detail about the membership that you might want to collect, such as the date at which the person joined the group.For these situations, Django allows you to specify the model that will be used to govern the many-to-many relationship. You can then put extra fields on the intermediate model. The intermediate model is associated with the ManyToManyField using the through argument to point to the model that will act as an intermediary. For our musician example, the code would look something like this:When you set up the intermediary model, you explicitly specify foreign keys to the models that are involved in the many-to-many relationship. This explicit declaration defines how the two models are related.There are a few restrictions on the intermediate model:Now that you have set up your ManyToManyField to use your intermediary model (Membership, in this case), you re ready to start creating some many-to-many relationships. You do this by creating instances of the intermediate model:You can also use add(), create(), or set() to create relationships, as long as your specify through_defaults for any required fields:You may prefer to create instances of the intermediate model directly.If the custom through table defined by the intermediate model does not enforce uniqueness on the (model1, model2) pair, allowing multiple values, the remove() call will remove all intermediate model instances:The clear() method can be used to remove all many-to-many relationships for an instance:Once you have established the many-to-many relationships, you can issue queries. Just as with normal many-to-many relationships, you can query using the attributes of the many-to-many-related model:As you are using an intermediate model, you can also query on its attributes:If you need to access a membership s information you may do so by directly querying the Membership model:Another way to access the same information is by querying the many-to-many reverse relationship from a Person object:To define a one-to-one relationship, use OneToOneField. You use it just like any other Field type: by including it as a class attribute of your model.This is most useful on the primary key of an object when that object  extends  another object in some way.OneToOneField requires a positional argument: the class to which the model is related.For example, if you were building a database of  places , you would build pretty standard stuff such as address, phone number, etc. in the database. Then, if you wanted to build a database of restaurants on top of the places, instead of repeating yourself and replicating those fields in the Restaurant model, you could make Restaurant have a OneToOneField to Place (because a restaurant  is a  place; in fact, to handle this you d typically use inheritance, which involves an implicit one-to-one relation).As with ForeignKey, a recursive relationship can be defined and references to as-yet undefined models can be made.See alsoSee the One-to-one relationship model example for a full example.OneToOneField fields also accept an optional parent_link argument.OneToOneField classes used to automatically become the primary key on a model. This is no longer true (although you can manually pass in the primary_key argument if you like). Thus, it s now possible to have multiple fields of type OneToOneField on a single model.It s perfectly OK to relate a model to one from another app. To do this, import the related model at the top of the file where your model is defined. Then, just refer to the other model class wherever needed. For example:Django places some restrictions on model field names:A field name cannot be a Python reserved word, because that would result in a Python syntax error. For example:A field name cannot contain more than one underscore in a row, due to the way Django s query lookup syntax works. For example:A field name cannot end with an underscore, for similar reasons.These limitations can be worked around, though, because your field name doesn t necessarily have to match your database column name. See the db_column option.SQL reserved words, such as join, where or select, are allowed as model field names, because Django escapes all database table names and column names in every underlying SQL query. It uses the quoting syntax of your particular database engine.If one of the existing model fields cannot be used to fit your purposes, or if you wish to take advantage of some less common database column types, you can create your own field class. Full coverage of creating your own fields is provided in Writing custom model fields."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/models/#meta-options", "para": "Give your model metadata by using an inner class Meta, like so:Model metadata is  anything that s not a field , such as ordering options (ordering), database table name (db_table), or human-readable singular and plural names (verbose_name and verbose_name_plural). None are required, and adding class Meta to a model is completely optional.A complete list of all possible Meta options can be found in the model option reference."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/models/#model-attributes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/models/#model-methods", "para": "Define custom methods on a model to add custom  row-level  functionality to your objects. Whereas Manager methods are intended to do  table-wide  things, model methods should act on a particular model instance.This is a valuable technique for keeping business logic in one place   the model.For example, this model has a few custom methods:The last method in this example is a property.The model instance reference has a complete list of methods automatically given to each model. You can override most of these   see overriding predefined model methods, below   but there are a couple that you ll almost always want to define:A Python  magic method  that returns a string representation of any object. This is what Python and Django will use whenever a model instance needs to be coerced and displayed as a plain string. Most notably, this happens when you display an object in an interactive console or in the admin.You ll always want to define this method; the default isn t very helpful at all.This tells Django how to calculate the URL for an object. Django uses this in its admin interface, and any time it needs to figure out a URL for an object.Any object that has a URL that uniquely identifies it should define this method.There s another set of model methods that encapsulate a bunch of database behavior that you ll want to customize. In particular you ll often want to change the way save() and delete() work.You re free to override these methods (and any other model method) to alter behavior.A classic use-case for overriding the built-in methods is if you want something to happen whenever you save an object. For example (see save() for documentation of the parameters it accepts):You can also prevent saving:It s important to remember to call the superclass method   that s that super().save(*args, **kwargs) business   to ensure that the object still gets saved into the database. If you forget to call the superclass method, the default behavior won t happen and the database won t get touched.It s also important that you pass through the arguments that can be passed to the model method   that s what the *args, **kwargs bit does. Django will, from time to time, extend the capabilities of built-in model methods, adding new arguments. If you use *args, **kwargs in your method definitions, you are guaranteed that your code will automatically support those arguments when they are added.Overridden model methods are not called on bulk operationsNote that the delete() method for an object is not necessarily called when deleting objects in bulk using a QuerySet or as a result of a cascading delete. To ensure customized delete logic gets executed, you can use pre_delete and/or post_delete signals.Unfortunately, there isn t a workaround when creating or updating objects in bulk, since none of save(), pre_save, and post_save are called.Another common pattern is writing custom SQL statements in model methods and module-level methods. For more details on using raw SQL, see the documentation on using raw SQL."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/models/#model-inheritance", "para": "Model inheritance in Django works almost identically to the way normal class inheritance works in Python, but the basics at the beginning of the page should still be followed. That means the base class should subclass django.db.models.Model.The only decision you have to make is whether you want the parent models to be models in their own right (with their own database tables), or if the parents are just holders of common information that will only be visible through the child models.There are three styles of inheritance that are possible in Django.Abstract base classes are useful when you want to put some common information into a number of other models. You write your base class and put abstract=True in the Meta class. This model will then not be used to create any database table. Instead, when it is used as a base class for other models, its fields will be added to those of the child class.An example:The Student model will have three fields: name, age and home_group. The CommonInfo model cannot be used as a normal Django model, since it is an abstract base class. It does not generate a database table or have a manager, and cannot be instantiated or saved directly.Fields inherited from abstract base classes can be overridden with another field or value, or be removed with None.For many uses, this type of model inheritance will be exactly what you want. It provides a way to factor out common information at the Python level, while still only creating one database table per child model at the database level.When an abstract base class is created, Django makes any Meta inner class you declared in the base class available as an attribute. If a child class does not declare its own Meta class, it will inherit the parent s Meta. If the child wants to extend the parent s Meta class, it can subclass it. For example:Django does make one adjustment to the Meta class of an abstract base class: before installing the Meta attribute, it sets abstract=False. This means that children of abstract base classes don t automatically become abstract classes themselves. Of course, you can make an abstract base class that inherits from another abstract base class. You just need to remember to explicitly set abstract=True each time.Some attributes won t make sense to include in the Meta class of an abstract base class. For example, including db_table would mean that all the child classes (the ones that don t specify their own Meta) would use the same database table, which is almost certainly not what you want.If you are using related_name or related_query_name on a ForeignKey or ManyToManyField, you must always specify a unique reverse name and query name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including related_name and related_query_name) each time.To work around this problem, when you are using related_name or related_query_name in an abstract base class (only), part of the value should contain '%(app_label)s' and '%(class)s'.For example, given an app common/models.py:Along with another app rare/models.py:The reverse name of the common.ChildA.m2m field will be common_childa_related and the reverse query name will be common_childas. The reverse name of the common.ChildB.m2m field will be common_childb_related and the reverse query name will be common_childbs. Finally, the reverse name of the rare.ChildB.m2m field will be rare_childb_related and the reverse query name will be rare_childbs. It s up to you how you use the '%(class)s' and '%(app_label)s' portion to construct your related name or related query name but if you forget to use it, Django will raise errors when you perform system checks (or run migrate).If you don t specify a related_name attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by '_set', just as it normally would be if you d declared the field directly on the child class. For example, in the above code, if the related_name attribute was omitted, the reverse name for the m2m field would be childa_set in the ChildA case and childb_set for the ChildB field.The second type of model inheritance supported by Django is when each model in the hierarchy is a model all by itself. Each model corresponds to its own database table and can be queried and created individually. The inheritance relationship introduces links between the child model and each of its parents (via an automatically-created OneToOneField). For example:All of the fields of Place will also be available in Restaurant, although the data will reside in a different database table. So these are both possible:If you have a Place that is also a Restaurant, you can get from the Place object to the Restaurant object by using the lowercase version of the model name:However, if p in the above example was not a Restaurant (it had been created directly as a Place object or was the parent of some other class), referring to p.restaurant would raise a Restaurant.DoesNotExist exception.The automatically-created OneToOneField on Restaurant that links it to Place looks like this:You can override that field by declaring your own OneToOneField with parent_link=True on Restaurant.In the multi-table inheritance situation, it doesn t make sense for a child class to inherit from its parent s Meta class. All the Meta options have already been applied to the parent class and applying them again would normally only lead to contradictory behavior (this is in contrast with the abstract base class case, where the base class doesn t exist in its own right).So a child model does not have access to its parent s Meta class. However, there are a few limited cases where the child inherits behavior from the parent: if the child does not specify an ordering attribute or a get_latest_by attribute, it will inherit these from its parent.If the parent has an ordering and you don t want the child to have any natural ordering, you can explicitly disable it:Because multi-table inheritance uses an implicit OneToOneField to link the child and the parent, it s possible to move from the parent down to the child, as in the above example. However, this uses up the name that is the default related_name value for ForeignKey and ManyToManyField relations.  If you are putting those types of relations on a subclass of the parent model, you must specify the related_name attribute on each such field. If you forget, Django will raise a validation error.For example, using the above Place class again, let s create another subclass with a ManyToManyField:This results in the error:Adding related_name to the customers field as follows would resolve the error: models.ManyToManyField(Place, related_name='provider').As mentioned, Django will automatically create a OneToOneField linking your child class back to any non-abstract parent models. If you want to control the name of the attribute linking back to the parent, you can create your own OneToOneField and set parent_link=True to indicate that your field is the link back to the parent class.When using multi-table inheritance, a new database table is created for each subclass of a model. This is usually the desired behavior, since the subclass needs a place to store any additional data fields that are not present on the base class. Sometimes, however, you only want to change the Python behavior of a model   perhaps to change the default manager, or add a new method.This is what proxy model inheritance is for: creating a proxy for the original model. You can create, delete and update instances of the proxy model and all the data will be saved as if you were using the original (non-proxied) model. The difference is that you can change things like the default model ordering or the default manager in the proxy, without having to alter the original.Proxy models are declared like normal models. You tell Django that it s a proxy model by setting the proxy attribute of the Meta class to True.For example, suppose you want to add a method to the Person model. You can do it like this:The MyPerson class operates on the same database table as its parent Person class. In particular, any new instances of Person will also be accessible through MyPerson, and vice-versa:You could also use a proxy model to define a different default ordering on a model. You might not always want to order the Person model, but regularly order by the last_name attribute when you use the proxy. This is easy:Now normal Person queries will be unordered and OrderedPerson queries will be ordered by last_name.Proxy models inherit Meta attributes in the same way as regular models.There is no way to have Django return, say, a MyPerson object whenever you query for Person objects. A queryset for Person objects will return those types of objects. The whole point of proxy objects is that code relying on the original Person will use those and your own code can use the extensions you included (that no other code is relying on anyway). It is not a way to replace the Person (or any other) model everywhere with something of your own creation.A proxy model must inherit from exactly one non-abstract model class. You can t inherit from multiple non-abstract models as the proxy model doesn t provide any connection between the rows in the different database tables. A proxy model can inherit from any number of abstract model classes, providing they do not define any model fields. A proxy model may also inherit from any number of proxy models that share a common non-abstract parent class.If you don t specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available.Continuing our example from above, you could change the default manager used when you query the Person model like this:If you wanted to add a new manager to the Proxy, without replacing the existing default, you can use the techniques described in the custom manager documentation: create a base class containing the new managers and inherit that after the primary base class:You probably won t need to do this very often, but, when you do, it s possible.Proxy model inheritance might look fairly similar to creating an unmanaged model, using the managed attribute on a model s Meta class.With careful setting of Meta.db_table you could create an unmanaged model that shadows an existing model and adds Python methods to it. However, that would be very repetitive and fragile as you need to keep both copies synchronized if you make any changes.On the other hand, proxy models are intended to behave exactly like the model they are proxying for. They are always in sync with the parent model since they directly inherit its fields and managers.The general rules are:Just as with Python s subclassing, it s possible for a Django model to inherit from multiple parent models. Keep in mind that normal Python name resolution rules apply. The first base class that a particular name (e.g. Meta) appears in will be the one that is used; for example, this means that if multiple parents contain a Meta class, only the first one is going to be used, and all others will be ignored.Generally, you won t need to inherit from multiple parents. The main use-case where this is useful is for  mix-in  classes: adding a particular extra field or method to every class that inherits the mix-in. Try to keep your inheritance hierarchies as simple and straightforward as possible so that you won t have to struggle to work out where a particular piece of information is coming from.Note that inheriting from multiple models that have a common id primary key field will raise an error. To properly use multiple inheritance, you can use an explicit AutoField in the base models:Or use a common ancestor to hold the AutoField. This requires using an explicit OneToOneField from each parent model to the common ancestor to avoid a clash between the fields that are automatically generated and inherited by the child:In normal Python class inheritance, it is permissible for a child class to override any attribute from the parent class. In Django, this isn t usually permitted for model fields. If a non-abstract model base class has a field called author, you can t create another model field or define an attribute called author in any class that inherits from that base class.This restriction doesn t apply to model fields inherited from an abstract model. Such fields may be overridden with another field or value, or be removed by setting field_name = None.WarningModel managers are inherited from abstract base classes. Overriding an inherited field which is referenced by an inherited Manager may cause subtle bugs. See custom managers and model inheritance.NoteSome fields define extra attributes on the model, e.g. a ForeignKey defines an extra attribute with _id appended to the field name, as well as related_name and related_query_name on the foreign model.These extra attributes cannot be overridden unless the field that defines it is changed or removed so that it no longer defines the extra attribute.Overriding fields in a parent model leads to difficulties in areas such as initializing new instances (specifying which field is being initialized in Model.__init__) and serialization. These are features which normal Python class inheritance doesn t have to deal with in quite the same way, so the difference between Django model inheritance and Python class inheritance isn t arbitrary.This restriction only applies to attributes which are Field instances. Normal Python attributes can be overridden if you wish. It also only applies to the name of the attribute as Python sees it: if you are manually specifying the database column name, you can have the same column name appearing in both a child and an ancestor model for multi-table inheritance (they are columns in two different database tables).Django will raise a FieldError if you override any model field in any ancestor model."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/models/#organizing-models-in-a-package", "para": "The manage.py startapp command creates an application structure that includes a models.py file. If you have many models, organizing them in separate files may be useful.To do so, create a models package. Remove models.py and create a myapp/models/ directory with an __init__.py file and the files to store your models. You must import the models in the __init__.py file.For example, if you had organic.py and synthetic.py in the models directory:Explicitly importing each model rather than using from .models import * has the advantages of not cluttering the namespace, making code more readable, and keeping code analysis tools useful.See also"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-options", "para": "The following arguments are available to all field types. All are optional.If True, Django will store empty values as NULL in the database. Default is False.Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for  no data : NULL, and the empty string. In most cases, it s redundant to have two possible values for  no data;  the Django convention is to use the empty string, not NULL. One exception is when a CharField has both unique=True and blank=True set. In this situation, null=True is required to avoid unique constraint violations when saving multiple objects with blank values.For both string-based and non-string-based fields, you will also need to set blank=True if you wish to permit empty values in forms, as the null parameter only affects database storage (see blank).NoteWhen using the Oracle database backend, the value NULL will be stored to denote the empty string regardless of this attribute.If True, the field is allowed to be blank. Default is False.Note that this is different than null. null is purely database-related, whereas blank is validation-related. If a field has blank=True, form validation will allow entry of an empty value. If a field has blank=False, the field will be required.An iterable (e.g., a list or tuple) consisting itself of iterables of exactly two items (e.g. [(A, B), (A, B) ...]) to use as choices for this field. If choices are given, they re enforced by model validation and the default form widget will be a select box with these choices instead of the standard text field.The first element in each tuple is the actual value to be set on the model, and the second element is the human-readable name. For example:Generally, it s best to define choices inside a model class, and to define a suitably-named constant for each value:Though you can define a choices list outside of a model class and then refer to it, defining the choices and names for each choice inside the model class keeps all of that information with the class that uses it, and makes the choices easy to reference (e.g, Student.SOPHOMORE will work anywhere that the Student model has been imported).You can also collect your available choices into named groups that can be used for organizational purposes:The first element in each tuple is the name to apply to the group. The second element is an iterable of 2-tuples, with each 2-tuple containing a value and a human-readable name for an option. Grouped options may be combined with ungrouped options within a single list (such as the unknown option in this example).For each model field that has choices set, Django will add a method to retrieve the human-readable name for the field s current value. See get_FOO_display() in the database API documentation.Note that choices can be any iterable object   not necessarily a list or tuple. This lets you construct choices dynamically. But if you find yourself hacking choices to be dynamic, you re probably better off using a proper database table with a ForeignKey. choices is meant for static data that doesn t change much, if ever.Unless blank=False is set on the field along with a default then a label containing \"---------\" will be rendered with the select box. To override this behavior, add a tuple to choices containing None; e.g. (None, 'Your String For Display'). Alternatively, you can use an empty string instead of None where this makes sense - such as on a CharField.The name of the database column to use for this field. If this isn t given, Django will use the field s name.If your database column name is an SQL reserved word, or contains characters that aren t allowed in Python variable names   notably, the hyphen   that s OK. Django quotes column and table names behind the scenes.If True, a database index will be created for this field.The name of the database tablespace to use for this field s index, if this field is indexed. The default is the project s DEFAULT_INDEX_TABLESPACE setting, if set, or the db_tablespace of the model, if any. If the backend doesn t support tablespaces for indexes, this option is ignored.The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created.The default can t be a mutable object (model instance, list, set, etc.), as a reference to the same instance of that object would be used as the default value in all new model instances. Instead, wrap the desired default in a callable. For example, if you want to specify a default dict for JSONField, use a function:lambdas can t be used for field options like default because they can t be serialized by migrations. See that documentation for other caveats.For fields like ForeignKey that map to model instances, defaults should be the value of the field they reference (pk unless to_field is set) instead of model instances.The default value is used when new model instances are created and a value isn t provided for the field. When the field is a primary key, the default is also used when the field is set to None.If False, the field will not be displayed in the admin or any other ModelForm. They are also skipped during model validation. Default is True.The error_messages argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override.Error message keys include null, blank, invalid, invalid_choice, unique, and unique_for_date. Additional error message keys are specified for each field in the Field types section below.These error messages often don t propagate to forms. See Considerations regarding model s error_messages.Extra  help  text to be displayed with the form widget. It s useful for documentation even if your field isn t used on a form.Note that this value is not HTML-escaped in automatically-generated forms. This lets you include HTML in help_text if you so desire. For example:Alternatively you can use plain text and django.utils.html.escape() to escape any HTML special characters. Ensure that you escape any help text that may come from untrusted users to avoid a cross-site scripting attack.If True, this field is the primary key for the model.If you don t specify primary_key=True for any field in your model, Django will automatically add an AutoField to hold the primary key, so you don t need to set primary_key=True on any of your fields unless you want to override the default primary-key behavior. For more, see Automatic primary key fields.primary_key=True implies null=False and unique=True. Only one primary key is allowed on an object.The primary key field is read-only. If you change the value of the primary key on an existing object and then save it, a new object will be created alongside the old one.If True, this field must be unique throughout the table.This is enforced at the database level and by model validation. If you try to save a model with a duplicate value in a unique field, a django.db.IntegrityError will be raised by the model s save() method.This option is valid on all field types except ManyToManyField and OneToOneField.Note that when unique is True, you don t need to specify db_index, because unique implies the creation of an index.Set this to the name of a DateField or DateTimeField to require that this field be unique for the value of the date field.For example, if you have a field title that has unique_for_date=\"pub_date\", then Django wouldn t allow the entry of two records with the same title and pub_date.Note that if you set this to point to a DateTimeField, only the date portion of the field will be considered. Besides, when USE_TZ is True, the check will be performed in the current time zone at the time the object gets saved.This is enforced by Model.validate_unique() during model validation but not at the database level. If any unique_for_date constraint involves fields that are not part of a ModelForm (for example, if one of the fields is listed in exclude or has editable=False), Model.validate_unique() will skip validation for that particular constraint.Like unique_for_date, but requires the field to be unique with respect to the month.Like unique_for_date and unique_for_month.A human-readable name for the field. If the verbose name isn t given, Django will automatically create it using the field s attribute name, converting underscores to spaces. See Verbose field names.A list of validators to run for this field. See the validators documentation for more information.Field implements the lookup registration API. The API can be used to customize which lookups are available for a field class, and how lookups are fetched from a field."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-types", "para": "An IntegerField that automatically increments according to available IDs. You usually won t need to use this directly; a primary key field will automatically be added to your model if you don t specify otherwise. See Automatic primary key fields.A 64-bit integer, much like an AutoField except that it is guaranteed to fit numbers from 1 to 9223372036854775807.A 64-bit integer, much like an IntegerField except that it is guaranteed to fit numbers from -9223372036854775808 to 9223372036854775807. The default form widget for this field is a TextInput.A field to store raw binary data. It can be assigned bytes, bytearray, or memoryview.By default, BinaryField sets editable to False, in which case it can t be included in a ModelForm.Older versions don t allow setting editable to True.BinaryField has one extra optional argument:The maximum length (in characters) of the field. The maximum length is enforced in Django s validation using MaxLengthValidator.Abusing BinaryFieldAlthough you might think about storing files in the database, consider that it is bad design in 99% of the cases. This field is not a replacement for proper static files handling.A true/false field.The default form widget for this field is CheckboxInput, or NullBooleanSelect if null=True.The default value of BooleanField is None when Field.default isn t defined.In older versions, this field doesn t permit null=True, so you have to use NullBooleanField instead. Using the latter is now discouraged as it s likely to be deprecated in a future version of Django.A string field, for small- to large-sized strings.For large amounts of text, use TextField.The default form widget for this field is a TextInput.CharField has one extra required argument:The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django s validation using MaxLengthValidator.NoteIf you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on max_length for some backends. Refer to the database backend notes for details.A date, represented in Python by a datetime.date instance. Has a few extra, optional arguments:Automatically set the field to now every time the object is saved. Useful for  last-modified  timestamps. Note that the current date is always used; it s not just a default value that you can override.The field is only automatically updated when calling Model.save(). The field isn t updated when making updates to other fields in other ways such as QuerySet.update(), though you can specify a custom value for the field in an update like that.Automatically set the field to now when the object is first created. Useful for creation of timestamps. Note that the current date is always used; it s not just a default value that you can override. So even if you set a value for this field when creating the object, it will be ignored. If you want to be able to modify this field, set the following instead of auto_now_add=True:The default form widget for this field is a TextInput. The admin adds a JavaScript calendar, and a shortcut for  Today . Includes an additional invalid_date error message key.The options auto_now_add, auto_now, and default are mutually exclusive. Any combination of these options will result in an error.NoteAs currently implemented, setting auto_now or auto_now_add to True will cause the field to have editable=False and blank=True set.NoteThe auto_now and auto_now_add options will always use the date in the default timezone at the moment of creation or update. If you need something different, you may want to consider simply using your own callable default or overriding save() instead of using auto_now or auto_now_add; or using a DateTimeField instead of a DateField and deciding how to handle the conversion from datetime to date at display time.A date and time, represented in Python by a datetime.datetime instance. Takes the same extra arguments as DateField.The default form widget for this field is a single TextInput. The admin uses two separate TextInput widgets with JavaScript shortcuts.A fixed-precision decimal number, represented in Python by a Decimal instance. It validates the input using DecimalValidator.Has two required arguments:The maximum number of digits allowed in the number. Note that this number must be greater than or equal to decimal_places.The number of decimal places to store with the number.For example, to store numbers up to 999 with a resolution of 2 decimal places, you d use:And to store numbers up to approximately one billion with a resolution of 10 decimal places:The default form widget for this field is a NumberInput when localize is False or TextInput otherwise.NoteFor more information about the differences between the FloatField and DecimalField classes, please see FloatField vs. DecimalField.A field for storing periods of time - modeled in Python by timedelta. When used on PostgreSQL, the data type used is an interval and on Oracle the data type is INTERVAL DAY(9) TO SECOND(6). Otherwise a bigint of microseconds is used.NoteArithmetic with DurationField works in most cases. However on all databases other than PostgreSQL, comparing the value of a DurationField to arithmetic on DateTimeField instances will not work as expected.A CharField that checks that the value is a valid email address using EmailValidator.A file-upload field.NoteThe primary_key argument isn t supported and will raise an error if used.Has two optional arguments:This attribute provides a way of setting the upload directory and file name, and can be set in two ways. In both cases, the value is passed to the Storage.save() method.If you specify a string value, it may contain strftime() formatting, which will be replaced by the date/time of the file upload (so that uploaded files don t fill up the given directory). For example:If you are using the default FileSystemStorage, the string value will be appended to your MEDIA_ROOT path to form the location on the local filesystem where uploaded files will be stored. If you are using a different storage, check that storage s documentation to see how it handles upload_to.upload_to may also be a callable, such as a function. This will be called to obtain the upload path, including the filename. This callable must accept two arguments and return a Unix-style path (with forward slashes) to be passed along to the storage system. The two arguments are:An instance of the model where the FileField is defined. More specifically, this is the particular instance where the current file is being attached.In most cases, this object will not have been saved to the database yet, so if it uses the default AutoField, it might not yet have a value for its primary key field.For example:A storage object, which handles the storage and retrieval of your files. See Managing files for details on how to provide this object.The default form widget for this field is a ClearableFileInput.Using a FileField or an ImageField (see below) in a model takes a few steps:For example, say your MEDIA_ROOT is set to '/home/media', and upload_to is set to 'photos/%Y/%m/%d'. The '%Y/%m/%d' part of upload_to is strftime() formatting; '%Y' is the four-digit year, '%m' is the two-digit month and '%d' is the two-digit day. If you upload a file on Jan. 15, 2007, it will be saved in the directory /home/media/photos/2007/01/15.If you wanted to retrieve the uploaded file s on-disk filename, or the file s size, you could use the name and size attributes respectively; for more information on the available attributes and methods, see the File class reference and the Managing files topic guide.NoteThe file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved.The uploaded file s relative URL can be obtained using the url attribute. Internally, this calls the url() method of the underlying Storage class.Note that whenever you deal with uploaded files, you should pay close attention to where you re uploading them and what type of files they are, to avoid security holes. Validate all uploaded files so that you re sure the files are what you think they are. For example, if you blindly let somebody upload files, without validation, to a directory that s within your Web server s document root, then somebody could upload a CGI or PHP script and execute that script by visiting its URL on your site. Don t allow that.Also note that even an uploaded HTML file, since it can be executed by the browser (though not by the server), can pose security threats that are equivalent to XSS or CSRF attacks.FileField instances are created in your database as varchar columns with a default max length of 100 characters. As with other fields, you can change the maximum length using the max_length argument.When you access a FileField on a model, you are given an instance of FieldFile as a proxy for accessing the underlying file.The API of FieldFile mirrors that of File, with one key difference: The object wrapped by the class is not necessarily a wrapper around Python s built-in file object. Instead, it is a wrapper around the result of the Storage.open() method, which may be a File object, or it may be a custom storage s implementation of the File API.In addition to the API inherited from File such as read() and write(), FieldFile includes several methods that can be used to interact with the underlying file:WarningTwo methods of this class, save() and delete(), default to saving the model object of the associated FieldFile in the database.The name of the file including the relative path from the root of the Storage of the associated FileField.The result of the underlying Storage.size() method.A read-only property to access the file s relative URL by calling the url() method of the underlying Storage class.Opens or reopens the file associated with this instance in the specified mode. Unlike the standard Python open() method, it doesn t return a file descriptor.Since the underlying file is opened implicitly when accessing it, it may be unnecessary to call this method except to reset the pointer to the underlying file or to change the mode.Behaves like the standard Python file.close() method and closes the file associated with this instance.This method takes a filename and file contents and passes them to the storage class for the field, then associates the stored file with the model field. If you want to manually associate file data with FileField instances on your model, the save() method is used to persist that file data.Takes two required arguments: name which is the name of the file, and content which is an object containing the file s contents.  The optional save argument controls whether or not the model instance is saved after the file associated with this field has been altered. Defaults to True.Note that the content argument should be an instance of django.core.files.File, not Python s built-in file object. You can construct a File from an existing Python file object like this:Or you can construct one from a Python string like this:For more information, see Managing files.Deletes the file associated with this instance and clears all attributes on the field. Note: This method will close the file if it happens to be open when delete() is called.The optional save argument controls whether or not the model instance is saved after the file associated with this field has been deleted. Defaults to True.Note that when a model is deleted, related files are not deleted. If you need to cleanup orphaned files, you ll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron).A CharField whose choices are limited to the filenames in a certain directory on the filesystem. Has three special arguments, of which the first is required:Required. The absolute filesystem path to a directory from which this FilePathField should get its choices. Example: \"/home/images\".Optional. A regular expression, as a string, that FilePathField will use to filter filenames. Note that the regex will be applied to the base filename, not the full path. Example: \"foo.*\\.txt$\", which will match a file called foo23.txt but not bar.txt or foo23.png.Optional. Either True or False. Default is False. Specifies whether all subdirectories of path should be includedOptional.  Either True or False.  Default is True.  Specifies whether files in the specified location should be included.  Either this or allow_folders must be True.Optional.  Either True or False.  Default is False.  Specifies whether folders in the specified location should be included.  Either this or allow_files must be True.Of course, these arguments can be used together.The one potential gotcha is that match applies to the base filename, not the full path. So, this example: will match /home/images/foo.png but not /home/images/foo/bar.png because the match applies to the base filename (foo.png and bar.png).FilePathField instances are created in your database as varchar columns with a default max length of 100 characters. As with other fields, you can change the maximum length using the max_length argument.A floating-point number represented in Python by a float instance.The default form widget for this field is a NumberInput when localize is False or TextInput otherwise.FloatField vs. DecimalFieldThe FloatField class is sometimes mixed up with the DecimalField class. Although they both represent real numbers, they represent those numbers differently. FloatField uses Python s float type internally, while DecimalField uses Python s Decimal type. For information on the difference between the two, see Python s documentation for the decimal module.Inherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image.In addition to the special attributes that are available for FileField, an ImageField also has height and width attributes.To facilitate querying on those attributes, ImageField has two extra optional arguments:Name of a model field which will be auto-populated with the height of the image each time the model instance is saved.Name of a model field which will be auto-populated with the width of the image each time the model instance is saved.Requires the Pillow library.ImageField instances are created in your database as varchar columns with a default max length of 100 characters. As with other fields, you can change the maximum length using the max_length argument.The default form widget for this field is a ClearableFileInput.An integer. Values from -2147483648 to 2147483647 are safe in all databases supported by Django.It uses MinValueValidator and MaxValueValidator to validate the input based on the values that the default database supports.The default form widget for this field is a NumberInput when localize is False or TextInput otherwise.An IPv4 or IPv6 address, in string format (e.g. 192.0.2.30 or 2a02:42fe::4). The default form widget for this field is a TextInput.The IPv6 address normalization follows RFC 4291#section-2.2 section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like ::ffff:192.0.2.0. For example, 2001:0::0:01 would be normalized to 2001::1, and ::ffff:0a0a:0a0a to ::ffff:10.10.10.10. All characters are converted to lowercase.Limits valid inputs to the specified protocol. Accepted values are 'both' (default), 'IPv4' or 'IPv6'. Matching is case insensitive.Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'.If you allow for blank values, you have to allow for null values since blank values are stored as null.Like BooleanField with null=True. Use that instead of this field as it s likely to be deprecated in a future version of Django.Like an IntegerField, but must be either positive or zero (0). Values from 0 to 2147483647 are safe in all databases supported by Django. The value 0 is accepted for backward compatibility reasons.Like a PositiveIntegerField, but only allows values under a certain (database-dependent) point. Values from 0 to 32767 are safe in all databases supported by Django.Slug is a newspaper term. A slug is a short label for something, containing only letters, numbers, underscores or hyphens. They re generally used in URLs.Like a CharField, you can specify max_length (read the note about database portability and max_length in that section, too). If max_length is not specified, Django will use a default length of 50.Implies setting Field.db_index to True.It is often useful to automatically prepopulate a SlugField based on the value of some other value.  You can do this automatically in the admin using prepopulated_fields.It uses validate_slug or validate_unicode_slug for validation.If True, the field accepts Unicode letters in addition to ASCII letters. Defaults to False.Like an IntegerField, but only allows values under a certain (database-dependent) point. Values from -32768 to 32767 are safe in all databases supported by Django.A large text field. The default form widget for this field is a Textarea.If you specify a max_length attribute, it will be reflected in the Textarea widget of the auto-generated form field. However it is not enforced at the model or database level. Use a CharField for that.A time, represented in Python by a datetime.time instance. Accepts the same auto-population options as DateField.The default form widget for this field is a TextInput. The admin adds some JavaScript shortcuts.A CharField for a URL, validated by URLValidator.The default form widget for this field is a TextInput.Like all CharField subclasses, URLField takes the optional max_length argument. If you don t specify max_length, a default of 200 is used.A field for storing universally unique identifiers. Uses Python s UUID class. When used on PostgreSQL, this stores in a uuid datatype, otherwise in a char(32).Universally unique identifiers are a good alternative to AutoField for primary_key. The database will not generate the UUID for you, so it is recommended to use default:Note that a callable (with the parentheses omitted) is passed to default, not an instance of UUID."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/fields/#module-django.db.models.fields.related", "para": "Django also defines a set of fields that represent relations.A many-to-one relationship. Requires two positional arguments: the class to which the model is related and the on_delete option.To create a recursive relationship   an object that has a many-to-one relationship with itself   use models.ForeignKey('self', on_delete=models.CASCADE).If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself:Relationships defined this way on abstract models are resolved when the model is subclassed as a concrete model and are not relative to the abstract model s app_label:To refer to models defined in another application, you can explicitly specify a model with the full application label. For example, if the Manufacturer model above is defined in another application called production, you d need to use:This sort of reference, called a lazy relationship, can be useful when resolving circular import dependencies between two applications.A database index is automatically created on the ForeignKey. You can disable this by setting db_index to False.  You may want to avoid the overhead of an index if you are creating a foreign key for consistency rather than joins, or if you will be creating an alternative index like a partial or multiple column index.Behind the scenes, Django appends \"_id\" to the field name to create its database column name. In the above example, the database table for the Car model will have a manufacturer_id column. (You can change this explicitly by specifying db_column) However, your code should never have to deal with the database column name, unless you write custom SQL. You ll always deal with the field names of your model object.ForeignKey accepts other arguments that define the details of how the relation works.When an object referenced by a ForeignKey is deleted, Django will emulate the behavior of the SQL constraint specified by the on_delete argument. For example, if you have a nullable ForeignKey and you want it to be set null when the referenced object is deleted:on_delete doesn t create a SQL constraint in the database. Support for database-level cascade options may be implemented later.The possible values for on_delete are found in django.db.models:Cascade deletes. Django emulates the behavior of the SQL constraint ON DELETE CASCADE and also deletes the object containing the ForeignKey.Model.delete() isn t called on related models, but the pre_delete and post_delete signals are sent for all deleted objects.Prevent deletion of the referenced object by raising ProtectedError, a subclass of django.db.IntegrityError.Set the ForeignKey null; this is only possible if null is True.Set the ForeignKey to its default value; a default for the ForeignKey must be set.Set the ForeignKey to the value passed to SET(), or if a callable is passed in, the result of calling it. In most cases, passing a callable will be necessary to avoid executing queries at the time your models.py is imported:Take no action. If your database backend enforces referential integrity, this will cause an IntegrityError unless you manually add an SQL ON DELETE constraint to the database field.Sets a limit to the available choices for this field when this field is rendered using a ModelForm or the admin (by default, all objects in the queryset are available to choose). Either a dictionary, a Q object, or a callable returning a dictionary or Q object can be used.For example:causes the corresponding field on the ModelForm to list only Users that have is_staff=True. This may be helpful in the Django admin.The callable form can be helpful, for instance, when used in conjunction with the Python datetime module to limit selections by date range. For example:If limit_choices_to is or returns a Q object, which is useful for complex queries, then it will only have an effect on the choices available in the admin when the field is not listed in raw_id_fields in the ModelAdmin for the model.NoteIf a callable is used for limit_choices_to, it will be invoked every time a new form is instantiated. It may also be invoked when a model is validated, for example by management commands or the admin. The admin constructs querysets to validate its form inputs in various edge cases multiple times, so there is a possibility your callable may be invoked several times.The name to use for the relation from the related object back to this one. It s also the default value for related_query_name (the name to use for the reverse filter name from the target model). See the related objects documentation for a full explanation and example. Note that you must set this value when defining relations on abstract models; and when you do so some special syntax is available.If you d prefer Django not to create a backwards relation, set related_name to '+' or end it with '+'. For example, this will ensure that the User model won t have a backwards relation to this model:The name to use for the reverse filter name from the target model. It defaults to the value of related_name or default_related_name if set, otherwise it defaults to the name of the model:Like related_name, related_query_name supports app label and class interpolation via some special syntax.The field on the related object that the relation is to. By default, Django uses the primary key of the related object. If you reference a different field, that field must have unique=True.Controls whether or not a constraint should be created in the database for this foreign key. The default is True, and that s almost certainly what you want; setting this to False can be very bad for data integrity. That said, here are some scenarios where you might want to do this:If this is set to False, accessing a related object that doesn t exist will raise its DoesNotExist exception.Controls the migration framework s reaction if this ForeignKey is pointing at a swappable model. If it is True - the default - then if the ForeignKey is pointing at a model which matches the current value of settings.AUTH_USER_MODEL (or another swappable model setting) the relationship will be stored in the migration using a reference to the setting, not to the model directly.You only want to override this to be False if you are sure your model should always point towards the swapped-in model - for example, if it is a profile model designed specifically for your custom user model.Setting it to False does not mean you can reference a swappable model even if it is swapped out - False just means that the migrations made with this ForeignKey will always reference the exact model you specify (so it will fail hard if the user tries to run with a User model you don t support, for example).If in doubt, leave it to its default of True.A many-to-many relationship. Requires a positional argument: the class to which the model is related, which works exactly the same as it does for ForeignKey, including recursive and lazy relationships.Related objects can be added, removed, or created with the field s RelatedManager.Behind the scenes, Django creates an intermediary join table to represent the many-to-many relationship. By default, this table name is generated using the name of the many-to-many field and the name of the table for the model that contains it. Since some databases don t support table names above a certain length, these table names will be automatically truncated and a uniqueness hash will be used, e.g. author_books_9cdf. You can manually provide the name of the join table using the db_table option.ManyToManyField accepts an extra set of arguments   all optional   that control how the relationship functions.Same as ForeignKey.related_name.Same as ForeignKey.related_query_name.Same as ForeignKey.limit_choices_to.limit_choices_to has no effect when used on a ManyToManyField with a custom intermediate table specified using the through parameter.Only used in the definition of ManyToManyFields on self. Consider the following model:When Django processes this model, it identifies that it has a ManyToManyField on itself, and as a result, it doesn t add a person_set attribute to the Person class. Instead, the ManyToManyField is assumed to be symmetrical   that is, if I am your friend, then you are my friend.If you do not want symmetry in many-to-many relationships with self, set symmetrical to False. This will force Django to add the descriptor for the reverse relationship, allowing ManyToManyField relationships to be non-symmetrical.Django will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the intermediary table, you can use the through option to specify the Django model that represents the intermediate table that you want to use.The most common use for this option is when you want to associate extra data with a many-to-many relationship.If you don t specify an explicit through model, there is still an implicit through model class you can use to directly access the table created to hold the association. It has three fields to link the models.If the source and target models differ, the following fields are generated:If the ManyToManyField points from and to the same model, the following fields are generated:This class can be used to query associated records for a given model instance like a normal model.Only used when a custom intermediary model is specified. Django will normally determine which fields of the intermediary model to use in order to establish a many-to-many relationship automatically. However, consider the following models:Membership has two foreign keys to Person (person and inviter), which makes the relationship ambiguous and Django can t know which one to use. In this case, you must explicitly specify which foreign keys Django should use using through_fields, as in the example above.through_fields accepts a 2-tuple ('field1', 'field2'), where field1 is the name of the foreign key to the model the ManyToManyField is defined on (group in this case), and field2 the name of the foreign key to the target model (person in this case).When you have more than one foreign key on an intermediary model to any (or even both) of the models participating in a many-to-many relationship, you must specify through_fields. This also applies to recursive relationships when an intermediary model is used and there are more than two foreign keys to the model, or you want to explicitly specify which two Django should use.Recursive relationships using an intermediary model are always defined as non-symmetrical   that is, with symmetrical=False   therefore, there is the concept of a  source  and a  target . In that case 'field1' will be treated as the  source  of the relationship and 'field2' as the  target .The name of the table to create for storing the many-to-many data. If this is not provided, Django will assume a default name based upon the names of: the table for the model defining the relationship and the name of the field itself.Controls whether or not constraints should be created in the database for the foreign keys in the intermediary table. The default is True, and that s almost certainly what you want; setting this to False can be very bad for data integrity. That said, here are some scenarios where you might want to do this:It is an error to pass both db_constraint and through.Controls the migration framework s reaction if this ManyToManyField is pointing at a swappable model. If it is True - the default - then if the ManyToManyField is pointing at a model which matches the current value of settings.AUTH_USER_MODEL (or another swappable model setting) the relationship will be stored in the migration using a reference to the setting, not to the model directly.You only want to override this to be False if you are sure your model should always point towards the swapped-in model - for example, if it is a profile model designed specifically for your custom user model.If in doubt, leave it to its default of True.ManyToManyField does not support validators.null has no effect since there is no way to require a relationship at the database level.A one-to-one relationship. Conceptually, this is similar to a ForeignKey with unique=True, but the  reverse  side of the relation will directly return a single object.This is most useful as the primary key of a model which  extends  another model in some way; Multi-table inheritance is implemented by adding an implicit one-to-one relation from the child model to the parent model, for example.One positional argument is required: the class to which the model will be related. This works exactly the same as it does for ForeignKey, including all the options regarding recursive and lazy relationships.If you do not specify the related_name argument for the OneToOneField, Django will use the lowercase name of the current model as default value.With the following example:your resulting User model will have the following attributes:A DoesNotExist exception is raised when accessing the reverse relationship if an entry in the related table doesn t exist. For example, if a user doesn t have a supervisor designated by MySpecialUser:Additionally, OneToOneField accepts all of the extra arguments accepted by ForeignKey, plus one extra argument:When True and used in a model which inherits from another concrete model, indicates that this field should be used as the link back to the parent class, rather than the extra OneToOneField which would normally be implicitly created by subclassing.See One-to-one relationships for usage examples of OneToOneField."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-api-reference", "para": "Field is an abstract class that represents a database table column. Django uses fields to create the database table (db_type()), to map Python types to database (get_prep_value()) and vice-versa (from_db_value()).A field is thus a fundamental piece in different Django APIs, notably, models and querysets.In models, a field is instantiated as a class attribute and represents a particular table column, see Models. It has attributes such as null and unique, and methods that Django uses to map the field value to database-specific values.A Field is a subclass of RegisterLookupMixin and thus both Transform and Lookup can be registered on it to be used in QuerySets (e.g. field_name__exact=\"foo\"). All built-in lookups are registered by default.All of Django s built-in fields, such as CharField, are particular implementations of Field. If you need a custom field, you can either subclass any of the built-in fields or write a Field from scratch. In either case, see Writing custom model fields.A verbose description of the field, e.g. for the django.contrib.admindocs application.The description can be of the form:where the arguments are interpolated from the field s __dict__.To map a Field to a database-specific type, Django exposes several methods:Returns a string naming this field for backend specific purposes. By default, it returns the class name.See Emulating built-in field types for usage in custom fields.Returns the database column data type for the Field, taking into account the connection.See Custom database types for usage in custom fields.Returns the database column data type for fields such as ForeignKey and OneToOneField that point to the Field, taking into account the connection.See Custom database types for usage in custom fields.There are three main situations where Django needs to interact with the database backend and fields:When querying, get_db_prep_value() and get_prep_value() are used:value is the current value of the model s attribute, and the method should return data in a format that has been prepared for use as a parameter in a query.See Converting Python objects to query values for usage.Converts value to a backend-specific value. By default it returns value if prepared=True and get_prep_value() if is False.See Converting query values to database values for usage.When loading data, from_db_value() is used:Converts a value as returned by the database to a Python object. It is the reverse of get_prep_value().This method is not used for most built-in fields as the database backend already returns the correct Python type, or the backend itself does the conversion.See Converting values to Python objects for usage.NoteFor performance reasons, from_db_value is not implemented as a no-op on fields which do not require it (all Django fields). Consequently you may not call super in your definition.When saving, pre_save() and get_db_prep_save() are used:Same as the get_db_prep_value(), but called when the field value must be saved to the database. By default returns get_db_prep_value().Method called prior to get_db_prep_save() to prepare the value before being saved (e.g. for DateField.auto_now).model_instance is the instance this field belongs to and add is whether the instance is being saved to the database for the first time.It should return the value of the appropriate attribute from model_instance for this field. The attribute name is in self.attname (this is set up by Field).See Preprocessing values before saving for usage.Fields often receive their values as a different type, either from serialization or from forms.Converts the value into the correct Python object. It acts as the reverse of value_to_string(), and is also called in clean().See Converting values to Python objects for usage.Besides saving to the database, the field also needs to know how to serialize its value:Returns the field s value for the given model instance.This method is often used by value_to_string().Converts obj to a string. Used to serialize the value of the field.See Converting field data for serialization for usage.When using model forms, the Field needs to know which form field it should be represented by:Returns the default django.forms.Field of this field for ModelForm.By default, if both form_class and choices_form_class are None, it uses CharField. If the field has choices and choices_form_class isn t specified, it uses TypedChoiceField.See Specifying the form field for a model field for usage.Returns a 4-tuple with enough information to recreate the field:This method must be added to fields prior to 1.7 to migrate its data using Migrations."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/fields/#attributes-for-fields", "para": "Boolean flag that indicates if the field was automatically created, such as the OneToOneField used by model inheritance.Boolean flag that indicates if the field has a database column associated with it.Boolean flag that indicates if a field is used to back another non-hidden field s functionality (e.g. the content_type and object_id fields that make up a GenericForeignKey). The hidden flag is used to distinguish what constitutes the public subset of fields on the model from all the fields on the model.NoteOptions.get_fields() excludes hidden fields by default. Pass in include_hidden=True to return hidden fields in the results.Boolean flag that indicates if a field contains references to one or more other models for its functionality (e.g. ForeignKey, ManyToManyField, OneToOneField, etc.).Returns the model on which the field is defined. If a field is defined on a superclass of a model, model will refer to the superclass, not the class of the instance."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/fields/#attributes-for-fields-with-relations", "para": "These attributes are used to query for the cardinality and other details of a relation. These attribute are present on all fields; however, they will only have boolean values (rather than None) if the field is a relation type (Field.is_relation=True).Boolean flag that is True if the field has a many-to-many relation; False otherwise. The only field included with Django where this is True is ManyToManyField.Boolean flag that is True if the field has a many-to-one relation, such as a ForeignKey; False otherwise.Boolean flag that is True if the field has a one-to-many relation, such as a GenericRelation or the reverse of a ForeignKey; False otherwise.Boolean flag that is True if the field has a one-to-one relation, such as a OneToOneField; False otherwise.Points to the model the field relates to. For example, Author in ForeignKey(Author, on_delete=models.CASCADE). The related_model for a GenericForeignKey is always None."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/indexes/#index-options", "para": "Creates an index (B-Tree) in the database.A list or tuple of the name of the fields on which the index is desired.By default, indexes are created with an ascending order for each column. To define an index with a descending order for a column, add a hyphen before the field s name.For example Index(fields=['headline', '-pub_date']) would create SQL with (headline, pub_date DESC). Index ordering isn t supported on MySQL. In that case, a descending index is created as a normal index.Older versions don t accept a tuple.The name of the index. If name isn t provided Django will auto-generate a name. For compatibility with different databases, index names cannot be longer than 30 characters and shouldn t start with a number (0-9) or underscore (_).The name of the database tablespace to use for this index. For single field indexes, if db_tablespace isn t provided, the index is created in the db_tablespace of the field.If Field.db_tablespace isn t specified (or if the index uses multiple fields), the index is created in tablespace specified in the db_tablespace option inside the model s class Meta. If neither of those tablespaces are set, the index is created in the same tablespace as the table.See alsoFor a list of PostgreSQL-specific indexes, see django.contrib.postgres.indexes.The names of the PostgreSQL operator classes to use for this index. If you require a custom operator class, you must provide one for each field in the index.For example, GinIndex(name='json_index', fields=['jsonfield'], opclasses=['jsonb_path_ops']) creates a gin index on jsonfield using jsonb_path_ops.opclasses are ignored for databases besides PostgreSQL.Index.name is required when using opclasses.If the table is very large and your queries mostly target a subset of rows, it may be useful to restrict an index to that subset. Specify a condition as a Q. For example, condition=Q(pages__gt=400) indexes records with more than 400 pages.Index.name is required when using condition.Restrictions on PostgreSQLPostgreSQL requires functions referenced in the condition to be be marked as IMMUTABLE. Django doesn t validate this but PostgreSQL will error. This means that functions such as Date functions and Concat aren t accepted. If you store dates in DateTimeField, comparison to datetime objects may require the tzinfo argument to be provided because otherwise the comparison could result in a mutable function due to the casting Django does for lookups.Restrictions on SQLiteSQLite imposes restrictions on how a partial index can be constructed.OracleOracle does not support partial indexes. Instead, partial indexes can be emulated using functional indexes. Use a migration to add the index using RunSQL.MySQL and MariaDBThe condition argument is ignored with MySQL and MariaDB as neither supports conditional indexes."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/options/#available-meta-options", "para": "If abstract = True, this model will be an abstract base class.If a model is defined outside of an application in INSTALLED_APPS, it must declare which app it belongs to:If you want to represent a model with the format app_label.object_name or app_label.model_name you can use model._meta.label or model._meta.label_lower respectively.The name of the manager to use for the model s _base_manager.The name of the database table to use for the model:To save you time, Django automatically derives the name of the database table from the name of your model class and the app that contains it. A model s database table name is constructed by joining the model s  app label    the name you used in manage.py startapp   to the model s class name, with an underscore between them.For example, if you have an app bookstore (as created by manage.py startapp bookstore), a model defined as class Book will have a database table named bookstore_book.To override the database table name, use the db_table parameter in class Meta.If your database table name is an SQL reserved word, or contains characters that aren t allowed in Python variable names   notably, the hyphen   that s OK. Django quotes column and table names behind the scenes.Use lowercase table names for MySQLIt is strongly advised that you use lowercase table names when you override the table name via db_table, particularly if you are using the MySQL backend. See the MySQL notes for more details.Table name quoting for OracleIn order to meet the 30-char limitation Oracle has on table names, and match the usual conventions for Oracle databases, Django may shorten table names and turn them all-uppercase. To prevent such transformations, use a quoted name as the value for db_table:Such quoted names can also be used with Django s other supported database backends; except for Oracle, however, the quotes have no effect. See the Oracle notes for more details.The name of the database tablespace to use for this model. The default is the project s DEFAULT_TABLESPACE setting, if set. If the backend doesn t support tablespaces, this option is ignored.The name of the manager to use for the model s _default_manager.The name that will be used by default for the relation from a related object back to this one. The default is <model_name>_set.This option also sets related_query_name.As the reverse name for a field should be unique, be careful if you intend to subclass your model. To work around name collisions, part of the name should contain '%(app_label)s' and '%(model_name)s', which are replaced respectively by the name of the application the model is in, and the name of the model, both lowercased. See the paragraph on related names for abstract models.The name of a field or a list of field names in the model, typically DateField, DateTimeField, or IntegerField. This specifies the default field(s) to use in your model Manager s latest() and earliest() methods.Example:See the latest() docs for more.Defaults to True, meaning Django will create the appropriate database tables in migrate or as part of migrations and remove them as part of a flush management command. That is, Django manages the database tables  lifecycles.If False, no database table creation or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the only difference when managed=False. All other aspects of model handling are exactly the same as normal. This includesAdding an automatic primary key field to the model if you don t declare it.  To avoid confusion for later code readers, it s recommended to specify all the columns from the database table you are modeling when using unmanaged models.If a model with managed=False contains a ManyToManyField that points to another unmanaged model, then the intermediate table for the many-to-many join will also not be created. However, the intermediary table between one managed and one unmanaged model will be created.If you need to change this default behavior, create the intermediary table as an explicit model (with managed set as needed) and use the ManyToManyField.through attribute to make the relation use your custom model.For tests involving models with managed=False, it s up to you to ensure the correct tables are created as part of the test setup.If you re interested in changing the Python-level behavior of a model class, you could use managed=False and create a copy of an existing model. However, there s a better approach for that situation: Proxy models.Makes this object orderable with respect to the given field, usually a ForeignKey. This can be used to make related objects orderable with respect to a parent object. For example, if an Answer relates to a Question object, and a question has more than one answer, and the order of answers matters, you d do this:When order_with_respect_to is set, two additional methods are provided to retrieve and to set the order of the related objects: get_RELATED_order() and set_RELATED_order(), where RELATED is the lowercased model name. For example, assuming that a Question object has multiple related Answer objects, the list returned contains the primary keys of the related Answer objects:The order of a Question object s related Answer objects can be set by passing in a list of Answer primary keys:The related objects also get two methods, get_next_in_order() and get_previous_in_order(), which can be used to access those objects in their proper order. Assuming the Answer objects are ordered by id:order_with_respect_to implicitly sets the ordering optionInternally, order_with_respect_to adds an additional field/database column named _order and sets the model s ordering option to this field. Consequently, order_with_respect_to and ordering cannot be used together, and the ordering added by order_with_respect_to will apply whenever you obtain a list of objects of this model.Changing order_with_respect_toBecause order_with_respect_to adds a new database column, be sure to make and apply the appropriate migrations if you add or change order_with_respect_to after your initial migrate.The default ordering for the object, for use when obtaining lists of objects:This is a tuple or list of strings and/or query expressions. Each string is a field name with an optional  -  prefix, which indicates descending order. Fields without a leading  -  will be ordered ascending. Use the string  ?  to order randomly.For example, to order by a pub_date field ascending, use this:To order by pub_date descending, use this:To order by pub_date descending, then by author ascending, use this:You can also use query expressions. To order by author ascending and make null values sort last, use this:Default ordering also affects aggregation queries but this won t be the case starting in Django 3.1.WarningOrdering is not a free operation. Each field you add to the ordering incurs a cost to your database. Each foreign key you add will implicitly include all of its default orderings as well.If a query doesn t have an ordering specified, results are returned from the database in an unspecified order. A particular ordering is guaranteed only when ordering by a set of fields that uniquely identify each object in the results. For example, if a name field isn t unique, ordering by it won t guarantee objects with the same name always appear in the same order.Extra permissions to enter into the permissions table when creating this object. Add, change, delete, and view permissions are automatically created for each model. This example specifies an extra permission, can_deliver_pizzas:This is a list or tuple of 2-tuples in the format (permission_code, human_readable_permission_name).Defaults to ('add', 'change', 'delete', 'view'). You may customize this list, for example, by setting this to an empty list if your app doesn t require any of the default permissions. It must be specified on the model before the model is created by migrate in order to prevent any omitted permissions from being created.The view permission was added.If proxy = True, a model which subclasses another model will be treated as a proxy model.List of database features that the current connection should have so that the model is considered during the migration phase. For example, if you set this list to ['gis_enabled'], the model will only be synchronized on GIS-enabled databases. It s also useful to skip some models when testing with several database backends. Avoid relations between models that may or may not be created as the ORM doesn t handle this.Name of a supported database vendor that this model is specific to. Current built-in vendor names are: sqlite, postgresql, mysql, oracle. If this attribute is not empty and the current connection vendor doesn t match it, the model will not be synchronized.Determines if Django will use the pre-1.6 django.db.models.Model.save() algorithm. The old algorithm uses SELECT to determine if there is an existing row to be updated. The new algorithm tries an UPDATE directly. In some rare cases the UPDATE of an existing row isn t visible to Django. An example is the PostgreSQL ON UPDATE trigger which returns NULL. In such cases the new algorithm will end up doing an INSERT even when a row exists in the database.Usually there is no need to set this attribute. The default is False.See django.db.models.Model.save() for more about the old and new saving algorithm.A list of indexes that you want to define on the model:Use UniqueConstraint with the constraints option instead.UniqueConstraint provides more functionality than unique_together. unique_together may be deprecated in the future.Sets of field names that, taken together, must be unique:This is a tuple of tuples that must be unique when considered together. It s used in the Django admin and is enforced at the database level (i.e., the appropriate UNIQUE statements are included in the CREATE TABLE statement).For convenience, unique_together can be a single tuple when dealing with a single set of fields:A ManyToManyField cannot be included in unique_together. (It s not clear what that would even mean!) If you need to validate uniqueness related to a ManyToManyField, try using a signal or an explicit through model.The ValidationError raised during model validation when the constraint is violated has the unique_together error code.Use the indexes option instead.The newer indexes option provides more functionality than index_together. index_together may be deprecated in the future.Sets of field names that, taken together, are indexed:This list of fields will be indexed together (i.e. the appropriate CREATE INDEX statement will be issued.)For convenience, index_together can be a single list when dealing with a single set of fields:A list of constraints that you want to define on the model:A human-readable name for the object, singular:If this isn t given, Django will use a munged version of the class name: CamelCase becomes camel case.The plural name for the object:If this isn t given, Django will use verbose_name + \"s\"."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/options/#read-only-meta-attributes", "para": "Representation of the object, returns app_label.object_name, e.g. 'polls.Question'.Representation of the model, returns app_label.model_name, e.g. 'polls.question'."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/class/#attributes", "para": "Each non-abstract Model class must have a Manager instance added to it. Django ensures that in your model class you have  at least a default Manager specified. If you don t add your own Manager, Django will add an attribute objects containing default Manager instance. If you add your own Manager instance attribute, the default one does not appear. Consider the following example:For more details on model managers see Managers and Retrieving objects."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#creating-objects", "para": "To represent database-table data in Python objects, Django uses an intuitive system: A model class represents a database table, and an instance of that class represents a particular record in the database table.To create an object, instantiate it using keyword arguments to the model class, then call save() to save it to the database.Assuming models live in a file mysite/blog/models.py, here s an example:This performs an INSERT SQL statement behind the scenes. Django doesn t hit the database until you explicitly call save().The save() method has no return value.See alsosave() takes a number of advanced options not described here. See the documentation for save() for complete details.To create and save an object in a single step, use the create() method."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#saving-changes-to-objects", "para": "To save changes to an object that s already in the database, use save().Given a Blog instance b5 that has already been saved to the database, this example changes its name and updates its record in the database:This performs an UPDATE SQL statement behind the scenes. Django doesn t hit the database until you explicitly call save().Updating a ForeignKey field works exactly the same way as saving a normal field   simply assign an object of the right type to the field in question. This example updates the blog attribute of an Entry instance entry, assuming appropriate instances of Entry and Blog are already saved to the database (so we can retrieve them below):Updating a ManyToManyField works a little differently   use the add() method on the field to add a record to the relation. This example adds the Author instance joe to the entry object:To add multiple records to a ManyToManyField in one go, include multiple arguments in the call to add(), like this:Django will complain if you try to assign or add an object of the wrong type."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#retrieving-objects", "para": "To retrieve objects from your database, construct a QuerySet via a Manager on your model class.A QuerySet represents a collection of objects from your database. It can have zero, one or many filters. Filters narrow down the query results based on the given parameters. In SQL terms, a QuerySet equates to a SELECT statement, and a filter is a limiting clause such as WHERE or LIMIT.You get a QuerySet by using your model s Manager. Each model has at least one Manager, and it s called objects by default. Access it directly via the model class, like so:NoteManagers are accessible only via model classes, rather than from model instances, to enforce a separation between  table-level  operations and  record-level  operations.The Manager is the main source of QuerySets for a model. For example, Blog.objects.all() returns a QuerySet that contains all Blog objects in the database.The simplest way to retrieve objects from a table is to get all of them. To do this, use the all() method on a Manager:The all() method returns a QuerySet of all the objects in the database.The QuerySet returned by all() describes all objects in the database table. Usually, though, you ll need to select only a subset of the complete set of objects.To create such a subset, you refine the initial QuerySet, adding filter conditions. The two most common ways to refine a QuerySet are:The lookup parameters (**kwargs in the above function definitions) should be in the format described in Field lookups below.For example, to get a QuerySet of blog entries from the year 2006, use filter() like so:With the default manager class, it is the same as:The result of refining a QuerySet is itself a QuerySet, so it s possible to chain refinements together. For example:This takes the initial QuerySet of all entries in the database, adds a filter, then an exclusion, then another filter. The final result is a QuerySet containing all entries with a headline that starts with  What , that were published between January 30, 2005, and the current day.Each time you refine a QuerySet, you get a brand-new QuerySet that is in no way bound to the previous QuerySet. Each refinement creates a separate and distinct QuerySet that can be stored, used and reused.Example:These three QuerySets are separate. The first is a base QuerySet containing all entries that contain a headline starting with  What . The second is a subset of the first, with an additional criteria that excludes records whose pub_date is today or in the future. The third is a subset of the first, with an additional criteria that selects only the records whose pub_date is today or in the future. The initial QuerySet (q1) is unaffected by the refinement process.QuerySets are lazy   the act of creating a QuerySet doesn t involve any database activity. You can stack filters together all day long, and Django won t actually run the query until the QuerySet is evaluated. Take a look at this example:Though this looks like three database hits, in fact it hits the database only once, at the last line (print(q)). In general, the results of a QuerySet aren t fetched from the database until you  ask  for them. When you do, the QuerySet is evaluated by accessing the database. For more details on exactly when evaluation takes place, see When QuerySets are evaluated.filter() will always give you a QuerySet, even if only a single object matches the query - in this case, it will be a QuerySet containing a single element.If you know there is only one object that matches your query, you can use the get() method on a Manager which returns the object directly:You can use any query expression with get(), just like with filter() - again, see Field lookups below.Note that there is a difference between using get(), and using filter() with a slice of [0]. If there are no results that match the query, get() will raise a DoesNotExist exception. This exception is an attribute of the model class that the query is being performed on - so in the code above, if there is no Entry object with a primary key of 1, Django will raise Entry.DoesNotExist.Similarly, Django will complain if more than one item matches the get() query. In this case, it will raise MultipleObjectsReturned, which again is an attribute of the model class itself.Most of the time you ll use all(), get(), filter() and exclude() when you need to look up objects from the database. However, that s far from all there is; see the QuerySet API Reference for a complete list of all the various QuerySet methods.Use a subset of Python s array-slicing syntax to limit your QuerySet to a certain number of results. This is the equivalent of SQL s LIMIT and OFFSET clauses.For example, this returns the first 5 objects (LIMIT 5):This returns the sixth through tenth objects (OFFSET 5 LIMIT 5):Negative indexing (i.e. Entry.objects.all()[-1]) is not supported.Generally, slicing a QuerySet returns a new QuerySet   it doesn t evaluate the query. An exception is if you use the  step  parameter of Python slice syntax. For example, this would actually execute the query in order to return a list of every second object of the first 10:Further filtering or ordering of a sliced queryset is prohibited due to the ambiguous nature of how that might work.To retrieve a single object rather than a list (e.g. SELECT foo FROM bar LIMIT 1), use a simple index instead of a slice. For example, this returns the first Entry in the database, after ordering entries alphabetically by headline:This is roughly equivalent to:Note, however, that the first of these will raise IndexError while the second will raise DoesNotExist if no objects match the given criteria. See get() for more details.Field lookups are how you specify the meat of an SQL WHERE clause. They re specified as keyword arguments to the QuerySet methods filter(), exclude() and get().Basic lookups keyword arguments take the form field__lookuptype=value. (That s a double-underscore). For example:translates (roughly) into the following SQL:How this is possiblePython has the ability to define functions that accept arbitrary name-value arguments whose names and values are evaluated at runtime. For more information, see Keyword Arguments in the official Python tutorial.The field specified in a lookup has to be the name of a model field. There s one exception though, in case of a ForeignKey you can specify the field name suffixed with _id. In this case, the value parameter is expected to contain the raw value of the foreign model s primary key. For example:If you pass an invalid keyword argument, a lookup function will raise TypeError.The database API supports about two dozen lookup types; a complete reference can be found in the field lookup reference. To give you a taste of what s available, here s some of the more common lookups you ll probably use:An  exact  match. For example:Would generate SQL along these lines:If you don t provide a lookup type   that is, if your keyword argument doesn t contain a double underscore   the lookup type is assumed to be exact.For example, the following two statements are equivalent:This is for convenience, because exact lookups are the common case.A case-insensitive match. So, the query:Would match a Blog titled \"Beatles Blog\", \"beatles blog\", or even \"BeAtlES blOG\".Case-sensitive containment test. For example:Roughly translates to this SQL:Note this will match the headline 'Today Lennon honored' but not 'today lennon honored'.There s also a case-insensitive version, icontains.Again, this only scratches the surface. A complete reference can be found in the field lookup reference.Django offers a powerful and intuitive way to  follow  relationships in lookups, taking care of the SQL JOINs for you automatically, behind the scenes. To span a relationship, just use the field name of related fields across models, separated by double underscores, until you get to the field you want.This example retrieves all Entry objects with a Blog whose name is 'Beatles Blog':This spanning can be as deep as you d like.It works backwards, too. To refer to a  reverse  relationship, just use the lowercase name of the model.This example retrieves all Blog objects which have at least one Entry whose headline contains 'Lennon':If you are filtering across multiple relationships and one of the intermediate models doesn t have a value that meets the filter condition, Django will treat it as if there is an empty (all values are NULL), but valid, object there. All this means is that no error will be raised. For example, in this filter:(if there was a related Author model), if there was no author associated with an entry, it would be treated as if there was also no name attached, rather than raising an error because of the missing author. Usually this is exactly what you want to have happen. The only case where it might be confusing is if you are using isnull. Thus:will return Blog objects that have an empty name on the author and also those which have an empty author on the entry. If you don t want those latter objects, you could write:When you are filtering an object based on a ManyToManyField or a reverse ForeignKey, there are two different sorts of filter you may be interested in. Consider the Blog/Entry relationship (Blog to Entry is a one-to-many relation). We might be interested in finding blogs that have an entry which has both  Lennon  in the headline and was published in 2008. Or we might want to find blogs that have an entry with  Lennon  in the headline as well as an entry that was published in 2008. Since there are multiple entries associated with a single Blog, both of these queries are possible and make sense in some situations.The same type of situation arises with a ManyToManyField. For example, if an Entry has a ManyToManyField called tags, we might want to find entries linked to tags called  music  and  bands  or we might want an entry that contains a tag with a name of  music  and a status of  public .To handle both of these situations, Django has a consistent way of processing filter() calls. Everything inside a single filter() call is applied simultaneously to filter out items matching all those requirements. Successive filter() calls further restrict the set of objects, but for multi-valued relations, they apply to any object linked to the primary model, not necessarily those objects that were selected by an earlier filter() call.That may sound a bit confusing, so hopefully an example will clarify. To select all blogs that contain entries with both  Lennon  in the headline and that were published in 2008 (the same entry satisfying both conditions), we would write:To select all blogs that contain an entry with  Lennon  in the headline as well as an entry that was published in 2008, we would write:Suppose there is only one blog that had both entries containing  Lennon  and entries from 2008, but that none of the entries from 2008 contained  Lennon . The first query would not return any blogs, but the second query would return that one blog.In the second example, the first filter restricts the queryset to all those blogs linked to entries with  Lennon  in the headline. The second filter restricts the set of blogs further to those that are also linked to entries that were published in 2008. The entries selected by the second filter may or may not be the same as the entries in the first filter. We are filtering the Blog items with each filter statement, not the Entry items.NoteThe behavior of filter() for queries that span multi-value relationships, as described above, is not implemented equivalently for exclude(). Instead, the conditions in a single exclude() call will not necessarily refer to the same item.For example, the following query would exclude blogs that contain both entries with  Lennon  in the headline and entries published in 2008:However, unlike the behavior when using filter(), this will not limit blogs based on entries that satisfy both conditions. In order to do that, i.e. to select all blogs that do not contain entries published with  Lennon  that were published in 2008, you need to make two queries:In the examples given so far, we have constructed filters that compare the value of a model field with a constant. But what if you want to compare the value of a model field with another field on the same model?Django provides F expressions to allow such comparisons. Instances of F() act as a reference to a model field within a query. These references can then be used in query filters to compare the values of two different fields on the same model instance.For example, to find a list of all blog entries that have had more comments than pingbacks, we construct an F() object to reference the pingback count, and use that F() object in the query:Django supports the use of addition, subtraction, multiplication, division, modulo, and power arithmetic with F() objects, both with constants and with other F() objects. To find all the blog entries with more than twice as many comments as pingbacks, we modify the query:To find all the entries where the rating of the entry is less than the sum of the pingback count and comment count, we would issue the query:You can also use the double underscore notation to span relationships in an F() object. An F() object with a double underscore will introduce any joins needed to access the related object. For example, to retrieve all the entries where the author s name is the same as the blog name, we could issue the query:For date and date/time fields, you can add or subtract a timedelta object. The following would return all entries that were modified more than 3 days after they were published:The F() objects support bitwise operations by .bitand(), .bitor(), .bitrightshift(), and .bitleftshift(). For example:For convenience, Django provides a pk lookup shortcut, which stands for  primary key .In the example Blog model, the primary key is the id field, so these three statements are equivalent:The use of pk isn t limited to __exact queries   any query term can be combined with pk to perform a query on the primary key of a model:pk lookups also work across joins. For example, these three statements are equivalent:The field lookups that equate to LIKE SQL statements (iexact, contains, icontains, startswith, istartswith, endswith and iendswith) will automatically escape the two special characters used in LIKE statements   the percent sign and the underscore. (In a LIKE statement, the percent sign signifies a multiple-character wildcard and the underscore signifies a single-character wildcard.)This means things should work intuitively, so the abstraction doesn t leak. For example, to retrieve all the entries that contain a percent sign, just use the percent sign as any other character:Django takes care of the quoting for you; the resulting SQL will look something like this:Same goes for underscores. Both percentage signs and underscores are handled for you transparently.Each QuerySet contains a cache to minimize database access. Understanding how it works will allow you to write the most efficient code.In a newly created QuerySet, the cache is empty. The first time a QuerySet is evaluated   and, hence, a database query happens   Django saves the query results in the QuerySet s cache and returns the results that have been explicitly requested (e.g., the next element, if the QuerySet is being iterated over). Subsequent evaluations of the QuerySet reuse the cached results.Keep this caching behavior in mind, because it may bite you if you don t use your QuerySets correctly. For example, the following will create two QuerySets, evaluate them, and throw them away:That means the same database query will be executed twice, effectively doubling your database load. Also, there s a possibility the two lists may not include the same database records, because an Entry may have been added or deleted in the split second between the two requests.To avoid this problem, simply save the QuerySet and reuse it:Querysets do not always cache their results.  When evaluating only part of the queryset, the cache is checked, but if it is not populated then the items returned by the subsequent query are not cached. Specifically, this means that limiting the queryset using an array slice or an index will not populate the cache.For example, repeatedly getting a certain index in a queryset object will query the database each time:However, if the entire queryset has already been evaluated, the cache will be checked instead:Here are some examples of other actions that will result in the entire queryset being evaluated and therefore populate the cache:NoteSimply printing the queryset will not populate the cache. This is because the call to __repr__() only returns a slice of the entire queryset."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#complex-lookups-with-q-objects", "para": "Keyword argument queries   in filter(), etc.   are  AND ed together. If you need to execute more complex queries (for example, queries with OR statements), you can use Q objects.A Q object (django.db.models.Q) is an object used to encapsulate a collection of keyword arguments. These keyword arguments are specified as in  Field lookups  above.For example, this Q object encapsulates a single LIKE query:Q objects can be combined using the & and | operators. When an operator is used on two Q objects, it yields a new Q object.For example, this statement yields a single Q object that represents the  OR  of two \"question__startswith\" queries:This is equivalent to the following SQL WHERE clause:You can compose statements of arbitrary complexity by combining Q objects with the & and | operators and use parenthetical grouping. Also, Q objects can be negated using the ~ operator, allowing for combined lookups that combine both a normal query and a negated (NOT) query:Each lookup function that takes keyword-arguments (e.g. filter(), exclude(), get()) can also be passed one or more Q objects as positional (not-named) arguments. If you provide multiple Q object arguments to a lookup function, the arguments will be  AND ed together. For example:  roughly translates into the SQL:Lookup functions can mix the use of Q objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or Q objects) are  AND ed together. However, if a Q object is provided, it must precede the definition of any keyword arguments. For example:  would be a valid query, equivalent to the previous example; but:  would not be valid.See alsoThe OR lookups examples in Django s unit tests show some possible uses of Q."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#comparing-objects", "para": "To compare two model instances, just use the standard Python comparison operator, the double equals sign: ==. Behind the scenes, that compares the primary key values of two models.Using the Entry example above, the following two statements are equivalent:If a model s primary key isn t called id, no problem. Comparisons will always use the primary key, whatever it s called. For example, if a model s primary key field is called name, these two statements are equivalent:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#deleting-objects", "para": "The delete method, conveniently, is named delete(). This method immediately deletes the object and returns the number of objects deleted and a dictionary with the number of deletions per object type. Example:You can also delete objects in bulk. Every QuerySet has a delete() method, which deletes all members of that QuerySet.For example, this deletes all Entry objects with a pub_date year of 2005:Keep in mind that this will, whenever possible, be executed purely in SQL, and so the delete() methods of individual object instances will not necessarily be called during the process. If you ve provided a custom delete() method on a model class and want to ensure that it is called, you will need to  manually  delete instances of that model (e.g., by iterating over a QuerySet and calling delete() on each object individually) rather than using the bulk delete() method of a QuerySet.When Django deletes an object, by default it emulates the behavior of the SQL constraint ON DELETE CASCADE   in other words, any objects which had foreign keys pointing at the object to be deleted will be deleted along with it. For example:This cascade behavior is customizable via the on_delete argument to the ForeignKey.Note that delete() is the only QuerySet method that is not exposed on a Manager itself. This is a safety mechanism to prevent you from accidentally requesting Entry.objects.delete(), and deleting all the entries. If you do want to delete all the objects, then you have to explicitly request a complete query set:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#copying-model-instances", "para": "Although there is no built-in method for copying model instances, it is possible to easily create new instance with all fields  values copied. In the simplest case, you can just set pk to None. Using our blog example:Things get more complicated if you use inheritance. Consider a subclass of Blog:Due to how inheritance works, you have to set both pk and id to None:This process doesn t copy relations that aren t part of the model s database table. For example, Entry has a ManyToManyField to Author. After duplicating an entry, you must set the many-to-many relations for the new entry:For a OneToOneField, you must duplicate the related object and assign it to the new object s field to avoid violating the one-to-one unique constraint. For example, assuming entry is already duplicated as above:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#updating-multiple-objects-at-once", "para": "Sometimes you want to set a field to a particular value for all the objects in a QuerySet. You can do this with the update() method. For example:You can only set non-relation fields and ForeignKey fields using this method. To update a non-relation field, provide the new value as a constant. To update ForeignKey fields, set the new value to be the new model instance you want to point to. For example:The update() method is applied instantly and returns the number of rows matched by the query (which may not be equal to the number of rows updated if some rows already have the new value). The only restriction on the QuerySet being updated is that it can only access one database table: the model s main table. You can filter based on related fields, but you can only update columns in the model s main table. Example:Be aware that the update() method is converted directly to an SQL statement. It is a bulk operation for direct updates. It doesn t run any save() methods on your models, or emit the pre_save or post_save signals (which are a consequence of calling save()), or honor the auto_now field option. If you want to save every item in a QuerySet and make sure that the save() method is called on each instance, you don t need any special function to handle that. Just loop over them and call save():Calls to update can also use F expressions to update one field based on the value of another field in the model. This is especially useful for incrementing counters based upon their current value. For example, to increment the pingback count for every entry in the blog:However, unlike F() objects in filter and exclude clauses, you can t introduce joins when you use F() objects in an update   you can only reference fields local to the model being updated. If you attempt to introduce a join with an F() object, a FieldError will be raised:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#related-objects", "para": "When you define a relationship in a model (i.e., a ForeignKey, OneToOneField, or ManyToManyField), instances of that model will have a convenient API to access the related object(s).Using the models at the top of this page, for example, an Entry object e can get its associated Blog object by accessing the blog attribute: e.blog.(Behind the scenes, this functionality is implemented by Python descriptors. This shouldn t really matter to you, but we point it out here for the curious.)Django also creates API accessors for the  other  side of the relationship   the link from the related model to the model that defines the relationship. For example, a Blog object b has access to a list of all related Entry objects via the entry_set attribute: b.entry_set.all().All examples in this section use the sample Blog, Author and Entry models defined at the top of this page.If a model has a ForeignKey, instances of that model will have access to the related (foreign) object via a simple attribute of the model.Example:You can get and set via a foreign-key attribute. As you may expect, changes to the foreign key aren t saved to the database until you call save(). Example:If a ForeignKey field has null=True set (i.e., it allows NULL values), you can assign None to remove the relation. Example:Forward access to one-to-many relationships is cached the first time the related object is accessed. Subsequent accesses to the foreign key on the same object instance are cached. Example:Note that the select_related() QuerySet method recursively prepopulates the cache of all one-to-many relationships ahead of time. Example:If a model has a ForeignKey, instances of the foreign-key model will have access to a Manager that returns all instances of the first model. By default, this Manager is named FOO_set, where FOO is the source model name, lowercased. This Manager returns QuerySets, which can be filtered and manipulated as described in the  Retrieving objects  section above.Example:You can override the FOO_set name by setting the related_name parameter in the ForeignKey definition. For example, if the Entry model was altered to blog = ForeignKey(Blog, on_delete=models.CASCADE, related_name='entries'), the above example code would look like this:By default the RelatedManager used for reverse relations is a subclass of the default manager for that model. If you would like to specify a different manager for a given query you can use the following syntax:If EntryManager performed default filtering in its get_queryset() method, that filtering would apply to the all() call.Of course, specifying a custom reverse manager also enables you to call its custom methods:In addition to the QuerySet methods defined in  Retrieving objects  above, the ForeignKey Manager has additional methods used to handle the set of related objects. A synopsis of each is below, and complete details can be found in the related objects reference.To assign the members of a related set, use the set() method with an iterable of object instances. For example, if e1 and e2 are Entry instances:If the clear() method is available, any pre-existing objects will be removed from the entry_set before all objects in the iterable (in this case, a list) are added to the set. If the clear() method is not available, all objects in the iterable will be added without removing any existing elements.Each  reverse  operation described in this section has an immediate effect on the database. Every addition, creation and deletion is immediately and automatically saved to the database.Both ends of a many-to-many relationship get automatic API access to the other end. The API works similar to a  backward  one-to-many relationship, above.One difference is in the attribute naming: The model that defines the ManyToManyField uses the attribute name of that field itself, whereas the  reverse  model uses the lowercased model name of the original model, plus '_set' (just like reverse one-to-many relationships).An example makes this easier to understand:Like ForeignKey, ManyToManyField can specify related_name. In the above example, if the ManyToManyField in Entry had specified related_name='entries', then each Author instance would have an entries attribute instead of entry_set.Another difference from one-to-many relationships is that in addition to model instances,  the add(), set(), and remove() methods on many-to-many relationships accept primary key values. For example, if e1 and e2 are Entry instances, then these set() calls work identically:One-to-one relationships are very similar to many-to-one relationships. If you define a OneToOneField on your model, instances of that model will have access to the related object via a simple attribute of the model.For example:The difference comes in  reverse  queries. The related model in a one-to-one relationship also has access to a Manager object, but that Manager represents a single object, rather than a collection of objects:If no object has been assigned to this relationship, Django will raise a DoesNotExist exception.Instances can be assigned to the reverse relationship in the same way as you would assign the forward relationship:Other object-relational mappers require you to define relationships on both sides. The Django developers believe this is a violation of the DRY (Don t Repeat Yourself) principle, so Django only requires you to define the relationship on one end.But how is this possible, given that a model class doesn t know which other model classes are related to it until those other model classes are loaded?The answer lies in the app registry. When Django starts, it imports each application listed in INSTALLED_APPS, and then the models module inside each application. Whenever a new model class is created, Django adds backward-relationships to any related models. If the related models haven t been imported yet, Django keeps tracks of the relationships and adds them when the related models eventually are imported.For this reason, it s particularly important that all the models you re using be defined in applications listed in INSTALLED_APPS. Otherwise, backwards relations may not work properly.Queries involving related objects follow the same rules as queries involving normal value fields. When specifying the value for a query to match, you may use either an object instance itself, or the primary key value for the object.For example, if you have a Blog object b with id=5, the following three queries would be identical:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/queries/#falling-back-to-raw-sql", "para": "If you find yourself needing to write an SQL query that is too complex for Django s database-mapper to handle, you can fall back on writing SQL by hand. Django has a couple of options for writing raw SQL queries; see Performing raw SQL queries.Finally, it s important to note that the Django database layer is merely an interface to your database. You can access your database via other tools, programming languages or database frameworks; there s nothing Django-specific about your database."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/querysets/#when-querysets-are-evaluated", "para": "Internally, a QuerySet can be constructed, filtered, sliced, and generally passed around without actually hitting the database. No database activity actually occurs until you do something to evaluate the queryset.You can evaluate a QuerySet in the following ways:Iteration. A QuerySet is iterable, and it executes its database query the first time you iterate over it. For example, this will print the headline of all entries in the database:Note: Don t use this if all you want to do is determine if at least one result exists. It s more efficient to use exists().Slicing. As explained in Limiting QuerySets, a QuerySet can be sliced, using Python s array-slicing syntax. Slicing an unevaluated QuerySet usually returns another unevaluated QuerySet, but Django will execute the database query if you use the  step  parameter of slice syntax, and will return a list. Slicing a QuerySet that has been evaluated also returns a list.Also note that even though slicing an unevaluated QuerySet returns another unevaluated QuerySet, modifying it further (e.g., adding more filters, or modifying ordering) is not allowed, since that does not translate well into SQL and it would not have a clear meaning either.Pickling/Caching. See the following section for details of what is involved when pickling QuerySets. The important thing for the purposes of this section is that the results are read from the database.repr(). A QuerySet is evaluated when you call repr() on it. This is for convenience in the Python interactive interpreter, so you can immediately see your results when using the API interactively.len(). A QuerySet is evaluated when you call len() on it. This, as you might expect, returns the length of the result list.Note: If you only need to determine the number of records in the set (and don t need the actual objects), it s much more efficient to handle a count at the database level using SQL s SELECT COUNT(*). Django provides a count() method for precisely this reason.list(). Force evaluation of a QuerySet by calling list() on it. For example:bool(). Testing a QuerySet in a boolean context, such as using bool(), or, and or an if statement, will cause the query to be executed. If there is at least one result, the QuerySet is True, otherwise False. For example:Note: If you only want to determine if at least one result exists (and don t need the actual objects), it s more efficient to use exists().If you pickle a QuerySet, this will force all the results to be loaded into memory prior to pickling. Pickling is usually used as a precursor to caching and when the cached queryset is reloaded, you want the results to already be present and ready for use (reading from the database can take some time, defeating the purpose of caching). This means that when you unpickle a QuerySet, it contains the results at the moment it was pickled, rather than the results that are currently in the database.If you only want to pickle the necessary information to recreate the QuerySet from the database at a later time, pickle the query attribute of the QuerySet. You can then recreate the original QuerySet (without any results loaded) using some code like this:The query attribute is an opaque object. It represents the internals of the query construction and is not part of the public API. However, it is safe (and fully supported) to pickle and unpickle the attribute s contents as described here.You can t share pickles between versionsPickles of QuerySets are only valid for the version of Django that was used to generate them. If you generate a pickle using Django version N, there is no guarantee that pickle will be readable with Django version N+1. Pickles should not be used as part of a long-term archival strategy.Since pickle compatibility errors can be difficult to diagnose, such as silently corrupted objects, a RuntimeWarning is raised when you try to unpickle a queryset in a Django version that is different than the one in which it was pickled."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/querysets/#queryset-api", "para": "Here s the formal declaration of a QuerySet:Usually when you ll interact with a QuerySet you ll use it by chaining filters. To make this work, most QuerySet methods return new querysets. These methods are covered in detail later in this section.The QuerySet class has two public attributes you can use for introspection:True if the QuerySet is ordered   i.e. has an order_by() clause or a default ordering on the model. False otherwise.The database that will be used if this query is executed now.NoteThe query parameter to QuerySet exists so that specialized query subclasses can reconstruct internal query state. The value of the parameter is an opaque representation of that query state and is not part of a public API. To put it simply: if you need to ask, you don t need to use it.Django provides a range of QuerySet refinement methods that modify either the types of results returned by the QuerySet or the way its SQL query is executed.Returns a new QuerySet containing objects that match the given lookup parameters.The lookup parameters (**kwargs) should be in the format described in Field lookups below. Multiple parameters are joined via AND in the underlying SQL statement.If you need to execute more complex queries (for example, queries with OR statements), you can use Q objects.Returns a new QuerySet containing objects that do not match the given lookup parameters.The lookup parameters (**kwargs) should be in the format described in Field lookups below. Multiple parameters are joined via AND in the underlying SQL statement, and the whole thing is enclosed in a NOT().This example excludes all entries whose pub_date is later than 2005-1-3 AND whose headline is  Hello :In SQL terms, that evaluates to:This example excludes all entries whose pub_date is later than 2005-1-3 OR whose headline is  Hello :In SQL terms, that evaluates to:Note the second example is more restrictive.If you need to execute more complex queries (for example, queries with OR statements), you can use Q objects.Annotates each object in the QuerySet with the provided list of query expressions. An expression may be a simple value, a reference to a field on the model (or any related models), or an aggregate expression (averages, sums, etc.) that has been computed over the objects that are related to the objects in the QuerySet.Each argument to annotate() is an annotation that will be added to each object in the QuerySet that is returned.The aggregation functions that are provided by Django are described in Aggregation Functions below.Annotations specified using keyword arguments will use the keyword as the alias for the annotation. Anonymous arguments will have an alias generated for them based upon the name of the aggregate function and the model field that is being aggregated. Only aggregate expressions that reference a single field can be anonymous arguments. Everything else must be a keyword argument.For example, if you were manipulating a list of blogs, you may want to determine how many entries have been made in each blog:The Blog model doesn t define an entry__count attribute by itself, but by using a keyword argument to specify the aggregate function, you can control the name of the annotation:For an in-depth discussion of aggregation, see the topic guide on Aggregation.By default, results returned by a QuerySet are ordered by the ordering tuple given by the ordering option in the model s Meta. You can override this on a per-QuerySet basis by using the order_by method.Example:The result above will be ordered by pub_date descending, then by headline ascending. The negative sign in front of \"-pub_date\" indicates descending order. Ascending order is implied. To order randomly, use \"?\", like so:Note: order_by('?') queries may be expensive and slow, depending on the database backend you re using.To order by a field in a different model, use the same syntax as when you are querying across model relations. That is, the name of the field, followed by a double underscore (__), followed by the name of the field in the new model, and so on for as many models as you want to join. For example:If you try to order by a field that is a relation to another model, Django will use the default ordering on the related model, or order by the related model s primary key if there is no Meta.ordering specified. For example, since the Blog model has no default ordering specified: is identical to:If Blog had ordering = ['name'], then the first queryset would be identical to:You can also order by query expressions by calling asc() or desc() on the expression:asc() and desc() have arguments (nulls_first and nulls_last) that control how null values are sorted.Be cautious when ordering by fields in related models if you are also using distinct(). See the note in distinct() for an explanation of how related model ordering can change the expected results.NoteIt is permissible to specify a multi-valued field to order the results by (for example, a ManyToManyField field, or the reverse relation of a ForeignKey field).Consider this case:Here, there could potentially be multiple ordering data for each Event; each Event with multiple children will be returned multiple times into the new QuerySet that order_by() creates. In other words, using order_by() on the QuerySet could return more items than you were working on to begin with - which is probably neither expected nor useful.Thus, take care when using multi-valued field to order the results. If you can be sure that there will only be one ordering piece of data for each of the items you re ordering, this approach should not present problems. If not, make sure the results are what you expect.There s no way to specify whether ordering should be case sensitive. With respect to case-sensitivity, Django will order results however your database backend normally orders them.You can order by a field converted to lowercase with Lower which will achieve case-consistent ordering:If you don t want any ordering to be applied to a query, not even the default ordering, call order_by() with no parameters.You can tell if a query is ordered or not by checking the QuerySet.ordered attribute, which will be True if the QuerySet has been ordered in any way.Each order_by() call will clear any previous ordering. For example, this query will be ordered by pub_date and not headline:WarningOrdering is not a free operation. Each field you add to the ordering incurs a cost to your database. Each foreign key you add will implicitly include all of its default orderings as well.If a query doesn t have an ordering specified, results are returned from the database in an unspecified order. A particular ordering is guaranteed only when ordering by a set of fields that uniquely identify each object in the results. For example, if a name field isn t unique, ordering by it won t guarantee objects with the same name always appear in the same order.Use the reverse() method to reverse the order in which a queryset s elements are returned. Calling reverse() a second time restores the ordering back to the normal direction.To retrieve the  last  five items in a queryset, you could do this:Note that this is not quite the same as slicing from the end of a sequence in Python. The above example will return the last item first, then the penultimate item and so on. If we had a Python sequence and looked at seq[-5:], we would see the fifth-last item first. Django doesn t support that mode of access (slicing from the end), because it s not possible to do it efficiently in SQL.Also, note that reverse() should generally only be called on a QuerySet which has a defined ordering (e.g., when querying against a model which defines a default ordering, or when using order_by()). If no such ordering is defined for a given QuerySet, calling reverse() on it has no real effect (the ordering was undefined prior to calling reverse(), and will remain undefined afterward).Returns a new QuerySet that uses SELECT DISTINCT in its SQL query. This eliminates duplicate rows from the query results.By default, a QuerySet will not eliminate duplicate rows. In practice, this is rarely a problem, because simple queries such as Blog.objects.all() don t introduce the possibility of duplicate result rows. However, if your query spans multiple tables, it s possible to get duplicate results when a QuerySet is evaluated. That s when you d use distinct().NoteAny fields used in an order_by() call are included in the SQL SELECT columns. This can sometimes lead to unexpected results when used in conjunction with distinct(). If you order by fields from a related model, those fields will be added to the selected columns and they may make otherwise duplicate rows appear to be distinct. Since the extra columns don t appear in the returned results (they are only there to support ordering), it sometimes looks like non-distinct results are being returned.Similarly, if you use a values() query to restrict the columns selected, the columns used in any order_by() (or default model ordering) will still be involved and may affect uniqueness of the results.The moral here is that if you are using distinct() be careful about ordering by related models. Similarly, when using distinct() and values() together, be careful when ordering by fields not in the values() call.On PostgreSQL only, you can pass positional arguments (*fields) in order to specify the names of fields to which the DISTINCT should apply. This translates to a SELECT DISTINCT ON SQL query. Here s the difference. For a normal distinct() call, the database compares each field in each row when determining which rows are distinct. For a distinct() call with specified field names, the database will only compare the specified field names.NoteWhen you specify field names, you must provide an order_by() in the QuerySet, and the fields in order_by() must start with the fields in distinct(), in the same order.For example, SELECT DISTINCT ON (a) gives you the first row for each value in column a. If you don t specify an order, you ll get some arbitrary row.Examples (those after the first will only work on PostgreSQL):NoteKeep in mind that order_by() uses any default related model ordering that has been defined. You might have to explicitly order by the relation _id or referenced field to make sure the DISTINCT ON expressions match those at the beginning of the ORDER BY clause. For example, if the Blog model defined an ordering by name: wouldn t work because the query would be ordered by blog__name thus mismatching the DISTINCT ON expression. You d have to explicitly order by the relation _id field (blog_id in this case) or the referenced one (blog__pk) to make sure both expressions match.Returns a QuerySet that returns dictionaries, rather than model instances, when used as an iterable.Each of those dictionaries represents an object, with the keys corresponding to the attribute names of model objects.This example compares the dictionaries of values() with the normal model objects:The values() method takes optional positional arguments, *fields, which specify field names to which the SELECT should be limited. If you specify the fields, each dictionary will contain only the field keys/values for the fields you specify. If you don t specify the fields, each dictionary will contain a key and value for every field in the database table.Example:The values() method also takes optional keyword arguments, **expressions, which are passed through to annotate():You can use built-in and custom lookups in ordering. For example:Support for lookups was added.An aggregate within a values() clause is applied before other arguments within the same values() clause. If you need to group by another value, add it to an earlier values() clause instead. For example:A few subtleties that are worth mentioning:If you have a field called foo that is a ForeignKey, the default values() call will return a dictionary key called foo_id, since this is the name of the hidden model attribute that stores the actual value (the foo attribute refers to the related model). When you are calling values() and passing in field names, you can pass in either foo or foo_id and you will get back the same thing (the dictionary key will match the field name you passed in).For example:When using values() together with distinct(), be aware that ordering can affect the results. See the note in distinct() for details.If you use a values() clause after an extra() call, any fields defined by a select argument in the extra() must be explicitly included in the values() call. Any extra() call made after a values() call will have its extra selected fields ignored.Calling only() and defer() after values() doesn t make sense, so doing so will raise a NotImplementedError.Combining transforms and aggregates requires the use of two annotate() calls, either explicitly or as keyword arguments to values(). As above, if the transform has been registered on the relevant field type the first annotate() can be omitted, thus the following examples are equivalent:It is useful when you know you re only going to need values from a small number of the available fields and you won t need the functionality of a model instance object. It s more efficient to select only the fields you need to use.Finally, note that you can call filter(), order_by(), etc. after the values() call, that means that these two calls are identical:The people who made Django prefer to put all the SQL-affecting methods first, followed (optionally) by any output-affecting methods (such as values()), but it doesn t really matter. This is your chance to really flaunt your individualism.You can also refer to fields on related models with reverse relations through OneToOneField, ForeignKey and ManyToManyField attributes:WarningBecause ManyToManyField attributes and reverse relations can have multiple related rows, including these can have a multiplier effect on the size of your result set. This will be especially pronounced if you include multiple such fields in your values() query, in which case all possible combinations will be returned.This is similar to values() except that instead of returning dictionaries, it returns tuples when iterated over. Each tuple contains the value from the respective field or expression passed into the values_list() call   so the first item is the first field, etc. For example:If you only pass in a single field, you can also pass in the flat parameter. If True, this will mean the returned results are single values, rather than one-tuples. An example should make the difference clearer:It is an error to pass in flat when there is more than one field.You can pass named=True to get results as a namedtuple():Using a named tuple may make use of the results more readable, at the expense of a small performance penalty for transforming the results into a named tuple.If you don t pass any values to values_list(), it will return all the fields in the model, in the order they were declared.A common need is to get a specific field value of a certain model instance. To achieve that, use values_list() followed by a get() call:values() and values_list() are both intended as optimizations for a specific use case: retrieving a subset of data without the overhead of creating a model instance. This metaphor falls apart when dealing with many-to-many and other multivalued relations (such as the one-to-many relation of a reverse foreign key) because the  one row, one object  assumption doesn t hold.For example, notice the behavior when querying across a ManyToManyField:Authors with multiple entries appear multiple times and authors without any entries have None for the entry headline.Similarly, when querying a reverse foreign key, None appears for entries not having any author:Returns a QuerySet that evaluates to a list of datetime.date objects representing all available dates of a particular kind within the contents of the QuerySet.field should be the name of a DateField of your model. kind should be either \"year\", \"month\", \"week\", or \"day\". Each datetime.date object in the result list is  truncated  to the given type.order, which defaults to 'ASC', should be either 'ASC' or 'DESC'. This specifies how to order the results.Examples: week  support was added.Returns a QuerySet that evaluates to a list of datetime.datetime objects representing all available dates of a particular kind within the contents of the QuerySet.field_name should be the name of a DateTimeField of your model.kind should be either \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\", or \"second\". Each datetime.datetime object in the result list is  truncated  to the given type.order, which defaults to 'ASC', should be either 'ASC' or 'DESC'. This specifies how to order the results.tzinfo defines the time zone to which datetimes are converted prior to truncation. Indeed, a given datetime has different representations depending on the time zone in use. This parameter must be a datetime.tzinfo object. If it s None, Django uses the current time zone. It has no effect when USE_TZ is False. week  support was added.NoteThis function performs time zone conversions directly in the database. As a consequence, your database must be able to interpret the value of tzinfo.tzname(None). This translates into the following requirements:Calling none() will create a queryset that never returns any objects and no query will be executed when accessing the results. A qs.none() queryset is an instance of EmptyQuerySet.Examples:Returns a copy of the current QuerySet (or QuerySet subclass).  This can be useful in situations where you might want to pass in either a model manager or a QuerySet and do further filtering on the result. After calling all() on either object, you ll definitely have a QuerySet to work with.When a QuerySet is evaluated, it typically caches its results. If the data in the database might have changed since a QuerySet was evaluated, you can get updated results for the same query by calling all() on a previously evaluated QuerySet.Uses SQL s UNION operator to combine the results of two or more QuerySets. For example:The UNION operator selects only distinct values by default. To allow duplicate values, use the all=True argument.union(), intersection(), and difference() return model instances of the type of the first QuerySet even if the arguments are QuerySets of other models. Passing different models works as long as the SELECT list is the same in all QuerySets (at least the types, the names don t matter as long as the types in the same order). In such cases, you must use the column names from the first QuerySet in QuerySet methods applied to the resulting QuerySet. For example:In addition, only LIMIT, OFFSET, COUNT(*), ORDER BY, and specifying columns (i.e. slicing, count(), order_by(), and values()/values_list()) are allowed on the resulting QuerySet. Further, databases place restrictions on what operations are allowed in the combined queries. For example, most databases don t allow LIMIT or OFFSET in the combined queries.Uses SQL s INTERSECT operator to return the shared elements of two or more QuerySets. For example:See union() for some restrictions.Uses SQL s EXCEPT operator to keep only elements present in the QuerySet but not in some other QuerySets. For example:See union() for some restrictions.Returns a QuerySet that will  follow  foreign-key relationships, selecting additional related-object data when it executes its query. This is a performance booster which results in a single more complex query but means later use of foreign-key relationships won t require database queries.The following examples illustrate the difference between plain lookups and select_related() lookups. Here s standard lookup:And here s select_related lookup:You can use select_related() with any queryset of objects:The order of filter() and select_related() chaining isn t important. These querysets are equivalent:You can follow foreign keys in a similar way to querying them. If you have the following models:  then a call to Book.objects.select_related('author__hometown').get(id=4) will cache the related Person and the related City:You can refer to any ForeignKey or OneToOneField relation in the list of fields passed to select_related().You can also refer to the reverse direction of a OneToOneField in the list of fields passed to select_related   that is, you can traverse a OneToOneField back to the object on which the field is defined. Instead of specifying the field name, use the related_name for the field on the related object.There may be some situations where you wish to call select_related() with a lot of related objects, or where you don t know all of the relations. In these cases it is possible to call select_related() with no arguments. This will follow all non-null foreign keys it can find - nullable foreign keys must be specified. This is not recommended in most cases as it is likely to make the underlying query more complex, and return more data, than is actually needed.If you need to clear the list of related fields added by past calls of select_related on a QuerySet, you can pass None as a parameter:Chaining select_related calls works in a similar way to other methods - that is that select_related('foo', 'bar') is equivalent to select_related('foo').select_related('bar').Returns a QuerySet that will automatically retrieve, in a single batch, related objects for each of the specified lookups.This has a similar purpose to select_related, in that both are designed to stop the deluge of database queries that is caused by accessing related objects, but the strategy is quite different.select_related works by creating an SQL join and including the fields of the related object in the SELECT statement. For this reason, select_related gets the related objects in the same database query. However, to avoid the much larger result set that would result from joining across a  many  relationship, select_related is limited to single-valued relationships - foreign key and one-to-one.prefetch_related, on the other hand, does a separate lookup for each relationship, and does the  joining  in Python. This allows it to prefetch many-to-many and many-to-one objects, which cannot be done using select_related, in addition to the foreign key and one-to-one relationships that are supported by select_related. It also supports prefetching of GenericRelation and GenericForeignKey, however, it must be restricted to a homogeneous set of results. For example, prefetching objects referenced by a GenericForeignKey is only supported if the query is restricted to one ContentType.For example, suppose you have these models:and run:The problem with this is that every time Pizza.__str__() asks for self.toppings.all() it has to query the database, so Pizza.objects.all() will run a query on the Toppings table for every item in the Pizza QuerySet.We can reduce to just two queries using prefetch_related:This implies a self.toppings.all() for each Pizza; now each time self.toppings.all() is called, instead of having to go to the database for the items, it will find them in a prefetched QuerySet cache that was populated in a single query.That is, all the relevant toppings will have been fetched in a single query, and used to make QuerySets that have a pre-filled cache of the relevant results; these QuerySets are then used in the self.toppings.all() calls.The additional queries in prefetch_related() are executed after the QuerySet has begun to be evaluated and the primary query has been executed.If you have an iterable of model instances, you can prefetch related attributes on those instances using the prefetch_related_objects() function.Note that the result cache of the primary QuerySet and all specified related objects will then be fully loaded into memory. This changes the typical behavior of QuerySets, which normally try to avoid loading all objects into memory before they are needed, even after a query has been executed in the database.NoteRemember that, as always with QuerySets, any subsequent chained methods which imply a different database query will ignore previously cached results, and retrieve data using a fresh database query. So, if you write the following: then the fact that pizza.toppings.all() has been prefetched will not help you. The prefetch_related('toppings') implied pizza.toppings.all(), but pizza.toppings.filter() is a new and different query. The prefetched cache can t help here; in fact it hurts performance, since you have done a database query that you haven t used. So use this feature with caution!Also, if you call the database-altering methods add(), remove(), clear() or set(), on related managers, any prefetched cache for the relation will be cleared.You can also use the normal join syntax to do related fields of related fields. Suppose we have an additional model to the example above:The following are all legal:This will prefetch all pizzas belonging to restaurants, and all toppings belonging to those pizzas. This will result in a total of 3 database queries - one for the restaurants, one for the pizzas, and one for the toppings.This will fetch the best pizza and all the toppings for the best pizza for each restaurant. This will be done in 3 database queries - one for the restaurants, one for the  best pizzas , and one for the toppings.Of course, the best_pizza relationship could also be fetched using select_related to reduce the query count to 2:Since the prefetch is executed after the main query (which includes the joins needed by select_related), it is able to detect that the best_pizza objects have already been fetched, and it will skip fetching them again.Chaining prefetch_related calls will accumulate the lookups that are prefetched. To clear any prefetch_related behavior, pass None as a parameter:One difference to note when using prefetch_related is that objects created by a query can be shared between the different objects that they are related to i.e. a single Python model instance can appear at more than one point in the tree of objects that are returned. This will normally happen with foreign key relationships. Typically this behavior will not be a problem, and will in fact save both memory and CPU time.While prefetch_related supports prefetching GenericForeignKey relationships, the number of queries will depend on the data. Since a GenericForeignKey can reference data in multiple tables, one query per table referenced is needed, rather than one query for all the items. There could be additional queries on the ContentType table if the relevant rows have not already been fetched.prefetch_related in most cases will be implemented using an SQL query that uses the  IN  operator. This means that for a large QuerySet a large  IN  clause could be generated, which, depending on the database, might have performance problems of its own when it comes to parsing or executing the SQL query. Always profile for your use case!Note that if you use iterator() to run the query, prefetch_related() calls will be ignored since these two optimizations do not make sense together.You can use the Prefetch object to further control the prefetch operation.In its simplest form Prefetch is equivalent to the traditional string based lookups:You can provide a custom queryset with the optional queryset argument. This can be used to change the default ordering of the queryset:Or to call select_related() when applicable to reduce the number of queries even further:You can also assign the prefetched result to a custom attribute with the optional to_attr argument. The result will be stored directly in a list.This allows prefetching the same relation multiple times with a different QuerySet; for instance:Lookups created with custom to_attr can still be traversed as usual by other lookups:Using to_attr is recommended when filtering down the prefetch result as it is less ambiguous than storing a filtered result in the related manager s cache:Custom prefetching also works with single related relations like forward ForeignKey or OneToOneField. Generally you ll want to use select_related() for these relations, but there are a number of cases where prefetching with a custom QuerySet is useful:You want to use a QuerySet that performs further prefetching on related models.You want to prefetch only a subset of the related objects.You want to use performance optimization techniques like deferred fields:NoteThe ordering of lookups matters.Take the following examples:This works even though it s unordered because 'pizzas__toppings' already contains all the needed information, therefore the second argument 'pizzas' is actually redundant.This will raise a ValueError because of the attempt to redefine the queryset of a previously seen lookup. Note that an implicit queryset was created to traverse 'pizzas' as part of the 'pizzas__toppings' lookup.This will trigger an AttributeError because 'pizza_list' doesn t exist yet when 'pizza_list__toppings' is being processed.This consideration is not limited to the use of Prefetch objects. Some advanced techniques may require that the lookups be performed in a specific order to avoid creating extra queries; therefore it s recommended to always carefully order prefetch_related arguments.Sometimes, the Django query syntax by itself can t easily express a complex WHERE clause. For these edge cases, Django provides the extra() QuerySet modifier   a hook for injecting specific clauses into the SQL generated by a QuerySet.Use this method as a last resortThis is an old API that we aim to deprecate at some point in the future. Use it only if you cannot express your query using other queryset methods. If you do need to use it, please file a ticket using the QuerySet.extra keyword with your use case (please check the list of existing tickets first) so that we can enhance the QuerySet API to allow removing extra(). We are no longer improving or fixing bugs for this method.For example, this use of extra():is equivalent to:The main benefit of using RawSQL is that you can set output_field if needed. The main downside is that if you refer to some table alias of the queryset in the raw SQL, then it is possible that Django might change that alias (for example, when the queryset is used as a subquery in yet another query).WarningYou should be very careful whenever you use extra(). Every time you use it, you should escape any parameters that the user can control by using params in order to protect against SQL injection attacks.You also must not quote placeholders in the SQL string. This example is vulnerable to SQL injection because of the quotes around %s:You can read more about how Django s SQL injection protection works.By definition, these extra lookups may not be portable to different database engines (because you re explicitly writing SQL code) and violate the DRY principle, so you should avoid them if possible.Specify one or more of params, select, where or tables. None of the arguments is required, but you should use at least one of them.selectThe select argument lets you put extra fields in the SELECT clause.  It should be a dictionary mapping attribute names to SQL clauses to use to calculate that attribute.Example:As a result, each Entry object will have an extra attribute, is_recent, a boolean representing whether the entry s pub_date is greater than Jan. 1, 2006.Django inserts the given SQL snippet directly into the SELECT statement, so the resulting SQL of the above example would be something like:The next example is more advanced; it does a subquery to give each resulting Blog object an entry_count attribute, an integer count of associated Entry objects:In this particular case, we re exploiting the fact that the query will already contain the blog_blog table in its FROM clause.The resulting SQL of the above example would be:Note that the parentheses required by most database engines around subqueries are not required in Django s select clauses. Also note that some database backends, such as some MySQL versions, don t support subqueries.In some rare cases, you might wish to pass parameters to the SQL fragments in extra(select=...). For this purpose, use the select_params parameter. Since select_params is a sequence and the select attribute is a dictionary, some care is required so that the parameters are matched up correctly with the extra select pieces. In this situation, you should use a collections.OrderedDict for the select value, not just a normal Python dictionary.This will work, for example:If you need to use a literal %s inside your select string, use the sequence %%s.where / tablesYou can define explicit SQL WHERE clauses   perhaps to perform non-explicit joins   by using where. You can manually add tables to the SQL FROM clause by using tables.where and tables both take a list of strings. All where parameters are  AND ed to any other search criteria.Example: translates (roughly) into the following SQL:Be careful when using the tables parameter if you re specifying tables that are already used in the query. When you add extra tables via the tables parameter, Django assumes you want that table included an extra time, if it is already included. That creates a problem, since the table name will then be given an alias. If a table appears multiple times in an SQL statement, the second and subsequent occurrences must use aliases so the database can tell them apart. If you re referring to the extra table you added in the extra where parameter this is going to cause errors.Normally you ll only be adding extra tables that don t already appear in the query. However, if the case outlined above does occur, there are a few solutions. First, see if you can get by without including the extra table and use the one already in the query. If that isn t possible, put your extra() call at the front of the queryset construction so that your table is the first use of that table. Finally, if all else fails, look at the query produced and rewrite your where addition to use the alias given to your extra table. The alias will be the same each time you construct the queryset in the same way, so you can rely upon the alias name to not change.order_byIf you need to order the resulting queryset using some of the new fields or tables you have included via extra() use the order_by parameter to extra() and pass in a sequence of strings. These strings should either be model fields (as in the normal order_by() method on querysets), of the form table_name.column_name or an alias for a column that you specified in the select parameter to extra().For example:This would sort all the items for which is_recent is true to the front of the result set (True sorts before False in a descending ordering).This shows, by the way, that you can make multiple calls to extra() and it will behave as you expect (adding new constraints each time).paramsThe where parameter described above may use standard Python database string placeholders   '%s' to indicate parameters the database engine should automatically quote. The params argument is a list of any extra parameters to be substituted.Example:Always use params instead of embedding values directly into where because params will ensure values are quoted correctly according to your particular backend. For example, quotes will be escaped correctly.Bad:Good:WarningIf you are performing queries on MySQL, note that MySQL s silent type coercion may cause unexpected results when mixing types. If you query on a string type column, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. For example, if your table contains the values 'abc', 'def' and you query for WHERE mycolumn=0, both rows will match. To prevent this, perform the correct typecasting before using the value in a query.In some complex data-modeling situations, your models might contain a lot of fields, some of which could contain a lot of data (for example, text fields), or require expensive processing to convert them to Python objects. If you are using the results of a queryset in some situation where you don t know if you need those particular fields when you initially fetch the data, you can tell Django not to retrieve them from the database.This is done by passing the names of the fields to not load to defer():A queryset that has deferred fields will still return model instances. Each deferred field will be retrieved from the database if you access that field (one at a time, not all the deferred fields at once).You can make multiple calls to defer(). Each call adds new fields to the deferred set:The order in which fields are added to the deferred set does not matter. Calling defer() with a field name that has already been deferred is harmless (the field will still be deferred).You can defer loading of fields in related models (if the related models are loading via select_related()) by using the standard double-underscore notation to separate related fields:If you want to clear the set of deferred fields, pass None as a parameter to defer():Some fields in a model won t be deferred, even if you ask for them. You can never defer the loading of the primary key. If you are using select_related() to retrieve related models, you shouldn t defer the loading of the field that connects from the primary model to the related one, doing so will result in an error.NoteThe defer() method (and its cousin, only(), below) are only for advanced use-cases. They provide an optimization for when you have analyzed your queries closely and understand exactly what information you need and have measured that the difference between returning the fields you need and the full set of fields for the model will be significant.Even if you think you are in the advanced use-case situation, only use defer() when you cannot, at queryset load time, determine if you will need the extra fields or not. If you are frequently loading and using a particular subset of your data, the best choice you can make is to normalize your models and put the non-loaded data into a separate model (and database table). If the columns must stay in the one table for some reason, create a model with Meta.managed = False (see the managed attribute documentation) containing just the fields you normally need to load and use that where you might otherwise call defer(). This makes your code more explicit to the reader, is slightly faster and consumes a little less memory in the Python process.For example, both of these models use the same underlying database table:If many fields need to be duplicated in the unmanaged model, it may be best to create an abstract model with the shared fields and then have the unmanaged and managed models inherit from the abstract model.NoteWhen calling save() for instances with deferred fields, only the loaded fields will be saved. See save() for more details.The only() method is more or less the opposite of defer(). You call it with the fields that should not be deferred when retrieving a model.  If you have a model where almost all the fields need to be deferred, using only() to specify the complementary set of fields can result in simpler code.Suppose you have a model with fields name, age and biography. The following two querysets are the same, in terms of deferred fields:Whenever you call only() it replaces the set of fields to load immediately. The method s name is mnemonic: only those fields are loaded immediately; the remainder are deferred. Thus, successive calls to only() result in only the final fields being considered:Since defer() acts incrementally (adding fields to the deferred list), you can combine calls to only() and defer() and things will behave logically:All of the cautions in the note for the defer() documentation apply to only() as well. Use it cautiously and only after exhausting your other options.Using only() and omitting a field requested using select_related() is an error as well.NoteWhen calling save() for instances with deferred fields, only the loaded fields will be saved. See save() for more details.This method is for controlling which database the QuerySet will be evaluated against if you are using more than one database.  The only argument this method takes is the alias of a database, as defined in DATABASES.For example:Returns a queryset that will lock rows until the end of the transaction, generating a SELECT ... FOR UPDATE SQL statement on supported databases.For example:When the queryset is evaluated (for entry in entries in this case), all matched entries will be locked until the end of the transaction block, meaning that other transactions will be prevented from changing or acquiring locks on them.Usually, if another transaction has already acquired a lock on one of the selected rows, the query will block until the lock is released. If this is not the behavior you want, call select_for_update(nowait=True). This will make the call non-blocking. If a conflicting lock is already acquired by another transaction, DatabaseError will be raised when the queryset is evaluated. You can also ignore locked rows by using select_for_update(skip_locked=True) instead. The nowait and skip_locked are mutually exclusive and attempts to call select_for_update() with both options enabled will result in a ValueError.By default, select_for_update() locks all rows that are selected by the query. For example, rows of related objects specified in select_related() are locked in addition to rows of the queryset s model. If this isn t desired, specify the related objects you want to lock in select_for_update(of=(...)) using the same fields syntax as select_related(). Use the value 'self' to refer to the queryset s model.You can t use select_for_update() on nullable relations:To avoid that restriction, you can exclude null objects if you don t care about them:Currently, the postgresql, oracle, and mysql database backends support select_for_update(). However, MySQL doesn t support the nowait, skip_locked, and of arguments.Passing nowait=True, skip_locked=True, or of to select_for_update() using database backends that do not support these options, such as MySQL, raises a NotSupportedError. This prevents code from unexpectedly blocking.Evaluating a queryset with select_for_update() in autocommit mode on backends which support SELECT ... FOR UPDATE is a TransactionManagementError error because the rows are not locked in that case. If allowed, this would facilitate data corruption and could easily be caused by calling code that expects to be run in a transaction outside of one.Using select_for_update() on backends which do not support SELECT ... FOR UPDATE (such as SQLite) will have no effect. SELECT ... FOR UPDATE will not be added to the query, and an error isn t raised if select_for_update() is used in autocommit mode.WarningAlthough select_for_update() normally fails in autocommit mode, since TestCase automatically wraps each test in a transaction, calling select_for_update() in a TestCase even outside an atomic() block will (perhaps unexpectedly) pass without raising a TransactionManagementError. To properly test select_for_update() you should use TransactionTestCase.Certain expressions may not be supportedPostgreSQL doesn t support select_for_update() with Window expressions.Takes a raw SQL query, executes it, and returns a django.db.models.query.RawQuerySet instance. This RawQuerySet instance can be iterated over just like an normal QuerySet to provide object instances.See the Performing raw SQL queries for more information.Warningraw() always triggers a new query and doesn t account for previous filtering. As such, it should generally be called from the Manager or from a fresh QuerySet instance.Combined querysets must use the same model.Combines two QuerySets using the SQL AND operator.The following are equivalent:SQL equivalent:Combines two QuerySets using the SQL OR operator.The following are equivalent:SQL equivalent:The following QuerySet methods evaluate the QuerySet and return something other than a QuerySet.These methods do not use a cache (see Caching and QuerySets). Rather, they query the database each time they re called.Returns the object matching the given lookup parameters, which should be in the format described in Field lookups.get() raises MultipleObjectsReturned if more than one object was found. The MultipleObjectsReturned exception is an attribute of the model class.get() raises a DoesNotExist exception if an object wasn t found for the given parameters. This exception is an attribute of the model class. Example:The DoesNotExist exception inherits from django.core.exceptions.ObjectDoesNotExist, so you can target multiple DoesNotExist exceptions. Example:If you expect a queryset to return one row, you can use get() without any arguments to return the object for that row:A convenience method for creating an object and saving it all in one step.  Thus:and:are equivalent.The force_insert parameter is documented elsewhere, but all it means is that a new object will always be created. Normally you won t need to worry about this. However, if your model contains a manual primary key value that you set and if that value already exists in the database, a call to create() will fail with an IntegrityError since primary keys must be unique. Be prepared to handle the exception if you are using manual primary keys.A convenience method for looking up an object with the given kwargs (may be empty if your model has defaults for all fields), creating one if necessary.Returns a tuple of (object, created), where object is the retrieved or created object and created is a boolean specifying whether a new object was created.This is meant as a shortcut to boilerplatish code. For example:This pattern gets quite unwieldy as the number of fields in a model goes up. The above example can be rewritten using get_or_create() like so:Any keyword arguments passed to get_or_create()   except an optional one called defaults   will be used in a get() call. If an object is found, get_or_create() returns a tuple of that object and False.You can specify more complex conditions for the retrieved object by chaining get_or_create() with filter() and using Q objects. For example, to retrieve Robert or Bob Marley if either exists, and create the latter otherwise:If multiple objects are found, get_or_create() raises MultipleObjectsReturned. If an object is not found, get_or_create() will instantiate and save a new object, returning a tuple of the new object and True. The new object will be created roughly according to this algorithm:In English, that means start with any non-'defaults' keyword argument that doesn t contain a double underscore (which would indicate a non-exact lookup). Then add the contents of defaults, overriding any keys if necessary, and use the result as the keyword arguments to the model class. If there are any callables in defaults, evaluate them. As hinted at above, this is a simplification of the algorithm that is used, but it contains all the pertinent details. The internal implementation has some more error-checking than this and handles some extra edge-conditions; if you re interested, read the code.If you have a field named defaults and want to use it as an exact lookup in get_or_create(), just use 'defaults__exact', like so:The get_or_create() method has similar error behavior to create() when you re using manually specified primary keys. If an object needs to be created and the key already exists in the database, an IntegrityError will be raised.This method is atomic assuming correct usage, correct database configuration, and correct behavior of the underlying database. However, if uniqueness is not enforced at the database level for the kwargs used in a get_or_create call (see unique or unique_together), this method is prone to a race-condition which can result in multiple rows with the same parameters being inserted simultaneously.If you are using MySQL, be sure to use the READ COMMITTED isolation level rather than REPEATABLE READ (the default), otherwise you may see cases where get_or_create will raise an IntegrityError but the object won t appear in a subsequent get() call.Finally, a word on using get_or_create() in Django views. Please make sure to use it only in POST requests unless you have a good reason not to. GET requests shouldn t have any effect on data. Instead, use POST whenever a request to a page has a side effect on your data. For more, see Safe methods in the HTTP spec.WarningYou can use get_or_create() through ManyToManyField attributes and reverse relations. In that case you will restrict the queries inside the context of that relation. That could lead you to some integrity problems if you don t use it consistently.Being the following models:You can use get_or_create() through Book s chapters field, but it only fetches inside the context of that book:This is happening because it s trying to get or create  Chapter 1  through the book  Ulysses , but it can t do any of them: the relation can t fetch that chapter because it isn t related to that book, but it can t create it either because title field should be unique.A convenience method for updating an object with the given kwargs, creating a new one if necessary. The defaults is a dictionary of (field, value) pairs used to update the object. The values in defaults can be callables.Returns a tuple of (object, created), where object is the created or updated object and created is a boolean specifying whether a new object was created.The update_or_create method tries to fetch an object from database based on the given kwargs. If a match is found, it updates the fields passed in the defaults dictionary.This is meant as a shortcut to boilerplatish code. For example:This pattern gets quite unwieldy as the number of fields in a model goes up. The above example can be rewritten using update_or_create() like so:For detailed description how names passed in kwargs are resolved see get_or_create().As described above in get_or_create(), this method is prone to a race-condition which can result in multiple rows being inserted simultaneously if uniqueness is not enforced at the database level.Like get_or_create() and create(), if you re using manually specified primary keys and an object needs to be created but the key already exists in the database, an IntegrityError is raised.This method inserts the provided list of objects into the database in an efficient manner (generally only 1 query, no matter how many objects there are):This has a number of caveats though:The model s save() method will not be called, and the pre_save and post_save signals will not be sent.It does not work with child models in a multi-table inheritance scenario.If the model s primary key is an AutoField it does not retrieve and set the primary key attribute, as save() does, unless the database backend supports it (currently PostgreSQL).It does not work with many-to-many relationships.It casts objs to a list, which fully evaluates objs if it s a generator. The cast allows inspecting all objects so that any objects with a manually set primary key can be inserted first. If you want to insert objects in batches without evaluating the entire generator at once, you can use this technique as long as the objects don t have any manually set primary keys:The batch_size parameter controls how many objects are created in a single query. The default is to create all objects in one batch, except for SQLite where the default is such that at most 999 variables per query are used.On databases that support it (all except PostgreSQL < 9.5 and Oracle), setting the ignore_conflicts parameter to True tells the database to ignore failure to insert any rows that fail constraints such as duplicate unique values. Enabling this parameter disables setting the primary key on each model instance (if the database normally supports it).The ignore_conflicts parameter was added.This method efficiently updates the given fields on the provided model instances, generally with one query:QuerySet.update() is used to save the changes, so this is more efficient than iterating through the list of models and calling save() on each of them, but it has a few caveats:The batch_size parameter controls how many objects are saved in a single query. The default is to update all objects in one batch, except for SQLite and Oracle which have restrictions on the number of variables used in a query.Returns an integer representing the number of objects in the database matching the QuerySet.Example:A count() call performs a SELECT COUNT(*) behind the scenes, so you should always use count() rather than loading all of the record into Python objects and calling len() on the result (unless you need to load the objects into memory anyway, in which case len() will be faster).Note that if you want the number of items in a QuerySet and are also retrieving model instances from it (for example, by iterating over it), it s probably more efficient to use len(queryset) which won t cause an extra database query like count() would.Takes a list of field values (id_list) and the field_name for those values, and returns a dictionary mapping each value to an instance of the object with the given field value. If id_list isn t provided, all objects in the queryset are returned. field_name must be a unique field, and it defaults to the primary key.Example:If you pass in_bulk() an empty list, you ll get an empty dictionary.Evaluates the QuerySet (by performing the query) and returns an iterator (see PEP 234) over the results. A QuerySet typically caches its results internally so that repeated evaluations do not result in additional queries. In contrast, iterator() will read results directly, without doing any caching at the QuerySet level (internally, the default iterator calls iterator() and caches the return value). For a QuerySet which returns a large number of objects that you only need to access once, this can result in better performance and a significant reduction in memory.Note that using iterator() on a QuerySet which has already been evaluated will force it to evaluate again, repeating the query.Also, use of iterator() causes previous prefetch_related() calls to be ignored since these two optimizations do not make sense together.Depending on the database backend, query results will either be loaded all at once or streamed from the database using server-side cursors.Oracle and PostgreSQL use server-side cursors to stream results from the database without loading the entire result set into memory.The Oracle database driver always uses server-side cursors.With server-side cursors, the chunk_size parameter specifies the number of results to cache at the database driver level. Fetching bigger chunks diminishes the number of round trips between the database driver and the database, at the expense of memory.On PostgreSQL, server-side cursors will only be used when the DISABLE_SERVER_SIDE_CURSORS setting is False. Read Transaction pooling and server-side cursors if you re using a connection pooler configured in transaction pooling mode. When server-side cursors are disabled, the behavior is the same as databases that don t support server-side cursors.MySQL doesn t support streaming results, hence the Python database driver loads the entire result set into memory. The result set is then transformed into Python row objects by the database adapter using the fetchmany() method defined in PEP 249.SQLite can fetch results in batches using fetchmany(), but since SQLite doesn t provide isolation between queries within a connection, be careful when writing to the table being iterated over. See Isolation when using QuerySet.iterator() for more information.The chunk_size parameter controls the size of batches Django retrieves from the database driver. Larger batches decrease the overhead of communicating with the database driver at the expense of a slight increase in memory consumption.The default value of chunk_size, 2000, comes from a calculation on the psycopg mailing list:Support for result streaming on SQLite was added.Returns the latest object in the table based on the given field(s).This example returns the latest Entry in the table, according to the pub_date field:You can also choose the latest based on several fields. For example, to select the Entry with the earliest expire_date when two entries have the same pub_date:The negative sign in '-expire_date' means to sort expire_date in descending order. Since latest() gets the last result, the Entry with the earliest expire_date is selected.If your model s Meta specifies get_latest_by, you can omit any arguments to earliest() or latest(). The fields specified in get_latest_by will be used by default.Like get(), earliest() and latest() raise DoesNotExist if there is no object with the given parameters.Note that earliest() and latest() exist purely for convenience and readability.earliest() and latest() may return instances with null dates.Since ordering is delegated to the database, results on fields that allow null values may be ordered differently if you use different databases. For example, PostgreSQL and MySQL sort null values as if they are higher than non-null values, while SQLite does the opposite.You may want to filter out null values:Works otherwise like latest() except the direction is changed.Returns the first object matched by the queryset, or None if there is no matching object. If the QuerySet has no ordering defined, then the queryset is automatically ordered by the primary key. This can affect aggregation results as described in Interaction with default ordering or order_by().Example:Note that first() is a convenience method, the following code sample is equivalent to the above example:Works like  first(), but returns the last object in the queryset.Returns a dictionary of aggregate values (averages, sums, etc.) calculated over the QuerySet. Each argument to aggregate() specifies a value that will be included in the dictionary that is returned.The aggregation functions that are provided by Django are described in Aggregation Functions below. Since aggregates are also query expressions, you may combine aggregates with other aggregates or values to create complex aggregates.Aggregates specified using keyword arguments will use the keyword as the name for the annotation. Anonymous arguments will have a name generated for them based upon the name of the aggregate function and the model field that is being aggregated. Complex aggregates cannot use anonymous arguments and must specify a keyword argument as an alias.For example, when you are working with blog entries, you may want to know the number of authors that have contributed blog entries:By using a keyword argument to specify the aggregate function, you can control the name of the aggregation value that is returned:For an in-depth discussion of aggregation, see the topic guide on Aggregation.Returns True if the QuerySet contains any results, and False if not. This tries to perform the query in the simplest and fastest way possible, but it does execute nearly the same query as a normal QuerySet query.exists() is useful for searches relating to both object membership in a QuerySet and to the existence of any objects in a QuerySet, particularly in the context of a large QuerySet.The most efficient method of finding whether a model with a unique field (e.g. primary_key) is a member of a QuerySet is:Which will be faster than the following which requires evaluating and iterating through the entire queryset:And to find whether a queryset contains any items:Which will be faster than:  but not by a large degree (hence needing a large queryset for efficiency gains).Additionally, if a some_queryset has not yet been evaluated, but you know that it will be at some point, then using some_queryset.exists() will do more overall work (one query for the existence check plus an extra one to later retrieve the results) than simply using bool(some_queryset), which retrieves the results and then checks if any were returned.Performs an SQL update query for the specified fields, and returns the number of rows matched (which may not be equal to the number of rows updated if some rows already have the new value).For example, to turn comments off for all blog entries published in 2010, you could do this:(This assumes your Entry model has fields pub_date and comments_on.)You can update multiple fields   there s no limit on how many. For example, here we update the comments_on and headline fields:The update() method is applied instantly, and the only restriction on the QuerySet that is updated is that it can only update columns in the model s main table, not on related models. You can t do this, for example:Filtering based on related fields is still possible, though:You cannot call update() on a QuerySet that has had a slice taken or can otherwise no longer be filtered.The update() method returns the number of affected rows:If you re just updating a record and don t need to do anything with the model object, the most efficient approach is to call update(), rather than loading the model object into memory. For example, instead of doing this: do this:Using update() also prevents a race condition wherein something might change in your database in the short period of time between loading the object and calling save().Finally, realize that update() does an update at the SQL level and, thus, does not call any save() methods on your models, nor does it emit the pre_save or post_save signals (which are a consequence of calling Model.save()). If you want to update a bunch of records for a model that has a custom save() method, loop over them and call save(), like this:Performs an SQL delete query on all rows in the QuerySet and returns the number of objects deleted and a dictionary with the number of deletions per object type.The delete() is applied instantly. You cannot call delete() on a QuerySet that has had a slice taken or can otherwise no longer be filtered.For example, to delete all the entries in a particular blog:By default, Django s ForeignKey emulates the SQL constraint ON DELETE CASCADE   in other words, any objects with foreign keys pointing at the objects to be deleted will be deleted along with them. For example:This cascade behavior is customizable via the on_delete argument to the ForeignKey.The delete() method does a bulk delete and does not call any delete() methods on your models. It does, however, emit the pre_delete and post_delete signals for all deleted objects (including cascaded deletions).Django needs to fetch objects into memory to send signals and handle cascades. However, if there are no cascades and no signals, then Django may take a fast-path and delete objects without fetching into memory. For large deletes this can result in significantly reduced memory usage. The amount of executed queries can be reduced, too.ForeignKeys which are set to on_delete DO_NOTHING do not prevent taking the fast-path in deletion.Note that the queries generated in object deletion is an implementation detail subject to change.Class method that returns an instance of Manager with a copy of the QuerySet s methods. See Creating a manager with QuerySet methods for more details.Returns a string of the QuerySet s execution plan, which details how the database would execute the query, including any indexes or joins that would be used. Knowing these details may help you improve the performance of slow queries.For example, when using PostgreSQL:The output differs significantly between databases.explain() is supported by all built-in database backends except Oracle because an implementation there isn t straightforward.The format parameter changes the output format from the databases s default, usually text-based. PostgreSQL supports 'TEXT', 'JSON', 'YAML', and 'XML'. MySQL supports 'TEXT' (also called 'TRADITIONAL') and 'JSON'.Some databases accept flags that can return more information about the query. Pass these flags as keyword arguments. For example, when using PostgreSQL:On some databases, flags may cause the query to be executed which could have adverse effects on your database. For example, PostgreSQL s ANALYZE flag could result in changes to data if there are triggers or if a function is called, even for a SELECT query.Field lookups are how you specify the meat of an SQL WHERE clause. They re specified as keyword arguments to the QuerySet methods filter(), exclude() and get().For an introduction, see models and database queries documentation.Django s built-in lookups are listed below. It is also possible to write custom lookups for model fields.As a convenience when no lookup type is provided (like in Entry.objects.get(id=14)) the lookup type is assumed to be exact.Exact match. If the value provided for comparison is None, it will be interpreted as an SQL NULL (see isnull for more details).Examples:SQL equivalents:MySQL comparisonsIn MySQL, a database table s  collation  setting determines whether exact comparisons are case-sensitive. This is a database setting, not a Django setting. It s possible to configure your MySQL tables to use case-sensitive comparisons, but some trade-offs are involved. For more information about this, see the collation section in the databases documentation.Case-insensitive exact match. If the value provided for comparison is None, it will be interpreted as an SQL NULL (see isnull for more details).Example:SQL equivalents:Note the first query will match 'Beatles Blog', 'beatles blog', 'BeAtLes BLoG', etc.SQLite usersWhen using the SQLite backend and non-ASCII strings, bear in mind the database note about string comparisons. SQLite does not do case-insensitive matching for non-ASCII strings.Case-sensitive containment test.Example:SQL equivalent:Note this will match the headline 'Lennon honored today' but not 'lennon honored today'.SQLite usersSQLite doesn t support case-sensitive LIKE statements; contains acts like icontains for SQLite. See the database note for more information.Case-insensitive containment test.Example:SQL equivalent:SQLite usersWhen using the SQLite backend and non-ASCII strings, bear in mind the database note about string comparisons.In a given iterable; often a list, tuple, or queryset. It s not a common use case, but strings (being iterables) are accepted.Examples:SQL equivalents:You can also use a queryset to dynamically evaluate the list of values instead of providing a list of literal values:This queryset will be evaluated as subselect statement:If you pass in a QuerySet resulting from values() or values_list() as the value to an __in lookup, you need to ensure you are only extracting one field in the result. For example, this will work (filtering on the blog names):This example will raise an exception, since the inner query is trying to extract two field values, where only one is expected:Performance considerationsBe cautious about using nested queries and understand your database server s performance characteristics (if in doubt, benchmark!). Some database backends, most notably MySQL, don t optimize nested queries very well. It is more efficient, in those cases, to extract a list of values and then pass that into the second query. That is, execute two queries instead of one:Note the list() call around the Blog QuerySet to force execution of the first query. Without it, a nested query would be executed, because QuerySets are lazy.Greater than.Example:SQL equivalent:Greater than or equal to.Less than.Less than or equal to.Case-sensitive starts-with.Example:SQL equivalent:SQLite doesn t support case-sensitive LIKE statements; startswith acts like istartswith for SQLite.Case-insensitive starts-with.Example:SQL equivalent:SQLite usersWhen using the SQLite backend and non-ASCII strings, bear in mind the database note about string comparisons.Case-sensitive ends-with.Example:SQL equivalent:SQLite usersSQLite doesn t support case-sensitive LIKE statements; endswith acts like iendswith for SQLite. Refer to the database note documentation for more.Case-insensitive ends-with.Example:SQL equivalent:SQLite usersWhen using the SQLite backend and non-ASCII strings, bear in mind the database note about string comparisons.Range test (inclusive).Example:SQL equivalent:You can use range anywhere you can use BETWEEN in SQL   for dates, numbers and even characters.WarningFiltering a DateTimeField with dates won t include items on the last day, because the bounds are interpreted as  0am on the given date . If pub_date was a DateTimeField, the above expression would be turned into this SQL:Generally speaking, you can t mix dates and datetimes.For datetime fields, casts the value as date. Allows chaining additional field lookups. Takes a date value.Example:(No equivalent SQL code fragment is included for this lookup because implementation of the relevant query varies among different database engines.)When USE_TZ is True, fields are converted to the current time zone before filtering.For date and datetime fields, an exact year match. Allows chaining additional field lookups. Takes an integer year.Example:SQL equivalent:(The exact SQL syntax varies for each database engine.)When USE_TZ is True, datetime fields are converted to the current time zone before filtering.For date and datetime fields, an exact ISO 8601 week-numbering year match. Allows chaining additional field lookups. Takes an integer year.Example:(The exact SQL syntax varies for each database engine.)When USE_TZ is True, datetime fields are converted to the current time zone before filtering.For date and datetime fields, an exact month match. Allows chaining additional field lookups. Takes an integer 1 (January) through 12 (December).Example:SQL equivalent:(The exact SQL syntax varies for each database engine.)When USE_TZ is True, datetime fields are converted to the current time zone before filtering. This requires time zone definitions in the database.For date and datetime fields, an exact day match. Allows chaining additional field lookups. Takes an integer day.Example:SQL equivalent:(The exact SQL syntax varies for each database engine.)Note this will match any record with a pub_date on the third day of the month, such as January 3, July 3, etc.When USE_TZ is True, datetime fields are converted to the current time zone before filtering. This requires time zone definitions in the database.For date and datetime fields, return the week number (1-52 or 53) according to ISO-8601, i.e., weeks start on a Monday and the first week contains the year s first Thursday.Example:(No equivalent SQL code fragment is included for this lookup because implementation of the relevant query varies among different database engines.)When USE_TZ is True, fields are converted to the current time zone before filtering.For date and datetime fields, a  day of the week  match. Allows chaining additional field lookups.Takes an integer value representing the day of week from 1 (Sunday) to 7 (Saturday).Example:(No equivalent SQL code fragment is included for this lookup because implementation of the relevant query varies among different database engines.)Note this will match any record with a pub_date that falls on a Monday (day 2 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Sunday and day 7 being Saturday.When USE_TZ is True, datetime fields are converted to the current time zone before filtering. This requires time zone definitions in the database.For date and datetime fields, a  quarter of the year  match. Allows chaining additional field lookups. Takes an integer value between 1 and 4 representing the quarter of the year.Example to retrieve entries in the second quarter (April 1 to June 30):(No equivalent SQL code fragment is included for this lookup because implementation of the relevant query varies among different database engines.)When USE_TZ is True, datetime fields are converted to the current time zone before filtering. This requires time zone definitions in the database.For datetime fields, casts the value as time. Allows chaining additional field lookups. Takes a datetime.time value.Example:(No equivalent SQL code fragment is included for this lookup because implementation of the relevant query varies among different database engines.)When USE_TZ is True, fields are converted to the current time zone before filtering.For datetime and time fields, an exact hour match. Allows chaining additional field lookups. Takes an integer between 0 and 23.Example:SQL equivalent:(The exact SQL syntax varies for each database engine.)For datetime fields, when USE_TZ is True, values are converted to the current time zone before filtering.For datetime and time fields, an exact minute match. Allows chaining additional field lookups. Takes an integer between 0 and 59.Example:SQL equivalent:(The exact SQL syntax varies for each database engine.)For datetime fields, When USE_TZ is True, values are converted to the current time zone before filtering.For datetime and time fields, an exact second match. Allows chaining additional field lookups. Takes an integer between 0 and 59.Example:SQL equivalent:(The exact SQL syntax varies for each database engine.)For datetime fields, when USE_TZ is True, values are converted to the current time zone before filtering.Takes either True or False, which correspond to SQL queries of IS NULL and IS NOT NULL, respectively.Example:SQL equivalent:Case-sensitive regular expression match.The regular expression syntax is that of the database backend in use. In the case of SQLite, which has no built in regular expression support, this feature is provided by a (Python) user-defined REGEXP function, and the regular expression syntax is therefore that of Python s re module.Example:SQL equivalents:Using raw strings (e.g., r'foo' instead of 'foo') for passing in the regular expression syntax is recommended.Case-insensitive regular expression match.Example:SQL equivalents:Django provides the following aggregation functions in the django.db.models module. For details on how to use these aggregate functions, see the topic guide on aggregation. See the Aggregate documentation to learn how to create your aggregates.WarningSQLite can t handle aggregation on date/time fields out of the box. This is because there are no native date/time fields in SQLite and Django currently emulates these features using a text field. Attempts to use aggregation on date/time fields in SQLite will raise NotImplementedError.NoteAggregation functions return None when used with an empty QuerySet. For example, the Sum aggregation function returns None instead of 0 if the QuerySet contains no entries. An exception is Count, which does return 0 if the QuerySet is empty.All aggregates have the following parameters in common:Strings that reference fields on the model, or query expressions.An optional argument that represents the model field of the return valueNoteWhen combining multiple field types, Django can only determine the output_field if all fields are of the same type. Otherwise, you must provide the output_field yourself.An optional Q object that s used to filter the rows that are aggregated.See Conditional aggregation and Filtering on annotations for example usage.Keyword arguments that can provide extra context for the SQL generated by the aggregate.Returns the mean value of the given expression, which must be numeric unless you specify a different output_field.Returns the number of objects that are related through the provided expression.Has one optional argument:If distinct=True, the count will only include unique instances. This is the SQL equivalent of COUNT(DISTINCT <field>). The default value is False.Returns the maximum value of the given expression.Returns the minimum value of the given expression.Returns the standard deviation of the data in the provided expression.Has one optional argument:By default, StdDev returns the population standard deviation. However, if sample=True, the return value will be the sample standard deviation.SQLite support was added.Computes the sum of all values of the given expression.Returns the variance of the data in the provided expression.Has one optional argument:By default, Variance returns the population variance. However, if sample=True, the return value will be the sample variance.SQLite support was added."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/querysets/#query-related-tools", "para": "This section provides reference material for query-related tools not documented elsewhere.A Q() object, like an F object, encapsulates a SQL expression in a Python object that can be used in database-related operations.In general, Q() objects make it possible to define and reuse conditions. This permits the construction of complex database queries using | (OR) and & (AND) operators; in particular, it is not otherwise possible to use OR in QuerySets.The Prefetch() object can be used to control the operation of prefetch_related().The lookup argument describes the relations to follow and works the same as the string based lookups passed to prefetch_related(). For example:The queryset argument supplies a base QuerySet for the given lookup. This is useful to further filter down the prefetch operation, or to call select_related() from the prefetched relation, hence reducing the number of queries even further:The to_attr argument sets the result of the prefetch operation to a custom attribute:NoteWhen using to_attr the prefetched result is stored in a list. This can provide a significant speed improvement over traditional prefetch_related calls which store the cached result within a QuerySet instance.Prefetches the given lookups on an iterable of model instances. This is useful in code that receives a list of model instances as opposed to a QuerySet; for example, when fetching models from a cache or instantiating them manually.Pass an iterable of model instances (must all be of the same class) and the lookups or Prefetch objects you want to prefetch for. For example:The name of the field on which you d like to filter the relation.A Q object to control the filtering.FilteredRelation is used with annotate() to create an ON clause when a JOIN is performed. It doesn t act on the default relationship but on the annotation name (pizzas_vegetarian in example below).For example, to find restaurants that have vegetarian pizzas with 'mozzarella' in the name:If there are a large number of pizzas, this queryset performs better than:because the filtering in the WHERE clause of the first queryset will only operate on vegetarian pizzas.FilteredRelation doesn t support:Conditions that span relational fields. For example:QuerySet.only() and prefetch_related().A GenericForeignKey inherited from a parent model."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/lookups/#registration-api", "para": "Django uses RegisterLookupMixin to give a class the interface to register lookups on itself. The two prominent examples are Field, the base class of all model fields, and Transform, the base class of all Django transforms.A mixin that implements the lookup API on a class.Registers a new lookup in the class. For example DateField.register_lookup(YearExact) will register YearExact lookup on DateField. It overrides a lookup that already exists with the same name. lookup_name will be used for this lookup if provided, otherwise lookup.lookup_name will be used.Returns the Lookup named lookup_name registered in the class. The default implementation looks recursively on all parent classes and checks if any has a registered lookup named lookup_name, returning the first match.Returns a dictionary of each lookup name registered in the class mapped to the Lookup class.Returns a Transform named transform_name. The default implementation looks recursively on all parent classes to check if any has the registered transform named transform_name, returning the first match.For a class to be a lookup, it must follow the Query Expression API. Lookup and Transform naturally follow this API."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/lookups/#the-query-expression-api", "para": "The query expression API is a common set of methods that classes define to be usable in query expressions to translate themselves into SQL expressions. Direct field references, aggregates, and Transform are examples that follow this API. A class is said to follow the query expression API when it implements the following methods:Responsible for producing the query string and parameters for the expression. The compiler is an SQLCompiler object, which has a compile() method that can be used to compile other expressions. The connection is the connection used to execute the query.Calling expression.as_sql() is usually incorrect - instead compiler.compile(expression) should be used. The compiler.compile() method will take care of calling vendor-specific methods of the expression.Custom keyword arguments may be defined on this method if it s likely that as_vendorname() methods or subclasses will need to supply data to override the generation of the SQL string. See Func.as_sql() for example usage.Works like as_sql() method. When an expression is compiled by compiler.compile(), Django will first try to call as_vendorname(), where vendorname is the vendor name of the backend used for executing the query. The vendorname is one of postgresql, oracle, sqlite, or mysql for Django s built-in backends.Must return the lookup named lookup_name. For instance, by returning self.output_field.get_lookup(lookup_name).Must return the lookup named transform_name. For instance, by returning self.output_field.get_transform(transform_name).Defines the type of class returned by the get_lookup() method. It must be a Field instance."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/lookups/#transform-reference", "para": "A Transform is a generic class to implement field transformations. A prominent example is __year that transforms a DateField into a IntegerField.The notation to use a Transform in an lookup expression is <expression>__<transformation> (e.g. date__year).This class follows the Query Expression API, which implies that you can use <expression>__<transform1>__<transform2>. It s a specialized Func() expression that only accepts one argument.  It can also be used on the right hand side of a filter or directly as an annotation.A boolean indicating whether this transformation should apply to both lhs and rhs. Bilateral transformations will be applied to rhs in the same order as they appear in the lookup expression. By default it is set to False. For example usage, see Custom Lookups.The left-hand side - what is being transformed. It must follow the Query Expression API.The name of the lookup, used for identifying it on parsing query expressions. It cannot contain the string \"__\".Defines the class this transformation outputs. It must be a Field instance. By default is the same as its lhs.output_field."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/lookups/#lookup-reference", "para": "A Lookup is a generic class to implement lookups. A lookup is a query expression with a left-hand side, lhs; a right-hand side, rhs; and a lookup_name that is used to produce a boolean comparison between lhs and rhs such as lhs in rhs or lhs > rhs.The notation to use a lookup in an expression is <lhs>__<lookup_name>=<rhs>.This class doesn t follow the Query Expression API since it has =<rhs> on its construction: lookups are always the end of a lookup expression.The left-hand side - what is being looked up. The object must follow the Query Expression API.The right-hand side - what lhs is being compared against. It can be a plain value, or something that compiles into SQL, typically an F() object or a QuerySet.The name of this lookup, used to identify it on parsing query expressions. It cannot contain the string \"__\".Returns a tuple (lhs_string, lhs_params), as returned by compiler.compile(lhs). This method can be overridden to tune how the lhs is processed.compiler is an SQLCompiler object, to be used like compiler.compile(lhs) for compiling lhs. The connection can be used for compiling vendor specific SQL. If lhs is not None, use it as the processed lhs instead of self.lhs.Behaves the same way as process_lhs(), for the right-hand side."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/instances/#creating-objects", "para": "To create a new instance of a model, just instantiate it like any other Python class:The keyword arguments are simply the names of the fields you ve defined on your model. Note that instantiating a model in no way touches your database; for that, you need to save().NoteYou may be tempted to customize the model by overriding the __init__ method. If you do so, however, take care not to change the calling signature as any change may prevent the model instance from being saved. Rather than overriding __init__, try using one of these approaches:Add a classmethod on the model class:Add a method on a custom manager (usually preferred):The from_db() method can be used to customize model instance creation when loading from the database.The db argument contains the database alias for the database the model is loaded from, field_names contains the names of all loaded fields, and values contains the loaded values for each field in field_names. The field_names are in the same order as the values. If all of the model s fields are present, then values are guaranteed to be in the order __init__() expects them. That is, the instance can be created by cls(*values). If any fields are deferred, they won t appear in field_names. In that case, assign a value of django.db.models.DEFERRED to each of the missing fields.In addition to creating the new model, the from_db() method must set the adding and db flags in the new instance s _state attribute.Below is an example showing how to record the initial values of fields that are loaded from the database:The example above shows a full from_db() implementation to clarify how that is done. In this case it would of course be possible to just use super() call in the from_db() method."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/instances/#refreshing-objects-from-database", "para": "If you delete a field from a model instance, accessing it again reloads the value from the database:If you need to reload a model s values from the database, you can use the refresh_from_db() method. When this method is called without arguments the following is done:Only fields of the model are reloaded from the database. Other database-dependent values such as annotations aren t reloaded. Any @cached_property attributes aren t cleared either.The reloading happens from the database the instance was loaded from, or from the default database if the instance wasn t loaded from the database. The using argument can be used to force the database used for reloading.It is possible to force the set of fields to be loaded by using the fields argument.For example, to test that an update() call resulted in the expected update, you could write a test similar to this:Note that when deferred fields are accessed, the loading of the deferred field s value happens through this method. Thus it is possible to customize the way deferred loading happens. The example below shows how one can reload all of the instance s fields when a deferred field is reloaded:A helper method that returns a set containing the attribute names of all those fields that are currently deferred for this model."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/instances/#validating-objects", "para": "There are three steps involved in validating a model:All three steps are performed when you call a model s full_clean() method.When you use a ModelForm, the call to is_valid() will perform these validation steps for all the fields that are included on the form. See the ModelForm documentation for more information. You should only need to call a model s full_clean() method if you plan to handle validation errors yourself, or if you have excluded fields from the ModelForm that require validation.This method calls Model.clean_fields(), Model.clean(), and Model.validate_unique() (if validate_unique is True), in that order and raises a ValidationError that has a message_dict attribute containing errors from all three stages.The optional exclude argument can be used to provide a list of field names that can be excluded from validation and cleaning. ModelForm uses this argument to exclude fields that aren t present on your form from being validated since any errors raised could not be corrected by the user.Note that full_clean() will not be called automatically when you call your model s save() method. You ll need to call it manually when you want to run one-step model validation for your own manually created models. For example:The first step full_clean() performs is to clean each individual field.This method will validate all fields on your model. The optional exclude argument lets you provide a list of field names to exclude from validation. It will raise a ValidationError if any fields fail validation.The second step full_clean() performs is to call Model.clean(). This method should be overridden to perform custom validation on your model.This method should be used to provide custom model validation, and to modify attributes on your model if desired. For instance, you could use it to automatically provide a value for a field, or to do validation that requires access to more than a single field:Note, however, that like Model.full_clean(), a model s clean() method is not invoked when you call your model s save() method.In the above example, the ValidationError exception raised by Model.clean() was instantiated with a string, so it will be stored in a special error dictionary key, NON_FIELD_ERRORS. This key is used for errors that are tied to the entire model instead of to a specific field:To assign exceptions to a specific field, instantiate the ValidationError with a dictionary, where the keys are the field names. We could update the previous example to assign the error to the pub_date field:If you detect errors in multiple fields during Model.clean(), you can also pass a dictionary mapping field names to errors:Finally, full_clean() will check any unique constraints on your model.How to raise field-specific validation errors if those fields don t appear in a ModelFormYou can t raise validation errors in Model.clean() for fields that don t appear in a model form (a form may limit its fields using Meta.fields or Meta.exclude). Doing so will raise a ValueError because the validation error won t be able to be associated with the excluded field.To work around this dilemma, instead override Model.clean_fields() as it receives the list of fields that are excluded from validation. For example:This method is similar to clean_fields(), but validates all uniqueness constraints on your model instead of individual field values. The optional exclude argument allows you to provide a list of field names to exclude from validation. It will raise a ValidationError if any fields fail validation.Note that if you provide an exclude argument to validate_unique(), any unique_together constraint involving one of the fields you provided will not be checked."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/instances/#saving-objects", "para": "To save an object back to the database, call save():If you want customized saving behavior, you can override this save() method. See Overriding predefined model methods for more details.The model save process also has some subtleties; see the sections below.If a model has an AutoField   an auto-incrementing primary key   then that auto-incremented value will be calculated and saved as an attribute on your object the first time you call save():There s no way to tell what the value of an ID will be before you call save(), because that value is calculated by your database, not by Django.For convenience, each model has an AutoField named id by default unless you explicitly specify primary_key=True on a field in your model. See the documentation for AutoField for more details.Regardless of whether you define a primary key field yourself, or let Django supply one for you, each model will have a property called pk. It behaves like a normal attribute on the model, but is actually an alias for whichever attribute is the primary key field for the model. You can read and set this value, just as you would for any other attribute, and it will update the correct field in the model.If a model has an AutoField but you want to define a new object s ID explicitly when saving, just define it explicitly before saving, rather than relying on the auto-assignment of the ID:If you assign auto-primary-key values manually, make sure not to use an already-existing primary-key value! If you create a new object with an explicit primary-key value that already exists in the database, Django will assume you re changing the existing record rather than creating a new one.Given the above 'Cheddar Talk' blog example, this example would override the previous record in the database:See How Django knows to UPDATE vs. INSERT, below, for the reason this happens.Explicitly specifying auto-primary-key values is mostly useful for bulk-saving objects, when you re confident you won t have primary-key collision.If you re using PostgreSQL, the sequence associated with the primary key might need to be updated; see Manually-specifying values of auto-incrementing primary keys.When you save an object, Django performs the following steps:Emit a pre-save signal. The pre_save signal is sent, allowing any functions listening for that signal to do something.Preprocess the data. Each field s pre_save() method is called to perform any automated data modification that s needed. For example, the date/time fields override pre_save() to implement auto_now_add and auto_now.Prepare the data for the database. Each field s get_db_prep_save() method is asked to provide its current value in a data type that can be written to the database.Most fields don t require data preparation. Simple data types, such as integers and strings, are  ready to write  as a Python object. However, more complex data types often require some modification.For example, DateField fields use a Python datetime object to store data. Databases don t store datetime objects, so the field value must be converted into an ISO-compliant date string for insertion into the database.Insert the data into the database. The preprocessed, prepared data is composed into an SQL statement for insertion into the database.Emit a post-save signal. The post_save signal is sent, allowing any functions listening for that signal to do something.You may have noticed Django database objects use the same save() method for creating and changing objects. Django abstracts the need to use INSERT or UPDATE SQL statements. Specifically, when you call save(), Django follows this algorithm:The one gotcha here is that you should be careful not to specify a primary-key value explicitly when saving new objects, if you cannot guarantee the primary-key value is unused. For more on this nuance, see Explicitly specifying auto-primary-key values above and Forcing an INSERT or UPDATE below.In Django 1.5 and earlier, Django did a SELECT when the primary key attribute was set. If the SELECT found a row, then Django did an UPDATE, otherwise it did an INSERT. The old algorithm results in one more query in the UPDATE case. There are some rare cases where the database doesn t report that a row was updated even if the database contains a row for the object s primary key value. An example is the PostgreSQL ON UPDATE trigger which returns NULL. In such cases it is possible to revert to the old algorithm by setting the select_on_save option to True.In some rare circumstances, it s necessary to be able to force the save() method to perform an SQL INSERT and not fall back to doing an UPDATE. Or vice-versa: update, if possible, but not insert a new row. In these cases you can pass the force_insert=True or force_update=True parameters to the save() method. Obviously, passing both parameters is an error: you cannot both insert and update at the same time!It should be very rare that you ll need to use these parameters. Django will almost always do the right thing and trying to override that will lead to errors that are difficult to track down. This feature is for advanced use only.Using update_fields will force an update similarly to force_update.Sometimes you ll need to perform a simple arithmetic task on a field, such as incrementing or decrementing the current value. The obvious way to achieve this is to do something like:If the old number_sold value retrieved from the database was 10, then the value of 11 will be written back to the database.The process can be made robust, avoiding a race condition, as well as slightly faster by expressing the update relative to the original field value, rather than as an explicit assignment of a new value. Django provides F expressions for performing this kind of relative update. Using F expressions, the previous example is expressed as:For more details, see the documentation on F expressions and their use in update queries.If save() is passed a list of field names in keyword argument update_fields, only the fields named in that list will be updated. This may be desirable if you want to update just one or a few fields on an object. There will be a slight performance benefit from preventing all of the model fields from being updated in the database. For example:The update_fields argument can be any iterable containing strings. An empty update_fields iterable will skip the save. A value of None will perform an update on all fields.Specifying update_fields will force an update.When saving a model fetched through deferred model loading (only() or defer()) only the fields loaded from the DB will get updated. In effect there is an automatic update_fields in this case. If you assign or change any deferred field value, the field will be added to the updated fields."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/instances/#deleting-objects", "para": "Issues an SQL DELETE for the object. This only deletes the object in the database; the Python instance will still exist and will still have data in its fields. This method returns the number of objects deleted and a dictionary with the number of deletions per object type.For more details, including how to delete objects in bulk, see Deleting objects.If you want customized deletion behavior, you can override the delete() method. See Overriding predefined model methods for more details.Sometimes with multi-table inheritance you may want to delete only a child model s data. Specifying keep_parents=True will keep the parent model s data."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/instances/#pickling-objects", "para": "When you pickle a model, its current state is pickled. When you unpickle it, it ll contain the model instance at the moment it was pickled, rather than the data that s currently in the database.You can t share pickles between versionsPickles of models are only valid for the version of Django that was used to generate them. If you generate a pickle using Django version N, there is no guarantee that pickle will be readable with Django version N+1. Pickles should not be used as part of a long-term archival strategy.Since pickle compatibility errors can be difficult to diagnose, such as silently corrupted objects, a RuntimeWarning is raised when you try to unpickle a model in a Django version that is different than the one in which it was pickled."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/instances/#other-model-instance-methods", "para": "A few object methods have special purposes.The __str__() method is called whenever you call str() on an object. Django uses str(obj) in a number of places. Most notably, to display an object in the Django admin site and as the value inserted into a template when it displays an object. Thus, you should always return a nice, human-readable representation of the model from the __str__() method.For example:The equality method is defined such that instances with the same primary key value and the same concrete class are considered equal, except that instances with a primary key value of None aren t equal to anything except themselves. For proxy models, concrete class is defined as the model s first non-proxy parent; for all other models it s simply the model s class.For example:The __hash__() method is based on the instance s primary key value. It is effectively hash(obj.pk). If the instance doesn t have a primary key value then a TypeError will be raised (otherwise the __hash__() method would return different values before and after the instance is saved, but changing the __hash__() value of an instance is forbidden in Python.Define a get_absolute_url() method to tell Django how to calculate the canonical URL for an object. To callers, this method should appear to return a string that can be used to refer to the object over HTTP.For example:While this code is correct and simple, it may not be the most portable way to to write this kind of method. The reverse() function is usually the best approach.For example:One place Django uses get_absolute_url() is in the admin app. If an object defines this method, the object-editing page will have a  View on site  link that will jump you directly to the object s public view, as given by get_absolute_url().Similarly, a couple of other bits of Django, such as the syndication feed framework, use get_absolute_url() when it is defined. If it makes sense for your model s instances to each have a unique URL, you should define get_absolute_url().WarningYou should avoid building the URL from unvalidated user input, in order to reduce possibilities of link or redirect poisoning:If self.name is '/example.com' this returns '//example.com/' which, in turn, is a valid schema relative URL but not the expected '/%2Fexample.com/'.It s good practice to use get_absolute_url() in templates, instead of hard-coding your objects  URLs. For example, this template code is bad:This template code is much better:The logic here is that if you change the URL structure of your objects, even for something simple such as correcting a spelling error, you don t want to have to track down every place that the URL might be created. Specify it once, in get_absolute_url() and have all your other code call that one place.NoteThe string you return from get_absolute_url() must contain only ASCII characters (required by the URI specification, RFC 2396) and be URL-encoded, if necessary.Code and templates calling get_absolute_url() should be able to use the result directly without any further processing. You may wish to use the django.utils.encoding.iri_to_uri() function to help with this if you are using strings containing characters outside the ASCII range."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/instances/#extra-instance-methods", "para": "In addition to save(), delete(), a model object might have some of the following methods:For every field that has choices set, the object will have a get_FOO_display() method, where FOO is the name of the field. This method returns the  human-readable  value of the field.For example:For every DateField and DateTimeField that does not have null=True, the object will have get_next_by_FOO() and get_previous_by_FOO() methods, where FOO is the name of the field. This returns the next and previous object with respect to the date field, raising a DoesNotExist exception when appropriate.Both of these methods will perform their queries using the default manager for the model. If you need to emulate filtering used by a custom manager, or want to perform one-off custom filtering, both methods also accept optional keyword arguments, which should be in the format described in Field lookups.Note that in the case of identical date values, these methods will use the primary key as a tie-breaker. This guarantees that no records are skipped or duplicated. That also means you cannot use those methods on unsaved objects."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/instances/#other-attributes", "para": "This exception is raised by the ORM in a couple places, for example by QuerySet.get() when an object is not found for the given query parameters.Django provides a DoesNotExist exception as an attribute of each model class to identify the class of object that could not be found and to allow you to catch a particular model class with try/except. The exception is a subclass of django.core.exceptions.ObjectDoesNotExist."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#the-commands", "para": "There are several commands which you will use to interact with migrations and Django s handling of database schema:You should think of migrations as a version control system for your database schema. makemigrations is responsible for packaging up your model changes into individual migration files - analogous to commits - and migrate is responsible for applying those to your database.The migration files for each app live in a  migrations  directory inside of that app, and are designed to be committed to, and distributed as part of, its codebase. You should be making them once on your development machine and then running the same migrations on your colleagues  machines, your staging machines, and eventually your production machines.NoteIt is possible to override the name of the package which contains the migrations on a per-app basis by modifying the MIGRATION_MODULES setting.Migrations will run the same way on the same dataset and produce consistent results, meaning that what you see in development and staging is, under the same circumstances, exactly what will happen in production.Django will make migrations for any change to your models or fields - even options that don t affect the database - as the only way it can reconstruct a field correctly is to have all the changes in the history, and you might need those options in some data migrations later on (for example, if you ve set custom validators)."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#backend-support", "para": "Migrations are supported on all backends that Django ships with, as well as any third-party backends if they have programmed in support for schema alteration (done via the SchemaEditor class).However, some databases are more capable than others when it comes to schema migrations; some of the caveats are covered below.PostgreSQL is the most capable of all the databases here in terms of schema support.The only caveat is that prior to PostgreSQL 11, adding columns with default values causes a full rewrite of the table, for a time proportional to its size. For this reason, it s recommended you always create new columns with null=True, as this way they will be added immediately.MySQL lacks support for transactions around schema alteration operations, meaning that if a migration fails to apply you will have to manually unpick the changes in order to try again (it s impossible to roll back to an earlier point).In addition, MySQL will fully rewrite tables for almost every schema operation and generally takes a time proportional to the number of rows in the table to add or remove columns. On slower hardware this can be worse than a minute per million rows - adding a few columns to a table with just a few million rows could lock your site up for over ten minutes.Finally, MySQL has relatively small limits on name lengths for columns, tables and indexes, as well as a limit on the combined size of all columns an index covers. This means that indexes that are possible on other backends will fail to be created under MySQL.SQLite has very little built-in schema alteration support, and so Django attempts to emulate it by:This process generally works well, but it can be slow and occasionally buggy. It is not recommended that you run and migrate SQLite in a production environment unless you are very aware of the risks and its limitations; the support Django ships with is designed to allow developers to use SQLite on their local machines to develop less complex Django projects without the need for a full database."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#workflow", "para": "Working with migrations is simple. Make changes to your models - say, add a field and remove a model - and then run makemigrations:Your models will be scanned and compared to the versions currently contained in your migration files, and then a new set of migrations will be written out. Make sure to read the output to see what makemigrations thinks you have changed - it s not perfect, and for complex changes it might not be detecting what you expect.Once you have your new migration files, you should apply them to your database to make sure they work as expected:Once the migration is applied, commit the migration and the models change to your version control system as a single commit - that way, when other developers (or your production servers) check out the code, they ll get both the changes to your models and the accompanying migration at the same time.If you want to give the migration(s) a meaningful name instead of a generated one, you can use the makemigrations --name option:Because migrations are stored in version control, you ll occasionally come across situations where you and another developer have both committed a migration to the same app at the same time, resulting in two migrations with the same number.Don t worry - the numbers are just there for developers  reference, Django just cares that each migration has a different name. Migrations specify which other migrations they depend on - including earlier migrations in the same app - in the file, so it s possible to detect when there s two new migrations for the same app that aren t ordered.When this happens, Django will prompt you and give you some options. If it thinks it s safe enough, it will offer to automatically linearize the two migrations for you. If not, you ll have to go in and modify the migrations yourself - don t worry, this isn t difficult, and is explained more in Migration files below."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#dependencies", "para": "While migrations are per-app, the tables and relationships implied by your models are too complex to be created for just one app at a time. When you make a migration that requires something else to run - for example, you add a ForeignKey in your books app to your authors app - the resulting migration will contain a dependency on a migration in authors.This means that when you run the migrations, the authors migration runs first and creates the table the ForeignKey references, and then the migration that makes the ForeignKey column runs afterwards and creates the constraint. If this didn t happen, the migration would try to create the ForeignKey column without the table it s referencing existing and your database would throw an error.This dependency behavior affects most migration operations where you restrict to a single app. Restricting to a single app (either in makemigrations or migrate) is a best-efforts promise, and not a guarantee; any other apps that need to be used to get dependencies correct will be.Apps without migrations must not have relations (ForeignKey, ManyToManyField, etc.) to apps with migrations. Sometimes it may work, but it s not supported."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#migration-files", "para": "Migrations are stored as an on-disk format, referred to here as  migration files . These files are actually just normal Python files with an agreed-upon object layout, written in a declarative style.A basic migration file looks like this:What Django looks for when it loads a migration file (as a Python module) is a subclass of django.db.migrations.Migration called Migration. It then inspects this object for four attributes, only two of which are used most of the time:The operations are the key; they are a set of declarative instructions which tell Django what schema changes need to be made. Django scans them and builds an in-memory representation of all of the schema changes to all apps, and uses this to generate the SQL which makes the schema changes.That in-memory structure is also used to work out what the differences are between your models and the current state of your migrations; Django runs through all the changes, in order, on an in-memory set of models to come up with the state of your models last time you ran makemigrations. It then uses these models to compare against the ones in your models.py files to work out what you have changed.You should rarely, if ever, need to edit migration files by hand, but it s entirely possible to write them manually if you need to. Some of the more complex operations are not autodetectable and are only available via a hand-written migration, so don t be scared about editing them if you have to.You can t modify the number of positional arguments in an already migrated custom field without raising a TypeError. The old migration will call the modified __init__ method with the old signature. So if you need a new argument, please create a keyword argument and add something like assert 'argument_name' in kwargs in the constructor.You can optionally serialize managers into migrations and have them available in RunPython operations. This is done by defining a use_in_migrations attribute on the manager class:If you are using the from_queryset() function to dynamically generate a manager class, you need to inherit from the generated class to make it importable:Please refer to the notes about Historical models in migrations to see the implications that come along.The  initial migrations  for an app are the migrations that create the first version of that app s tables. Usually an app will have just one initial migration, but in some cases of complex model interdependencies it may have two or more.Initial migrations are marked with an initial = True class attribute on the migration class. If an initial class attribute isn t found, a migration will be considered  initial  if it is the first migration in the app (i.e. if it has no dependencies on any other migration in the same app).When the migrate --fake-initial option is used, these initial migrations are treated specially. For an initial migration that creates one or more tables (CreateModel operation), Django checks that all of those tables already exist in the database and fake-applies the migration if so. Similarly, for an initial migration that adds one or more fields (AddField operation), Django checks that all of the respective columns already exist in the database and fake-applies the migration if so. Without --fake-initial, initial migrations are treated no differently from any other migration.As previously discussed, you may need to linearize migrations manually when two development branches are joined. While editing migration dependencies, you can inadvertently create an inconsistent history state where a migration has been applied but some of its dependencies haven t. This is a strong indication that the dependencies are incorrect, so Django will refuse to run migrations or make new migrations until it s fixed. When using multiple databases, you can use the allow_migrate() method of database routers to control which databases makemigrations checks for consistent history."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#adding-migrations-to-apps", "para": "Adding migrations to new apps is straightforward - they come preconfigured to accept migrations, and so just run makemigrations once you ve made some changes.If your app already has models and database tables, and doesn t have migrations yet (for example, you created it against a previous Django version), you ll need to convert it to use migrations; this is a simple process:This will make a new initial migration for your app. Now, run python manage.py migrate --fake-initial, and Django will detect that you have an initial migration and that the tables it wants to create already exist, and will mark the migration as already applied. (Without the migrate --fake-initial flag, the command would error out because the tables it wants to create already exist.)Note that this only works given two things:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#historical-models", "para": "When you run migrations, Django is working from historical versions of your models stored in the migration files. If you write Python code using the RunPython operation, or if you have allow_migrate methods on your database routers, you need to use these historical model versions rather than importing them directly.WarningIf you import models directly rather than using the historical models, your migrations may work initially but will fail in the future when you try to re-run old migrations (commonly, when you set up a new installation and run through all the migrations to set up the database).This means that historical model problems may not be immediately obvious. If you run into this kind of failure, it s OK to edit the migration to use the historical models rather than direct imports and commit those changes.Because it s impossible to serialize arbitrary Python code, these historical models will not have any custom methods that you have defined. They will, however, have the same fields, relationships, managers (limited to those with use_in_migrations = True) and Meta options (also versioned, so they may be different from your current ones).WarningThis means that you will NOT have custom save() methods called on objects when you access them in migrations, and you will NOT have any custom constructors or instance methods. Plan appropriately!References to functions in field options such as upload_to and limit_choices_to and model manager declarations with managers having use_in_migrations = True are serialized in migrations, so the functions and classes will need to be kept around for as long as there is a migration referencing them. Any custom model fields will also need to be kept, since these are imported directly by migrations.In addition, the base classes of the model are just stored as pointers, so you must always keep base classes around for as long as there is a migration that contains a reference to them. On the plus side, methods and managers from these base classes inherit normally, so if you absolutely need access to these you can opt to move them into a superclass.To remove old references, you can squash migrations or, if there aren t many references, copy them into the migration files."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#considerations-when-removing-model-fields", "para": "Similar to the  references to historical functions  considerations described in the previous section, removing custom model fields from your project or third-party app will cause a problem if they are referenced in old migrations.To help with this situation, Django provides some model field attributes to assist with model field deprecation using the system checks framework.Add the system_check_deprecated_details attribute to your model field similar to the following:After a deprecation period of your choosing (two or three feature releases for fields in Django itself), change the system_check_deprecated_details attribute to system_check_removed_details and update the dictionary similar to:You should keep the field s methods that are required for it to operate in database migrations such as __init__(), deconstruct(), and get_internal_type(). Keep this stub field for as long as any migrations which reference the field exist. For example, after squashing migrations and removing the old ones, you should be able to remove the field completely."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#data-migrations", "para": "As well as changing the database schema, you can also use migrations to change the data in the database itself, in conjunction with the schema if you want.Migrations that alter data are usually called  data migrations ; they re best written as separate migrations, sitting alongside your schema migrations.Django can t automatically generate data migrations for you, as it does with schema migrations, but it s not very hard to write them. Migration files in Django are made up of Operations, and the main operation you use for data migrations is RunPython.To start, make an empty migration file you can work from (Django will put the file in the right place, suggest a name, and add dependencies for you):Then, open up the file; it should look something like this:Now, all you need to do is create a new function and have RunPython use it. RunPython expects a callable as its argument which takes two arguments - the first is an app registry that has the historical versions of all your models loaded into it to match where in your history the migration sits, and the second is a SchemaEditor, which you can use to manually effect database schema changes (but beware, doing this can confuse the migration autodetector!)Let s write a simple migration that populates our new name field with the combined values of first_name and last_name (we ve come to our senses and realized that not everyone has first and last names). All we need to do is use the historical model and iterate over the rows:Once that s done, we can just run python manage.py migrate as normal and the data migration will run in place alongside other migrations.You can pass a second callable to RunPython to run whatever logic you want executed when migrating backwards. If this callable is omitted, migrating backwards will raise an exception.When writing a RunPython function that uses models from apps other than the one in which the migration is located, the migration s dependencies attribute should include the latest migration of each app that is involved, otherwise you may get an error similar to: LookupError: No installed app with label 'myappname' when you try to retrieve the model in the RunPython function using apps.get_model().In the following example, we have a migration in app1 which needs to use models in app2. We aren t concerned with the details of move_m1 other than the fact it will need to access models from both apps. Therefore we ve added a dependency that specifies the last migration of app2:If you re interested in the more advanced migration operations, or want to be able to write your own, see the migration operations reference and the  how-to  on writing migrations."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#squashing-migrations", "para": "You are encouraged to make migrations freely and not worry about how many you have; the migration code is optimized to deal with hundreds at a time without much slowdown. However, eventually you will want to move back from having several hundred migrations to just a few, and that s where squashing comes in.Squashing is the act of reducing an existing set of many migrations down to one (or sometimes a few) migrations which still represent the same changes.Django does this by taking all of your existing migrations, extracting their Operations and putting them all in sequence, and then running an optimizer over them to try and reduce the length of the list - for example, it knows that CreateModel and DeleteModel cancel each other out, and it knows that AddField can be rolled into CreateModel.Once the operation sequence has been reduced as much as possible - the amount possible depends on how closely intertwined your models are and if you have any RunSQL or RunPython operations (which can t be optimized through unless they are marked as elidable) - Django will then write it back out into a new set of migration files.These files are marked to say they replace the previously-squashed migrations, so they can coexist with the old migration files, and Django will intelligently switch between them depending where you are in the history. If you re still part-way through the set of migrations that you squashed, it will keep using them until it hits the end and then switch to the squashed history, while new installs will just use the new squashed migration and skip all the old ones.This enables you to squash and not mess up systems currently in production that aren t fully up-to-date yet. The recommended process is to squash, keeping the old files, commit and release, wait until all systems are upgraded with the new release (or if you re a third-party project, just ensure your users upgrade releases in order without skipping any), and then remove the old files, commit and do a second release.The command that backs all this is squashmigrations - just pass it the app label and migration name you want to squash up to, and it ll get to work:Use the squashmigrations --squashed-name option if you want to set the name of the squashed migration rather than use an autogenerated one.Note that model interdependencies in Django can get very complex, and squashing may result in migrations that do not run; either mis-optimized (in which case you can try again with --no-optimize, though you should also report an issue), or with a CircularDependencyError, in which case you can manually resolve it.To manually resolve a CircularDependencyError, break out one of the ForeignKeys in the circular dependency loop into a separate migration, and move the dependency on the other app with it. If you re unsure, see how makemigrations deals with the problem when asked to create brand new migrations from your models. In a future release of Django, squashmigrations will be updated to attempt to resolve these errors itself.Once you ve squashed your migration, you should then commit it alongside the migrations it replaces and distribute this change to all running instances of your application, making sure that they run migrate to store the change in their database.You must then transition the squashed migration to a normal migration by:NoteOnce you ve squashed a migration, you should not then re-squash that squashed migration until you have fully transitioned it to a normal migration."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#serializing-values", "para": "Migrations are just Python files containing the old definitions of your models - thus, to write them, Django must take the current state of your models and serialize them out into a file.While Django can serialize most things, there are some things that we just can t serialize out into a valid Python representation - there s no Python standard for how a value can be turned back into code (repr() only works for basic values, and doesn t specify import paths).Django can serialize the following:Serialization support for functools.partialmethod was added.Serialization support for NoneType was added.Django cannot serialize:You can serialize other types by writing a custom serializer. For example, if Django didn t serialize Decimal by default, you could do this:The first argument of MigrationWriter.register_serializer() is a type or iterable of types that should use the serializer.The serialize() method of your serializer must return a string of how the value should appear in migrations and a set of any imports that are needed in the migration.You can let Django serialize your own custom class instances by giving the class a deconstruct() method. It takes no arguments, and should return a tuple of three things (path, args, kwargs):NoteThis return value is different from the deconstruct() method for custom fields which returns a tuple of four items.Django will write out the value as an instantiation of your class with the given arguments, similar to the way it writes out references to Django fields.To prevent a new migration from being created each time makemigrations is run, you should also add a __eq__() method to the decorated class. This function will be called by Django s migration framework to detect changes between states.As long as all of the arguments to your class  constructor are themselves serializable, you can use the @deconstructible class decorator from django.utils.deconstruct to add the deconstruct() method:The decorator adds logic to capture and preserve the arguments on their way into your constructor, and then returns those arguments exactly when deconstruct() is called."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/migrations/#supporting-multiple-django-versions", "para": "If you are the maintainer of a third-party app with models, you may need to ship migrations that support multiple Django versions. In this case, you should always run makemigrations with the lowest Django version you wish to support.The migrations system will maintain backwards-compatibility according to the same policy as the rest of Django, so migration files generated on Django X.Y should run unchanged on Django X.Y+1. The migrations system does not promise forwards-compatibility, however. New features may be added, and migration files generated with newer versions of Django may not work on older versions.See also"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/migration-operations/#schema-operations", "para": "Creates a new model in the project history and a corresponding table in the database to match it.name is the model name, as would be written in the models.py file.fields is a list of 2-tuples of (field_name, field_instance). The field instance should be an unbound field (so just models.CharField(...), rather than a field taken from another model).options is an optional dictionary of values from the model s Meta class.bases is an optional list of other classes to have this model inherit from; it can contain both class objects as well as strings in the format \"appname.ModelName\" if you want to depend on another model (so you inherit from the historical version). If it s not supplied, it defaults to just inheriting from the standard models.Model.managers takes a list of 2-tuples of (manager_name, manager_instance). The first manager in the list will be the default manager for this model during migrations.Deletes the model from the project history and its table from the database.Renames the model from an old name to a new one.You may have to manually add this if you change the model s name and quite a few of its fields at once; to the autodetector, this will look like you deleted a model with the old name and added a new one with a different name, and the migration it creates will lose any data in the old table.Changes the model s table name (the db_table option on the Meta subclass).Changes the model s set of unique constraints (the unique_together option on the Meta subclass).Changes the model s set of custom indexes (the index_together option on the Meta subclass).Makes or deletes the _order column needed for the order_with_respect_to option on the Meta subclass.Stores changes to miscellaneous model options (settings on a model s Meta) like permissions and verbose_name. Does not affect the database, but persists these changes for RunPython instances to use. options should be a dictionary mapping option names to values.Alters the managers that are available during migrations.Adds a field to a model. model_name is the model s name, name is the field s name, and field is an unbound Field instance (the thing you would put in the field declaration in models.py - for example, models.IntegerField(null=True).The preserve_default argument indicates whether the field s default value is permanent and should be baked into the project state (True), or if it is temporary and just for this migration (False) - usually because the migration is adding a non-nullable field to a table and needs a default value to put into existing rows. It does not affect the behavior of setting defaults in the database directly - Django never sets database defaults and always applies them in the Django ORM code.Removes a field from a model.Bear in mind that when reversed, this is actually adding a field to a model. The operation is reversible (apart from any data loss, which of course is irreversible) if the field is nullable or if it has a default value that can be used to populate the recreated column. If the field is not nullable and does not have a default value, the operation is irreversible.Alters a field s definition, including changes to its type, null, unique, db_column and other field attributes.The preserve_default argument indicates whether the field s default value is permanent and should be baked into the project state (True), or if it is temporary and just for this migration (False) - usually because the migration is altering a nullable field to a non-nullable one and needs a default value to put into existing rows. It does not affect the behavior of setting defaults in the database directly - Django never sets database defaults and always applies them in the Django ORM code.Note that not all changes are possible on all databases - for example, you cannot change a text-type field like models.TextField() into a number-type field like models.IntegerField() on most databases.Changes a field s name (and, unless db_column is set, its column name).Creates an index in the database table for the model with model_name. index is an instance of the Index class.Removes the index named name from the model with model_name.Creates a constraint in the database table for the model with model_name. constraint is an instance of CheckConstraint.Removes the constraint named name from the model with model_name."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/migration-operations/#special-operations", "para": "Allows running of arbitrary SQL on the database - useful for more advanced features of database backends that Django doesn t support directly, like partial indexes.sql, and reverse_sql if provided, should be strings of SQL to run on the database. On most database backends (all but PostgreSQL), Django will split the SQL into individual statements prior to executing them.You can also pass a list of strings or 2-tuples. The latter is used for passing queries and parameters in the same way as cursor.execute(). These three operations are equivalent:If you want to include literal percent signs in the query, you have to double them if you are passing parameters.The reverse_sql queries are executed when the migration is unapplied, so you can reverse the changes done in the forwards queries:The state_operations argument is so you can supply operations that are equivalent to the SQL in terms of project state; for example, if you are manually creating a column, you should pass in a list containing an AddField operation here so that the autodetector still has an up-to-date state of the model (otherwise, when you next run makemigrations, it won t see any operation that adds that field and so will try to run it again). For example:The optional hints argument will be passed as **hints to the allow_migrate() method of database routers to assist them in making routing decisions. See Hints for more details on database hints.The optional elidable argument determines whether or not the operation will be removed (elided) when squashing migrations.Pass the RunSQL.noop attribute to sql or reverse_sql when you want the operation not to do anything in the given direction. This is especially useful in making the operation reversible.Runs custom Python code in a historical context. code (and reverse_code if supplied) should be callable objects that accept two arguments; the first is an instance of django.apps.registry.Apps containing historical models that match the operation s place in the project history, and the second is an instance of SchemaEditor.The reverse_code argument is called when unapplying migrations. This callable should undo what is done in the code callable so that the migration is reversible.The optional hints argument will be passed as **hints to the allow_migrate() method of database routers to assist them in making a routing decision. See Hints for more details on database hints.The optional elidable argument determines whether or not the operation will be removed (elided) when squashing migrations.You are advised to write the code as a separate function above the Migration class in the migration file, and just pass it to RunPython. Here s an example of using RunPython to create some initial objects on a Country model:This is generally the operation you would use to create data migrations, run custom data updates and alterations, and anything else you need access to an ORM and/or Python code for.If you re upgrading from South, this is basically the South pattern as an operation - one or two methods for forwards and backwards, with an ORM and schema operations available. Most of the time, you should be able to translate the orm.Model or orm[\"appname\", \"Model\"] references from South directly into apps.get_model(\"appname\", \"Model\") references here and leave most of the rest of the code unchanged for data migrations. However, apps will only have references to models in the current app unless migrations in other apps are added to the migration s dependencies.Much like RunSQL, ensure that if you change schema inside here you re either doing it outside the scope of the Django model system (e.g. triggers) or that you use SeparateDatabaseAndState to add in operations that will reflect your changes to the model state - otherwise, the versioned ORM and the autodetector will stop working correctly.By default, RunPython will run its contents inside a transaction on databases that do not support DDL transactions (for example, MySQL and Oracle). This should be safe, but may cause a crash if you attempt to use the schema_editor provided on these backends; in this case, pass atomic=False to the RunPython operation.On databases that do support DDL transactions (SQLite and PostgreSQL), RunPython operations do not have any transactions automatically added besides the transactions created for each migration. Thus, on PostgreSQL, for example, you should avoid combining schema changes and RunPython operations in the same migration or you may hit errors like OperationalError: cannot ALTER TABLE \"mytable\" because it has pending trigger events.If you have a different database and aren t sure if it supports DDL transactions, check the django.db.connection.features.can_rollback_ddl attribute.If the RunPython operation is part of a non-atomic migration, the operation will only be executed in a transaction if atomic=True is passed to the RunPython operation.WarningRunPython does not magically alter the connection of the models for you; any model methods you call will go to the default database unless you give them the current database alias (available from schema_editor.connection.alias, where schema_editor is the second argument to your function).Pass the RunPython.noop method to code or reverse_code when you want the operation not to do anything in the given direction. This is especially useful in making the operation reversible.A highly specialized operation that let you mix and match the database (schema-changing) and state (autodetector-powering) aspects of operations.It accepts two lists of operations, and when asked to apply state will use the state list, and when asked to apply changes to the database will use the database list. Do not use this operation unless you re very sure you know what you re doing."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/migration-operations/#writing-your-own", "para": "Operations have a relatively simple API, and they re designed so that you can easily write your own to supplement the built-in Django ones. The basic structure of an Operation looks like this:You can take this template and work from it, though we suggest looking at the built-in Django operations in django.db.migrations.operations - they re easy to read and cover a lot of the example usage of semi-internal aspects of the migration framework like ProjectState and the patterns used to get historical models, as well as ModelState and the patterns used to mutate historical models in state_forwards().Some things to note:You don t need to learn too much about ProjectState to just write simple migrations; just know that it has an apps property that gives access to an app registry (which you can then call get_model on).database_forwards and database_backwards both get two states passed to them; these just represent the difference the state_forwards method would have applied, but are given to you for convenience and speed reasons.If you want to work with model classes or model instances from the from_state argument in database_forwards() or database_backwards(), you must render model states using the clear_delayed_apps_cache() method to make related models available:to_state in the database_backwards method is the older state; that is, the one that will be the current state once the migration has finished reversing.You might see implementations of references_model on the built-in operations; this is part of the autodetection code and does not matter for custom operations.WarningFor performance reasons, the Field instances in ModelState.fields are reused across migrations. You must never change the attributes on these instances. If you need to mutate a field in state_forwards(), you must remove the old instance from ModelState.fields and add a new instance in its place. The same is true for the Manager instances in ModelState.managers.As a simple example, let s make an operation that loads PostgreSQL extensions (which contain some of PostgreSQL s more exciting features). It s simple enough; there s no model state changes, and all it does is run one command:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/schema-editor/#methods", "para": "Executes the SQL statement passed in, with parameters if supplied. This is a simple wrapper around the normal database cursors that allows capture of the SQL to a .sql file if the user wishes.Creates a new table in the database for the provided model, along with any unique constraints or indexes it requires.Drops the model s table in the database along with any unique constraints or indexes it has.Adds index to model s table.Removes index from model s table.Changes a model s unique_together value; this will add or remove unique constraints from the model s table until they match the new value.Changes a model s index_together value; this will add or remove indexes from the model s table until they match the new value.Renames the model s table from old_db_table to new_db_table.Moves the model s table from one tablespace to another.Adds a column (or sometimes multiple) to the model s table to represent the field. This will also add indexes or a unique constraint if the field has db_index=True or unique=True.If the field is a ManyToManyField without a value for through, instead of creating a column, it will make a table to represent the relationship. If through is provided, it is a no-op.If the field is a ForeignKey, this will also add the foreign key constraint to the column.Removes the column(s) representing the field from the model s table, along with any unique constraints, foreign key constraints, or indexes caused by that field.If the field is a ManyToManyField without a value for through, it will remove the table created to track the relationship. If through is provided, it is a no-op.This transforms the field on the model from the old field to the new one. This includes changing the name of the column (the db_column attribute), changing the type of the field (if the field class changes), changing the NULL status of the field, adding or removing field-only unique constraints and indexes, changing primary key, and changing the destination of ForeignKey constraints.The most common transformation this cannot do is transforming a ManyToManyField into a normal Field or vice-versa; Django cannot do this without losing data, and so it will refuse to do it. Instead, remove_field() and add_field() should be called separately.If the database has the supports_combined_alters, Django will try and do as many of these in a single database call as possible; otherwise, it will issue a separate ALTER statement for each change, but will not issue ALTERs where no change is required (as South often did)."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/schema-editor/#attributes", "para": "All attributes should be considered read-only unless stated otherwise.A connection object to the database. A useful attribute of the connection is alias which can be used to determine the name of the database being accessed.This is useful when doing data migrations for migrations with multiple databases."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/writing-migrations/#data-migrations-and-multiple-databases", "para": "When using multiple databases, you may need to figure out whether or not to run a migration against a particular database. For example, you may want to only run a migration on a particular database.In order to do that you can check the database connection s alias inside a RunPython operation by looking at the schema_editor.connection.alias attribute:You can also provide hints that will be passed to the allow_migrate() method of database routers as **hints:Then, to leverage this in your migrations, do the following:If your RunPython or RunSQL operation only affects one model, it s good practice to pass model_name as a hint to make it as transparent as possible to the router. This is especially important for reusable and third-party apps."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/writing-migrations/#migrations-that-add-unique-fields", "para": "Applying a  plain  migration that adds a unique non-nullable field to a table with existing rows will raise an error because the value used to populate existing rows is generated only once, thus breaking the unique constraint.Therefore, the following steps should be taken. In this example, we ll add a non-nullable UUIDField with a default value. Modify the respective field according to your needs.Add the field on your model with default=uuid.uuid4 and unique=True arguments (choose an appropriate default for the type of the field you re adding).Run the makemigrations command. This should generate a migration with an AddField operation.Generate two empty migration files for the same app by running makemigrations myapp --empty twice. We ve renamed the migration files to give them meaningful names in the examples below.Copy the AddField operation from the auto-generated migration (the first of the three new files) to the last migration, change AddField to AlterField, and add imports of uuid and models. For example:Edit the first migration file. The generated migration class should look similar to this:Change unique=True to null=True   this will create the intermediary null field and defer creating the unique constraint until we ve populated unique values on all the rows.In the first empty migration file, add a RunPython or RunSQL operation to generate a unique value (UUID in the example) for each existing row. Also add an import of uuid. For example:Now you can apply the migrations as usual with the migrate command.Note there is a race condition if you allow objects to be created while this migration is running. Objects created after the AddField and before RunPython will have their original uuid s overwritten.On databases that support DDL transactions (SQLite and PostgreSQL), migrations will run inside a transaction by default. For use cases such as performing data migrations on large tables, you may want to prevent a migration from running in a transaction by setting the atomic attribute to False:Within such a migration, all operations are run without a transaction. It s possible to execute parts of the migration inside a transaction using atomic() or by passing atomic=True to RunPython.Here s an example of a non-atomic data migration that updates a large table in smaller batches:The atomic attribute doesn t have an effect on databases that don t support DDL transactions (e.g. MySQL, Oracle). (MySQL s atomic DDL statement support refers to individual statements rather than multiple statements wrapped in a transaction that can be rolled back.)"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/writing-migrations/#controlling-the-order-of-migrations", "para": "Django determines the order in which migrations should be applied not by the filename of each migration, but by building a graph using two properties on the Migration class: dependencies and run_before.If you ve used the makemigrations command you ve probably already seen dependencies in action because auto-created migrations have this defined as part of their creation process.The dependencies property is declared like this:Usually this will be enough, but from time to time you may need to ensure that your migration runs before other migrations. This is useful, for example, to make third-party apps  migrations run after your AUTH_USER_MODEL replacement.To achieve this, place all migrations that should depend on yours in the run_before attribute on your Migration class:Prefer using dependencies over run_before when possible. You should only use run_before if it is undesirable or impractical to specify dependencies in the migration which you want to run after the one you are writing."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/writing-migrations/#migrating-data-between-third-party-apps", "para": "You can use a data migration to move data from one third-party application to another.If you plan to remove the old app later, you ll need to set the dependencies property based on whether or not the old app is installed. Otherwise, you ll have missing dependencies once you uninstall the old app. Similarly, you ll need to catch LookupError in the apps.get_model() call that retrieves models from the old app. This approach allows you to deploy your project anywhere without first installing and then uninstalling the old app.Here s a sample migration:Also consider what you want to happen when the migration is unapplied. You could either do nothing (as in the example above) or remove some or all of the data from the new application. Adjust the second argument of the RunPython operation accordingly."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/writing-migrations/#changing-an-unmanaged-model-to-managed", "para": "If you want to change an unmanaged model (managed=False) to managed, you must remove managed=False and generate a migration before making other schema-related changes to the model, since schema changes that appear in the migration that contains the operation to change Meta.managed may not be applied."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/managers/#manager-names", "para": "By default, Django adds a Manager with the name objects to every Django model class. However, if you want to use objects as a field name, or if you want to use a name other than objects for the Manager, you can rename it on a per-model basis. To rename the Manager for a given class, define a class attribute of type models.Manager() on that model. For example:Using this example model, Person.objects will generate an AttributeError exception, but Person.people.all() will provide a list of all Person objects."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/managers/#custom-managers", "para": "You can use a custom Manager in a particular model by extending the base Manager class and instantiating your custom Manager in your model.There are two reasons you might want to customize a Manager: to add extra Manager methods, and/or to modify the initial QuerySet the Manager returns.Adding extra Manager methods is the preferred way to add  table-level  functionality to your models. (For  row-level  functionality   i.e., functions that act on a single instance of a model object   use Model methods, not custom Manager methods.)A custom Manager method can return anything you want. It doesn t have to return a QuerySet.For example, this custom Manager offers a method with_counts(), which returns a list of all OpinionPoll objects, each with an extra num_responses attribute that is the result of an aggregate query:With this example, you d use OpinionPoll.objects.with_counts() to return that list of OpinionPoll objects with num_responses attributes.Another thing to note about this example is that Manager methods can access self.model to get the model class to which they re attached.A Manager s base QuerySet returns all objects in the system. For example, using this model: the statement Book.objects.all() will return all books in the database.You can override a Manager s base QuerySet by overriding the Manager.get_queryset() method. get_queryset() should return a QuerySet with the properties you require.For example, the following model has two Managers   one that returns all objects, and one that returns only the books by Roald Dahl:With this sample model, Book.objects.all() will return all books in the database, but Book.dahl_objects.all() will only return the ones written by Roald Dahl.Of course, because get_queryset() returns a QuerySet object, you can use filter(), exclude() and all the other QuerySet methods on it. So these statements are all legal:This example also pointed out another interesting technique: using multiple managers on the same model. You can attach as many Manager() instances to a model as you d like. This is an easy way to define common  filters  for your models.For example:This example allows you to request Person.authors.all(), Person.editors.all(), and Person.people.all(), yielding predictable results.If you use custom Manager objects, take note that the first Manager Django encounters (in the order in which they re defined in the model) has a special status. Django interprets the first Manager defined in a class as the  default  Manager, and several parts of Django (including dumpdata) will use that Manager exclusively for that model. As a result, it s a good idea to be careful in your choice of default manager in order to avoid a situation where overriding get_queryset() results in an inability to retrieve objects you d like to work with.You can specify a custom default manager using Meta.default_manager_name.If you re writing some code that must handle an unknown model, for example, in a third-party app that implements a generic view, use this manager (or _base_manager) rather than assuming the model has an objects manager.By default, Django uses an instance of the Model._base_manager manager class when accessing related objects (i.e. choice.question), not the _default_manager on the related object. This is because Django needs to be able to retrieve the related object, even if it would otherwise be filtered out (and hence be inaccessible) by the default manager.If the normal base manager class (django.db.models.Manager) isn t appropriate for your circumstances, you can tell Django which class to use by setting Meta.base_manager_name.Base managers aren t used when querying on related models. For example, if the Question model from the tutorial had a deleted field and a base manager that filters out instances with deleted=True, a queryset like Choice.objects.filter(question__name__startswith='What') would include choices related to deleted questions.This manager is used to access objects that are related to from some other model. In those situations, Django has to be able to see all the objects for the model it is fetching, so that anything which is referred to can be retrieved.If you override the get_queryset() method and filter out any rows, Django will return incorrect results. Don t do that. A manager that filters results in get_queryset() is not appropriate for use as a base manager.While most methods from the standard QuerySet are accessible directly from the Manager, this is only the case for the extra methods defined on a custom QuerySet if you also implement them on the Manager:This example allows you to call both authors() and editors() directly from the manager Person.people.In lieu of the above approach which requires duplicating methods on both the QuerySet and the Manager, QuerySet.as_manager() can be used to create an instance of Manager with a copy of a custom QuerySet s methods:The Manager instance created by QuerySet.as_manager() will be virtually identical to the PersonManager from the previous example.Not every QuerySet method makes sense at the Manager level; for instance we intentionally prevent the QuerySet.delete() method from being copied onto the Manager class.Methods are copied according to the following rules:For example:For advanced usage you might want both a custom Manager and a custom QuerySet. You can do that by calling Manager.from_queryset() which returns a subclass of your base Manager with a copy of the custom QuerySet methods:You may also store the generated class into a variable:Here s how Django handles custom managers and model inheritance:These rules provide the necessary flexibility if you want to install a collection of custom managers on a group of models, via an abstract base class, but still customize the default manager. For example, suppose you have this base class:If you use this directly in a subclass, objects will be the default manager if you declare no managers in the base class:If you want to inherit from AbstractBase, but provide a different default manager, you can provide the default manager on the child class:Here, default_manager is the default. The objects manager is still available, since it s inherited. It just isn t used as the default.Finally for this example, suppose you want to add extra managers to the child class, but still use the default from AbstractBase. You can t add the new manager directly in the child class, as that would override the default and you would have to also explicitly include all the managers from the abstract base class. The solution is to put the extra managers in another base class and introduce it into the inheritance hierarchy after the defaults:Note that while you can define a custom manager on the abstract model, you can t invoke any methods using the abstract model. That is:is legal, but:will raise an exception. This is because managers are intended to encapsulate logic for managing collections of objects. Since you can t have a collection of abstract objects, it doesn t make sense to be managing them. If you have functionality that applies to the abstract model, you should put that functionality in a staticmethod or classmethod on the abstract model.Whatever features you add to your custom Manager, it must be possible to make a shallow copy of a Manager instance; i.e., the following code must work:Django makes shallow copies of manager objects during certain queries; if your Manager cannot be copied, those queries will fail.This won t be an issue for most custom managers. If you are just adding simple methods to your Manager, it is unlikely that you will inadvertently make instances of your Manager uncopyable. However, if you re overriding __getattr__ or some other private method of your Manager object that controls object state, you should ensure that you don t affect the ability of your Manager to be copied."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/sql/#performing-raw-queries", "para": "The raw() manager method can be used to perform raw SQL queries that return model instances:This method takes a raw SQL query, executes it, and returns a django.db.models.query.RawQuerySet instance. This RawQuerySet instance can be iterated over just like a normal QuerySet to provide object instances.This is best illustrated with an example. Suppose you have the following model:You could then execute custom SQL like so:Of course, this example isn t very exciting   it s exactly the same as running Person.objects.all(). However, raw() has a bunch of other options that make it very powerful.Model table namesWhere did the name of the Person table come from in that example?By default, Django figures out a database table name by joining the model s  app label    the name you used in manage.py startapp   to the model s class name, with an underscore between them. In the example we ve assumed that the Person model lives in an app named myapp, so its table would be myapp_person.For more details check out the documentation for the db_table option, which also lets you manually set the database table name.WarningNo checking is done on the SQL statement that is passed in to .raw(). Django expects that the statement will return a set of rows from the database, but does nothing to enforce that. If the query does not return rows, a (possibly cryptic) error will result.WarningIf you are performing queries on MySQL, note that MySQL s silent type coercion may cause unexpected results when mixing types. If you query on a string type column, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. For example, if your table contains the values 'abc', 'def' and you query for WHERE mycolumn=0, both rows will match. To prevent this, perform the correct typecasting before using the value in a query.raw() automatically maps fields in the query to fields on the model.The order of fields in your query doesn t matter. In other words, both of the following queries work identically:Matching is done by name. This means that you can use SQL s AS clauses to map fields in the query to model fields. So if you had some other table that had Person data in it, you could easily map it into Person instances:As long as the names match, the model instances will be created correctly.Alternatively, you can map fields in the query to model fields using the translations argument to raw(). This is a dictionary mapping names of fields in the query to names of fields on the model. For example, the above query could also be written:raw() supports indexing, so if you need only the first result you can write:However, the indexing and slicing are not performed at the database level. If you have a large number of Person objects in your database, it is more efficient to limit the query at the SQL level:Fields may also be left out:The Person objects returned by this query will be deferred model instances (see defer()). This means that the fields that are omitted from the query will be loaded on demand. For example:From outward appearances, this looks like the query has retrieved both the first name and last name. However, this example actually issued 3 queries. Only the first names were retrieved by the raw() query   the last names were both retrieved on demand when they were printed.There is only one field that you can t leave out - the primary key field. Django uses the primary key to identify model instances, so it must always be included in a raw query. An InvalidQuery exception will be raised if you forget to include the primary key.You can also execute queries containing fields that aren t defined on the model. For example, we could use PostgreSQL s age() function to get a list of people with their ages calculated by the database:You can often avoid using raw SQL to compute annotations by instead using a Func() expression.If you need to perform parameterized queries, you can use the params argument to raw():params is a list or dictionary of parameters. You ll use %s placeholders in the query string for a list, or %(key)s placeholders for a dictionary (where key is replaced by a dictionary key, of course), regardless of your database engine.  Such placeholders will be replaced with parameters from the params argument.NoteDictionary params are not supported with the SQLite backend; with this backend, you must pass parameters as a list.WarningDo not use string formatting on raw queries or quote placeholders in your SQL strings!It s tempting to write the above query as:You might also think you should write your query like this (with quotes around %s):Don t make either of these mistakes.As discussed in SQL injection protection, using the params argument and leaving the placeholders unquoted protects you from SQL injection attacks, a common exploit where attackers inject arbitrary SQL into your database. If you use string interpolation or quote the placeholder, you re at risk for SQL injection."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/sql/#executing-custom-sql-directly", "para": "Sometimes even Manager.raw() isn t quite enough: you might need to perform queries that don t map cleanly to models, or directly execute UPDATE, INSERT, or DELETE queries.In these cases, you can always access the database directly, routing around the model layer entirely.The object django.db.connection represents the default database connection. To use the database connection, call connection.cursor() to get a cursor object. Then, call cursor.execute(sql, [params]) to execute the SQL and cursor.fetchone() or cursor.fetchall() to return the resulting rows.For example:To protect against SQL injection, you must not include quotes around the %s placeholders in the SQL string.Note that if you want to include literal percent signs in the query, you have to double them in the case you are passing parameters:If you are using more than one database, you can use django.db.connections to obtain the connection (and cursor) for a specific database. django.db.connections is a dictionary-like object that allows you to retrieve a specific connection using its alias:By default, the Python DB API will return results without their field names, which means you end up with a list of values, rather than a dict. At a small performance and memory cost, you can return results as a dict by using something like this:Another option is to use collections.namedtuple() from the Python standard library. A namedtuple is a tuple-like object that has fields accessible by attribute lookup; it s also indexable and iterable. Results are immutable and accessible by field names or indices, which might be useful:Here is an example of the difference between the three:connection and cursor mostly implement the standard Python DB-API described in PEP 249   except when it comes to transaction handling.If you re not familiar with the Python DB-API, note that the SQL statement in cursor.execute() uses placeholders, \"%s\", rather than adding parameters directly within the SQL. If you use this technique, the underlying database library will automatically escape your parameters as necessary.Also note that Django expects the \"%s\" placeholder, not the \"?\" placeholder, which is used by the SQLite Python bindings. This is for the sake of consistency and sanity.Using a cursor as a context manager:is equivalent to:Calls a database stored procedure with the given name. A sequence (params) or dictionary (kparams) of input parameters may be provided. Most databases don t support kparams. Of Django s built-in backends, only Oracle supports it.For example, given this stored procedure in an Oracle database:This will call it:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/transactions/#managing-database-transactions", "para": "Django s default behavior is to run in autocommit mode. Each query is immediately committed to the database, unless a transaction is active. See below for details.Django uses transactions or savepoints automatically to guarantee the integrity of ORM operations that require multiple queries, especially delete() and update() queries.Django s TestCase class also wraps each test in a transaction for performance reasons.A common way to handle transactions on the web is to wrap each request in a transaction. Set ATOMIC_REQUESTS to True in the configuration of each database for which you want to enable this behavior.It works like this. Before calling a view function, Django starts a transaction. If the response is produced without problems, Django commits the transaction. If the view produces an exception, Django rolls back the transaction.You may perform subtransactions using savepoints in your view code, typically with the atomic() context manager. However, at the end of the view, either all or none of the changes will be committed.WarningWhile the simplicity of this transaction model is appealing, it also makes it inefficient when traffic increases. Opening a transaction for every view has some overhead. The impact on performance depends on the query patterns of your application and on how well your database handles locking.Per-request transactions and streaming responsesWhen a view returns a StreamingHttpResponse, reading the contents of the response will often execute code to generate the content. Since the view has already returned, such code runs outside of the transaction.Generally speaking, it isn t advisable to write to the database while generating a streaming response, since there s no sensible way to handle errors after starting to send the response.In practice, this feature simply wraps every view function in the atomic() decorator described below.Note that only the execution of your view is enclosed in the transactions. Middleware runs outside of the transaction, and so does the rendering of template responses.When ATOMIC_REQUESTS is enabled, it s still possible to prevent views from running in a transaction.This decorator will negate the effect of ATOMIC_REQUESTS for a given view:It only works if it s applied to the view itself.Django provides a single API to control database transactions.Atomicity is the defining property of database transactions. atomic allows us to create a block of code within which the atomicity on the database is guaranteed. If the block of code is successfully completed, the changes are committed to the database. If there is an exception, the changes are rolled back.atomic blocks can be nested. In this case, when an inner block completes successfully, its effects can still be rolled back if an exception is raised in the outer block at a later point.atomic is usable both as a decorator:and as a context manager:Wrapping atomic in a try/except block allows for natural handling of integrity errors:In this example, even if generate_relationships() causes a database error by breaking an integrity constraint, you can execute queries in add_children(), and the changes from create_parent() are still there. Note that any operations attempted in generate_relationships() will already have been rolled back safely when handle_exception() is called, so the exception handler can also operate on the database if necessary.Avoid catching exceptions inside atomic!When exiting an atomic block, Django looks at whether it s exited normally or with an exception to determine whether to commit or roll back. If you catch and handle exceptions inside an atomic block, you may hide from Django the fact that a problem has happened. This can result in unexpected behavior.This is mostly a concern for DatabaseError and its subclasses such as IntegrityError. After such an error, the transaction is broken and Django will perform a rollback at the end of the atomic block. If you attempt to run database queries before the rollback happens, Django will raise a TransactionManagementError. You may also encounter this behavior when an ORM-related signal handler raises an exception.The correct way to catch database errors is around an atomic block as shown above. If necessary, add an extra atomic block for this purpose. This pattern has another advantage: it delimits explicitly which operations will be rolled back if an exception occurs.If you catch exceptions raised by raw SQL queries, Django s behavior is unspecified and database-dependent.You may need to manually revert model state when rolling back a transaction.The values of a model s fields won t be reverted when a transaction rollback happens. This could lead to an inconsistent model state unless you manually restore the original field values.For example, given MyModel with an active field, this snippet ensures that the if obj.active check at the end uses the correct value if updating active to True fails in the transaction:In order to guarantee atomicity, atomic disables some APIs. Attempting to commit, roll back, or change the autocommit state of the database connection within an atomic block will raise an exception.atomic takes a using argument which should be the name of a database. If this argument isn t provided, Django uses the \"default\" database.Under the hood, Django s transaction management code:You can disable the creation of savepoints for inner blocks by setting the savepoint argument to False. If an exception occurs, Django will perform the rollback when exiting the first parent block with a savepoint if there is one, and the outermost block otherwise. Atomicity is still guaranteed by the outer transaction. This option should only be used if the overhead of savepoints is noticeable. It has the drawback of breaking the error handling described above.You may use atomic when autocommit is turned off. It will only use savepoints, even for the outermost block.Performance considerationsOpen transactions have a performance cost for your database server. To minimize this overhead, keep your transactions as short as possible. This is especially important if you re using atomic() in long-running processes, outside of Django s request / response cycle."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/transactions/#autocommit", "para": "In the SQL standards, each SQL query starts a transaction, unless one is already active. Such transactions must then be explicitly committed or rolled back.This isn t always convenient for application developers. To alleviate this problem, most databases provide an autocommit mode. When autocommit is turned on and no transaction is active, each SQL query gets wrapped in its own transaction. In other words, not only does each such query start a transaction, but the transaction also gets automatically committed or rolled back, depending on whether the query succeeded.PEP 249, the Python Database API Specification v2.0, requires autocommit to be initially turned off. Django overrides this default and turns autocommit on.To avoid this, you can deactivate the transaction management, but it isn t recommended.You can totally disable Django s transaction management for a given database by setting AUTOCOMMIT to False in its configuration. If you do this, Django won t enable autocommit, and won t perform any commits. You ll get the regular behavior of the underlying database library.This requires you to commit explicitly every transaction, even those started by Django or by third-party libraries. Thus, this is best used in situations where you want to run your own transaction-controlling middleware or do something really strange."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/transactions/#performing-actions-after-commit", "para": "Sometimes you need to perform an action related to the current database transaction, but only if the transaction successfully commits. Examples might include a Celery task, an email notification, or a cache invalidation.Django provides the on_commit() function to register callback functions that should be executed after a transaction is successfully committed:Pass any function (that takes no arguments) to on_commit():You can also wrap your function in a lambda:The function you pass in will be called immediately after a hypothetical database write made where on_commit() is called would be successfully committed.If you call on_commit() while there isn t an active transaction, the callback will be executed immediately.If that hypothetical database write is instead rolled back (typically when an unhandled exception is raised in an atomic() block), your function will be discarded and never called.Savepoints (i.e. nested atomic() blocks) are handled correctly. That is, an on_commit() callable registered after a savepoint (in a nested atomic() block) will be called after the outer transaction is committed, but not if a rollback to that savepoint or any previous savepoint occurred during the transaction:On the other hand, when a savepoint is rolled back (due to an exception being raised), the inner callable will not be called:On-commit functions for a given transaction are executed in the order they were registered.If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is, of course, the same behavior as if you d executed the functions sequentially yourself without on_commit().Your callbacks are executed after a successful commit, so a failure in a callback will not cause the transaction to roll back. They are executed conditionally upon the success of the transaction, but they are not part of the transaction. For the intended use cases (mail notifications, Celery tasks, etc.), this should be fine. If it s not (if your follow-up action is so critical that its failure should mean the failure of the transaction itself), then you don t want to use the on_commit() hook. Instead, you may want two-phase commit such as the psycopg Two-Phase Commit protocol support and the optional Two-Phase Commit Extensions in the Python DB-API specification.Callbacks are not run until autocommit is restored on the connection following the commit (because otherwise any queries done in a callback would open an implicit transaction, preventing the connection from going back into autocommit mode).When in autocommit mode and outside of an atomic() block, the function will run immediately, not on commit.On-commit functions only work with autocommit mode and the atomic() (or ATOMIC_REQUESTS) transaction API. Calling on_commit() when autocommit is disabled and you are not within an atomic block will result in an error.Django s TestCase class wraps each test in a transaction and rolls back that transaction after each test, in order to provide test isolation. This means that no transaction is ever actually committed, thus your on_commit() callbacks will never be run. If you need to test the results of an on_commit() callback, use a TransactionTestCase instead.A rollback hook is harder to implement robustly than a commit hook, since a variety of things can cause an implicit rollback.For instance, if your database connection is dropped because your process was killed without a chance to shut down gracefully, your rollback hook will never run.The solution is simple: instead of doing something during the atomic block (transaction) and then undoing it if the transaction fails, use on_commit() to delay doing it in the first place until after the transaction succeeds. It s a lot easier to undo something you never did in the first place!"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/transactions/#low-level-apis", "para": "WarningAlways prefer atomic() if possible at all. It accounts for the idiosyncrasies of each database and prevents invalid operations.The low level APIs are only useful if you re implementing your own transaction management.Django provides a straightforward API in the django.db.transaction module to manage the autocommit state of each database connection.These functions take a using argument which should be the name of a database. If it isn t provided, Django uses the \"default\" database.Autocommit is initially turned on. If you turn it off, it s your responsibility to restore it.Once you turn autocommit off, you get the default behavior of your database adapter, and Django won t help you. Although that behavior is specified in PEP 249, implementations of adapters aren t always consistent with one another. Review the documentation of the adapter you re using carefully.You must ensure that no transaction is active, usually by issuing a commit() or a rollback(), before turning autocommit back on.Django will refuse to turn autocommit off when an atomic() block is active, because that would break atomicity.A transaction is an atomic set of database queries. Even if your program crashes, the database guarantees that either all the changes will be applied, or none of them.Django doesn t provide an API to start a transaction. The expected way to start a transaction is to disable autocommit with set_autocommit().Once you re in a transaction, you can choose either to apply the changes you ve performed until this point with commit(), or to cancel them with rollback(). These functions are defined in django.db.transaction.These functions take a using argument which should be the name of a database. If it isn t provided, Django uses the \"default\" database.Django will refuse to commit or to rollback when an atomic() block is active, because that would break atomicity.A savepoint is a marker within a transaction that enables you to roll back part of a transaction, rather than the full transaction. Savepoints are available with the SQLite, PostgreSQL, Oracle, and MySQL (when using the InnoDB storage engine) backends. Other backends provide the savepoint functions, but they re empty operations   they don t actually do anything.Savepoints aren t especially useful if you are using autocommit, the default behavior of Django. However, once you open a transaction with atomic(), you build up a series of database operations awaiting a commit or rollback. If you issue a rollback, the entire transaction is rolled back. Savepoints provide the ability to perform a fine-grained rollback, rather than the full rollback that would be performed by transaction.rollback().When the atomic() decorator is nested, it creates a savepoint to allow partial commit or rollback. You re strongly encouraged to use atomic() rather than the functions described below, but they re still part of the public API, and there s no plan to deprecate them.Each of these functions takes a using argument which should be the name of a database for which the behavior applies.  If no using argument is provided then the \"default\" database is used.Savepoints are controlled by three functions in django.db.transaction:Creates a new savepoint. This marks a point in the transaction that is known to be in a  good  state. Returns the savepoint ID (sid).Releases savepoint sid. The changes performed since the savepoint was created become part of the transaction.Rolls back the transaction to savepoint sid.These functions do nothing if savepoints aren t supported or if the database is in autocommit mode.In addition, there s a utility function:Resets the counter used to generate unique savepoint IDs.The following example demonstrates the use of savepoints:Savepoints may be used to recover from a database error by performing a partial rollback. If you re doing this inside an atomic() block, the entire block will still be rolled back, because it doesn t know you ve handled the situation at a lower level! To prevent this, you can control the rollback behavior with the following functions.Setting the rollback flag to True forces a rollback when exiting the innermost atomic block. This may be useful to trigger a rollback without raising an exception.Setting it to False prevents such a rollback. Before doing that, make sure you ve rolled back the transaction to a known-good savepoint within the current atomic block! Otherwise you re breaking atomicity and data corruption may occur."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/transactions/#database-specific-notes", "para": "While SQLite supports savepoints, a flaw in the design of the sqlite3 module makes them hardly usable.When autocommit is enabled, savepoints don t make sense. When it s disabled, sqlite3 commits implicitly before savepoint statements. (In fact, it commits before any statement other than SELECT, INSERT, UPDATE, DELETE and REPLACE.) This bug has two consequences:If you re using MySQL, your tables may or may not support transactions; it depends on your MySQL version and the table types you re using. (By  table types,  we mean something like  InnoDB  or  MyISAM .) MySQL transaction peculiarities are outside the scope of this article, but the MySQL site has information on MySQL transactions.If your MySQL setup does not support transactions, then Django will always function in autocommit mode: statements will be executed and committed as soon as they re called. If your MySQL setup does support transactions, Django will handle transactions as explained in this document.NoteThis section is relevant only if you re implementing your own transaction management. This problem cannot occur in Django s default mode and atomic() handles it automatically.Inside a transaction, when a call to a PostgreSQL cursor raises an exception (typically IntegrityError), all subsequent SQL in the same transaction will fail with the error  current transaction is aborted, queries ignored until end of transaction block . While simple use of save() is unlikely to raise an exception in PostgreSQL, there are more advanced usage patterns which might, such as saving objects with unique fields, saving using the force_insert/force_update flag, or invoking custom SQL.There are several ways to recover from this sort of error.The first option is to roll back the entire transaction. For example:Calling transaction.rollback() rolls back the entire transaction. Any uncommitted database operations will be lost. In this example, the changes made by a.save() would be lost, even though that operation raised no error itself.You can use savepoints to control the extent of a rollback. Before performing a database operation that could fail, you can set or update the savepoint; that way, if the operation fails, you can roll back the single offending operation, rather than the entire transaction. For example:In this example, a.save() will not be undone in the case where b.save() raises an exception."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/aggregation/#cheat-sheet", "para": "In a hurry? Here s how to do common aggregate queries, assuming the models above:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/aggregation/#generating-aggregates-over-a-queryset", "para": "Django provides two ways to generate aggregates. The first way is to generate summary values over an entire QuerySet. For example, say you wanted to calculate the average price of all books available for sale. Django s query syntax provides a means for describing the set of all books:What we need is a way to calculate summary values over the objects that belong to this QuerySet. This is done by appending an aggregate() clause onto the QuerySet:The all() is redundant in this example, so this could be simplified to:The argument to the aggregate() clause describes the aggregate value that we want to compute - in this case, the average of the price field on the Book model. A list of the aggregate functions that are available can be found in the QuerySet reference.aggregate() is a terminal clause for a QuerySet that, when invoked, returns a dictionary of name-value pairs. The name is an identifier for the aggregate value; the value is the computed aggregate. The name is automatically generated from the name of the field and the aggregate function. If you want to manually specify a name for the aggregate value, you can do so by providing that name when you specify the aggregate clause:If you want to generate more than one aggregate, you just add another argument to the aggregate() clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/aggregation/#generating-aggregates-for-each-item-in-a-queryset", "para": "The second way to generate summary values is to generate an independent summary for each object in a QuerySet. For example, if you are retrieving a list of books, you may want to know how many authors contributed to each book. Each Book has a many-to-many relationship with the Author; we want to summarize this relationship for each book in the QuerySet.Per-object summaries can be generated using the annotate() clause. When an annotate() clause is specified, each object in the QuerySet will be annotated with the specified values.The syntax for these annotations is identical to that used for the aggregate() clause. Each argument to annotate() describes an aggregate that is to be calculated. For example, to annotate books with the number of authors:As with aggregate(), the name for the annotation is automatically derived from the name of the aggregate function and the name of the field being aggregated. You can override this default name by providing an alias when you specify the annotation:Unlike aggregate(), annotate() is not a terminal clause. The output of the annotate() clause is a QuerySet; this QuerySet can be modified using any other QuerySet operation, including filter(), order_by(), or even additional calls to annotate().Combining multiple aggregations with annotate() will yield the wrong results because joins are used instead of subqueries:For most aggregates, there is no way to avoid this problem, however, the Count aggregate has a distinct parameter that may help:If in doubt, inspect the SQL query!In order to understand what happens in your query, consider inspecting the query property of your QuerySet."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/aggregation/#joins-and-aggregates", "para": "So far, we have dealt with aggregates over fields that belong to the model being queried. However, sometimes the value you want to aggregate will belong to a model that is related to the model you are querying.When specifying the field to be aggregated in an aggregate function, Django will allow you to use the same double underscore notation that is used when referring to related fields in filters. Django will then handle any table joins that are required to retrieve and aggregate the related value.For example, to find the price range of books offered in each store, you could use the annotation:This tells Django to retrieve the Store model, join (through the many-to-many relationship) with the Book model, and aggregate on the price field of the book model to produce a minimum and maximum value.The same rules apply to the aggregate() clause. If you wanted to know the lowest and highest price of any book that is available for sale in any of the stores, you could use the aggregate:Join chains can be as deep as you require. For example, to extract the age of the youngest author of any book available for sale, you could issue the query:In a way similar to Lookups that span relationships, aggregations and annotations on fields of models or models that are related to the one you are querying can include traversing  reverse  relationships. The lowercase name of related models and double-underscores are used here too.For example, we can ask for all publishers, annotated with their respective total book stock counters (note how we use 'book' to specify the Publisher -> Book reverse foreign key hop):(Every Publisher in the resulting QuerySet will have an extra attribute called book__count.)We can also ask for the oldest book of any of those managed by every publisher:(The resulting dictionary will have a key called 'oldest_pubdate'. If no such alias were specified, it would be the rather long 'book__pubdate__min'.)This doesn t apply just to foreign keys. It also works with many-to-many relations. For example, we can ask for every author, annotated with the total number of pages considering all the books the author has (co-)authored (note how we use 'book' to specify the Author -> Book reverse many-to-many hop):(Every Author in the resulting QuerySet will have an extra attribute called total_pages. If no such alias were specified, it would be the rather long book__pages__sum.)Or ask for the average rating of all the books written by author(s) we have on file:(The resulting dictionary will have a key called 'average_rating'. If no such alias were specified, it would be the rather long 'book__rating__avg'.)"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/aggregation/#aggregations-and-other-queryset-clauses", "para": "Aggregates can also participate in filters. Any filter() (or exclude()) applied to normal model fields will have the effect of constraining the objects that are considered for aggregation.When used with an annotate() clause, a filter has the effect of constraining the objects for which an annotation is calculated. For example, you can generate an annotated list of all books that have a title starting with  Django  using the query:When used with an aggregate() clause, a filter has the effect of constraining the objects over which the aggregate is calculated. For example, you can generate the average price of all books with a title that starts with  Django  using the query:Annotated values can also be filtered. The alias for the annotation can be used in filter() and exclude() clauses in the same way as any other model field.For example, to generate a list of books that have more than one author, you can issue the query:This query generates an annotated result set, and then generates a filter based upon that annotation.If you need two annotations with two separate filters you can use the filter argument with any aggregate. For example, to generate a list of authors with a count of highly rated books:Each Author in the result set will have the num_books and highly_rated_books attributes.Choosing between filter and QuerySet.filter()Avoid using the filter argument with a single annotation or aggregation. It s more efficient to use QuerySet.filter() to exclude rows. The aggregation filter argument is only useful when using two or more aggregations over the same relations with different conditionals.When developing a complex query that involves both annotate() and filter() clauses, pay particular attention to the order in which the clauses are applied to the QuerySet.When an annotate() clause is applied to a query, the annotation is computed over the state of the query up to the point where the annotation is requested. The practical implication of this is that filter() and annotate() are not commutative operations.Given:Here s an example with the Count aggregate:Both queries return a list of publishers that have at least one book with a rating exceeding 3.0, hence publisher C is excluded.In the first query, the annotation precedes the filter, so the filter has no effect on the annotation. distinct=True is required to avoid a query bug.The second query counts the number of books that have a rating exceeding 3.0 for each publisher. The filter precedes the annotation, so the filter constrains the objects considered when calculating the annotation.Here s another example with the Avg aggregate:The first query asks for the average rating of all a publisher s books for publisher s that have at least one book with a rating exceeding 3.0. The second query asks for the average of a publisher s book s ratings for only those ratings exceeding 3.0.It s difficult to intuit how the ORM will translate complex querysets into SQL queries so when in doubt, inspect the SQL with str(queryset.query) and write plenty of tests.Annotations can be used as a basis for ordering. When you define an order_by() clause, the aggregates you provide can reference any alias defined as part of an annotate() clause in the query.For example, to order a QuerySet of books by the number of authors that have contributed to the book, you could use the following query:Ordinarily, annotations are generated on a per-object basis - an annotated QuerySet will return one result for each object in the original QuerySet. However, when a values() clause is used to constrain the columns that are returned in the result set, the method for evaluating annotations is slightly different. Instead of returning an annotated result for each result in the original QuerySet, the original results are grouped according to the unique combinations of the fields specified in the values() clause. An annotation is then provided for each unique group; the annotation is computed over all members of the group.For example, consider an author query that attempts to find out the average rating of books written by each author:This will return one result for each author in the database, annotated with their average book rating.However, the result will be slightly different if you use a values() clause:In this example, the authors will be grouped by name, so you will only get an annotated result for each unique author name. This means if you have two authors with the same name, their results will be merged into a single result in the output of the query; the average will be computed as the average over the books written by both authors.As with the filter() clause, the order in which annotate() and values() clauses are applied to a query is significant. If the values() clause precedes the annotate(), the annotation will be computed using the grouping described by the values() clause.However, if the annotate() clause precedes the values() clause, the annotations will be generated over the entire query set. In this case, the values() clause only constrains the fields that are generated on output.For example, if we reverse the order of the values() and annotate() clause from our previous example:This will now yield one unique result for each author; however, only the author s name and the average_rating annotation will be returned in the output data.You should also note that average_rating has been explicitly included in the list of values to be returned. This is required because of the ordering of the values() and annotate() clause.If the values() clause precedes the annotate() clause, any annotations will be automatically added to the result set. However, if the values() clause is applied after the annotate() clause, you need to explicitly include the aggregate column.Deprecated since version 2.2: Starting in Django 3.1, the ordering from a model s Meta.ordering won t be used in GROUP BY queries, such as .annotate().values(). Since Django 2.2, these queries issue a deprecation warning indicating to add an explicit order_by() to the queryset to silence the warning.Fields that are mentioned in the order_by() part of a queryset (or which are used in the default ordering on a model) are used when selecting the output data, even if they are not otherwise specified in the values() call. These extra fields are used to group  like  results together and they can make otherwise identical result rows appear to be separate. This shows up, particularly, when counting things.By way of example, suppose you have a model like this:The important part here is the default ordering on the name field. If you want to count how many times each distinct data value appears, you might try this: which will group the Item objects by their common data values and then count the number of id values in each group. Except that it won t quite work. The default ordering by name will also play a part in the grouping, so this query will group by distinct (data, name) pairs, which isn t what you want. Instead, you should construct this queryset: clearing any ordering in the query. You could also order by, say, data without any harmful effects, since that is already playing a role in the query.This behavior is the same as that noted in the queryset documentation for distinct() and the general rule is the same: normally you won t want extra columns playing a part in the result, so clear out the ordering, or at least make sure it s restricted only to those fields you also select in a values() call.NoteYou might reasonably ask why Django doesn t remove the extraneous columns for you. The main reason is consistency with distinct() and other places: Django never removes ordering constraints that you have specified (and we can t change those other methods  behavior, as that would violate our API stability policy).You can also generate an aggregate on the result of an annotation. When you define an aggregate() clause, the aggregates you provide can reference any alias defined as part of an annotate() clause in the query.For example, if you wanted to calculate the average number of authors per book you first annotate the set of books with the author count, then aggregate that author count, referencing the annotation field:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/search/#use-cases", "para": "Text-based fields have a selection of simple matching operations. For example, you may wish to allow lookup up an author like so:This is a very fragile solution as it requires the user to know an exact substring of the author s name. A better approach could be a case-insensitive match (icontains), but this is only marginally better.If you re using PostgreSQL, Django provides a selection of database specific tools to allow you to leverage more complex querying options. Other databases have different selections of tools, possibly via plugins or user-defined functions. Django doesn t include any support for them at this time. We ll use some examples from PostgreSQL to demonstrate the kind of functionality databases may have.Searching in other databasesAll of the searching tools provided by django.contrib.postgres are constructed entirely on public APIs such as custom lookups and database functions. Depending on your database, you should be able to construct queries to allow similar APIs. If there are specific things which cannot be achieved this way, please open a ticket.In the above example, we determined that a case insensitive lookup would be more useful. When dealing with non-English names, a further improvement is to use unaccented comparison:This shows another issue, where we are matching against a different spelling of the name. In this case we have an asymmetry though - a search for Helen will pick up Helena or H l ne, but not the reverse. Another option would be to use a trigram_similar comparison, which compares sequences of letters.For example:Now we have a different problem - the longer name of  Helena Bonham Carter  doesn t show up as it is much longer. Trigram searches consider all combinations of three letters, and compares how many appear in both search and source strings. For the longer name, there are more combinations which appear in the source string so it is no longer considered a close match.The correct choice of comparison functions here depends on your particular data set, for example the language(s) used and the type of text being searched. All of the examples we ve seen are on short strings where the user is likely to enter something close (by varying definitions) to the source data.Simple database operations are too simple an approach when you start considering large blocks of text. Whereas the examples above can be thought of as operations on a string of characters, full text search looks at the actual words. Depending on the system used, it s likely to use some of the following ideas:There are many alternatives for using searching software, some of the most prominent are Elastic and Solr. These are full document-based search solutions. To use them with data from Django models, you ll need a layer which translates your data into a textual document, including back-references to the database ids. When a search using the engine returns a certain document, you can then look it up in the database. There are a variety of third-party libraries which are designed to help with this process.PostgreSQL has its own full text search implementation built-in. While not as powerful as some other search engines, it has the advantage of being inside your database and so can easily be combined with other relational queries such as categorization.The django.contrib.postgres module provides some helpers to make these queries. For example, a simple query might be to select all the blog entries which mention  cheese :You can also filter on a combination of fields and on related models:See the contrib.postgres Full text search document for complete details."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-model-fields/#introduction", "para": "The model reference documentation explains how to use Django s standard field classes   CharField, DateField, etc. For many purposes, those classes are all you ll need. Sometimes, though, the Django version won t meet your precise requirements, or you ll want to use a field that is entirely different from those shipped with Django.Django s built-in field types don t cover every possible database column type   only the common types, such as VARCHAR and INTEGER. For more obscure column types, such as geographic polygons or even user-created types such as PostgreSQL custom types, you can define your own Django Field subclasses.Alternatively, you may have a complex Python object that can somehow be serialized to fit into a standard database column type. This is another case where a Field subclass will help you use your object with your models.Creating custom fields requires a bit of attention to detail. To make things easier to follow, we ll use a consistent example throughout this document: wrapping a Python object representing the deal of cards in a hand of Bridge. Don t worry, you don t have to know how to play Bridge to follow this example. You only need to know that 52 cards are dealt out equally to four players, who are traditionally called north, east, south and west.  Our class looks something like this:This is just an ordinary Python class, with nothing Django-specific about it. We d like to be able to do things like this in our models (we assume the hand attribute on the model is an instance of Hand):We assign to and retrieve from the hand attribute in our model just like any other Python class. The trick is to tell Django how to handle saving and loading such an object.In order to use the Hand class in our models, we do not have to change this class at all. This is ideal, because it means you can easily write model support for existing classes where you cannot change the source code.NoteYou might only be wanting to take advantage of custom database column types and deal with the data as standard Python types in your models; strings, or floats, for example. This case is similar to our Hand example and we ll note any differences as we go along."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-model-fields/#background-theory", "para": "The simplest way to think of a model field is that it provides a way to take a normal Python object   string, boolean, datetime, or something more complex like Hand   and convert it to and from a format that is useful when dealing with the database (and serialization, but, as we ll see later, that falls out fairly naturally once you have the database side under control).Fields in a model must somehow be converted to fit into an existing database column type. Different databases provide different sets of valid column types, but the rule is still the same: those are the only types you have to work with. Anything you want to store in the database must fit into one of those types.Normally, you re either writing a Django field to match a particular database column type, or there s a fairly straightforward way to convert your data to, say, a string.For our Hand example, we could convert the card data to a string of 104 characters by concatenating all the cards together in a pre-determined order   say, all the north cards first, then the east, south and west cards. So Hand objects can be saved to text or character columns in the database.All of Django s fields (and when we say fields in this document, we always mean model fields and not form fields) are subclasses of django.db.models.Field. Most of the information that Django records about a field is common to all fields   name, help text, uniqueness and so forth. Storing all that information is handled by Field. We ll get into the precise details of what Field can do later on; for now, suffice it to say that everything descends from Field and then customizes key pieces of the class behavior.It s important to realize that a Django field class is not what is stored in your model attributes. The model attributes contain normal Python objects. The field classes you define in a model are actually stored in the Meta class when the model class is created (the precise details of how this is done are unimportant here). This is because the field classes aren t necessary when you re just creating and modifying attributes. Instead, they provide the machinery for converting between the attribute value and what is stored in the database or sent to the serializer.Keep this in mind when creating your own custom fields. The Django Field subclass you write provides the machinery for converting between your Python instances and the database/serializer values in various ways (there are differences between storing a value and using a value for lookups, for example). If this sounds a bit tricky, don t worry   it will become clearer in the examples below. Just remember that you will often end up creating two classes when you want a custom field:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-model-fields/#writing-a-field-subclass", "para": "When planning your Field subclass, first give some thought to which existing Field class your new field is most similar to. Can you subclass an existing Django field and save yourself some work? If not, you should subclass the Field class, from which everything is descended.Initializing your new field is a matter of separating out any arguments that are specific to your case from the common arguments and passing the latter to the __init__() method of Field (or your parent class).In our example, we ll call our field HandField. (It s a good idea to call your Field subclass <Something>Field, so it s easily identifiable as a Field subclass.) It doesn t behave like any existing field, so we ll subclass directly from Field:Our HandField accepts most of the standard field options (see the list below), but we ensure it has a fixed length, since it only needs to hold 52 card values plus their suits; 104 characters in total.NoteMany of Django s model fields accept options that they don t do anything with. For example, you can pass both editable and auto_now to a django.db.models.DateField and it will simply ignore the editable parameter (auto_now being set implies editable=False). No error is raised in this case.This behavior simplifies the field classes, because they don t need to check for options that aren t necessary. They just pass all the options to the parent class and then don t use them later on. It s up to you whether you want your fields to be more strict about the options they select, or to use the simpler, more permissive behavior of the current fields.The Field.__init__() method takes the following parameters:All of the options without an explanation in the above list have the same meaning they do for normal Django fields. See the field documentation for examples and details.The counterpoint to writing your __init__() method is writing the deconstruct() method. It s used during model migrations to tell Django how to take an instance of your new field and reduce it to a serialized form - in particular, what arguments to pass to __init__() to re-create it.If you haven t added any extra options on top of the field you inherited from, then there s no need to write a new deconstruct() method. If, however, you re changing the arguments passed in __init__() (like we are in HandField), you ll need to supplement the values being passed.The contract of deconstruct() is simple; it returns a tuple of four items: the field s attribute name, the full import path of the field class, the positional arguments (as a list), and the keyword arguments (as a dict). Note this is different from the deconstruct() method for custom classes which returns a tuple of three things.As a custom field author, you don t need to care about the first two values; the base Field class has all the code to work out the field s attribute name and import path. You do, however, have to care about the positional and keyword arguments, as these are likely the things you are changing.For example, in our HandField class we re always forcibly setting max_length in __init__(). The deconstruct() method on the base Field class will see this and try to return it in the keyword arguments; thus, we can drop it from the keyword arguments for readability:If you add a new keyword argument, you need to write code in deconstruct() that puts its value into kwargs yourself. You should also omit the value from kwargs when it isn t necessary to reconstruct the state of the field, such as when the default value is being used:More complex examples are beyond the scope of this document, but remember - for any configuration of your Field instance, deconstruct() must return arguments that you can pass to __init__ to reconstruct that state.Pay extra attention if you set new default values for arguments in the Field superclass; you want to make sure they re always included, rather than disappearing if they take on the old default value.In addition, try to avoid returning values as positional arguments; where possible, return values as keyword arguments for maximum future compatibility. Of course, if you change the names of things more often than their position in the constructor s argument list, you might prefer positional, but bear in mind that people will be reconstructing your field from the serialized version for quite a while (possibly years), depending how long your migrations live for.You can see the results of deconstruction by looking in migrations that include the field, and you can test deconstruction in unit tests by just deconstructing and reconstructing the field:You can t change the base class of a custom field because Django won t detect the change and make a migration for it. For example, if you start with:and then decide that you want to use TextField instead, you can t change the subclass like this:Instead, you must create a new custom field class and update your models to reference it:As discussed in removing fields, you must retain the original CustomCharField class as long as you have migrations that reference it.As always, you should document your field type, so users will know what it is. In addition to providing a docstring for it, which is useful for developers, you can also allow users of the admin app to see a short description of the field type via the django.contrib.admindocs application. To do this simply provide descriptive text in a description class attribute of your custom field. In the above example, the description displayed by the admindocs application for a HandField will be  A hand of cards (bridge style) .In the django.contrib.admindocs display, the field description is interpolated with field.__dict__ which allows the description to incorporate arguments of the field. For example, the description for CharField is:Once you ve created your Field subclass, you might consider overriding a few standard methods, depending on your field s behavior. The list of methods below is in approximately decreasing order of importance, so start from the top.Say you ve created a PostgreSQL custom type called mytype. You can subclass Field and implement the db_type() method, like so:Once you have MytypeField, you can use it in any model, just like any other Field type:If you aim to build a database-agnostic application, you should account for differences in database column types. For example, the date/time column type in PostgreSQL is called timestamp, while the same column in MySQL is called datetime. The simplest way to handle this in a db_type() method is to check the connection.settings_dict['ENGINE'] attribute.For example:The db_type() and rel_db_type() methods are called by Django when the framework constructs the CREATE TABLE statements for your application   that is, when you first create your tables. The methods are also called when constructing a WHERE clause that includes the model field   that is, when you retrieve data using QuerySet methods like get(), filter(), and exclude() and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the connection.settings_dict check in the above example.Some database column types accept parameters, such as CHAR(25), where the parameter 25 represents the maximum column length. In cases like these, it s more flexible if the parameter is specified in the model rather than being hard-coded in the db_type() method. For example, it wouldn t make much sense to have a CharMaxlength25Field, shown here:The better way of doing this would be to make the parameter specifiable at run time   i.e., when the class is instantiated. To do that, just implement Field.__init__(), like so:Finally, if your column requires truly complex SQL setup, return None from db_type(). This will cause Django s SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, of course, but this gives you a way to tell Django to get out of the way.The rel_db_type() method is called by fields such as ForeignKey and OneToOneField that point to another field to determine their database column data types. For example, if you have an UnsignedAutoField, you also need the foreign keys that point to that field to use the same data type:If your custom Field class deals with data structures that are more complex than strings, dates, integers, or floats, then you may need to override from_db_value() and to_python().If present for the field subclass, from_db_value() will be called in all circumstances when the data is loaded from the database, including in aggregates and values() calls.to_python() is called by deserialization and during the clean() method used from forms.As a general rule, to_python() should deal gracefully with any of the following arguments:In our HandField class, we re storing the data as a VARCHAR field in the database, so we need to be able to process strings and None in the from_db_value(). In to_python(), we need to also handle Hand instances:Notice that we always return a Hand instance from these methods. That s the Python object type we want to store in the model s attribute.For to_python(), if anything goes wrong during value conversion, you should raise a ValidationError exception.Since using a database requires conversion in both ways, if you override to_python() you also have to override get_prep_value() to convert Python objects back to query values.For example:WarningIf your custom field uses the CHAR, VARCHAR or TEXT types for MySQL, you must make sure that get_prep_value() always returns a string type. MySQL performs flexible and unexpected matching when a query is performed on these types and the provided value is an integer, which can cause queries to include unexpected objects in their results. This problem cannot occur if you always return a string type from get_prep_value().Some data types (for example, dates) need to be in a specific format before they can be used by a database backend. get_db_prep_value() is the method where those conversions should be made. The specific connection that will be used for the query is passed as the connection parameter. This allows you to use backend-specific conversion logic if it is required.For example, Django uses the following method for its BinaryField:In case your custom field needs a special conversion when being saved that is not the same as the conversion used for normal query parameters, you can override get_db_prep_save().If you want to preprocess the value just before saving, you can use pre_save(). For example, Django s DateTimeField uses this method to set the attribute correctly in the case of auto_now or auto_now_add.If you do override this method, you must return the value of the attribute at the end. You should also update the model s attribute if you make any changes to the value so that code holding references to the model will always see the correct value.To customize the form field used by ModelForm, you can override formfield().The form field class can be specified via the form_class and choices_form_class arguments; the latter is used if the field has choices specified, the former otherwise. If these arguments are not provided, CharField or TypedChoiceField will be used.All of the kwargs dictionary is passed directly to the form field s __init__() method. Normally, all you need to do is set up a good default for the form_class (and maybe choices_form_class) argument and then delegate further handling to the parent class. This might require you to write a custom form field (and even a form widget). See the forms documentation for information about this.Continuing our ongoing example, we can write the formfield() method as:This assumes we ve imported a MyFormField field class (which has its own default widget). This document doesn t cover the details of writing custom form fields.If you have created a db_type() method, you don t need to worry about get_internal_type()   it won t be used much. Sometimes, though, your database storage is similar in type to some other field, so you can use that other field s logic to create the right column.For example:No matter which database backend we are using, this will mean that migrate and other SQL commands create the right column type for storing a string.If get_internal_type() returns a string that is not known to Django for the database backend you are using   that is, it doesn t appear in django.db.backends.<db_name>.base.DatabaseWrapper.data_types   the string will still be used by the serializer, but the default db_type() method will return None. See the documentation of db_type() for reasons why this might be useful. Putting a descriptive string in as the type of the field for the serializer is a useful idea if you re ever going to be using the serializer output in some other place, outside of Django.To customize how the values are serialized by a serializer, you can override value_to_string(). Using value_from_object() is the best way to get the field s value prior to serialization. For example, since HandField uses strings for its data storage anyway, we can reuse some existing conversion code:Writing a custom field can be a tricky process, particularly if you re doing complex conversions between your Python types and your database and serialization formats. Here are a couple of tips to make things go more smoothly:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-model-fields/#writing-a-filefield-subclass", "para": "In addition to the above methods, fields that deal with files have a few other special requirements which must be taken into account. The majority of the mechanics provided by FileField, such as controlling database storage and retrieval, can remain unchanged, leaving subclasses to deal with the challenge of supporting a particular type of file.Django provides a File class, which is used as a proxy to the file s contents and operations. This can be subclassed to customize how the file is accessed, and what methods are available. It lives at django.db.models.fields.files, and its default behavior is explained in the file documentation.Once a subclass of File is created, the new FileField subclass must be told to use it. To do so, simply assign the new File subclass to the special attr_class attribute of the FileField subclass.In addition to the above details, there are a few guidelines which can greatly improve the efficiency and readability of the field s code."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#defining-your-databases", "para": "The first step to using more than one database with Django is to tell Django about the database servers you ll be using. This is done using the DATABASES setting. This setting maps database aliases, which are a way to refer to a specific database throughout Django, to a dictionary of settings for that specific connection. The settings in the inner dictionaries are described fully in the DATABASES documentation.Databases can have any alias you choose. However, the alias default has special significance. Django uses the database with the alias of default when no other database has been selected.The following is an example settings.py snippet defining two databases   a default PostgreSQL database and a MySQL database called users:If the concept of a default database doesn t make sense in the context of your project, you need to be careful to always specify the database that you want to use. Django requires that a default database entry be defined, but the parameters dictionary can be left blank if it will not be used. To do this, you must set up DATABASE_ROUTERS for all of your apps  models, including those in any contrib and third-party apps you re using, so that no queries are routed to the default database. The following is an example settings.py snippet defining two non-default databases, with the default entry intentionally left empty:If you attempt to access a database that you haven t defined in your DATABASES setting, Django will raise a django.db.utils.ConnectionDoesNotExist exception."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#synchronizing-your-databases", "para": "The migrate management command operates on one database at a time. By default, it operates on the default database, but by providing the --database option, you can tell it to synchronize a different database. So, to synchronize all models onto all databases in the first example above, you would need to call:If you don t want every application to be synchronized onto a particular database, you can define a database router that implements a policy constraining the availability of particular models.If, as in the second example above, you ve left the default database empty, you must provide a database name each time you run migrate. Omitting the database name would raise an error. For the second example:Most other django-admin commands that interact with the database operate in the same way as migrate   they only ever operate on one database at a time, using --database to control the database used.An exception to this rule is the makemigrations command. It validates the migration history in the databases to catch problems with the existing migration files (which could be caused by editing them) before creating new migrations. By default, it checks only the default database, but it consults the allow_migrate() method of routers if any are installed."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#automatic-database-routing", "para": "The easiest way to use multiple databases is to set up a database routing scheme. The default routing scheme ensures that objects remain  sticky  to their original database (i.e., an object retrieved from the foo database will be saved on the same database). The default routing scheme ensures that if a database isn t specified, all queries fall back to the default database.You don t have to do anything to activate the default routing scheme   it is provided  out of the box  on every Django project. However, if you want to implement more interesting database allocation behaviors, you can define and install your own database routers.A database Router is a class that provides up to four methods:Suggest the database that should be used for read operations for objects of type model.If a database operation is able to provide any additional information that might assist in selecting a database, it will be provided in the hints dictionary. Details on valid hints are provided below.Returns None if there is no suggestion.Suggest the database that should be used for writes of objects of type Model.If a database operation is able to provide any additional information that might assist in selecting a database, it will be provided in the hints dictionary. Details on valid hints are provided below.Returns None if there is no suggestion.Return True if a relation between obj1 and obj2 should be allowed, False if the relation should be prevented, or None if the router has no opinion. This is purely a validation operation, used by foreign key and many to many operations to determine if a relation should be allowed between two objects.If no router has an opinion (i.e. all routers return None), only relations within the same database are allowed.Determine if the migration operation is allowed to run on the database with alias db. Return True if the operation should run, False if it shouldn t run, or None if the router has no opinion.The app_label positional argument is the label of the application being migrated.model_name is set by most migration operations to the value of model._meta.model_name (the lowercased version of the model __name__) of the model being migrated. Its value is None for the RunPython and RunSQL operations unless they provide it using hints.hints are used by certain operations to communicate additional information to the router.When model_name is set, hints normally contains the model class under the key 'model'. Note that it may be a historical model, and thus not have any custom attributes, methods, or managers. You should only rely on _meta.This method can also be used to determine the availability of a model on a given database.makemigrations always creates migrations for model changes, but if allow_migrate() returns False, any migration operations for the model_name will be silently skipped when running migrate on the db. Changing the behavior of allow_migrate() for models that already have migrations may result in broken foreign keys, extra tables, or missing tables. When makemigrations verifies the migration history, it skips databases where no app is allowed to migrate.A router doesn t have to provide all these methods   it may omit one or more of them. If one of the methods is omitted, Django will skip that router when performing the relevant check.The hints received by the database router can be used to decide which database should receive a given request.At present, the only hint that will be provided is instance, an object instance that is related to the read or write operation that is underway. This might be the instance that is being saved, or it might be an instance that is being added in a many-to-many relation. In some cases, no instance hint will be provided at all. The router checks for the existence of an instance hint, and determine if that hint should be used to alter routing behavior.Database routers are installed using the DATABASE_ROUTERS setting. This setting defines a list of class names, each specifying a router that should be used by the master router (django.db.router).The master router is used by Django s database operations to allocate database usage. Whenever a query needs to know which database to use, it calls the master router, providing a model and a hint (if available). Django then tries each router in turn until a database suggestion can be found. If no suggestion can be found, it tries the current _state.db of the hint instance. If a hint instance wasn t provided, or the instance doesn t currently have database state, the master router will allocate the default database.Example purposes only!This example is intended as a demonstration of how the router infrastructure can be used to alter database usage. It intentionally ignores some complex issues in order to demonstrate how routers are used.This example won t work if any of the models in myapp contain relationships to models outside of the other database. Cross-database relationships introduce referential integrity problems that Django can t currently handle.The primary/replica (referred to as master/slave by some databases) configuration described is also flawed   it doesn t provide any solution for handling replication lag (i.e., query inconsistencies introduced because of the time taken for a write to propagate to the replicas). It also doesn t consider the interaction of transactions with the database utilization strategy.So - what does this mean in practice? Let s consider another sample configuration. This one will have several databases: one for the auth application, and all other apps using a primary/replica setup with two read replicas. Here are the settings specifying these databases:Now we ll need to handle routing. First we want a router that knows to send queries for the auth app to auth_db:And we also want a router that sends all other apps to the primary/replica configuration, and randomly chooses a replica to read from:Finally, in the settings file, we add the following (substituting path.to. with the actual Python path to the module(s) where the routers are defined):The order in which routers are processed is significant. Routers will be queried in the order they are listed in the DATABASE_ROUTERS setting. In this example, the AuthRouter is processed before the PrimaryReplicaRouter, and as a result, decisions concerning the models in auth are processed before any other decision is made. If the DATABASE_ROUTERS setting listed the two routers in the other order, PrimaryReplicaRouter.allow_migrate() would be processed first. The catch-all nature of the PrimaryReplicaRouter implementation would mean that all models would be available on all databases.With this setup installed, lets run some Django code:This example defined a router to handle interaction with models from the auth app, and other routers to handle interaction with all other apps. If you left your default database empty and don t want to define a catch-all database router to handle all apps not otherwise specified, your routers must handle the names of all apps in INSTALLED_APPS before you migrate. See Behavior of contrib apps for information about contrib apps that must be together in one database."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#manually-selecting-a-database", "para": "Django also provides an API that allows you to maintain complete control over database usage in your code. A manually specified database allocation will take priority over a database allocated by a router.You can select the database for a QuerySet at any point in the QuerySet  chain.  Just call using() on the QuerySet to get another QuerySet that uses the specified database.using() takes a single argument: the alias of the database on which you want to run the query. For example:Use the using keyword to Model.save() to specify to which database the data should be saved.For example, to save an object to the legacy_users database, you d use this:If you don t specify using, the save() method will save into the default database allocated by the routers.If you ve saved an instance to one database, it might be tempting to use save(using=...) as a way to migrate the instance to a new database. However, if you don t take appropriate steps, this could have some unexpected consequences.Consider the following example:In statement 1, a new Person object is saved to the first database. At this time, p doesn t have a primary key, so Django issues an SQL INSERT statement. This creates a primary key, and Django assigns that primary key to p.When the save occurs in statement 2, p already has a primary key value, and Django will attempt to use that primary key on the new database. If the primary key value isn t in use in the second database, then you won t have any problems   the object will be copied to the new database.However, if the primary key of p is already in use on the second database, the existing object in the second database will be overridden when p is saved.You can avoid this in two ways. First, you can clear the primary key of the instance. If an object has no primary key, Django will treat it as a new object, avoiding any loss of data on the second database:The second option is to use the force_insert option to save() to ensure that Django does an SQL INSERT:This will ensure that the person named Fred will have the same primary key on both databases. If that primary key is already in use when you try to save onto the second database, an error will be raised.By default, a call to delete an existing object will be executed on the same database that was used to retrieve the object in the first place:To specify the database from which a model will be deleted, pass a using keyword argument to the Model.delete() method. This argument works just like the using keyword argument to save().For example, if you re migrating a user from the legacy_users database to the new_users database, you might use these commands:Use the db_manager() method on managers to give managers access to a non-default database.For example, say you have a custom manager method that touches the database   User.objects.create_user(). Because create_user() is a manager method, not a QuerySet method, you can t do User.objects.using('new_users').create_user(). (The create_user() method is only available on User.objects, the manager, not on QuerySet objects derived from the manager.) The solution is to use db_manager(), like this:db_manager() returns a copy of the manager bound to the database you specify.If you re overriding get_queryset() on your manager, be sure to either call the method on the parent (using super()) or do the appropriate handling of the _db attribute on the manager (a string containing the name of the database to use).For example, if you want to return a custom QuerySet class from the get_queryset method, you could do this:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#exposing-multiple-databases-in-django-s-admin-interface", "para": "Django s admin doesn t have any explicit support for multiple databases. If you want to provide an admin interface for a model on a database other than that specified by your router chain, you ll need to write custom ModelAdmin classes that will direct the admin to use a specific database for content.ModelAdmin objects have five methods that require customization for multiple-database support:The implementation provided here implements a multi-database strategy where all objects of a given type are stored on a specific database (e.g., all User objects are in the other database). If your usage of multiple databases is more complex, your ModelAdmin will need to reflect that strategy.InlineModelAdmin objects can be handled in a similar fashion. They require three customized methods:Once you ve written your model admin definitions, they can be registered with any Admin instance:This example sets up two admin sites. On the first site, the Author and Publisher objects are exposed; Publisher objects have a tabular inline showing books published by that publisher. The second site exposes just publishers, without the inlines."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#using-raw-cursors-with-multiple-databases", "para": "If you are using more than one database you can use django.db.connections to obtain the connection (and cursor) for a specific database. django.db.connections is a dictionary-like object that allows you to retrieve a specific connection using its alias:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#limitations-of-multiple-databases", "para": "Django doesn t currently provide any support for foreign key or many-to-many relationships spanning multiple databases. If you have used a router to partition models to different databases, any foreign key and many-to-many relationships defined by those models must be internal to a single database.This is because of referential integrity. In order to maintain a relationship between two objects, Django needs to know that the primary key of the related object is valid. If the primary key is stored on a separate database, it s not possible to easily evaluate the validity of a primary key.If you re using Postgres, Oracle, or MySQL with InnoDB, this is enforced at the database integrity level   database level key constraints prevent the creation of relations that can t be validated.However, if you re using SQLite or MySQL with MyISAM tables, there is no enforced referential integrity; as a result, you may be able to  fake  cross database foreign keys. However, this configuration is not officially supported by Django.Several contrib apps include models, and some apps depend on others. Since cross-database relationships are impossible, this creates some restrictions on how you can split these models across databases:In addition, some objects are automatically created just after migrate creates a table to hold them in a database:For common setups with multiple databases, it isn t useful to have these objects in more than one database. Common setups include primary/replica and connecting to external databases. Therefore, it s recommended to write a database router that allows synchronizing these three models to only one database. Use the same approach for contrib and third-party apps that don t need their tables in multiple databases.WarningIf you re synchronizing content types to more than one database, be aware that their primary keys may not match across databases. This may result in data corruption or data loss."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-lookups/#a-simple-lookup-example", "para": "Let s start with a simple custom lookup. We will write a custom lookup ne which works opposite to exact. Author.objects.filter(name__ne='Jack') will translate to the SQL:This SQL is backend independent, so we don t need to worry about different databases.There are two steps to making this work. Firstly we need to implement the lookup, then we need to tell Django about it. The implementation is quite straightforward:To register the NotEqual lookup we will just need to call register_lookup on the field class we want the lookup to be available. In this case, the lookup makes sense on all Field subclasses, so we register it with Field directly:Lookup registration can also be done using a decorator pattern:We can now use foo__ne for any field foo. You will need to ensure that this registration happens before you try to create any querysets using it. You could place the implementation in a models.py file, or register the lookup in the ready() method of an AppConfig.Taking a closer look at the implementation, the first required attribute is lookup_name. This allows the ORM to understand how to interpret name__ne and use NotEqual to generate the SQL. By convention, these names are always lowercase strings containing only letters, but the only hard requirement is that it must not contain the string __.We then need to define the as_sql method. This takes a SQLCompiler object, called compiler,  and the active database connection. SQLCompiler objects are not documented, but the only thing we need to know about them is that they have a compile() method which returns a tuple containing an SQL string, and the parameters to be interpolated into that string. In most cases, you don t need to use it directly and can pass it on to process_lhs() and process_rhs().A Lookup works against two values, lhs and rhs, standing for left-hand side and right-hand side. The left-hand side is usually a field reference, but it can be anything implementing the query expression API. The right-hand is the value given by the user. In the example Author.objects.filter(name__ne='Jack'), the left-hand side is a reference to the name field of the Author model, and 'Jack' is the right-hand side.We call process_lhs and process_rhs to convert them into the values we need for SQL using the compiler object described before. These methods return tuples containing some SQL and the parameters to be interpolated into that SQL, just as we need to return from our as_sql method. In the above example, process_lhs returns ('\"author\".\"name\"', []) and process_rhs returns ('\"%s\"', ['Jack']). In this example there were no parameters for the left hand side, but this would depend on the object we have, so we still need to include them in the parameters we return.Finally we combine the parts into an SQL expression with <>, and supply all the parameters for the query. We then return a tuple containing the generated SQL string and the parameters."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-lookups/#a-simple-transformer-example", "para": "The custom lookup above is great, but in some cases you may want to be able to chain lookups together. For example, let s suppose we are building an application where we want to make use of the abs() operator. We have an Experiment model which records a start value, end value, and the change (start - end). We would like to find all experiments where the change was equal to a certain amount (Experiment.objects.filter(change__abs=27)), or where it did not exceed a certain amount (Experiment.objects.filter(change__abs__lt=27)).NoteThis example is somewhat contrived, but it nicely demonstrates the range of functionality which is possible in a database backend independent manner, and without duplicating functionality already in Django.We will start by writing an AbsoluteValue transformer. This will use the SQL function ABS() to transform the value before comparison:Next, let s register it for IntegerField:We can now run the queries we had before. Experiment.objects.filter(change__abs=27) will generate the following SQL:By using Transform instead of Lookup it means we are able to chain further lookups afterwards. So Experiment.objects.filter(change__abs__lt=27) will generate the following SQL:Note that in case there is no other lookup specified, Django interprets change__abs=27 as change__abs__exact=27.This also allows the result to be used in ORDER BY and DISTINCT ON clauses. For example Experiment.objects.order_by('change__abs') generates:And on databases that support distinct on fields (such as PostgreSQL), Experiment.objects.distinct('change__abs') generates:Ordering and distinct support as described in the last two paragraphs was added.When looking for which lookups are allowable after the Transform has been applied, Django uses the output_field attribute. We didn t need to specify this here as it didn t change, but supposing we were applying AbsoluteValue to some field which represents a more complex type (for example a point relative to an origin, or a complex number) then we may have wanted to specify that the transform returns a FloatField type for further lookups. This can be done by adding an output_field attribute to the transform:This ensures that further lookups like abs__lte behave as they would for a FloatField."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-lookups/#writing-an-efficient-abs-lt-lookup", "para": "When using the above written abs lookup, the SQL produced will not use indexes efficiently in some cases. In particular, when we use change__abs__lt=27, this is equivalent to change__gt=-27 AND change__lt=27. (For the lte case we could use the SQL BETWEEN).So we would like Experiment.objects.filter(change__abs__lt=27) to generate the following SQL:The implementation is:There are a couple of notable things going on. First, AbsoluteValueLessThan isn t calling process_lhs(). Instead it skips the transformation of the lhs done by AbsoluteValue and uses the original lhs. That is, we want to get \"experiments\".\"change\" not ABS(\"experiments\".\"change\"). Referring directly to self.lhs.lhs is safe as AbsoluteValueLessThan can be accessed only from the AbsoluteValue lookup, that is the lhs is always an instance of AbsoluteValue.Notice also that  as both sides are used multiple times in the query the params need to contain lhs_params and rhs_params multiple times.The final query does the inversion (27 to -27) directly in the database. The reason for doing this is that if the self.rhs is something else than a plain integer value (for example an F() reference) we can t do the transformations in Python.NoteIn fact, most lookups with __abs could be implemented as range queries like this, and on most database backends it is likely to be more sensible to do so as you can make use of the indexes. However with PostgreSQL you may want to add an index on abs(change) which would allow these queries to be very efficient."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-lookups/#a-bilateral-transformer-example", "para": "The AbsoluteValue example we discussed previously is a transformation which applies to the left-hand side of the lookup. There may be some cases where you want the transformation to be applied to both the left-hand side and the right-hand side. For instance, if you want to filter a queryset based on the equality of the left and right-hand side insensitively to some SQL function.Let s examine the simple example of case-insensitive transformation here. This transformation isn t very useful in practice as Django already comes with a bunch of built-in case-insensitive lookups, but it will be a nice demonstration of bilateral transformations in a database-agnostic way.We define an UpperCase transformer which uses the SQL function UPPER() to transform the values before comparison. We define bilateral = True to indicate that this transformation should apply to both lhs and rhs:Next, let s register it:Now, the queryset Author.objects.filter(name__upper=\"doe\") will generate a case insensitive query like this:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-lookups/#writing-alternative-implementations-for-existing-lookups", "para": "Sometimes different database vendors require different SQL for the same operation. For this example we will rewrite a custom implementation for MySQL for the NotEqual operator. Instead of <> we will be using != operator. (Note that in reality almost all databases support both, including all the official databases supported by Django).We can change the behavior on a specific backend by creating a subclass of NotEqual with an as_mysql method:We can then register it with Field. It takes the place of the original NotEqual class as it has the same lookup_name.When compiling a query, Django first looks for as_%s % connection.vendor methods, and then falls back to as_sql. The vendor names for the in-built backends are sqlite, postgresql, oracle and mysql."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-lookups/#how-django-determines-the-lookups-and-transforms-which-are-used", "para": "In some cases you may wish to dynamically change which Transform or Lookup is returned based on the name passed in, rather than fixing it. As an example, you could have a field which stores coordinates or an arbitrary dimension, and wish to allow a syntax like .filter(coords__x7=4) to return the objects where the 7th coordinate has value 4. In order to do this, you would override get_lookup with something like:You would then define get_coordinate_lookup appropriately to return a Lookup subclass which handles the relevant value of dimension.There is a similarly named method called get_transform(). get_lookup() should always return a Lookup subclass, and get_transform() a Transform subclass. It is important to remember that Transform objects can be further filtered on, and Lookup objects cannot.When filtering, if there is only one lookup name remaining to be resolved, we will look for a Lookup. If there are multiple names, it will look for a Transform. In the situation where there is only one name and a Lookup is not found, we look for a Transform and then the exact lookup on that Transform. All call sequences always end with a Lookup. To clarify:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/expressions/#supported-arithmetic", "para": "Django supports negation, addition, subtraction, multiplication, division, modulo arithmetic, and the power operator on query expressions, using Python constants, variables, and even other expressions.Support for negation was added."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/expressions/#some-examples", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/expressions/#built-in-expressions", "para": "NoteThese expressions are defined in django.db.models.expressions and django.db.models.aggregates, but for convenience they re available and usually imported from django.db.models.An F() object represents the value of a model field or annotated column. It makes it possible to refer to model field values and perform  database operations using them without actually having to pull them out of the  database into Python memory.Instead, Django uses the F() object to generate an SQL expression that describes the required operation at the database level.This is easiest to understand through an example. Normally, one might do something like this:Here, we have pulled the value of reporter.stories_filed from the database into memory and manipulated it using familiar Python operators, and then saved the object back to the database. But instead we could also have done:Although reporter.stories_filed = F('stories_filed') + 1 looks like a normal Python assignment of value to an instance attribute, in fact it s an SQL construct describing an operation on the database.When Django encounters an instance of F(), it overrides the standard Python operators to create an encapsulated SQL expression; in this case, one which instructs the database to increment the database field represented by reporter.stories_filed.Whatever value is or was on reporter.stories_filed, Python never gets to know about it - it is dealt with entirely by the database. All Python does, through Django s F() class, is create the SQL syntax to refer to the field and describe the operation.To access the new value saved this way, the object must be reloaded:As well as being used in operations on single instances as above, F() can be used on QuerySets of object instances, with update(). This reduces the two queries we were using above - the get() and the save() - to just one:We can also use update() to increment the field value on multiple objects - which could be very much faster than pulling them all into Python from the database, looping over them, incrementing the field value of each one, and saving each one back to the database:F() therefore can offer performance advantages by:Another useful benefit of F() is that having the database - rather than Python - update a field s value avoids a race condition.If two Python threads execute the code in the first example above, one thread could retrieve, increment, and save a field s value after the other has retrieved it from the database. The value that the second thread saves will be based on the original value; the work of the first thread will simply be lost.If the database is responsible for updating the field, the process is more robust: it will only ever update the field based on the value of the field in the database when the save() or update() is executed, rather than based on its value when the instance was retrieved.F() objects assigned to model fields persist after saving the model instance and will be applied on each save(). For example:stories_filed will be updated twice in this case. If it s initially 1, the final value will be 3.F() is also very useful in QuerySet filters, where they make it possible to filter a set of objects against criteria based on their field values, rather than on Python values.This is documented in using F() expressions in queries.F() can be used to create dynamic fields on your models by combining different fields with arithmetic:If the fields that you re combining are of different types you ll need to tell Django what kind of field will be returned. Since F() does not directly support output_field you will need to wrap the expression with ExpressionWrapper:When referencing relational fields such as ForeignKey, F() returns the primary key value rather than a model instance:Use F() and the nulls_first or nulls_last keyword argument to Expression.asc() or desc() to control the ordering of a field s null values. By default, the ordering depends on your database.For example, to sort companies that haven t been contacted (last_contacted is null) after companies that have been contacted:Func() expressions are the base type of all expressions that involve database functions like COALESCE and LOWER, or aggregates like SUM. They can be used directly:or they can be used to build a library of database functions:But both cases will result in a queryset where each model is annotated with an extra attribute field_lower produced, roughly, from the following SQL:See Database Functions for a list of built-in database functions.The Func API is as follows:A class attribute describing the function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None.A class attribute, as a format string, that describes the SQL that is generated for this function. Defaults to '%(function)s(%(expressions)s)'.If you re constructing SQL like strftime('%W', 'date') and need a literal % character in the query, quadruple it (%%%%) in the template attribute because the string is interpolated twice: once during the template interpolation in as_sql() and once in the SQL interpolation with the query parameters in the database cursor.A class attribute that denotes the character used to join the list of expressions together. Defaults to ', '.A class attribute that denotes the number of arguments the function accepts. If this attribute is set and the function is called with a different number of expressions, TypeError will be raised. Defaults to None.Generates the SQL for the database function.The as_vendor() methods should use the function, template, arg_joiner, and any other **extra_context parameters to customize the SQL as needed. For example:To avoid a SQL injection vulnerability, extra_context must not contain untrusted user input as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them.The *expressions argument is a list of positional expressions that the function will be applied to. The expressions will be converted to strings, joined together with arg_joiner, and then interpolated into the template as the expressions placeholder.Positional arguments can be expressions or Python values. Strings are assumed to be column references and will be wrapped in F() expressions while other values will be wrapped in Value() expressions.The **extra kwargs are key=value pairs that can be interpolated into the template attribute. To avoid a SQL injection vulnerability, extra must not contain untrusted user input as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them.The function, template, and arg_joiner keywords can be used to replace the attributes of the same name without having to define your own class. output_field can be used to define the expected return type.An aggregate expression is a special case of a Func() expression that informs the query that a GROUP BY clause is required. All of the aggregate functions, like Sum() and Count(), inherit from Aggregate().Since Aggregates are expressions and wrap expressions, you can represent some complex computations:The Aggregate API is as follows:A class attribute, as a format string, that describes the SQL that is generated for this aggregate. Defaults to '%(function)s( %(expressions)s )'.A class attribute describing the aggregate function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None.Defaults to True since most aggregate functions can be used as the source expression in Window.A class attribute determining whether or not this aggregate function allows passing a distinct keyword argument. If set to False (default), TypeError is raised if distinct=True is passed.The expressions positional arguments can include expressions or the names of model fields. They will be converted to a string and used as the expressions placeholder within the template.The output_field argument requires a model field instance, like IntegerField() or BooleanField(), into which Django will load the value after it s retrieved from the database. Usually no arguments are needed when instantiating the model field as any arguments relating to data validation (max_length, max_digits, etc.) will not be enforced on the expression s output value.Note that output_field is only required when Django is unable to determine what field type the result should be. Complex expressions that mix field types should define the desired output_field. For example, adding an IntegerField() and a FloatField() together should probably have output_field=FloatField() defined.The distinct argument determines whether or not the aggregate function should be invoked for each distinct value of expressions (or set of values, for multiple expressions). The argument is only supported on aggregates that have allow_distinct set to True.The filter argument takes a Q object that s used to filter the rows that are aggregated. See Conditional aggregation and Filtering on annotations for example usage.The **extra kwargs are key=value pairs that can be interpolated into the template attribute.The allow_distinct attribute and distinct argument were added.Creating your own aggregate is extremely easy. At a minimum, you need to define function, but you can also completely customize the SQL that is generated. Here s a brief example:A Value() object represents the smallest possible component of an expression: a simple value. When you need to represent the value of an integer, boolean, or string within an expression, you can wrap that value within a Value().You will rarely need to use Value() directly. When you write the expression F('field') + 1, Django implicitly wraps the 1 in a Value(), allowing simple values to be used in more complex expressions. You will need to use Value() when you want to pass a string to an expression. Most expressions interpret a string argument as the name of a field, like Lower('name').The value argument describes the value to be included in the expression, such as 1, True, or None. Django knows how to convert these Python values into their corresponding database type.The output_field argument should be a model field instance, like IntegerField() or BooleanField(), into which Django will load the value after it s retrieved from the database. Usually no arguments are needed when instantiating the model field as any arguments relating to data validation (max_length, max_digits, etc.) will not be enforced on the expression s output value.ExpressionWrapper simply surrounds another expression and provides access to properties, such as output_field, that may not be available on other expressions. ExpressionWrapper is necessary when using arithmetic on F() expressions with different types as described in Using F() with annotations.Conditional expressions allow you to use if   elif   else logic in queries. Django natively supports SQL CASE expressions. For more details see Conditional Expressions.You can add an explicit subquery to a QuerySet using the Subquery expression.For example, to annotate each post with the email address of the author of the newest comment on that post:On PostgreSQL, the SQL looks like:NoteThe examples in this section are designed to show how to force Django to execute a subquery. In some cases it may be possible to write an equivalent queryset that performs the same task more clearly or efficiently.Use OuterRef when a queryset in a Subquery needs to refer to a field from the outer query. It acts like an F expression except that the check to see if it refers to a valid field isn t made until the outer queryset is resolved.Instances of OuterRef may be used in conjunction with nested instances of Subquery to refer to a containing queryset that isn t the immediate parent. For example, this queryset would need to be within a nested pair of Subquery instances to resolve correctly:There are times when a single column must be returned from a Subquery, for instance, to use a Subquery as the target of an __in lookup. To return all comments for posts published within the last day:In this case, the subquery must use values() to return only a single column: the primary key of the post.To prevent a subquery from returning multiple rows, a slice ([:1]) of the queryset is used:In this case, the subquery must only return a single column and a single row: the email address of the most recently created comment.(Using get() instead of a slice would fail because the OuterRef cannot be resolved until the queryset is used within a Subquery.)Exists is a Subquery subclass that uses an SQL EXISTS statement. In many cases it will perform better than a subquery since the database is able to stop evaluation of the subquery when a first matching row is found.For example, to annotate each post with whether or not it has a comment from within the last day:On PostgreSQL, the SQL looks like:It s unnecessary to force Exists to refer to a single column, since the columns are discarded and a boolean result is returned. Similarly, since ordering is unimportant within an SQL EXISTS subquery and would only degrade performance, it s automatically removed.You can query using NOT EXISTS with ~Exists().It s not possible to filter directly using Subquery and Exists, e.g.:You must filter on a subquery expression by first annotating the queryset and then filtering based on that annotation:Aggregates may be used within a Subquery, but they require a specific combination of filter(), values(), and annotate() to get the subquery grouping correct.Assuming both models have a length field, to find posts where the post length is greater than the total length of all combined comments:The initial filter(...) limits the subquery to the relevant parameters. order_by() removes the default ordering (if any) on the Comment model. values('post') aggregates comments by Post. Finally, annotate(...) performs the aggregation. The order in which these queryset methods are applied is important. In this case, since the subquery must be limited to a single column, values('total') is required.This is the only way to perform an aggregation within a Subquery, as using aggregate() attempts to evaluate the queryset (and if there is an OuterRef, this will not be possible to resolve).Sometimes database expressions can t easily express a complex WHERE clause. In these edge cases, use the RawSQL expression. For example:These extra lookups may not be portable to different database engines (because you re explicitly writing SQL code) and violate the DRY principle, so you should avoid them if possible.WarningTo protect against SQL injection attacks, you must escape any parameters that the user can control by using params. params is a required argument to force you to acknowledge that you re not interpolating your SQL with user-provided data.You also must not quote placeholders in the SQL string. This example is vulnerable to SQL injection because of the quotes around %s:You can read more about how Django s SQL injection protection works.Window functions provide a way to apply functions on partitions. Unlike a normal aggregation function which computes a final result for each set defined by the group by, window functions operate on frames and partitions, and compute the result for each row.You can specify multiple windows in the same query which in Django ORM would be equivalent to including multiple expressions in a QuerySet.annotate() call. The ORM doesn t make use of named windows, instead they are part of the selected columns.Defaults to False. The SQL standard disallows referencing window functions in the WHERE clause and Django raises an exception when constructing a QuerySet that would do that.Defaults to %(expression)s OVER (%(window)s)'. If only the expression argument is provided, the window clause will be blank.The Window class is the main expression for an OVER clause.The expression argument is either a window function, an aggregate function, or an expression that s compatible in a window clause.The partition_by argument is a list of expressions (column names should be wrapped in an F-object) that control the partitioning of the rows. Partitioning narrows which rows are used to compute the result set.The output_field is specified either as an argument or by the expression.The order_by argument accepts a sequence of expressions on which you can call asc() and desc(). The ordering controls the order in which the expression is applied. For example, if you sum over the rows in a partition, the first result is just the value of the first row, the second is the sum of first and second row.The frame parameter specifies which other rows that should be used in the computation. See Frames for details.For example, to annotate each movie with the average rating for the movies by the same studio in the same genre and release year:This makes it easy to check if a movie is rated better or worse than its peers.You may want to apply multiple expressions over the same window, i.e., the same partition and frame. For example, you could modify the previous example to also include the best and worst rating in each movie s group (same studio, genre, and release year) by using three window functions in the same query. The partition and ordering from the previous example is extracted into a dictionary to reduce repetition:Among Django s built-in database backends, MySQL 8.0.2+, PostgreSQL, and Oracle support window expressions. Support for different window expression features varies among the different databases. For example, the options in asc() and desc() may not be supported. Consult the documentation for your database as needed.For a window frame, you can choose either a range-based sequence of rows or an ordinary sequence of rows.This attribute is set to 'RANGE'.PostgreSQL has limited support for ValueRange and only supports use of the standard start and end points, such as CURRENT ROW and UNBOUNDED FOLLOWING.This attribute is set to 'ROWS'.Both classes return SQL with the template:Frames narrow the rows that are used for computing the result. They shift from some start point to some specified end point. Frames can be used with and without partitions, but it s often a good idea to specify an ordering of the window to ensure a deterministic result. In a frame, a peer in a frame is a row with an equivalent value, or all rows if an ordering clause isn t present.The default starting point for a frame is UNBOUNDED PRECEDING which is the first row of the partition. The end point is always explicitly included in the SQL generated by the ORM and is by default UNBOUNDED FOLLOWING. The default frame includes all rows from the partition to the last row in the set.The accepted values for the start and end arguments are None, an integer, or zero. A negative integer for start results in N preceding, while None yields UNBOUNDED PRECEDING. For both start and end, zero will return CURRENT ROW. Positive integers are accepted for end.There s a difference in what CURRENT ROW includes. When specified in ROWS mode, the frame starts or ends with the current row. When specified in RANGE mode, the frame starts or ends at the first or last peer according to the ordering clause. Thus, RANGE CURRENT ROW evaluates the expression for rows which have the same value specified by the ordering. Because the template includes both the start and end points, this may be expressed with:If a movie s  peers  are described as movies released by the same studio in the same genre in the same year, this RowRange example annotates each movie with the average rating of a movie s two prior and two following peers:If the database supports it, you can specify the start and end points based on values of an expression in the partition. If the released field of the Movie model stores the release month of each movies, this ValueRange example annotates each movie with the average rating of a movie s peers released between twelve months before and twelve months after the each movie."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/expressions/#technical-information", "para": "Below you ll find technical implementation details that may be useful to library authors. The technical API and examples below will help with creating generic query expressions that can extend the built-in functionality that Django provides.Query expressions implement the query expression API, but also expose a number of extra methods and attributes listed below. All query expressions must inherit from Expression() or a relevant subclass.When a query expression wraps another expression, it is responsible for calling the appropriate methods on the wrapped expression.Tells Django that this expression contains an aggregate and that a GROUP BY clause needs to be added to the query.Tells Django that this expression contains a Window expression. It s used, for example, to disallow window function expressions in queries that modify data.Tells Django that this expression can be referenced in QuerySet.filter(). Defaults to True.Tells Django that this expression can be used as the source expression in Window. Defaults to False.Provides the chance to do any pre-processing or validation of the expression before it s added to the query. resolve_expression() must also be called on any nested expressions. A copy() of self should be returned with any necessary transformations.query is the backend query implementation.allow_joins is a boolean that allows or denies the use of joins in the query.reuse is a set of reusable joins for multi-join scenarios.summarize is a boolean that, when True, signals that the query being computed is a terminal aggregate query.Returns an ordered list of inner expressions. For example:Takes a list of expressions and stores them such that get_source_expressions() can return them.Returns a clone (copy) of self, with any column aliases relabeled. Column aliases are renamed when subqueries are created. relabeled_clone() should also be called on any nested expressions and assigned to the clone.change_map is a dictionary mapping old aliases to new aliases.Example:A hook allowing the expression to coerce value into a more appropriate type.Responsible for returning the list of columns references by this expression. get_group_by_cols() should be called on any nested expressions. F() objects, in particular, hold a reference to a column.Returns the expression ready to be sorted in ascending order.nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage.Returns the expression ready to be sorted in descending order.nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage.Returns self with any modifications required to reverse the sort order within an order_by call. As an example, an expression implementing NULLS LAST would change its value to be NULLS FIRST. Modifications are only required for expressions that implement sort order like OrderBy. This method is called when reverse() is called on a queryset.You can write your own query expression classes that use, and can integrate with, other query expressions. Let s step through an example by writing an implementation of the COALESCE SQL function, without using the built-in Func() expressions.The COALESCE SQL function is defined as taking a list of columns or values. It will return the first column or value that isn t NULL.We ll start by defining the template to be used for SQL generation and an __init__() method to set some attributes:We do some basic validation on the parameters, including requiring at least 2 columns or values, and ensuring they are expressions. We are requiring output_field here so that Django knows what kind of model field to assign the eventual result to.Now we implement the pre-processing and validation. Since we do not have any of our own validation at this point, we just delegate to the nested expressions:Next, we write the method responsible for generating the SQL:as_sql() methods can support custom keyword arguments, allowing as_vendorname() methods to override data used to generate the SQL string. Using as_sql() keyword arguments for customization is preferable to mutating self within as_vendorname() methods as the latter can lead to errors when running on different database backends. If your class relies on class attributes to define data, consider allowing overrides in your as_sql() method.We generate the SQL for each of the expressions by using the compiler.compile() method, and join the result together with commas. Then the template is filled out with our data and the SQL and parameters are returned.We ve also defined a custom implementation that is specific to the Oracle backend. The as_oracle() function will be called instead of as_sql() if the Oracle backend is in use.Finally, we implement the rest of the methods that allow our query expression to play nice with other query expressions:Let s see how it works:Since a Func s keyword arguments for __init__()  (**extra) and as_sql() (**extra_context) are interpolated into the SQL string rather than passed as query parameters (where the database driver would escape them), they must not contain untrusted user input.For example, if substring is user-provided, this function is vulnerable to SQL injection:This function generates a SQL string without any parameters. Since substring is passed to super().__init__() as a keyword argument, it s interpolated into the SQL string before the query is sent to the database.Here s a corrected rewrite:With substring instead passed as a positional argument, it ll be passed as a parameter in the database query.If you re using a database backend that uses a different SQL syntax for a certain function, you can add support for it by monkey patching a new method onto the function s class.Let s say we re writing a backend for Microsoft s SQL Server which uses the SQL LEN instead of LENGTH for the Length function. We ll monkey patch a new method called as_sqlserver() onto the Length class:You can also customize the SQL using the template parameter of as_sql().We use as_sqlserver() because django.db.connection.vendor returns sqlserver for the backend.Third-party backends can register their functions in the top level __init__.py file of the backend package or in a top level expressions.py file (or package) that is imported from the top level __init__.py.For user projects wishing to patch the backend that they re using, this code should live in an AppConfig.ready() method."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/conditional-expressions/#the-conditional-expression-classes", "para": "We ll be using the following model in the subsequent examples:A When() object is used to encapsulate a condition and its result for use in the conditional expression. Using a When() object is similar to using the filter() method. The condition can be specified using field lookups or Q objects. The result is provided using the then keyword.Some examples:Keep in mind that each of these values can be an expression.NoteSince the then keyword argument is reserved for the result of the When(), there is a potential conflict if a Model has a field named then. This can be resolved in two ways:A Case() expression is like the if   elif   else statement in Python. Each condition in the provided When() objects is evaluated in order, until one evaluates to a truthful value. The result expression from the matching When() object is returned.A simple example:Case() accepts any number of When() objects as individual arguments. Other options are provided using keyword arguments. If none of the conditions evaluate to TRUE, then the expression given with the default keyword argument is returned. If a default argument isn t provided, None is used.If we wanted to change our previous query to get the discount based on how long the Client has been with us, we could do so using lookups:NoteRemember that the conditions are evaluated in order, so in the above example we get the correct result even though the second condition matches both Jane Doe and Jack Black. This works just like an if   elif   else statement in Python.Case() also works in a filter() clause. For example, to find gold clients that registered more than a month ago and platinum clients that registered more than a year ago:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/conditional-expressions/#advanced-queries", "para": "Conditional expressions can be used in annotations, aggregations, lookups, and updates. They can also be combined and nested with other expressions. This allows you to make powerful conditional queries.Let s say we want to change the account_type for our clients to match their registration dates. We can do this using a conditional expression and the update() method:What if we want to find out how many clients there are for each account_type? We can use the filter argument of aggregate functions to achieve this:This aggregate produces a query with the SQL 2003 FILTER WHERE syntax on databases that support it:On other databases, this is emulated using a CASE statement:The two SQL statements are functionally equivalent but the more explicit FILTER may perform better."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/database-functions/#comparison-and-conversion-functions", "para": "Forces the result type of expression to be the one from output_field.Usage example:Accepts a list of at least two field names or expressions and returns the first non-null value (note that an empty string is not considered a null value). Each argument must be of a similar type, so mixing text and numbers will result in a database error.Usage examples:WarningA Python value passed to Coalesce on MySQL may be converted to an incorrect type unless explicitly cast to the correct database type:Accepts a list of at least two field names or expressions and returns the greatest value. Each argument must be of a similar type, so mixing text and numbers will result in a database error.Usage example:annotated_comment.last_updated will be the most recent of blog.modified and comment.modified.WarningThe behavior of Greatest when one or more expression may be null varies between databases:The PostgreSQL behavior can be emulated using Coalesce if you know a sensible minimum value to provide as a default.Accepts a list of at least two field names or expressions and returns the least value. Each argument must be of a similar type, so mixing text and numbers will result in a database error.WarningThe behavior of Least when one or more expression may be null varies between databases:The PostgreSQL behavior can be emulated using Coalesce if you know a sensible maximum value to provide as a default.Accepts two expressions and returns None if they are equal, otherwise returns expression1.Caveats on OracleDue to an Oracle convention, this function returns the empty string instead of None when the expressions are of type CharField.Passing Value(None) to expression1 is prohibited on Oracle since Oracle doesn t accept NULL as the first argument."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/database-functions/#date-functions", "para": "We ll be using the following model in examples of each function:Extracts a component of a date as a number.Takes an expression representing a DateField, DateTimeField, TimeField, or DurationField and a lookup_name, and returns the part of the date referenced by lookup_name as an IntegerField. Django usually uses the databases  extract function, so you may use any lookup_name that your database supports. A tzinfo subclass, usually provided by pytz, can be passed to extract a value in a specific timezone.Given the datetime 2015-06-15 23:30:01.000321+00:00, the built-in lookup_names return:If a different timezone like Australia/Melbourne is active in Django, then the datetime is converted to the timezone before the value is extracted. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be the same as above except for:week_day valuesThe week_day lookup_type is calculated differently from most databases and from Python s standard functions. This function will return 1 for Sunday, 2 for Monday, through 7 for Saturday.The equivalent calculation in Python is:week valuesThe week lookup_type is calculated based on ISO-8601, i.e., a week starts on a Monday. The first week of a year is the one that contains the year s first Thursday, i.e. the first week has the majority (four or more) of its days in the year. The value returned is in the range 1 to 52 or 53.Each lookup_name above has a corresponding Extract subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use ExtractYear(...) rather than Extract(..., lookup_name='year').Usage example:Returns the ISO-8601 week-numbering year.These are logically equivalent to Extract('date_field', lookup_name). Each class is also a Transform registered on DateField and DateTimeField as __(lookup_name), e.g. __year.Since DateFields don t have a time component, only Extract subclasses that deal with date-parts can be used with DateField:In addition to the following, all extracts for DateField listed above may also be used on DateTimeFields .These are logically equivalent to Extract('datetime_field', lookup_name). Each class is also a Transform registered on DateTimeField as __(lookup_name), e.g. __minute.DateTimeField examples:When USE_TZ is True then datetimes are stored in the database in UTC. If a different timezone is active in Django, the datetime is converted to that timezone before the value is extracted. The example below converts to the Melbourne timezone (UTC +10:00), which changes the day, weekday, and hour values that are returned:Explicitly passing the timezone to the Extract function behaves in the same way, and takes priority over an active timezone:Returns the database server s current date and time when the query is executed, typically using the SQL CURRENT_TIMESTAMP.Usage example:PostgreSQL considerationsOn PostgreSQL, the SQL CURRENT_TIMESTAMP returns the time that the current transaction started. Therefore for cross-database compatibility, Now() uses STATEMENT_TIMESTAMP instead. If you need the transaction timestamp, use django.contrib.postgres.functions.TransactionNow.Truncates a date up to a significant component.When you only care if something happened in a particular year, hour, or day, but not the exact second, then Trunc (and its subclasses) can be useful to filter or aggregate your data. For example, you can use Trunc to calculate the number of sales per day.Trunc takes a single expression, representing a DateField, TimeField, or DateTimeField, a kind representing a date or time part, and an output_field that s either DateTimeField(), TimeField(), or DateField(). It returns a datetime, date, or time depending on output_field, with fields up to kind set to their minimum value. If output_field is omitted, it will default to the output_field of expression. A tzinfo subclass, usually provided by pytz, can be passed to truncate a value in a specific timezone.Given the datetime 2015-06-15 14:30:50.000321+00:00, the built-in kinds return:If a different timezone like Australia/Melbourne is active in Django, then the datetime is converted to the new timezone before the value is truncated. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be:The year has an offset of +11:00 because the result transitioned into daylight saving time.Each kind above has a corresponding Trunc subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use TruncYear(...) rather than Trunc(..., kind='year').The subclasses are all defined as transforms, but they aren t registered with any fields, because the obvious lookup names are already reserved by the Extract subclasses.Usage example:Truncates to midnight on the Monday of the week.These are logically equivalent to Trunc('date_field', kind). They truncate all parts of the date up to kind which allows grouping or filtering dates with less precision. expression can have an output_field of either DateField or DateTimeField.Since DateFields don t have a time component, only Trunc subclasses that deal with date-parts can be used with DateField:TruncDate casts expression to a date rather than using the built-in SQL truncate function. It s also registered as a transform on  DateTimeField as __date.TruncTime casts expression to a time rather than using the built-in SQL truncate function. It s also registered as a transform on DateTimeField as __time.These are logically equivalent to Trunc('datetime_field', kind). They truncate all parts of the date up to kind and allow grouping or filtering datetimes with less precision. expression must have an output_field of DateTimeField.Usage example:These are logically equivalent to Trunc('time_field', kind). They truncate all parts of the time up to kind which allows grouping or filtering times with less precision. expression can have an output_field of either TimeField or DateTimeField.Since TimeFields don t have a date component, only Trunc subclasses that deal with time-parts can be used with TimeField:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/database-functions/#math-functions", "para": "We ll be using the following model in math function examples:Returns the absolute value of a numeric field or expression.Usage example:It can also be registered as a transform. For example:Returns the arccosine of a numeric field or expression. The expression value must be within the range -1 to 1.Usage example:It can also be registered as a transform. For example:Returns the arcsine of a numeric field or expression. The expression value must be in the range -1 to 1.Usage example:It can also be registered as a transform. For example:Returns the arctangent of a numeric field or expression.Usage example:It can also be registered as a transform. For example:Returns the arctangent of expression1 / expression2.Usage example:Returns the smallest integer greater than or equal to a numeric field or expression.Usage example:It can also be registered as a transform. For example:Returns the cosine  of a numeric field or expression.Usage example:It can also be registered as a transform. For example:Returns the cotangent of a numeric field or expression.Usage example:It can also be registered as a transform. For example:Converts a numeric field or expression from radians to degrees.Usage example:It can also be registered as a transform. For example:Returns the value of e (the natural logarithm base) raised to the power of a numeric field or expression.Usage example:It can also be registered as a transform. For example:Returns the largest integer value not greater than a numeric field or expression.Usage example:It can also be registered as a transform. For example:Returns the natural logarithm a numeric field or expression.Usage example:It can also be registered as a transform. For example:Accepts two numeric fields or expressions and returns the logarithm of the first to base of the second.Usage example:Accepts two numeric fields or expressions and returns the remainder of the first divided by the second (modulo operation).Usage example:Returns the value of the mathematical constant  .Accepts two numeric fields or expressions and returns the value of the first raised to the power of the second.Usage example:Converts a numeric field or expression from degrees to radians.Usage example:It can also be registered as a transform. For example:Rounds a numeric field or expression to the nearest integer. Whether half values are rounded up or down depends on the database.Usage example:It can also be registered as a transform. For example:Returns the sine of a numeric field or expression.Usage example:It can also be registered as a transform. For example:Returns the square root of a nonnegative numeric field or expression.Usage example:It can also be registered as a transform. For example:Returns the tangent of a numeric field or expression.Usage example:It can also be registered as a transform. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/database-functions/#text-functions", "para": "Accepts a numeric field or expression and returns the text representation of the expression as a single character. It works the same as Python s chr() function.Like Length, it can be registered as a transform on IntegerField. The default lookup name is chr.Usage example:Accepts a list of at least two text fields or expressions and returns the concatenated text. Each argument must be of a text or char type. If you want to concatenate a TextField() with a CharField(), then be sure to tell Django that the output_field should be a TextField(). Specifying an output_field is also required when concatenating a Value as in the example below.This function will never have a null result. On backends where a null argument results in the entire expression being null, Django will ensure that each null part is converted to an empty string first.Usage example:Returns the first length characters of the given text field or expression.Usage example:Accepts a single text field or expression and returns the number of characters the value has. If the expression is null, then the length will also be null.Usage example:It can also be registered as a transform. For example:Accepts a single text field or expression and returns the lowercase representation.It can also be registered as a transform as described in Length.Usage example:Returns the value of the given text field or expression padded on the left side with fill_text so that the resulting value is length characters long. The default fill_text is a space.Usage example:Similar to Trim, but removes only leading spaces.Accepts a single text field or expression and returns the Unicode code point value for the first character of that expression. It works similar to Python s ord() function, but an exception isn t raised if the expression is more than one character long.It can also be registered as a transform as described in Length. The default lookup name is ord.Usage example:Returns the value of the given text field or expression repeated number times.Usage example:Replaces all occurrences of text with replacement in expression. The default replacement text is the empty string. The arguments to the function are case-sensitive.Usage example:Accepts a single text field or expression and returns the characters of that expression in reverse order.It can also be registered as a transform as described in Length. The default lookup name is reverse.Usage example:Returns the last length characters of the given text field or expression.Usage example:Similar to LPad, but pads on the right side.Similar to Trim, but removes only trailing spaces.Returns a positive integer corresponding to the 1-indexed position of the first occurrence of substring inside string, or 0 if substring is not found.Usage example:WarningIn MySQL, a database table s collation determines whether string comparisons (such as the expression and substring of this function) are case-sensitive. Comparisons are case-insensitive by default.Returns a substring of length length from the field or expression starting at position pos. The position is 1-indexed, so the position must be greater than 0. If length is None, then the rest of the string will be returned.Usage example:Returns the value of the given text field or expression with leading and trailing spaces removed.Usage example:Accepts a single text field or expression and returns the uppercase representation.It can also be registered as a transform as described in Length.Usage example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/database-functions/#window-functions", "para": "There are a number of functions to use in a Window expression for computing the rank of elements or the Ntile of some rows.Calculates the cumulative distribution of a value within a window or partition. The cumulative distribution is defined as the number of rows preceding or peered with the current row divided by the total number of rows in the frame.Equivalent to Rank but does not have gaps.Returns the value evaluated at the row that s the first row of the window frame, or None if no such value exists.Calculates the value offset by offset, and if no row exists there, returns default.default must have the same type as the expression, however, this is only validated by the database and not in Python.MariaDB and defaultMariaDB doesn t support the default parameter.Comparable to FirstValue, it calculates the last value in a given frame clause.Calculates the leading value in a given frame. Both offset and default are evaluated with respect to the current row.default must have the same type as the expression, however, this is only validated by the database and not in Python.MariaDB and defaultMariaDB doesn t support the default parameter.Computes the row relative to the offset nth (must be a positive value) within the window. Returns None if no row exists.Some databases may handle a nonexistent nth-value differently. For example, Oracle returns an empty string rather than None for character-based expressions. Django doesn t do any conversions in these cases.Calculates a partition for each of the rows in the frame clause, distributing numbers as evenly as possible between 1 and num_buckets. If the rows don t divide evenly into a number of buckets, one or more buckets will be represented more frequently.Computes the percentile rank of the rows in the frame clause. This computation is equivalent to evaluating:The following table explains the calculation for the percentile rank of a row:Comparable to RowNumber, this function ranks rows in the window. The computed rank contains gaps. Use DenseRank to compute rank without gaps.Computes the row number according to the ordering of either the frame clause or the ordering of the whole query if there is no partitioning of the window frame."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/databases/#general-notes", "para": "Persistent connections avoid the overhead of re-establishing a connection to the database in each request. They re controlled by the CONN_MAX_AGE parameter which defines the maximum lifetime of a connection. It can be set independently for each database.The default value is 0, preserving the historical behavior of closing the database connection at the end of each request. To enable persistent connections, set CONN_MAX_AGE to a positive number of seconds. For unlimited persistent connections, set it to None.Django opens a connection to the database when it first makes a database query. It keeps this connection open and reuses it in subsequent requests. Django closes the connection once it exceeds the maximum age defined by CONN_MAX_AGE or when it isn t usable any longer.In detail, Django automatically opens a connection to the database whenever it needs one and doesn t have one already   either because this is the first connection, or because the previous connection was closed.At the beginning of each request, Django closes the connection if it has reached its maximum age. If your database terminates idle connections after some time, you should set CONN_MAX_AGE to a lower value, so that Django doesn t attempt to use a connection that has been terminated by the database server. (This problem may only affect very low traffic sites.)At the end of each request, Django closes the connection if it has reached its maximum age or if it is in an unrecoverable error state. If any database errors have occurred while processing the requests, Django checks whether the connection still works, and closes it if it doesn t. Thus, database errors affect at most one request; if the connection becomes unusable, the next request gets a fresh connection.Since each thread maintains its own connection, your database must support at least as many simultaneous connections as you have worker threads.Sometimes a database won t be accessed by the majority of your views, for example because it s the database of an external system, or thanks to caching. In such cases, you should set CONN_MAX_AGE to a low value or even 0, because it doesn t make sense to maintain a connection that s unlikely to be reused. This will help keep the number of simultaneous connections to this database small.The development server creates a new thread for each request it handles, negating the effect of persistent connections. Don t enable them during development.When Django establishes a connection to the database, it sets up appropriate parameters, depending on the backend being used. If you enable persistent connections, this setup is no longer repeated every request. If you modify parameters such as the connection s isolation level or time zone, you should either restore Django s defaults at the end of each request, force an appropriate value at the beginning of each request, or disable persistent connections.Django assumes that all databases use UTF-8 encoding. Using other encodings may result in unexpected behavior such as  value too long  errors from your database for data that is valid in Django. See the database specific notes below for information on how to set up your database correctly."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/databases/#postgresql-notes", "para": "Django supports PostgreSQL 9.4 and higher. psycopg2 2.5.4 or higher is required, though the latest release is recommended.See HOST for details.Django needs the following parameters for its database connections:If these parameters already have the correct values, Django won t set them for every new connection, which improves performance slightly. You can configure them directly in postgresql.conf or more conveniently per database user with ALTER ROLE.Django will work just fine without this optimization, but each new connection will do some additional queries to set these parameters.Like PostgreSQL itself, Django defaults to the READ COMMITTED isolation level. If you need a higher isolation level such as REPEATABLE READ or SERIALIZABLE, set it in the OPTIONS part of your database configuration in DATABASES:NoteUnder higher isolation levels, your application should be prepared to handle exceptions raised on serialization failures. This option is designed for advanced uses.When specifying db_index=True on your model fields, Django typically outputs a single CREATE INDEX statement.  However, if the database type for the field is either varchar or text (e.g., used by CharField, FileField, and TextField), then Django will create an additional index that uses an appropriate PostgreSQL operator class for the column.  The extra index is necessary to correctly perform lookups that use the LIKE operator in their SQL, as is done with the contains and startswith lookup types.If you need to add a PostgreSQL extension (like hstore, postgis, etc.) using a migration, use the CreateExtension operation.When using QuerySet.iterator(), Django opens a server-side cursor. By default, PostgreSQL assumes that only the first 10% of the results of cursor queries will be fetched. The query planner spends less time planning the query and starts returning results faster, but this could diminish performance if more than 10% of the results are retrieved. PostgreSQL s assumptions on the number of rows retrieved for a cursor query is controlled with the cursor_tuple_fraction option.Using a connection pooler in transaction pooling mode (e.g. pgBouncer) requires disabling server-side cursors for that connection.Server-side cursors are local to a connection and remain open at the end of a transaction when AUTOCOMMIT is True. A subsequent transaction may attempt to fetch more results from a server-side cursor. In transaction pooling mode, there s no guarantee that subsequent transactions will use the same connection. If a different connection is used, an error is raised when the transaction references the server-side cursor, because server-side cursors are only accessible in the connection in which they were created.One solution is to disable server-side cursors for a connection in DATABASES by setting DISABLE_SERVER_SIDE_CURSORS to True.To benefit from server-side cursors in transaction pooling mode, you could set up another connection to the database in order to perform queries that use server-side cursors. This connection needs to either be directly to the database or to a connection pooler in session pooling mode.Another option is to wrap each QuerySet using server-side cursors in an atomic() block, because it disables autocommit for the duration of the transaction. This way, the server-side cursor will only live for the duration of the transaction.Django uses PostgreSQL s SERIAL data type to store auto-incrementing primary keys. A SERIAL column is populated with values from a sequence that keeps track of the next available value. Manually assigning a value to an auto-incrementing field doesn t update the field s sequence, which might later cause a conflict. For example:If you need to specify such values, reset the sequence afterwards to avoid reusing a value that s already in the table. The sqlsequencereset management command generates the SQL statements to do that.You can use the TEST['TEMPLATE'] setting to specify a template (e.g. 'template0') from which to create a test database.You can speed up test execution times by configuring PostgreSQL to be non-durable.WarningThis is dangerous: it will make your database more susceptible to data loss or corruption in the case of a server crash or power loss. Only use this on a development machine where you can easily restore the entire contents of all databases in the cluster."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/databases/#mysql-notes", "para": "Django supports MySQL 5.6 and higher.Django s inspectdb feature uses the information_schema database, which contains detailed data on all database schemas.Django expects the database to support Unicode (UTF-8 encoding) and delegates to it the task of enforcing transactions and referential integrity. It is important to be aware of the fact that the two latter ones aren t actually enforced by MySQL when using the MyISAM storage engine, see the next section.MySQL has several storage engines. You can change the default storage engine in the server configuration.MySQL s default storage engine is InnoDB. This engine is fully transactional and supports foreign key references. It s the recommended choice. However, the InnoDB autoincrement counter is lost on a MySQL restart because it does not remember the AUTO_INCREMENT value, instead recreating it as  max(id)+1 . This may result in an inadvertent reuse of AutoField values.The main drawbacks of MyISAM are that it doesn t support transactions or enforce foreign-key constraints.MySQL has a couple drivers that implement the Python Database API described in PEP 249:These drivers are thread-safe and provide connection pooling.In addition to a DB API driver, Django needs an adapter to access the database drivers from its ORM. Django provides an adapter for mysqlclient while MySQL Connector/Python includes its own.Django requires mysqlclient 1.3.13 or later.MySQL Connector/Python is available from the download page. The Django adapter is available in versions 1.1.X and later. It may not support the most recent releases of Django.If you plan on using Django s timezone support, use mysql_tzinfo_to_sql to load time zone tables into the MySQL database. This needs to be done just once for your MySQL server, not per database.You can create your database using the command-line tools and this SQL:This ensures all tables and columns will use UTF-8 by default.The collation setting for a column controls the order in which data is sorted as well as what strings compare as equal. It can be set on a database-wide level and also per-table and per-column. This is documented thoroughly in the MySQL documentation. In all cases, you set the collation by directly manipulating the database tables; Django doesn t provide a way to set this on the model definition.By default, with a UTF-8 database, MySQL will use the utf8_general_ci collation. This results in all string equality comparisons being done in a case-insensitive manner. That is, \"Fred\" and \"freD\" are considered equal at the database level. If you have a unique constraint on a field, it would be illegal to try to insert both \"aa\" and \"AA\" into the same column, since they compare as equal (and, hence, non-unique) with the default collation. If you want case-sensitive comparisons on a particular column or table, change the column or table to use the utf8_bin collation.Please note that according to MySQL Unicode Character Sets, comparisons for the utf8_general_ci collation are faster, but slightly less correct, than comparisons for utf8_unicode_ci. If this is acceptable for your application, you should use utf8_general_ci because it is faster. If this is not acceptable (for example, if you require German dictionary order), use utf8_unicode_ci because it is more accurate.WarningModel formsets validate unique fields in a case-sensitive manner. Thus when using a case-insensitive collation, a formset with unique field values that differ only by case will pass validation, but upon calling save(), an IntegrityError will be raised.Refer to the settings documentation.Connection settings are used in this order:In other words, if you set the name of the database in OPTIONS, this will take precedence over NAME, which would override anything in a MySQL option file.Here s a sample configuration which uses a MySQL option file:Several other MySQLdb connection options may be useful, such as ssl, init_command, and sql_mode.From MySQL 5.7 onwards and on fresh installs of MySQL 5.6, the default value of the sql_mode option contains STRICT_TRANS_TABLES. That option escalates warnings into errors when data are truncated upon insertion, so Django highly recommends activating a strict mode for MySQL to prevent data loss (either STRICT_TRANS_TABLES or STRICT_ALL_TABLES).If you need to customize the SQL mode, you can set the sql_mode variable like other MySQL options: either in a config file or with the entry 'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\" in the OPTIONS part of your database configuration in DATABASES.When running concurrent loads, database transactions from different sessions (say, separate threads handling different requests) may interact with each other. These interactions are affected by each session s transaction isolation level. You can set a connection s isolation level with an 'isolation_level' entry in the OPTIONS part of your database configuration in DATABASES. Valid values for this entry are the four standard isolation levels:or None to use the server s configured isolation level. However, Django works best with and defaults to read committed rather than MySQL s default, repeatable read. Data loss is possible with repeatable read.When Django generates the schema, it doesn t specify a storage engine, so tables will be created with whatever default storage engine your database server is configured for. The easiest solution is to set your database server s default storage engine to the desired engine.If you re using a hosting service and can t change your server s default storage engine, you have a couple of options.After the tables are created, execute an ALTER TABLE statement to convert a table to a new storage engine (such as InnoDB):This can be tedious if you have a lot of tables.Another option is to use the init_command option for MySQLdb prior to creating your tables:This sets the default storage engine upon connecting to the database. After your tables have been created, you should remove this option as it adds a query that is only needed during table creation to each database connection.There are known issues in even the latest versions of MySQL that can cause the case of a table name to be altered when certain SQL statements are executed under certain conditions. It is recommended that you use lowercase table names, if possible, to avoid any problems that might arise from this behavior. Django uses lowercase table names when it auto-generates table names from models, so this is mainly a consideration if you are overriding the table name via the db_table parameter.Both the Django ORM and MySQL (when using the InnoDB storage engine) support database savepoints.If you use the MyISAM storage engine please be aware of the fact that you will receive database-generated errors if you try to use the savepoint-related methods of the transactions API. The reason for this is that detecting the storage engine of a MySQL database/table is an expensive operation so it was decided it isn t worth to dynamically convert these methods in no-op s based in the results of such detection.Any fields that are stored with VARCHAR column types have their max_length restricted to 255 characters if you are using unique=True for the field. This affects CharField, SlugField.MySQL can index only the first N chars of a BLOB or TEXT column. Since TextField doesn t have a defined length, you can t mark it as unique=True. MySQL will report:  BLOB/TEXT column  <db_column>  used in key specification without a key length .MySQL 5.6.4 and later can store fractional seconds, provided that the column definition includes a fractional indication (e.g. DATETIME(6)). Earlier versions do not support them at all.Django will not upgrade existing columns to include fractional seconds if the database server supports it. If you want to enable them on an existing database, it s up to you to either manually update the column on the target database, by executing a command like:or using a RunSQL operation in a data migration.If you are using a legacy database that contains TIMESTAMP columns, you must set USE_TZ = False to avoid data corruption. inspectdb maps these columns to DateTimeField and if you enable timezone support, both MySQL and Django will attempt to convert the values from UTC to local time.MySQL does not support the NOWAIT, SKIP LOCKED, and OF options to the SELECT ... FOR UPDATE statement. If select_for_update() is used with nowait=True, skip_locked=True, or of then a NotSupportedError is raised.When performing a query on a string type, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. If your table contains the values 'abc', 'def' and you query for WHERE mycolumn=0, both rows will match. Similarly, WHERE mycolumn=1 will match the value 'abc1'. Therefore, string type fields included in Django will always cast the value to a string before using it in a query.If you implement custom model fields that inherit from Field directly, are overriding get_prep_value(), or use RawSQL, extra(), or raw(), you should ensure that you perform appropriate typecasting."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/databases/#sqlite-notes", "para": "Django supports SQLite 3.8.3 and later.SQLite provides an excellent development alternative for applications that are predominantly read-only or require a smaller installation footprint. As with all database servers, though, there are some differences that are specific to SQLite that you should be aware of.For all SQLite versions, there is some slightly counter-intuitive behavior when attempting to match some types of strings.  These are triggered when using the iexact or contains filters in Querysets. The behavior splits into two cases:1. For substring matching, all matches are done case-insensitively. That is a filter such as filter(name__contains=\"aa\") will match a name of \"Aabb\".2. For strings containing characters outside the ASCII range, all exact string matches are performed case-sensitively, even when the case-insensitive options are passed into the query. So the iexact filter will behave exactly the same as the exact filter in these cases.Some possible workarounds for this are documented at sqlite.org, but they aren t utilized by the default SQLite backend in Django, as incorporating them would be fairly difficult to do robustly. Thus, Django exposes the default SQLite behavior and you should be aware of this when doing case-insensitive or substring filtering.SQLite is meant to be a lightweight database, and thus can t support a high level of concurrency. OperationalError: database is locked errors indicate that your application is experiencing more concurrency than sqlite can handle in default configuration. This error means that one thread or process has an exclusive lock on the database connection and another thread timed out waiting for the lock the be released.Python s SQLite wrapper has a default timeout value that determines how long the second thread is allowed to wait on the lock before it times out and raises the OperationalError: database is locked error.If you re getting this error, you can solve it by:Switching to another database backend. At a certain point SQLite becomes too  lite  for real-world applications, and these sorts of concurrency errors indicate you ve reached that point.Rewriting your code to reduce concurrency and ensure that database transactions are short-lived.Increase the default timeout value by setting the timeout database option:This will simply make SQLite wait a bit longer before throwing  database is locked  errors; it won t really do anything to solve them.SQLite does not support the SELECT ... FOR UPDATE syntax. Calling it will have no effect.For most backends, raw queries (Manager.raw() or cursor.execute()) can use the  pyformat  parameter style, where placeholders in the query are given as '%(name)s' and the parameters are passed as a dictionary rather than a list. SQLite does not support this.There are special considerations described in Isolation In SQLite when modifying a table while iterating over it using QuerySet.iterator(). If a row is added, changed, or deleted within the loop, then that row may or may not appear, or may appear twice, in subsequent results fetched from the iterator. Your code must handle this."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/databases/#oracle-notes", "para": "Django supports Oracle Database Server versions 12.1 and higher. Version 6.0 or higher of the cx_Oracle Python driver is required.In order for the python manage.py migrate command to work, your Oracle database user must have privileges to run the following commands:To run a project s test suite, the user usually needs these additional privileges:While the RESOURCE role has the required CREATE TABLE, CREATE SEQUENCE, CREATE PROCEDURE, and CREATE TRIGGER privileges, and a user granted RESOURCE WITH ADMIN OPTION can grant RESOURCE, such a user cannot grant the individual privileges (e.g. CREATE TABLE), and thus RESOURCE WITH ADMIN OPTION is not usually sufficient for running tests.Some test suites also create views or materialized views; to run these, the user also needs CREATE VIEW WITH ADMIN OPTION and CREATE MATERIALIZED VIEW WITH ADMIN OPTION privileges. In particular, this is needed for Django s own test suite.All of these privileges are included in the DBA role, which is appropriate for use on a private developer s database.The Oracle database backend uses the SYS.DBMS_LOB and SYS.DBMS_RANDOM packages, so your user will require execute permissions on it. It s normally accessible to all users by default, but in case it is not, you ll need to grant permissions like so:To connect using the service name of your Oracle database, your settings.py file should look something like this:In this case, you should leave both HOST and PORT empty. However, if you don t use a tnsnames.ora file or a similar naming method and want to connect using the SID ( xe  in this example), then fill in both HOST and PORT like so:You should either supply both HOST and PORT, or leave both as empty strings. Django will use a different connect descriptor depending on that choice.A Full DSN or Easy Connect string can be used in NAME if both HOST and PORT are empty. This format is required when using RAC or pluggable databases without tnsnames.ora, for example.Example of an Easy Connect string:Example of a full DSN string:If you plan to run Django in a multithreaded environment (e.g. Apache using the default MPM module on any modern operating system), then you must set the threaded option of your Oracle database configuration to True:Failure to do this may result in crashes and other odd behavior.By default, the Oracle backend uses a RETURNING INTO clause to efficiently retrieve the value of an AutoField when inserting new rows.  This behavior may result in a DatabaseError in certain unusual setups, such as when inserting into a remote table, or into a view with an INSTEAD OF trigger. The RETURNING INTO clause can be disabled by setting the use_returning_into option of the database configuration to False:In this case, the Oracle backend will use a separate SELECT query to retrieve AutoField values.Oracle imposes a name length limit of 30 characters. To accommodate this, the backend truncates database identifiers to fit, replacing the final four characters of the truncated name with a repeatable MD5 hash value. Additionally, the backend turns database identifiers to all-uppercase.To prevent these transformations (this is usually required only when dealing with legacy databases or accessing tables which belong to other users), use a quoted name as the value for db_table:Quoted names can also be used with Django s other supported database backends; except for Oracle, however, the quotes have no effect.When running migrate, an ORA-06552 error may be encountered if certain Oracle keywords are used as the name of a model field or the value of a db_column option.  Django quotes all identifiers used in queries to prevent most such problems, but this error can still occur when an Oracle datatype is used as a column name.  In particular, take care to avoid using the names date, timestamp, number or float as a field name.Django generally prefers to use the empty string ('') rather than NULL, but Oracle treats both identically. To get around this, the Oracle backend ignores an explicit null option on fields that have the empty string as a possible value and generates DDL as if null=True. When fetching from the database, it is assumed that a NULL value in one of these fields really means the empty string, and the data is silently converted to reflect this assumption.The Oracle backend stores TextFields as NCLOB columns. Oracle imposes some limitations on the usage of such LOB columns in general:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/databases/#using-a-3rd-party-database-backend", "para": "In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/legacy-databases/#give-django-your-database-parameters", "para": "You ll need to tell Django what your database connection parameters are, and what the name of the database is. Do that by editing the DATABASES setting and assigning values to the following keys for the 'default' connection:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/legacy-databases/#auto-generate-the-models", "para": "Django comes with a utility called inspectdb that can create models by introspecting an existing database. You can view the output by running this command:Save this as a file by using standard Unix output redirection:This feature is meant as a shortcut, not as definitive model generation. See the documentation of inspectdb for more information.Once you ve cleaned up your models, name the file models.py and put it in the Python package that holds your app. Then add the app to your INSTALLED_APPS setting.By default, inspectdb creates unmanaged models. That is, managed = False in the model s Meta class tells Django not to manage each table s creation, modification, and deletion:If you do want to allow Django to manage the table s lifecycle, you ll need to change the managed option above to True (or simply remove it because True is its default value)."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/legacy-databases/#install-the-core-django-tables", "para": "Next, run the migrate command to install any extra needed database records such as admin permissions and content types:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/legacy-databases/#test-and-tweak", "para": "Those are the basic steps   from here you ll want to tweak the models Django generated until they work the way you d like. Try accessing your data via the Django database API, and try editing objects via Django s admin site, and edit the models file accordingly."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/initial-data/#providing-initial-data-with-migrations", "para": "If you want to automatically load initial data for an app, create a data migration. Migrations are run when setting up the test database, so the data will be available there, subject to some limitations."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/initial-data/#providing-data-with-fixtures", "para": "You can also provide data using fixtures, however, this data isn t loaded automatically, except if you use TransactionTestCase.fixtures.A fixture is a collection of data that Django knows how to import into a database. The most straightforward way of creating a fixture if you ve already got some data is to use the manage.py dumpdata command. Or, you can write fixtures by hand; fixtures can be written as JSON, XML or YAML (with PyYAML installed) documents. The serialization documentation has more details about each of these supported serialization formats.As an example, though, here s what a fixture for a simple Person model might look like in JSON:And here s that same fixture as YAML:You ll store this data in a fixtures directory inside your app.Loading data is easy: just call manage.py loaddata <fixturename>, where <fixturename> is the name of the fixture file you ve created. Each time you run loaddata, the data will be read from the fixture and re-loaded into the database. Note this means that if you change one of the rows created by a fixture and then run loaddata again, you ll wipe out any changes you ve made.By default, Django looks in the fixtures directory inside each app for fixtures. You can set the FIXTURE_DIRS setting to a list of additional directories where Django should look.When running manage.py loaddata, you can also specify a path to a fixture file, which overrides searching the usual directories.See alsoFixtures are also used by the testing framework to help set up a consistent test environment."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/optimization/#profile-first", "para": "As general programming practice, this goes without saying. Find out what queries you are doing and what they are costing you. Use QuerySet.explain() to understand how specific QuerySets are executed by your database. You may also want to use an external project like django-debug-toolbar, or a tool that monitors your database directly.Remember that you may be optimizing for speed or memory or both, depending on your requirements. Sometimes optimizing for one will be detrimental to the other, but sometimes they will help each other. Also, work that is done by the database process might not have the same cost (to you) as the same amount of work done in your Python process. It is up to you to decide what your priorities are, where the balance must lie, and profile all of these as required since this will depend on your application and server.With everything that follows, remember to profile after every change to ensure that the change is a benefit, and a big enough benefit given the decrease in readability of your code. All of the suggestions below come with the caveat that in your circumstances the general principle might not apply, or might even be reversed."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/optimization/#use-standard-db-optimization-techniques", "para": " including:We will assume you have done the obvious things above. The rest of this document focuses on how to use Django in such a way that you are not doing unnecessary work. This document also does not address other optimization techniques that apply to all expensive operations, such as general purpose caching."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/optimization/#understand-querysets", "para": "Understanding QuerySets is vital to getting good performance with simple code. In particular:To avoid performance problems, it is important to understand:As well as caching of the whole QuerySet, there is caching of the result of attributes on ORM objects. In general, attributes that are not callable will be cached. For example, assuming the example Weblog models:But in general, callable attributes cause DB lookups every time:Be careful when reading template code - the template system does not allow use of parentheses, but will call callables automatically, hiding the above distinction.Be careful with your own custom properties - it is up to you to implement caching when required, for example using the cached_property decorator.To make use of the caching behavior of QuerySet, you may need to use the with template tag.When you have a lot of objects, the caching behavior of the QuerySet can cause a large amount of memory to be used. In this case, iterator() may help.QuerySet.explain() gives you detailed information about how the database executes a query, including indexes and joins that are used. These details may help you find queries that could be rewritten more efficiently, or identify indexes that could be added to improve performance."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/optimization/#do-database-work-in-the-database-rather-than-in-python", "para": "For instance:If these aren t enough to generate the SQL you need:A less portable but more powerful method is the RawSQL expression, which allows some SQL to be explicitly added to the query. If that still isn t powerful enough:Write your own custom SQL to retrieve data or populate models. Use django.db.connection.queries to find out what Django is writing for you and start from there."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/optimization/#retrieve-individual-objects-using-a-unique-indexed-column", "para": "There are two reasons to use a column with unique or db_index when using get() to retrieve individual objects. First, the query will be quicker because of the underlying database index. Also, the query could run much slower if multiple objects match the lookup; having a unique constraint on the column guarantees this will never happen.So using the example Weblog models:will be quicker than:because id is indexed by the database and is guaranteed to be unique.Doing the following is potentially quite slow:First of all, headline is not indexed, which will make the underlying database fetch slower.Second, the lookup doesn t guarantee that only one object will be returned. If the query matches more than one object, it will retrieve and transfer all of them from the database. This penalty could be substantial if hundreds or thousands of records are returned. The penalty will be compounded if the database lives on a separate server, where network overhead and latency also play a factor."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/optimization/#retrieve-everything-at-once-if-you-know-you-will-need-it", "para": "Hitting the database multiple times for different parts of a single  set  of data that you will need all parts of is, in general, less efficient than retrieving it all in one query. This is particularly important if you have a query that is executed in a loop, and could therefore end up doing many database queries, when only one was needed. So:Understand select_related() and prefetch_related() thoroughly, and use them:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/optimization/#don-t-retrieve-things-you-don-t-need", "para": "When you just want a dict or list of values, and don t need ORM model objects, make appropriate usage of values(). These can be useful for replacing model objects in template code - as long as the dicts you supply have the same attributes as those used in the template, you are fine.Use defer() and only() if there are database columns you know that you won t need (or won t need in most cases) to avoid loading them. Note that if you do use them, the ORM will have to go and get them in a separate query, making this a pessimization if you use it inappropriately.Also, be aware that there is some (small extra) overhead incurred inside Django when constructing a model with deferred fields. Don t be too aggressive in deferring fields without profiling as the database has to read most of the non-text, non-VARCHAR data from the disk for a single row in the results, even if it ends up only using a few columns. The defer() and only() methods are most useful when you can avoid loading a lot of text data or for fields that might take a lot of processing to convert back to Python. As always, profile first, then optimize. if you only want the count, rather than doing len(queryset). if you only want to find out if at least one result exists, rather than if queryset.But:If you are going to need other data from the QuerySet, just evaluate it.For example, assuming an Email model that has a body attribute and a many-to-many relation to User, the following template code is optimal:It is optimal because:In total, this code does either one or zero database queries. The only deliberate optimization performed is the use of the with tag. Using QuerySet.exists() or QuerySet.count() at any point would cause additional queries.Rather than retrieve a load of objects, set some values, and save them individual, use a bulk SQL UPDATE statement, via QuerySet.update(). Similarly, do bulk deletes where possible.Note, however, that these bulk update methods cannot call the save() or delete() methods of individual instances, which means that any custom behavior you have added for these methods will not be executed, including anything driven from the normal database object signals.If you only need a foreign key value, use the foreign key value that is already on the object you ve got, rather than getting the whole related object and taking its primary key. i.e. do:instead of:Ordering is not free; each field to order by is an operation the database must perform. If a model has a default ordering (Meta.ordering) and you don t need it, remove it on a QuerySet by calling order_by() with no parameters.Adding an index to your database may help to improve ordering performance."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/optimization/#insert-in-bulk", "para": "When creating objects, where possible, use the bulk_create() method to reduce the number of SQL queries. For example: is preferable to:Note that there are a number of caveats to this method, so make sure it s appropriate for your use case.This also applies to ManyToManyFields, so doing: is preferable to: where Bands and Artists have a many-to-many relationship."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#overview", "para": "To design URLs for an app, you create a Python module informally called a URLconf (URL configuration). This module is pure Python code and is a mapping between URL path expressions to Python functions (your views).This mapping can be as short or as long as needed. It can reference other mappings. And, because it s pure Python code, it can be constructed dynamically.Django also provides a way to translate URLs according to the active language. See the internationalization documentation for more information."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#how-django-processes-a-request", "para": "When a user requests a page from your Django-powered site, this is the algorithm the system follows to determine which Python code to execute:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#example", "para": "Here s a sample URLconf:Notes:Example requests:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#path-converters", "para": "The following path converters are available by default:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#registering-custom-path-converters", "para": "For more complex matching requirements, you can define your own path converters.A converter is a class that includes the following:For example:Register custom converter classes in your URLconf using register_converter():"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#using-regular-expressions", "para": "If the paths and converters syntax isn t sufficient for defining your URL patterns, you can also use regular expressions. To do so, use re_path() instead of path().In Python regular expressions, the syntax for named regular expression groups is (?P<name>pattern), where name is the name of the group and pattern is some pattern to match.Here s the example URLconf from earlier, rewritten using regular expressions:This accomplishes roughly the same thing as the previous example, except:When switching from using path() to re_path() or vice versa, it s particularly important to be aware that the type of the view arguments may change, and so you may need to adapt your views.As well as the named group syntax, e.g. (?P<year>[0-9]{4}), you can also use the shorter unnamed group, e.g. ([0-9]{4}).This usage isn t particularly recommended as it makes it easier to accidentally introduce errors between the intended meaning of a match and the arguments of the view.In either case, using only one style within a given regex is recommended. When both styles are mixed, any unnamed groups are ignored and only named groups are passed to the view function.Regular expressions allow nested arguments, and Django will resolve them and pass them to the view. When reversing, Django will try to fill in all outer captured arguments, ignoring any nested captured arguments. Consider the following URL patterns which optionally take a page argument:Both patterns use nested arguments and will resolve: for example, blog/page-2/ will result in a match to blog_articles with two positional arguments: page-2/ and 2. The second pattern for comments will match comments/page-2/ with keyword argument page_number set to 2. The outer argument in this case is a non-capturing argument (?:...).The blog_articles view needs the outermost captured argument to be reversed, page-2/ or no arguments in this case, while comments can be reversed with either no arguments or a value for page_number.Nested captured arguments create a strong coupling between the view arguments and the URL as illustrated by blog_articles: the view receives part of the URL (page-2/) instead of only the value the view is interested in. This coupling is even more pronounced when reversing, since to reverse the view we need to pass the piece of URL instead of the page number.As a rule of thumb, only capture the values the view needs to work with and use non-capturing arguments when the regular expression needs an argument but the view ignores it."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#what-the-urlconf-searches-against", "para": "The URLconf searches against the requested URL, as a normal Python string. This does not include GET or POST parameters, or the domain name.For example, in a request to https://www.example.com/myapp/, the URLconf will look for myapp/.In a request to https://www.example.com/myapp/?page=3, the URLconf will look for myapp/.The URLconf doesn t look at the request method. In other words, all request methods   POST, GET, HEAD, etc.   will be routed to the same function for the same URL."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#specifying-defaults-for-view-arguments", "para": "A convenient trick is to specify default parameters for your views  arguments. Here s an example URLconf and view:In the above example, both URL patterns point to the same view   views.page   but the first pattern doesn t capture anything from the URL. If the first pattern matches, the page() function will use its default argument for num, 1. If the second pattern matches, page() will use whatever num value was captured."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#performance", "para": "Each regular expression in a urlpatterns is compiled the first time it s accessed. This makes the system blazingly fast."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#syntax-of-the-urlpatterns-variable", "para": "urlpatterns should be a Python list of path() and/or re_path() instances."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#error-handling", "para": "When Django can t find a match for the requested URL, or when an exception is raised, Django invokes an error-handling view.The views to use for these cases are specified by four variables. Their default values should suffice for most projects, but further customization is possible by overriding their default values.See the documentation on customizing error views for the full details.Such values can be set in your root URLconf. Setting these variables in any other URLconf will have no effect.Values must be callables, or strings representing the full Python import path to the view that should be called to handle the error condition at hand.The variables are:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#including-other-urlconfs", "para": "At any point, your urlpatterns can  include  other URLconf modules. This essentially  roots  a set of URLs below other ones.For example, here s an excerpt of the URLconf for the Django website itself. It includes a number of other URLconfs:Whenever Django encounters include(), it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.Another possibility is to include additional URL patterns by using a list of path() instances. For example, consider this URLconf:In this example, the /credit/reports/ URL will be handled by the credit_views.report() Django view.This can be used to remove redundancy from URLconfs where a single pattern prefix is used repeatedly. For example, consider this URLconf:We can improve this by stating the common path prefix only once and grouping the suffixes that differ:An included URLconf receives any captured parameters from parent URLconfs, so the following example is valid:In the above example, the captured \"username\" variable is passed to the included URLconf, as expected."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#passing-extra-options-to-view-functions", "para": "URLconfs have a hook that lets you pass extra arguments to your view functions, as a Python dictionary.The path() function can take an optional third argument which should be a dictionary of extra keyword arguments to pass to the view function.For example:In this example, for a request to /blog/2005/, Django will call views.year_archive(request, year=2005, foo='bar').This technique is used in the syndication framework to pass metadata and options to views.Dealing with conflictsIt s possible to have a URL pattern which captures named keyword arguments, and also passes arguments with the same names in its dictionary of extra arguments. When this happens, the arguments in the dictionary will be used instead of the arguments captured in the URL.Similarly, you can pass extra options to include() and each line in the included URLconf will be passed the extra options.For example, these two URLconf sets are functionally identical:Set one:Set two:Note that extra options will always be passed to every line in the included URLconf, regardless of whether the line s view actually accepts those options as valid. For this reason, this technique is only useful if you re certain that every view in the included URLconf accepts the extra options you re passing."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#reverse-resolution-of-urls", "para": "A common need when working on a Django project is the possibility to obtain URLs in their final forms either for embedding in generated content (views and assets URLs, URLs shown to the user, etc.) or for handling of the navigation flow on the server side (redirections, etc.)It is strongly desirable to avoid hard-coding these URLs (a laborious, non-scalable and error-prone strategy). Equally dangerous is devising ad-hoc mechanisms to generate URLs that are parallel to the design described by the URLconf, which can result in the production of URLs that become stale over time.In other words, what s needed is a DRY mechanism. Among other advantages it would allow evolution of the URL design without having to go over all the project source code to search and replace outdated URLs.The primary piece of information we have available to get a URL is an identification (e.g. the name) of the view in charge of handling it. Other pieces of information that necessarily must participate in the lookup of the right URL are the types (positional, keyword) and values of the view arguments.Django provides a solution such that the URL mapper is the only repository of the URL design. You feed it with your URLconf and then it can be used in both directions:The first one is the usage we ve been discussing in the previous sections. The second one is what is known as reverse resolution of URLs, reverse URL matching, reverse URL lookup, or simply URL reversing.Django provides tools for performing URL reversing that match the different layers where URLs are needed:Consider again this URLconf entry:According to this design, the URL for the archive corresponding to year nnnn is /articles/<nnnn>/.You can obtain these in template code by using:Or in Python code:If, for some reason, it was decided that the URLs where content for yearly article archives are published at should be changed then you would only need to change the entry in the URLconf.In some scenarios where views are of a generic nature, a many-to-one relationship might exist between URLs and views. For these cases the view name isn t a good enough identifier for it when comes the time of reversing URLs. Read the next section to know about the solution Django provides for this."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#naming-url-patterns", "para": "In order to perform URL reversing, you ll need to use named URL patterns as done in the examples above. The string used for the URL name can contain any characters you like. You are not restricted to valid Python names.When naming URL patterns, choose names that are unlikely to clash with other applications  choice of names. If you call your URL pattern comment and another application does the same thing, the URL that reverse() finds depends on whichever pattern is last in your project s urlpatterns list.Putting a prefix on your URL names, perhaps derived from the application name (such as myapp-comment instead of comment), decreases the chance of collision.You can deliberately choose the same URL name as another application if you want to override a view. For example, a common use case is to override the LoginView. Parts of Django and most third-party apps assume that this view has a URL pattern with the name login. If you have a custom login view and give its URL the name login, reverse() will find your custom view as long as it s in urlpatterns after django.contrib.auth.urls is included (if that s included at all).You may also use the same name for multiple URL patterns if they differ in their arguments. In addition to the URL name, reverse() matches the number of arguments and the names of the keyword arguments."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/urls/#url-namespaces", "para": "URL namespaces allow you to uniquely reverse named URL patterns even if different applications use the same URL names. It s a good practice for third-party apps to always use namespaced URLs (as we did in the tutorial). Similarly, it also allows you to reverse URLs if multiple instances of an application are deployed. In other words, since multiple instances of a single application will share named URLs, namespaces provide a way to tell these named URLs apart.Django applications that make proper use of URL namespacing can be deployed more than once for a particular site. For example django.contrib.admin has an AdminSite class which allows you to easily deploy more than one instance of the admin. In a later example, we ll discuss the idea of deploying the polls application from the tutorial in two different locations so we can serve the same functionality to two different audiences (authors and publishers).A URL namespace comes in two parts, both of which are strings:Namespaced URLs are specified using the ':' operator. For example, the main index page of the admin application is referenced using 'admin:index'. This indicates a namespace of 'admin', and a named URL of 'index'.Namespaces can also be nested. The named URL 'sports:polls:index' would look for a pattern named 'index' in the namespace 'polls' that is itself defined within the top-level namespace 'sports'.When given a namespaced URL (e.g. 'polls:index') to resolve, Django splits the fully qualified name into parts and then tries the following lookup:First, Django looks for a matching application namespace (in this example, 'polls'). This will yield a list of instances of that application.If there is a current application defined, Django finds and returns the URL resolver for that instance. The current application can be specified with the current_app argument to the reverse() function.The url template tag uses the namespace of the currently resolved view as the current application in a RequestContext. You can override this default by setting the current application on the request.current_app attribute.If there is no current application, Django looks for a default application instance. The default application instance is the instance that has an instance namespace matching the application namespace (in this example, an instance of polls called 'polls').If there is no default application instance, Django will pick the last deployed instance of the application, whatever its instance name may be.If the provided namespace doesn t match an application namespace in step 1, Django will attempt a direct lookup of the namespace as an instance namespace.If there are nested namespaces, these steps are repeated for each part of the namespace until only the view name is unresolved. The view name will then be resolved into a URL in the namespace that has been found.To show this resolution strategy in action, consider an example of two instances of the polls application from the tutorial: one called 'author-polls' and one called 'publisher-polls'. Assume we have enhanced that application so that it takes the instance namespace into consideration when creating and displaying polls.Using this setup, the following lookups are possible:If one of the instances is current - say, if we were rendering the detail page in the instance 'author-polls' - 'polls:index' will resolve to the index page of the 'author-polls' instance; i.e. both of the following will result in \"/author-polls/\".In the method of a class-based view:and in the template:If there is no current instance - say, if we were rendering a page somewhere else on the site - 'polls:index' will resolve to the last registered instance of polls. Since there is no default instance (instance namespace of 'polls'), the last instance of polls that is registered will be used. This would be 'publisher-polls' since it s declared last in the urlpatterns.'author-polls:index' will always resolve to the index page of the instance 'author-polls' (and likewise for 'publisher-polls') .If there were also a default instance - i.e., an instance named 'polls' - the only change from above would be in the case where there is no current instance (the second item in the list above). In this case 'polls:index' would resolve to the index page of the default instance instead of the instance declared last in urlpatterns.Application namespaces of included URLconfs can be specified in two ways.Firstly, you can set an app_name attribute in the included URLconf module, at the same level as the urlpatterns attribute. You have to pass the actual module, or a string reference to the module, to include(), not the list of urlpatterns itself.The URLs defined in polls.urls will have an application namespace polls.Secondly, you can include an object that contains embedded namespace data. If you include() a list of path() or re_path() instances, the URLs contained in that object will be added to the global namespace. However, you can also include() a 2-tuple containing:For example:This will include the nominated URL patterns into the given application namespace.The instance namespace can be specified using the namespace argument to include(). If the instance namespace is not specified, it will default to the included URLconf s application namespace. This means it will also be the default instance for that namespace."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/views/#a-simple-view", "para": "Here s a view that returns the current date and time, as an HTML document:Let s step through this code one line at a time:First, we import the class HttpResponse from the django.http module, along with Python s datetime library.Next, we define a function called current_datetime. This is the view function. Each view function takes an HttpRequest object as its first parameter, which is typically named request.Note that the name of the view function doesn t matter; it doesn t have to be named in a certain way in order for Django to recognize it. We re calling it current_datetime here, because that name clearly indicates what it does.The view returns an HttpResponse object that contains the generated response. Each view function is responsible for returning an HttpResponse object. (There are exceptions, but we ll get to those later.)Django s Time ZoneDjango includes a TIME_ZONE setting that defaults to America/Chicago. This probably isn t where you live, so you might want to change it in your settings file."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/views/#mapping-urls-to-views", "para": "So, to recap, this view function returns an HTML page that includes the current date and time. To display this view at a particular URL, you ll need to create a URLconf; see URL dispatcher for instructions."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/views/#returning-errors", "para": "Returning HTTP error codes in Django is easy. There are subclasses of HttpResponse for a number of common HTTP status codes other than 200 (which means  OK ). You can find the full list of available subclasses in the request/response documentation.  Just return an instance of one of those subclasses instead of a normal HttpResponse in order to signify an error. For example:There isn t a specialized subclass for every possible HTTP response code, since many of them aren t going to be that common. However, as documented in the HttpResponse documentation, you can also pass the HTTP status code into the constructor for HttpResponse to create a return class for any status code you like. For example:Because 404 errors are by far the most common HTTP error, there s an easier way to handle those errors.When you return an error such as HttpResponseNotFound, you re responsible for defining the HTML of the resulting error page:For convenience, and because it s a good idea to have a consistent 404 error page across your site, Django provides an Http404 exception. If you raise Http404 at any point in a view function, Django will catch it and return the standard error page for your application, along with an HTTP error code 404.Example usage:In order to show customized HTML when Django returns a 404, you can create an HTML template named 404.html and place it in the top level of your template tree. This template will then be served when DEBUG is set to False.When DEBUG is True, you can provide a message to Http404 and it will appear in the standard 404 debug template. Use these messages for debugging purposes; they generally aren t suitable for use in a production 404 template."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/views/#customizing-error-views", "para": "The default error views in Django should suffice for most Web applications, but can easily be overridden if you need any custom behavior. Simply specify the handlers as seen below in your URLconf (setting them anywhere else will have no effect).The page_not_found() view is overridden by handler404:The server_error() view is overridden by handler500:The permission_denied() view is overridden by handler403:The bad_request() view is overridden by handler400:See alsoUse the CSRF_FAILURE_VIEW setting to override the CSRF error view.To test the response of a custom error handler, raise the appropriate exception in a test view. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/shortcuts/#render", "para": "Combines a given template with a given context dictionary and returns an HttpResponse object with that rendered text.Django does not provide a shortcut function which returns a TemplateResponse because the constructor of TemplateResponse offers the same level of convenience as render().The following example renders the template myapp/index.html with the MIME type application/xhtml+xml:This example is equivalent to:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/shortcuts/#render-to-response", "para": "Deprecated since version 2.0.This function preceded the introduction of render() and works similarly except that it doesn t make the request available in the response."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/shortcuts/#redirect", "para": "Returns an HttpResponseRedirect to the appropriate URL for the arguments passed.The arguments could be:By default issues a temporary redirect; pass permanent=True to issue a permanent redirect.You can use the redirect() function in a number of ways.By passing some object; that object s get_absolute_url() method will be called to figure out the redirect URL:By passing the name of a view and optionally some positional or keyword arguments; the URL will be reverse resolved using the reverse() method:By passing a hardcoded URL to redirect to:This also works with full URLs:By default, redirect() returns a temporary redirect. All of the above forms accept a permanent argument; if set to True a permanent redirect will be returned:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/shortcuts/#get-object-or-404", "para": "Calls get() on a given model manager, but it raises Http404 instead of the model s DoesNotExist exception.The following example gets the object with the primary key of 1 from MyModel:This example is equivalent to:The most common use case is to pass a Model, as shown above. However, you can also pass a QuerySet instance:The above example is a bit contrived since it s equivalent to doing:but it can be useful if you are passed the queryset variable from somewhere else.Finally, you can also use a Manager. This is useful for example if you have a custom manager:You can also use related managers:Note: As with get(), a MultipleObjectsReturned exception will be raised if more than one object is found."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/shortcuts/#get-list-or-404", "para": "Returns the result of filter() on a given model manager cast to a list, raising Http404 if the resulting list is empty.The following example gets all published objects from MyModel:This example is equivalent to:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/decorators/#allowed-http-methods", "para": "The decorators in django.views.decorators.http can be used to restrict access to views based on the request method. These decorators will return a django.http.HttpResponseNotAllowed if the conditions are not met.Decorator to require that a view only accepts particular request methods. Usage:Note that request methods should be in uppercase.Decorator to require that a view only accepts the GET method.Decorator to require that a view only accepts the POST method.Decorator to require that a view only accepts the GET and HEAD methods. These methods are commonly considered  safe  because they should not have the significance of taking an action other than retrieving the requested resource.NoteWeb servers should automatically strip the content of responses to HEAD requests while leaving the headers unchanged, so you may handle HEAD requests exactly like GET requests in your views. Since some software, such as link checkers, rely on HEAD requests, you might prefer using require_safe instead of require_GET."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/decorators/#conditional-view-processing", "para": "The following decorators in django.views.decorators.http can be used to control caching behavior on particular views.These decorators can be used to generate ETag and Last-Modified headers; see conditional view processing."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/decorators/#gzip-compression", "para": "The decorators in django.views.decorators.gzip control content compression on a per-view basis.This decorator compresses content if the browser allows gzip compression. It sets the Vary header accordingly, so that caches will base their storage on the Accept-Encoding header."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/decorators/#vary-headers", "para": "The decorators in django.views.decorators.vary can be used to control caching based on specific request headers.The Vary header defines which request headers a cache mechanism should take into account when building its cache key.See using vary headers."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/decorators/#caching", "para": "The decorators in django.views.decorators.cache control server and client-side caching.This decorator patches the response s Cache-Control header by adding all of the keyword arguments to it. See patch_cache_control() for the details of the transformation.This decorator adds a Cache-Control: max-age=0, no-cache, no-store, must-revalidate header to a response to indicate that a page should never be cached."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/views/#serving-files-in-development", "para": "There may be files other than your project s static assets that, for convenience, you d like to have Django serve for you in local development. The serve() view can be used to serve any directory you give it. (This view is not hardened for production use and should be used only as a development aid; you should serve these files in production using a real front-end web server).The most likely example is user-uploaded content in MEDIA_ROOT. django.contrib.staticfiles is intended for static assets and has no built-in handling for user-uploaded files, but you can have Django serve your MEDIA_ROOT by appending something like this to your URLconf:Note, the snippet assumes your MEDIA_URL has a value of '/media/'. This will call the serve() view, passing in the path from the URLconf and the (required) document_root parameter.Since it can become a bit cumbersome to define this URL pattern, Django ships with a small URL helper function static() that takes as parameters the prefix such as MEDIA_URL and a dotted path to a view, such as 'django.views.static.serve'. Any other function parameter will be transparently passed to the view."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/views/#error-views", "para": "Django comes with a few views by default for handling HTTP errors. To override these with your own custom views, see Customizing error views.When you raise Http404 from within a view, Django loads a special view devoted to handling 404 errors. By default, it s the view django.views.defaults.page_not_found(), which either produces a very simple  Not Found  message or loads and renders the template 404.html if you created it in your root template directory.The default 404 view will pass two variables to the template: request_path, which is the URL that resulted in the error, and exception, which is a useful representation of the exception that triggered the view (e.g. containing any message passed to a specific Http404 instance).Three things to note about 404 views:Similarly, Django executes special-case behavior in the case of runtime errors in view code. If a view results in an exception, Django will, by default, call the view django.views.defaults.server_error, which either produces a very simple  Server Error  message or loads and renders the template 500.html if you created it in your root template directory.The default 500 view passes no variables to the 500.html template and is rendered with an empty Context to lessen the chance of additional errors.If DEBUG is set to True (in your settings module), then your 500 view will never be used, and the traceback will be displayed instead, with some debug information.In the same vein as the 404 and 500 views, Django has a view to handle 403 Forbidden errors. If a view results in a 403 exception then Django will, by default, call the view django.views.defaults.permission_denied.This view loads and renders the template 403.html in your root template directory, or if this file does not exist, instead serves the text  403 Forbidden , as per RFC 7231#section-6.5.3 (the HTTP 1.1 Specification). The template context contains exception, which is the string representation of the exception that triggered the view.django.views.defaults.permission_denied is triggered by a PermissionDenied exception. To deny access in a view you can use code like this:When a SuspiciousOperation is raised in Django, it may be handled by a component of Django (for example resetting the session data). If not specifically handled, Django will consider the current request a  bad request  instead of a server error.django.views.defaults.bad_request, is otherwise very similar to the server_error view, but returns with the status code 400 indicating that the error condition was the result of a client operation. By default, nothing related to the exception that triggered the view is passed to the template context, as the exception message might contain sensitive information like filesystem paths.bad_request views are also only used when DEBUG is False."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/request-response/#quick-overview", "para": "Django uses request and response objects to pass state through the system.When a page is requested, Django creates an HttpRequest object that contains metadata about the request. Then Django loads the appropriate view, passing the HttpRequest as the first argument to the view function. Each view is responsible for returning an HttpResponse object.This document explains the APIs for HttpRequest and HttpResponse objects, which are defined in the django.http module."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/request-response/#httprequest-objects", "para": "All attributes should be considered read-only, unless stated otherwise.A string representing the scheme of the request (http or https usually).The raw HTTP request body as a bytestring. This is useful for processing data in different ways than conventional HTML forms: binary images, XML payload etc. For processing conventional form data, use HttpRequest.POST.You can also read from an HttpRequest using a file-like interface. See HttpRequest.read().A string representing the full path to the requested page, not including the scheme or domain.Example: \"/music/bands/the_beatles/\"Under some Web server configurations, the portion of the URL after the host name is split up into a script prefix portion and a path info portion. The path_info attribute always contains the path info portion of the path, no matter what Web server is being used. Using this instead of path can make your code easier to move between test and deployment servers.For example, if the WSGIScriptAlias for your application is set to \"/minfo\", then path might be \"/minfo/music/bands/the_beatles/\" and path_info would be \"/music/bands/the_beatles/\".A string representing the HTTP method used in the request. This is guaranteed to be uppercase. For example:A string representing the current encoding used to decode form submission data (or None, which means the DEFAULT_CHARSET setting is used). You can write to this attribute to change the encoding used when accessing the form data. Any subsequent attribute accesses (such as reading from GET or POST) will use the new encoding value. Useful if you know the form data is not in the DEFAULT_CHARSET encoding.A string representing the MIME type of the request, parsed from the CONTENT_TYPE header.A dictionary of key/value parameters included in the CONTENT_TYPE header.A dictionary-like object containing all given HTTP GET parameters. See the QueryDict documentation below.A dictionary-like object containing all given HTTP POST parameters, providing that the request contains form data. See the QueryDict documentation below. If you need to access raw or non-form data posted in the request, access this through the HttpRequest.body attribute instead.It s possible that a request can come in via POST with an empty POST dictionary   if, say, a form is requested via the POST HTTP method but does not include form data. Therefore, you shouldn t use if request.POST to check for use of the POST method; instead, use if request.method == \"POST\" (see HttpRequest.method).POST does not include file-upload information. See FILES.A dictionary containing all cookies. Keys and values are strings.A dictionary-like object containing all uploaded files. Each key in FILES is the name from the <input type=\"file\" name=\"\">. Each value in FILES is an UploadedFile.See Managing files for more information.FILES will only contain data if the request method was POST and the <form> that posted to the request had enctype=\"multipart/form-data\". Otherwise, FILES will be a blank dictionary-like object.A dictionary containing all available HTTP headers. Available headers depend on the client and server, but here are some examples:With the exception of CONTENT_LENGTH and CONTENT_TYPE, as given above, any HTTP headers in the request are converted to META keys by converting all characters to uppercase, replacing any hyphens with underscores and adding an HTTP_ prefix to the name. So, for example, a header called X-Bender would be mapped to the META key HTTP_X_BENDER.Note that runserver strips all headers with underscores in the name, so you won t see them in META. This prevents header-spoofing based on ambiguity between underscores and dashes both being normalizing to underscores in WSGI environment variables. It matches the behavior of Web servers like Nginx and Apache 2.4+.HttpRequest.headers is a simpler way to access all HTTP-prefixed headers, plus CONTENT_LENGTH and CONTENT_TYPE.A case insensitive, dict-like object that provides access to all HTTP-prefixed headers (plus Content-Length and Content-Type) from the request.The name of each header is stylized with title-casing (e.g. User-Agent) when it s displayed. You can access headers case-insensitively:An instance of ResolverMatch representing the resolved URL. This attribute is only set after URL resolving took place, which means it s available in all views but not in middleware which are executed before URL resolving takes place (you can use it in process_view() though).Django doesn t set these attributes itself but makes use of them if set by your application.The url template tag will use its value as the current_app argument to reverse().This will be used as the root URLconf for the current request, overriding the ROOT_URLCONF setting. See How Django processes a request for details.urlconf can be set to None to revert any changes made by previous middleware and return to using the ROOT_URLCONF.Some of the middleware included in Django s contrib apps set attributes on the request. If you don t see the attribute on a request, be sure the appropriate middleware class is listed in MIDDLEWARE.From the SessionMiddleware: A readable and writable, dictionary-like object that represents the current session.From the CurrentSiteMiddleware: An instance of Site or RequestSite as returned by get_current_site() representing the current site.From the AuthenticationMiddleware: An instance of AUTH_USER_MODEL representing the currently logged-in user. If the user isn t currently logged in, user will be set to an instance of AnonymousUser. You can tell them apart with is_authenticated, like so:Returns the originating host of the request using information from the HTTP_X_FORWARDED_HOST (if USE_X_FORWARDED_HOST is enabled) and HTTP_HOST headers, in that order. If they don t provide a value, the method uses a combination of SERVER_NAME and SERVER_PORT as detailed in PEP 3333.Example: \"127.0.0.1:8000\"NoteThe get_host() method fails when the host is behind multiple proxies. One solution is to use middleware to rewrite the proxy headers, as in the following example:This middleware should be positioned before any other middleware that relies on the value of get_host()   for instance, CommonMiddleware or CsrfViewMiddleware.Returns the originating port of the request using information from the HTTP_X_FORWARDED_PORT (if USE_X_FORWARDED_PORT is enabled) and SERVER_PORT META variables, in that order.Returns the path, plus an appended query string, if applicable.Example: \"/music/bands/the_beatles/?print=true\"Like get_full_path(), but uses path_info instead of path.Example: \"/minfo/music/bands/the_beatles/?print=true\"Returns the absolute URI form of location. If no location is provided, the location will be set to request.get_full_path().If the location is already an absolute URI, it will not be altered. Otherwise the absolute URI is built using the server variables available in this request. For example:NoteMixing HTTP and HTTPS on the same site is discouraged, therefore build_absolute_uri() will always generate an absolute URI with the same scheme the current request has. If you need to redirect users to HTTPS, it s best to let your Web server redirect all HTTP traffic to HTTPS.Returns a cookie value for a signed cookie, or raises a django.core.signing.BadSignature exception if the signature is no longer valid. If you provide the default argument the exception will be suppressed and that default value will be returned instead.The optional salt argument can be used to provide extra protection against brute force attacks on your secret key. If supplied, the max_age argument will be checked against the signed timestamp attached to the cookie value to ensure the cookie is not older than max_age seconds.For example:See cryptographic signing for more information.Returns True if the request is secure; that is, if it was made with HTTPS.Returns True if the request was made via an XMLHttpRequest, by checking the HTTP_X_REQUESTED_WITH header for the string 'XMLHttpRequest'. Most modern JavaScript libraries send this header. If you write your own XMLHttpRequest call (on the browser side), you ll have to set this header manually if you want is_ajax() to work.If a response varies on whether or not it s requested via AJAX and you are using some form of caching like Django s cache middleware, you should decorate the view with vary_on_headers('X-Requested-With') so that the responses are properly cached.Methods implementing a file-like interface for reading from an HttpRequest instance. This makes it possible to consume an incoming request in a streaming fashion. A common use-case would be to process a big XML payload with an iterative parser without constructing a whole XML tree in memory.Given this standard interface, an HttpRequest instance can be passed directly to an XML parser such as ElementTree:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/request-response/#querydict-objects", "para": "In an HttpRequest object, the GET and POST attributes are instances of django.http.QueryDict, a dictionary-like class customized to deal with multiple values for the same key. This is necessary because some HTML form elements, notably <select multiple>, pass multiple values for the same key.The QueryDicts at request.POST and request.GET will be immutable when accessed in a normal request/response cycle. To get a mutable version you need to use QueryDict.copy().QueryDict implements all the standard dictionary methods because it s a subclass of dictionary. Exceptions are outlined here:Instantiates a QueryDict object based on query_string.If query_string is not passed in, the resulting QueryDict will be empty (it will have no keys or values).Most QueryDicts you encounter, and in particular those at request.POST and request.GET, will be immutable. If you are instantiating one yourself, you can make it mutable by passing mutable=True to its __init__().Strings for setting both keys and values will be converted from encoding to str. If encoding is not set, it defaults to DEFAULT_CHARSET.Creates a new QueryDict with keys from iterable and each value equal to value. For example:Returns the value for the given key. If the key has more than one value, it returns the last value. Raises django.utils.datastructures.MultiValueDictKeyError if the key does not exist. (This is a subclass of Python s standard KeyError, so you can stick to catching KeyError.)Sets the given key to [value] (a list whose single element is value). Note that this, as other dictionary functions that have side effects, can only be called on a mutable QueryDict (such as one that was created via QueryDict.copy()).Returns True if the given key is set. This lets you do, e.g., if \"foo\" in request.GET.Uses the same logic as __getitem__(), with a hook for returning a default value if the key doesn t exist.Like dict.setdefault(), except it uses __setitem__() internally.Takes either a QueryDict or a dictionary. Like dict.update(), except it appends to the current dictionary items rather than replacing them. For example:Like dict.items(), except this uses the same last-value logic as __getitem__() and returns an iterator object instead of a view object. For example:Like dict.values(), except this uses the same last-value logic as __getitem__() and returns an iterator instead of a view object. For example:In addition, QueryDict has the following methods:Returns a copy of the object using copy.deepcopy(). This copy will be mutable even if the original was not.Returns a list of the data with the requested key. Returns an empty list if the key doesn t exist and a default value wasn t provided. It s guaranteed to return a list unless the default value provided isn t a list.Sets the given key to list_ (unlike __setitem__()).Appends an item to the internal list associated with key.Like setdefault(), except it takes a list of values instead of a single value.Like items(), except it includes all values, as a list, for each member of the dictionary. For example:Returns a list of values for the given key and removes them from the dictionary. Raises KeyError if the key does not exist. For example:Removes an arbitrary member of the dictionary (since there s no concept of ordering), and returns a two value tuple containing the key and a list of all values for the key. Raises KeyError when called on an empty dictionary. For example:Returns a dict representation of QueryDict. For every (key, list) pair in QueryDict, dict will have (key, item), where item is one element of the list, using the same logic as QueryDict.__getitem__():Returns a string of the data in query string format. For example:Use the safe parameter to pass characters which don t require encoding. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/request-response/#httpresponse-objects", "para": "In contrast to HttpRequest objects, which are created automatically by Django, HttpResponse objects are your responsibility. Each view you write is responsible for instantiating, populating, and returning an HttpResponse.The HttpResponse class lives in the django.http module.Typical usage is to pass the contents of the page, as a string or bytestring, to the HttpResponse constructor:But if you want to add content incrementally, you can use response as a file-like object:Finally, you can pass HttpResponse an iterator rather than strings. HttpResponse will consume the iterator immediately, store its content as a string, and discard it. Objects with a close() method such as files and generators are immediately closed.If you need the response to be streamed from the iterator to the client, you must use the StreamingHttpResponse class instead.To set or remove a header field in your response, treat it like a dictionary:Note that unlike a dictionary, del doesn t raise KeyError if the header field doesn t exist.For setting the Cache-Control and Vary header fields, it is recommended to use the patch_cache_control() and patch_vary_headers() methods from django.utils.cache, since these fields can have multiple, comma-separated values. The  patch  methods ensure that other values, e.g. added by a middleware, are not removed.HTTP header fields cannot contain newlines. An attempt to set a header field containing a newline character (CR or LF) will raise BadHeaderErrorTo tell the browser to treat the response as a file attachment, use the content_type argument and set the Content-Disposition header. For example, this is how you might return a Microsoft Excel spreadsheet:There s nothing Django-specific about the Content-Disposition header, but it s easy to forget the syntax, so we ve included it here.A bytestring representing the content, encoded from a string if necessary.A string denoting the charset in which the response will be encoded. If not given at HttpResponse instantiation time, it will be extracted from content_type and if that is unsuccessful, the DEFAULT_CHARSET setting will be used.The HTTP status code for the response.Unless reason_phrase is explicitly set, modifying the value of status_code outside the constructor will also modify the value of reason_phrase.The HTTP reason phrase for the response. It uses the HTTP standard s default reason phrases.Unless explicitly set, reason_phrase is determined by the value of status_code.This is always False.This attribute exists so middleware can treat streaming responses differently from regular responses.True if the response has been closed.Instantiates an HttpResponse object with the given page content and content type.content is most commonly an iterator, bytestring, or string. Other types will be converted to a bytestring by encoding their string representation. Iterators should return strings or bytestrings and those will be joined together to form the content of the response.content_type is the MIME type optionally completed by a character set encoding and is used to fill the HTTP Content-Type header. If not specified, it is formed by the DEFAULT_CONTENT_TYPE and DEFAULT_CHARSET settings, by default:  text/html; charset=utf-8 .status is the HTTP status code for the response.reason is the HTTP response phrase. If not provided, a default phrase will be used.charset is the charset in which the response will be encoded. If not given it will be extracted from content_type, and if that is unsuccessful, the DEFAULT_CHARSET setting will be used.Sets the given header name to the given value. Both header and value should be strings.Deletes the header with the given name. Fails silently if the header doesn t exist. Case-insensitive.Returns the value for the given header name. Case-insensitive.Returns True or False based on a case-insensitive check for a header with the given name.Sets a header unless it has already been set.Sets a cookie. The parameters are the same as in the Morsel cookie object in the Python standard library.max_age should be a number of seconds, or None (default) if the cookie should last only as long as the client s browser session. If expires is not specified, it will be calculated.expires should either be a string in the format \"Wdy, DD-Mon-YY HH:MM:SS GMT\" or a datetime.datetime object in UTC. If expires is a datetime object, the max_age will be calculated.Use domain if you want to set a cross-domain cookie. For example, domain=\"example.com\" will set a cookie that is readable by the domains www.example.com, blog.example.com, etc. Otherwise, a cookie will only be readable by the domain that set it.Use httponly=True if you want to prevent client-side JavaScript from having access to the cookie.HttpOnly is a flag included in a Set-Cookie HTTP response header. It s part of the RFC 6265 standard for cookies and can be a useful way to mitigate the risk of a client-side script accessing the protected cookie data.Use samesite='Strict' or samesite='Lax' to tell the browser not to send this cookie when performing a cross-origin request. SameSite isn t supported by all browsers, so it s not a replacement for Django s CSRF protection, but rather a defense in depth measure.The samesite argument was added.WarningRFC 6265 states that user agents should support cookies of at least 4096 bytes. For many browsers this is also the maximum size. Django will not raise an exception if there s an attempt to store a cookie of more than 4096 bytes, but many browsers will not set the cookie correctly.Like set_cookie(), but cryptographic signing the cookie before setting it. Use in conjunction with HttpRequest.get_signed_cookie(). You can use the optional salt argument for added key strength, but you will need to remember to pass it to the corresponding HttpRequest.get_signed_cookie() call.Deletes the cookie with the given key. Fails silently if the key doesn t exist.Due to the way cookies work, path and domain should be the same values you used in set_cookie()   otherwise the cookie may not be deleted.This method makes an HttpResponse instance a file-like object.This method makes an HttpResponse instance a file-like object.This method makes an HttpResponse instance a file-like object.Returns the value of HttpResponse.content. This method makes an HttpResponse instance a stream-like object.Always False. This method makes an HttpResponse instance a stream-like object.Always False. This method makes an HttpResponse instance a stream-like object.Always True. This method makes an HttpResponse instance a stream-like object.Writes a list of lines to the response. Line separators are not added. This method makes an HttpResponse instance a stream-like object.Django includes a number of HttpResponse subclasses that handle different types of HTTP responses. Like HttpResponse, these subclasses live in django.http.The first argument to the constructor is required   the path to redirect to. This can be a fully qualified URL (e.g. 'https://www.yahoo.com/search/'), an absolute path with no domain (e.g. '/search/'), or even a relative path (e.g. 'search/'). In that last case, the client browser will reconstruct the full URL itself according to the current path. See HttpResponse for other optional constructor arguments. Note that this returns an HTTP status code 302.This read-only attribute represents the URL the response will redirect to (equivalent to the Location response header).Like HttpResponseRedirect, but it returns a permanent redirect (HTTP status code 301) instead of a  found  redirect (status code 302).The constructor doesn t take any arguments and no content should be added to this response. Use this to designate that a page hasn t been modified since the user s last request (status code 304).Acts just like HttpResponse but uses a 400 status code.Acts just like HttpResponse but uses a 404 status code.Acts just like HttpResponse but uses a 403 status code.Like HttpResponse, but uses a 405 status code. The first argument to the constructor is required: a list of permitted methods (e.g. ['GET', 'POST']).Acts just like HttpResponse but uses a 410 status code.Acts just like HttpResponse but uses a 500 status code.NoteIf a custom subclass of HttpResponse implements a render method, Django will treat it as emulating a SimpleTemplateResponse, and the render method must itself return a valid response object."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/request-response/#jsonresponse-objects", "para": "An HttpResponse subclass that helps to create a JSON-encoded response. It inherits most behavior from its superclass with a couple differences:Its default Content-Type header is set to application/json.The first parameter, data, should be a dict instance. If the safe parameter is set to False (see below) it can be any JSON-serializable object.The encoder, which defaults to django.core.serializers.json.DjangoJSONEncoder, will be used to serialize the data. See JSON serialization for more details about this serializer.The safe boolean parameter defaults to True. If it s set to False, any object can be passed for serialization (otherwise only dict instances are allowed). If safe is True and a non-dict object is passed as the first argument, a TypeError will be raised.The json_dumps_params parameter is a dictionary of keyword arguments to pass to the json.dumps() call used to generate the response.Typical usage could look like:In order to serialize objects other than dict you must set the safe parameter to False:Without passing safe=False, a TypeError will be raised.WarningBefore the 5th edition of ECMAScript it was possible to poison the JavaScript Array constructor. For this reason, Django does not allow passing non-dict objects to the JsonResponse constructor by default.  However, most modern browsers implement EcmaScript 5 which removes this attack vector. Therefore it is possible to disable this security precaution.If you need to use a different JSON encoder class you can pass the encoder parameter to the constructor method:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/request-response/#streaminghttpresponse-objects", "para": "The StreamingHttpResponse class is used to stream a response from Django to the browser. You might want to do this if generating the response takes too long or uses too much memory. For instance, it s useful for generating large CSV files.Performance considerationsDjango is designed for short-lived requests. Streaming responses will tie a worker process for the entire duration of the response. This may result in poor performance.Generally speaking, you should perform expensive tasks outside of the request-response cycle, rather than resorting to a streamed response.The StreamingHttpResponse is not a subclass of HttpResponse, because it features a slightly different API. However, it is almost identical, with the following notable differences:StreamingHttpResponse should only be used in situations where it is absolutely required that the whole content isn t iterated before transferring the data to the client. Because the content can t be accessed, many middleware can t function normally. For example the ETag and Content-Length headers can t be generated for streaming responses.An iterator of strings representing the content.The HTTP status code for the response.Unless reason_phrase is explicitly set, modifying the value of status_code outside the constructor will also modify the value of reason_phrase.The HTTP reason phrase for the response. It uses the HTTP standard s default reason phrases.Unless explicitly set, reason_phrase is determined by the value of status_code.This is always True."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/request-response/#fileresponse-objects", "para": "FileResponse is a subclass of StreamingHttpResponse optimized for binary files. It uses wsgi.file_wrapper if provided by the wsgi server, otherwise it streams the file out in small chunks.If as_attachment=True, the Content-Disposition header is set, which asks the browser to offer the file to the user as a download.If open_file doesn t have a name or if the name of open_file isn t appropriate, provide a custom file name using the filename  parameter.The Content-Length, Content-Type, and Content-Disposition headers are automatically set when they can be guessed from contents of open_file.The as_attachment and filename keywords argument were added. Also, FileResponse sets the Content headers if it can guess them.FileResponse accepts any file-like object with binary content, for example a file open in binary mode like so:The file will be closed automatically, so don t open it with a context manager.This method is automatically called during the response initialization and set various headers (Content-Length, Content-Type, and Content-Disposition) depending on open_file."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/template-response/#simpletemplateresponse-objects", "para": "The name of the template to be rendered. Accepts a backend-dependent template object (such as those returned by get_template()), the name of a template, or a list of template names.Example: ['foo.html', 'path/to/bar.html']The context data to be used when rendering the template. It must be a dict.Example: {'foo': 123}The current rendered value of the response content, using the current template and context data.A boolean indicating whether the response content has been rendered.Instantiates a SimpleTemplateResponse object with the given template, context, content type, HTTP status, and charset.Preprocesses context data that will be used for rendering a template. Accepts a dict of context data. By default, returns the same dict.Override this method in order to customize the context.Resolves the template instance to use for rendering. Accepts a backend-dependent template object (such as those returned by get_template()), the name of a template, or a list of template names.Returns the backend-dependent template object instance to be rendered.Override this method in order to customize template loading.Add a callback that will be invoked after rendering has taken place. This hook can be used to defer certain processing operations (such as caching) until after rendering has occurred.If the SimpleTemplateResponse has already been rendered, the callback will be invoked immediately.When called, callbacks will be passed a single argument   the rendered SimpleTemplateResponse instance.If the callback returns a value that is not None, this will be used as the response instead of the original response object (and will be passed to the next post rendering callback etc.)Sets response.content to the result obtained by SimpleTemplateResponse.rendered_content, runs all post-rendering callbacks, and returns the resulting response object.render() will only have an effect the first time it is called. On subsequent calls, it will return the result obtained from the first call."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/template-response/#templateresponse-objects", "para": "TemplateResponse is a subclass of SimpleTemplateResponse that knows about the current HttpRequest.Instantiates a TemplateResponse object with the given request, template, context, content type, HTTP status, and charset."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/template-response/#the-rendering-process", "para": "Before a TemplateResponse instance can be returned to the client, it must be rendered. The rendering process takes the intermediate representation of template and context, and turns it into the final byte stream that can be served to the client.There are three circumstances under which a TemplateResponse will be rendered:A TemplateResponse can only be rendered once. The first call to SimpleTemplateResponse.render() sets the content of the response; subsequent rendering calls do not change the response content.However, when response.content is explicitly assigned, the change is always applied. If you want to force the content to be re-rendered, you can re-evaluate the rendered content, and assign the content of the response manually:Some operations   such as caching   cannot be performed on an unrendered template. They must be performed on a fully complete and rendered response.If you re using middleware, the solution is easy. Middleware provides multiple opportunities to process a response on exit from a view. If you put behavior in the response middleware, it s guaranteed to execute after template rendering has taken place.However, if you re using a decorator, the same opportunities do not exist. Any behavior defined in a decorator is handled immediately.To compensate for this (and any other analogous use cases), TemplateResponse allows you to register callbacks that will be invoked when rendering has completed. Using this callback, you can defer critical processing until a point where you can guarantee that rendered content will be available.To define a post-render callback, just define a function that takes a single argument   response   and register that function with the template response:my_render_callback() will be invoked after the mytemplate.html has been rendered, and will be provided the fully rendered TemplateResponse instance as an argument.If the template has already been rendered, the callback will be invoked immediately."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/template-response/#using-templateresponse-and-simpletemplateresponse", "para": "A TemplateResponse object can be used anywhere that a normal django.http.HttpResponse can be used. It can also be used as an alternative to calling render().For example, the following simple view returns a TemplateResponse with a simple template and a context containing a queryset:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/file-uploads/#basic-file-uploads", "para": "Consider a simple form containing a FileField:A view handling this form will receive the file data in request.FILES, which is a dictionary containing a key for each FileField (or ImageField, or other FileField subclass) in the form. So the data from the above form would be accessible as request.FILES['file'].Note that request.FILES will only contain data if the request method was POST and the <form> that posted the request has the attribute enctype=\"multipart/form-data\". Otherwise, request.FILES will be empty.Most of the time, you ll simply pass the file data from request into the form as described in Binding uploaded files to a form. This would look something like:Notice that we have to pass request.FILES into the form s constructor; this is how file data gets bound into a form.Here s a common way you might handle an uploaded file:Looping over UploadedFile.chunks() instead of using read() ensures that large files don t overwhelm your system s memory.There are a few other methods and attributes available on UploadedFile objects; see UploadedFile for a complete reference.If you re saving a file on a Model with a FileField, using a ModelForm makes this process much easier. The file object will be saved to the location specified by the upload_to argument of the corresponding FileField when calling form.save():If you are constructing an object manually, you can simply assign the file object from request.FILES to the file field in the model:If you want to upload multiple files using one form field, set the multiple HTML attribute of field s widget:Then override the post method of your FormView subclass to handle multiple file uploads:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/file-uploads/#upload-handlers", "para": "When a user uploads a file, Django passes off the file data to an upload handler   a small class that handles file data as it gets uploaded. Upload handlers are initially defined in the FILE_UPLOAD_HANDLERS setting, which defaults to:Together MemoryFileUploadHandler and TemporaryFileUploadHandler provide Django s default file upload behavior of reading small files into memory and large ones onto disk.You can write custom handlers that customize how Django handles files. You could, for example, use custom handlers to enforce user-level quotas, compress data on the fly, render progress bars, and even send data to another storage location directly without storing it locally. See Writing custom upload handlers for details on how you can customize or completely replace upload behavior.Before you save uploaded files, the data needs to be stored somewhere.By default, if an uploaded file is smaller than 2.5 megabytes, Django will hold the entire contents of the upload in memory. This means that saving the file involves only a read from memory and a write to disk and thus is very fast.However, if an uploaded file is too large, Django will write the uploaded file to a temporary file stored in your system s temporary directory. On a Unix-like platform this means you can expect Django to generate a file called something like /tmp/tmpzfp6I6.upload. If an upload is large enough, you can watch this file grow in size as Django streams the data onto disk.These specifics   2.5 megabytes; /tmp; etc.   are simply  reasonable defaults  which can be customized as described in the next section.There are a few settings which control Django s file upload behavior. See File Upload Settings for details.Sometimes particular views require different upload behavior. In these cases, you can override upload handlers on a per-request basis by modifying request.upload_handlers. By default, this list will contain the upload handlers given by FILE_UPLOAD_HANDLERS, but you can modify the list as you would any other list.For instance, suppose you ve written a ProgressBarUploadHandler that provides feedback on upload progress to some sort of AJAX widget. You d add this handler to your upload handlers like this:You d probably want to use list.insert() in this case (instead of append()) because a progress bar handler would need to run before any other handlers. Remember, the upload handlers are processed in order.If you want to replace the upload handlers completely, you can just assign a new list:NoteYou can only modify upload handlers before accessing request.POST or request.FILES   it doesn t make sense to change upload handlers after upload handling has already started. If you try to modify request.upload_handlers after reading from request.POST or request.FILES Django will throw an error.Thus, you should always modify uploading handlers as early in your view as possible.Also, request.POST is accessed by CsrfViewMiddleware which is enabled by default. This means you will need to use csrf_exempt() on your view to allow you to change the upload handlers.  You will then need to use csrf_protect() on the function that actually processes the request.  Note that this means that the handlers may start receiving the file upload before the CSRF checks have been done. Example code:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/file/#the-file-class", "para": "The File class is a thin wrapper around a Python file object with some Django-specific additions. Internally, Django uses this class when it needs to represent a file.File objects have the following attributes and methods:The name of the file including the relative path from MEDIA_ROOT.The size of the file in bytes.The underlying file object that this class wraps.Be careful with this attribute in subclasses.Some subclasses of File, including ContentFile and FieldFile, may replace this attribute with an object other than a Python file object. In these cases, this attribute may itself be a File subclass (and not necessarily the same subclass). Whenever possible, use the attributes and methods of the subclass itself rather than the those of the subclass s file attribute.The read/write mode for the file.Open or reopen the file (which also does File.seek(0)). The mode argument allows the same values as Python s built-in open().When reopening a file, mode will override whatever mode the file was originally opened with; None means to reopen with the original mode.It can be used as a context manager, e.g. with file.open() as f:.Iterate over the file yielding one line at a time.Iterate over the file yielding  chunks  of a given size. chunk_size defaults to 64 KB.This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory.Returns True if the file is large enough to require multiple chunks to access all of its content give some chunk_size.Close the file.In addition to the listed methods, File exposes the following attributes and methods of its file object: encoding, fileno, flush, isatty, newlines, read, readinto, readline, readlines, seek, tell, truncate, write, writelines, readable(), writable(), and seekable()."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/file/#the-contentfile-class", "para": "The ContentFile class inherits from File, but unlike File it operates on string content (bytes also supported), rather than an actual file. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/file/#the-imagefile-class", "para": "Django provides a built-in class specifically for images. django.core.files.images.ImageFile inherits all the attributes and methods of File, and additionally provides the following:Width of the image in pixels.Height of the image in pixels."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/file/#additional-methods-on-files-attached-to-objects", "para": "Any File that is associated with an object (as with Car.photo, below) will also have a couple of extra methods:Saves a new file with the file name and contents provided. This will not replace the existing file, but will create a new file and update the object to point to it. If save is True, the model s save() method will be called once the file is saved. That is, these two lines:are equivalent to:Note that the content argument must be an instance of either File or of a subclass of File, such as ContentFile.Removes the file from the model instance and deletes the underlying file. If save is True, the model s save() method will be called once the file is deleted."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/storage/#getting-the-current-storage-class", "para": "Django provides two convenient ways to access the current storage class:DefaultStorage provides lazy access to the current default storage system as defined by DEFAULT_FILE_STORAGE. DefaultStorage uses get_storage_class() internally.Returns a class or module which implements the storage API.When called without the import_path parameter get_storage_class will return the current default storage system as defined by DEFAULT_FILE_STORAGE. If import_path is provided, get_storage_class will attempt to import the class or module from the given path and will return it if successful. An exception will be raised if the import is unsuccessful."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/storage/#the-filesystemstorage-class", "para": "The FileSystemStorage class implements basic file storage on a local filesystem. It inherits from Storage and provides implementations for all the public methods thereof.Absolute path to the directory that will hold the files. Defaults to the value of your MEDIA_ROOT setting.URL that serves the files stored at this location. Defaults to the value of your MEDIA_URL setting.The file system permissions that the file will receive when it is saved. Defaults to FILE_UPLOAD_PERMISSIONS.The file system permissions that the directory will receive when it is saved. Defaults to FILE_UPLOAD_DIRECTORY_PERMISSIONS.NoteThe FileSystemStorage.delete() method will not raise an exception if the given file name does not exist.Returns a datetime of the system s ctime, i.e. os.path.getctime(). On some systems (like Unix), this is the time of the last metadata change, and on others (like Windows), it s the creation time of the file."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/storage/#the-storage-class", "para": "The Storage class provides a standardized API for storing files, along with a set of default behaviors that all other storage systems can inherit or override as necessary.NoteWhen methods return naive datetime objects, the effective timezone used will be the current value of os.environ['TZ']; note that this is usually set from Django s TIME_ZONE.Deletes the file referenced by name. If deletion is not supported on the target storage system this will raise NotImplementedError insteadReturns True if a file referenced by the given name already exists in the storage system, or False if the name is available for a new file.Returns a datetime of the last accessed time of the file. For storage systems unable to return the last accessed time this will raise NotImplementedError.If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone.Returns a filename based on the name parameter that s free and available for new content to be written to on the target storage system.The length of the filename will not exceed max_length, if provided. If a free unique filename cannot be found, a SuspiciousFileOperation exception will be raised.If a file with name already exists, an underscore plus a random 7 character alphanumeric string is appended to the filename before the extension.Returns a datetime of the creation time of the file. For storage systems unable to return the creation time this will raise NotImplementedError.If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone.Returns a datetime of the last modified time of the file. For storage systems unable to return the last modified time this will raise NotImplementedError.If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone.Returns a filename based on the name parameter that s suitable for use on the target storage system.Validates the filename by calling get_valid_name() and returns a filename to be passed to the save() method.The filename argument may include a path as returned by FileField.upload_to. In that case, the path won t be passed to get_valid_name() but will be prepended back to the resulting name.The default implementation uses os.path operations. Override this method if that s not appropriate for your storage.Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren t able to provide such a listing, this will raise a NotImplementedError instead.Opens the file given by name. Note that although the returned file is guaranteed to be a File object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned.The local filesystem path where the file can be opened using Python s standard open(). For storage systems that aren t accessible from the local filesystem, this will raise NotImplementedError instead.Saves a new file using the storage system, preferably with the name specified. If there already exists a file with this name name, the storage system may modify the filename as necessary to get a unique name. The actual name of the stored file will be returned.The max_length argument is passed along to get_available_name().The content argument must be an instance of django.core.files.File or a file-like object that can be wrapped in File.Returns the total size, in bytes, of the file referenced by name. For storage systems that aren t able to return the file size this will raise NotImplementedError instead.Returns the URL where the contents of the file referenced by name can be accessed. For storage systems that don t support access by URL this will raise NotImplementedError instead."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/files/#using-files-in-models", "para": "When you use a FileField or ImageField, Django provides a set of APIs you can use to deal with that file.Consider the following model, using an ImageField to store a photo:Any Car instance will have a photo attribute that you can use to get at the details of the attached photo:This object   car.photo in the example   is a File object, which means it has all the methods and attributes described below.NoteThe file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved.For example, you can change the file name by setting the file s name to a path relative to the file storage s location (MEDIA_ROOT if you are using the default FileSystemStorage):"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/files/#the-file-object", "para": "Internally, Django uses a django.core.files.File instance any time it needs to represent a file.Most of the time you ll simply use a File that Django s given you (i.e. a file attached to a model as above, or perhaps an uploaded file).If you need to construct a File yourself, the easiest way is to create one using a Python built-in file object:Now you can use any of the documented attributes and methods of the File class.Be aware that files created in this way are not automatically closed. The following approach may be used to close files automatically:Closing files is especially important when accessing file fields in a loop over a large number of objects. If files are not manually closed after accessing them, the risk of running out of file descriptors may arise. This may lead to the following error:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/files/#file-storage", "para": "Behind the scenes, Django delegates decisions about how and where to store files to a file storage system. This is the object that actually understands things like file systems, opening and reading files, etc.Django s default file storage is given by the DEFAULT_FILE_STORAGE setting; if you don t explicitly provide a storage system, this is the one that will be used.See below for details of the built-in default file storage system, and see Writing a custom storage system for information on writing your own file storage system.Though most of the time you ll want to use a File object (which delegates to the proper storage for that file), you can use file storage systems directly. You can create an instance of some custom file storage class, or   often more useful   you can use the global default storage system:See File storage API for the file storage API.Django ships with a django.core.files.storage.FileSystemStorage class which implements basic local filesystem file storage.For example, the following code will store uploaded files under /media/photos regardless of what your MEDIA_ROOT setting is:Custom storage systems work the same way: you can pass them in as the storage argument to a FileField."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/#basic-examples", "para": "Django provides base view classes which will suit a wide range of applications. All views inherit from the View class, which handles linking the view in to the URLs, HTTP method dispatching and other simple features. RedirectView is for a simple HTTP redirect, and TemplateView extends the base class to make it also render a template."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/#simple-usage-in-your-urlconf", "para": "The simplest way to use generic views is to create them directly in your URLconf. If you re only changing a few simple attributes on a class-based view, you can simply pass them into the as_view() method call itself:Any arguments passed to as_view() will override attributes set on the class. In this example, we set template_name on the TemplateView. A similar overriding pattern can be used for the url attribute on RedirectView."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/#subclassing-generic-views", "para": "The second, more powerful way to use generic views is to inherit from an existing view and override attributes (such as the template_name) or methods (such as get_context_data) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, about.html. Django has a generic view to do this - TemplateView - so we can just subclass it, and override the template name:Then we just need to add this new view into our URLconf. TemplateView is a class, not a function, so we point the URL to the as_view() class method instead, which provides a function-like entry to class-based views:For more information on how to use the built in generic views, consult the next topic on generic class-based views.Suppose somebody wants to access our book library over HTTP using the views as an API. The API client would connect every now and then and download book data for the books published since last visit. But if no new books appeared since then, it is a waste of CPU time and bandwidth to fetch the books from the database, render a full response and send it to the client. It might be preferable to ask the API when the most recent book was published.We map the URL to book list view in the URLconf:And the view:If the view is accessed from a GET request, a plain-and-simple object list is returned in the response (using book_list.html template). But if the client issues a HEAD request, the response has an empty body and the Last-Modified header indicates when the most recent book was published. Based on this information, the client may or may not download the full object list."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/generic-display/#extending-generic-views", "para": "There s no question that using generic views can speed up development substantially. In most projects, however, there comes a moment when the generic views no longer suffice. Indeed, the most common question asked by new Django developers is how to make generic views handle a wider array of situations.This is one of the reasons generic views were redesigned for the 1.3 release - previously, they were just view functions with a bewildering array of options; now, rather than passing in a large amount of configuration in the URLconf, the recommended way to extend generic views is to subclass them, and override their attributes or methods.That said, generic views will have a limit. If you find you re struggling to implement your view as a subclass of a generic view, then you may find it more effective to write just the code you need, using your own class-based or functional views.More examples of generic views are available in some third party applications, or you could write your own as needed."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/generic-display/#generic-views-of-objects", "para": "TemplateView certainly is useful, but Django s generic views really shine when it comes to presenting views of your database content. Because it s such a common task, Django comes with a handful of built-in generic views that make generating list and detail views of objects incredibly easy.Let s start by looking at some examples of showing a list of objects or an individual object.We ll be using these models:Now we need to define a view:Finally hook that view into your urls:That s all the Python code we need to write. We still need to write a template, however. We could explicitly tell the view which template to use by adding a template_name attribute to the view, but in the absence of an explicit template Django will infer one from the object s name. In this case, the inferred template will be \"books/publisher_list.html\"   the  books  part comes from the name of the app that defines the model, while the  publisher  bit is just the lowercased version of the model s name.NoteThus, when (for example) the APP_DIRS option of a DjangoTemplates backend is set to True in TEMPLATES, a template location could be: /path/to/project/books/templates/books/publisher_list.htmlThis template will be rendered against a context containing a variable called object_list that contains all the publisher objects. A very simple template might look like the following:That s really all there is to it. All the cool features of generic views come from changing the attributes set on the generic view. The generic views reference documents all the generic views and their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views.You might have noticed that our sample publisher list template stores all the publishers in a variable named object_list. While this works just fine, it isn t all that  friendly  to template authors: they have to  just know  that they re dealing with publishers here.Well, if you re dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lowercased version of the model class  name. This is provided in addition to the default object_list entry, but contains exactly the same data, i.e. publisher_list.If this still isn t a good match, you can manually set the name of the context variable. The context_object_name attribute on a generic view specifies the context variable to use:Providing a useful context_object_name is always a good idea. Your coworkers who design templates will thank you.Often you simply need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The DetailView generic view provides the publisher to the context, but how do we get additional information in that template?The answer is to subclass DetailView and provide your own implementation of the get_context_data method. The default implementation simply adds the object being displayed to the template, but you can override it to send more:NoteGenerally, get_context_data will merge the context data of all parent classes with those of the current class. To preserve this behavior in your own classes where you want to alter the context, you should be sure to call get_context_data on the super class. When no two classes try to define the same key, this will give the expected results. However if any class attempts to override a key after parent classes have set it (after the call to super), any children of that class will also need to explicitly set it after super if they want to be sure to override all parents. If you re having trouble, review the method resolution order of your view.Another consideration is that the context data from class-based generic views will override data provided by context processors; see get_context_data() for an example.Now let s take a closer look at the model argument we ve been using all along. The model argument, which specifies the database model that the view will operate upon, is available on all the generic views that operate on a single object or a collection of objects. However, the model argument is not the only way to specify the objects that the view will operate upon   you can also specify the list of objects using the queryset argument:Specifying model = Publisher is really just shorthand for saying queryset = Publisher.objects.all(). However, by using queryset to define a filtered list of objects you can be more specific about the objects that will be visible in the view (see Making queries for more information about QuerySet objects, and see the class-based views reference for the complete details).To pick a simple example, we might want to order a list of books by publication date, with the most recent first:That s a pretty simple example, but it illustrates the idea nicely. Of course, you ll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique:Notice that along with a filtered queryset, we re also using a custom template name. If we didn t, the generic view would use the same template as the  vanilla  object list, which might not be what we want.Also notice that this isn t a very elegant way of doing publisher-specific books. If we want to add another publisher page, we d need another handful of lines in the URLconf, and more than a few publishers would get unreasonable. We ll deal with this problem in the next section.NoteIf you get a 404 when requesting /books/acme/, check to ensure you actually have a Publisher with the name  ACME Publishing .  Generic views have an allow_empty parameter for this case.  See the class-based-views reference for more details.Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher s name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher?Handily, the ListView has a get_queryset() method we can override. Previously, it has just been returning the value of the queryset attribute, but now we can add more logic.The key part to making this work is that when class-based views are called, various useful things are stored on self; as well as the request (self.request) this includes the positional (self.args) and name-based (self.kwargs) arguments captured according to the URLconf.Here, we have a URLconf with a single captured group:Next, we ll write the PublisherBookList view itself:As you can see, it s quite easy to add more logic to the queryset selection; if we wanted, we could use self.request.user to filter using the current user, or other more complex logic.We can also add the publisher into the context at the same time, so we can use it in the template:The last common pattern we ll look at involves doing some extra work before or after calling the generic view.Imagine we had a last_accessed field on our Author model that we were using to keep track of the last time anybody looked at that author:The generic DetailView class, of course, wouldn t know anything about this field, but once again we could easily write a custom view to keep that field updated.First, we d need to add an author detail bit in the URLconf to point to a custom view:Then we d write our new view   get_object is the method that retrieves the object   so we simply override it and wrap the call:NoteThe URLconf here uses the named group pk - this name is the default name that DetailView uses to find the value of the primary key used to filter the queryset.If you want to call the group something else, you can set pk_url_kwarg on the view. More details can be found in the reference for DetailView"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/generic-editing/#basic-forms", "para": "Given a simple contact form:The view can be constructed using a FormView:Notes:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/generic-editing/#model-forms", "para": "Generic views really shine when working with models.  These generic views will automatically create a ModelForm, so long as they can work out which model class to use:Model form views provide a form_valid() implementation that saves the model automatically.  You can override this if you have any special requirements; see below for examples.You don t even need to provide a success_url for CreateView or UpdateView - they will use get_absolute_url() on the model object if available.If you want to use a custom ModelForm (for instance to add extra validation) simply set form_class on your view.NoteWhen specifying a custom form class, you must still specify the model, even though the form_class may be a ModelForm.First we need to add get_absolute_url() to our Author class:Then we can use CreateView and friends to do the actual work. Notice how we re just configuring the generic class-based views here; we don t have to write any logic ourselves:NoteWe have to use reverse_lazy() here, not just reverse() as the urls are not loaded when the file is imported.The fields attribute works the same way as the fields attribute on the inner Meta class on ModelForm. Unless you define the form class in another way, the attribute is required and the view will raise an ImproperlyConfigured exception if it s not.If you specify both the fields and form_class attributes, an ImproperlyConfigured exception will be raised.Finally, we hook these new views into the URLconf:NoteThese views inherit SingleObjectTemplateResponseMixin which uses template_name_suffix to construct the template_name based on the model.In this example:If you wish to have separate templates for CreateView and UpdateView, you can set either template_name or template_name_suffix on your view class."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/generic-editing/#models-and-request-user", "para": "To track the user that created an object using a CreateView, you can use a custom ModelForm to do this. First, add the foreign key relation to the model:In the view, ensure that you don t include created_by in the list of fields to edit, and override form_valid() to add the user:LoginRequiredMixin prevents users who aren t logged in from accessing the form. If you omit that, you ll need to handle unauthorized users in form_valid()."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/generic-editing/#ajax-example", "para": "Here is a simple example showing how you might go about implementing a form that works for AJAX requests as well as  normal  form POSTs:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/mixins/#context-and-template-responses", "para": "Two central mixins are provided that help in providing a consistent interface to working with templates in class-based views.Every built in view which returns a TemplateResponse will call the render_to_response() method that TemplateResponseMixin provides. Most of the time this will be called for you (for instance, it is called by the get() method implemented by both TemplateView and DetailView); similarly, it s unlikely that you ll need to override it, although if you want your response to return something not rendered via a Django template then you ll want to do it. For an example of this, see the JSONResponseMixin example.render_to_response() itself calls get_template_names(), which by default will just look up template_name on the class-based view; two other mixins (SingleObjectTemplateResponseMixin and MultipleObjectTemplateResponseMixin) override this to provide more flexible defaults when dealing with actual objects."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/mixins/#building-up-django-s-generic-class-based-views", "para": "Let s look at how two of Django s generic class-based views are built out of mixins providing discrete functionality. We ll consider DetailView, which renders a  detail  view of an object, and ListView, which will render a list of objects, typically from a queryset, and optionally paginate them. This will introduce us to four mixins which between them provide useful functionality when working with either a single Django object, or multiple objects.There are also mixins involved in the generic edit views (FormView, and the model-specific views CreateView, UpdateView and DeleteView), and in the date-based generic views. These are covered in the mixin reference documentation.To show the detail of an object, we basically need to do two things: we need to look up the object and then we need to make a TemplateResponse with a suitable template, and that object as context.To get the object, DetailView relies on SingleObjectMixin, which provides a get_object() method that figures out the object based on the URL of the request (it looks for pk and slug keyword arguments as declared in the URLConf, and looks the object up either from the model attribute on the view, or the queryset attribute if that s provided). SingleObjectMixin also overrides get_context_data(), which is used across all Django s built in class-based views to supply context data for template renders.To then make a TemplateResponse, DetailView uses SingleObjectTemplateResponseMixin, which extends TemplateResponseMixin, overriding get_template_names() as discussed above. It actually provides a fairly sophisticated set of options, but the main one that most people are going to use is <app_label>/<model_name>_detail.html. The _detail part can be changed by setting template_name_suffix on a subclass to something else. (For instance, the generic edit views use _form for create and update views, and _confirm_delete for delete views.)Lists of objects follow roughly the same pattern: we need a (possibly paginated) list of objects, typically a QuerySet, and then we need to make a TemplateResponse with a suitable template using that list of objects.To get the objects, ListView uses MultipleObjectMixin, which provides both get_queryset() and paginate_queryset(). Unlike with SingleObjectMixin, there s no need to key off parts of the URL to figure out the queryset to work with, so the default just uses the queryset or model attribute on the view class. A common reason to override get_queryset() here would be to dynamically vary the objects, such as depending on the current user or to exclude posts in the future for a blog.MultipleObjectMixin also overrides get_context_data() to include appropriate context variables for pagination (providing dummies if pagination is disabled). It relies on object_list being passed in as a keyword argument, which ListView arranges for it.To make a TemplateResponse, ListView then uses MultipleObjectTemplateResponseMixin; as with SingleObjectTemplateResponseMixin above, this overrides get_template_names() to provide a range of options, with the most commonly-used being <app_label>/<model_name>_list.html, with the _list part again being taken from the template_name_suffix attribute. (The date based generic views use suffixes such as _archive, _archive_year and so on to use different templates for the various specialized date-based list views.)"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/mixins/#using-django-s-class-based-view-mixins", "para": "Now we ve seen how Django s generic class-based views use the provided mixins, let s look at other ways we can combine them. Of course we re still going to be combining them with either built-in class-based views, or other generic class-based views, but there are a range of rarer problems you can solve than are provided for by Django out of the box.WarningNot all mixins can be used together, and not all generic class based views can be used with all other mixins. Here we present a few examples that do work; if you want to bring together other functionality then you ll have to consider interactions between attributes and methods that overlap between the different classes you re using, and how method resolution order will affect which versions of the methods will be called in what order.The reference documentation for Django s class-based views and class-based view mixins will help you in understanding which attributes and methods are likely to cause conflict between different classes and mixins.If in doubt, it s often better to back off and base your work on View or TemplateView, perhaps with SingleObjectMixin and MultipleObjectMixin. Although you will probably end up writing more code, it is more likely to be clearly understandable to someone else coming to it later, and with fewer interactions to worry about you will save yourself some thinking. (Of course, you can always dip into Django s implementation of the generic class-based views for inspiration on how to tackle problems.)If we want to write a simple class-based view that responds only to POST, we ll subclass View and write a post() method in the subclass. However if we want our processing to work on a particular object, identified from the URL, we ll want the functionality provided by SingleObjectMixin.We ll demonstrate this with the Author model we used in the generic class-based views introduction.In practice you d probably want to record the interest in a key-value store rather than in a relational database, so we ve left that bit out. The only bit of the view that needs to worry about using SingleObjectMixin is where we want to look up the author we re interested in, which it just does with a simple call to self.get_object(). Everything else is taken care of for us by the mixin.We can hook this into our URLs easily enough:Note the pk named group, which get_object() uses to look up the Author instance. You could also use a slug, or any of the other features of SingleObjectMixin.ListView provides built-in pagination, but you might want to paginate a list of objects that are all linked (by a foreign key) to another object. In our publishing example, you might want to paginate through all the books by a particular publisher.One way to do this is to combine ListView with SingleObjectMixin, so that the queryset for the paginated list of books can hang off the publisher found as the single object. In order to do this, we need to have two different querysets:NoteWe have to think carefully about get_context_data(). Since both SingleObjectMixin and ListView will put things in the context data under the value of context_object_name if it s set, we ll instead explicitly ensure the Publisher is in the context data. ListView will add in the suitable page_obj and paginator for us providing we remember to call super().Now we can write a new PublisherDetail:Notice how we set self.object within get() so we can use it again later in get_context_data() and get_queryset(). If you don t set template_name, the template will default to the normal ListView choice, which in this case would be \"books/book_list.html\" because it s a list of books; ListView knows nothing about SingleObjectMixin, so it doesn t have any clue this view is anything to do with a Publisher.The paginate_by is deliberately small in the example so you don t have to create lots of books to see the pagination working! Here s the template you d want to use:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/mixins/#avoid-anything-more-complex", "para": "Generally you can use TemplateResponseMixin and SingleObjectMixin when you need their functionality. As shown above, with a bit of care you can even combine SingleObjectMixin with ListView. However things get increasingly complex as you try to do so, and a good rule of thumb is:HintEach of your views should use only mixins or views from one of the groups of generic class-based views: detail, list, editing and date. For example it s fine to combine TemplateView (built in view) with MultipleObjectMixin (generic list), but you re likely to have problems combining SingleObjectMixin (generic detail) with MultipleObjectMixin (generic list).To show what happens when you try to get more sophisticated, we show an example that sacrifices readability and maintainability when there is a simpler solution. First, let s look at a naive attempt to combine DetailView with FormMixin to enable us to POST a Django Form to the same URL as we re displaying an object using DetailView.Think back to our earlier example of using View and SingleObjectMixin together. We were recording a user s interest in a particular author; say now that we want to let them leave a message saying why they like them. Again, let s assume we re not going to store this in a relational database but instead in something more esoteric that we won t worry about here.At this point it s natural to reach for a Form to encapsulate the information sent from the user s browser to Django. Say also that we re heavily invested in REST, so we want to use the same URL for displaying the author as for capturing the message from the user. Let s rewrite our AuthorDetailView to do that.We ll keep the GET handling from DetailView, although we ll have to add a Form into the context data so we can render it in the template. We ll also want to pull in form processing from FormMixin, and write a bit of code so that on POST the form gets called appropriately.NoteWe use FormMixin and implement post() ourselves rather than try to mix DetailView with FormView (which provides a suitable post() already) because both of the views implement get(), and things would get much more confusing.Our new AuthorDetail looks like this:get_success_url() is just providing somewhere to redirect to, which gets used in the default implementation of form_valid(). We have to provide our own post() as noted earlier, and override get_context_data() to make the Form available in the context data.It should be obvious that the number of subtle interactions between FormMixin and DetailView is already testing our ability to manage things. It s unlikely you d want to write this kind of class yourself.In this case, it would be fairly easy to just write the post() method yourself, keeping DetailView as the only generic functionality, although writing Form handling code involves a lot of duplication.Alternatively, it would still be easier than the above approach to have a separate view for processing the form, which could use FormView distinct from DetailView without concerns.What we re really trying to do here is to use two different class based views from the same URL. So why not do just that? We have a very clear division here: GET requests should get the DetailView (with the Form added to the context data), and POST requests should get the FormView. Let s set up those views first.The AuthorDisplay view is almost the same as when we first introduced AuthorDetail; we have to write our own get_context_data() to make the AuthorInterestForm available to the template. We ll skip the get_object() override from before for clarity:Then the AuthorInterest is a simple FormView, but we have to bring in SingleObjectMixin so we can find the author we re talking about, and we have to remember to set template_name to ensure that form errors will render the same template as AuthorDisplay is using on GET:Finally we bring this together in a new AuthorDetail view. We already know that calling as_view() on a class-based view gives us something that behaves exactly like a function based view, so we can do that at the point we choose between the two subviews.You can of course pass through keyword arguments to as_view() in the same way you would in your URLconf, such as if you wanted the AuthorInterest behavior to also appear at another URL but using a different template:This approach can also be used with any other generic class-based views or your own class-based views inheriting directly from View or TemplateView, as it keeps the different views as separate as possible."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/mixins/#more-than-just-html", "para": "Where class-based views shine is when you want to do the same thing many times. Suppose you re writing an API, and every view should return JSON instead of rendered HTML.We can create a mixin class to use in all of our views, handling the conversion to JSON once.For example, a simple JSON mixin might look something like this:NoteCheck out the Serializing Django objects documentation for more information on how to correctly transform Django models and querysets into JSON.This mixin provides a render_to_json_response() method with the same signature as render_to_response(). To use it, we simply need to mix it into a TemplateView for example, and override render_to_response() to call render_to_json_response() instead:Equally we could use our mixin with one of the generic views. We can make our own version of DetailView by mixing JSONResponseMixin with the django.views.generic.detail.BaseDetailView   (the DetailView before template rendering behavior has been mixed in):This view can then be deployed in the same way as any other DetailView, with exactly the same behavior   except for the format of the response.If you want to be really adventurous, you could even mix a DetailView subclass that is able to return both HTML and JSON content, depending on some property of the HTTP request, such as a query argument or a HTTP header. Just mix in both the JSONResponseMixin and a SingleObjectTemplateResponseMixin, and override the implementation of render_to_response() to defer to the appropriate rendering method depending on the type of response that the user requested:Because of the way that Python resolves method overloading, the call to super().render_to_response(context) ends up calling the render_to_response() implementation of TemplateResponseMixin."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/#specification", "para": "Each request served by a class-based view has an independent state; therefore, it is safe to store state variables on the instance (i.e., self.foo = 3 is a thread-safe operation).A class-based view is deployed into a URL pattern using the as_view() classmethod:Thread safety with view argumentsArguments passed to a view are shared between every instance of a view. This means that you shouldn t use a list, dictionary, or any other mutable object as an argument to a view. If you do and the shared object is modified, the actions of one user visiting your view could have an effect on subsequent users visiting the same view.Arguments passed into as_view() will be assigned onto the instance that is used to service a request. Using the previous example, this means that every request on MyView is able to use self.size. Arguments must correspond to attributes that already exist on the class (return True on a hasattr check)."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/#base-vs-generic-views", "para": "Base class-based views can be thought of as parent views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins which extend what base views can do.Django s generic views are built off of those base views, and were developed as a shortcut for common usage patterns such as displaying the details of an object. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself.Most generic views require the queryset key, which is a QuerySet instance; see Making queries for more information about QuerySet objects."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/flattened-index/#simple-generic-views", "para": "Attributes (with optional accessor):MethodsAttributes (with optional accessor):MethodsAttributes (with optional accessor):Methods"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/flattened-index/#detail-views", "para": "Attributes (with optional accessor):Methods"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/flattened-index/#list-views", "para": "Attributes (with optional accessor):Methods"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/flattened-index/#editing-views", "para": "Attributes (with optional accessor):MethodsAttributes (with optional accessor):MethodsAttributes (with optional accessor):MethodsAttributes (with optional accessor):Methods"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/flattened-index/#date-based-views", "para": "Attributes (with optional accessor):MethodsAttributes (with optional accessor):MethodsAttributes (with optional accessor):MethodsAttributes (with optional accessor):MethodsAttributes (with optional accessor):MethodsAttributes (with optional accessor):MethodsAttributes (with optional accessor):Methods"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/outputting-csv/#using-the-python-csv-library", "para": "Python comes with a CSV library, csv. The key to using it with Django is that the csv module s CSV-creation capability acts on file-like objects, and Django s HttpResponse objects are file-like objects.Here s an example:The code and comments should be self-explanatory, but a few things deserve a mention:When dealing with views that generate very large responses, you might want to consider using Django s StreamingHttpResponse instead. For example, by streaming a file that takes a long time to generate you can avoid a load balancer dropping a connection that might have otherwise timed out while the server was generating the response.In this example, we make full use of Python generators to efficiently handle the assembly and transmission of a large CSV file:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/outputting-csv/#using-the-template-system", "para": "Alternatively, you can use the Django template system to generate CSV. This is lower-level than using the convenient Python csv module, but the solution is presented here for completeness.The idea here is to pass a list of items to your template, and have the template output the commas in a for loop.Here s an example, which generates the same CSV file as above:The only difference between this example and the previous example is that this one uses template loading instead of the CSV module. The rest of the code   such as the content_type='text/csv'   is the same.Then, create the template my_template_name.txt, with this template code:This template is quite basic. It just iterates over the given data and displays a line of CSV for each row. It uses the addslashes template filter to ensure there aren t any problems with quotes."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/outputting-csv/#other-text-based-formats", "para": "Notice that there isn t very much specific to CSV here   just the specific output format. You can use either of these techniques to output any text-based format you can dream of. You can also use a similar technique to generate arbitrary binary data; see Outputting PDFs with Django for an example."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/outputting-pdf/#install-reportlab", "para": "The ReportLab library is available on PyPI. A user guide (not coincidentally, a PDF file) is also available for download. You can install ReportLab with pip:Test your installation by importing it in the Python interactive interpreter:If that command doesn t raise any errors, the installation worked."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/outputting-pdf/#write-your-view", "para": "The key to generating PDFs dynamically with Django is that the ReportLab API acts on file-like objects, and Django s FileResponse objects accept file-like objects.Here s a  Hello World  example:The code and comments should be self-explanatory, but a few things deserve a mention:NoteReportLab is not thread-safe. Some of our users have reported odd issues with building PDF-generating Django views that are accessed by many people at the same time."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/outputting-pdf/#other-formats", "para": "Notice that there isn t a lot in these examples that s PDF-specific   just the bits using reportlab. You can use a similar technique to generate any arbitrary format that you can find a Python library for. Also see Outputting CSV with Django for another example and some techniques you can use when generated text-based formats.See alsoDjango Packages provides a comparison of packages that help generate PDF files from Django."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/middleware/#writing-your-own-middleware", "para": "A middleware factory is a callable that takes a get_response callable and returns a middleware. A middleware is a callable that takes a request and returns a response, just like a view.A middleware can be written as a function that looks like this:Or it can be written as a class whose instances are callable, like this:The get_response callable provided by Django might be the actual view (if this is the last listed middleware) or it might be the next middleware in the chain. The current middleware doesn t need to know or care what exactly it is, just that it represents whatever comes next.The above is a slight simplification   the get_response callable for the last middleware in the chain won t be the actual view but rather a wrapper method from the handler which takes care of applying view middleware, calling the view with appropriate URL arguments, and applying template-response and exception middleware.Middleware can live anywhere on your Python path.Middleware factories must accept a get_response argument. You can also initialize some global state for the middleware. Keep in mind a couple of caveats:It s sometimes useful to determine at startup time whether a piece of middleware should be used. In these cases, your middleware s __init__() method may raise MiddlewareNotUsed. Django will then remove that middleware from the middleware process and log a debug message to the django.request logger when DEBUG is True."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/middleware/#activating-middleware", "para": "To activate a middleware component, add it to the MIDDLEWARE list in your Django settings.In MIDDLEWARE, each middleware component is represented by a string: the full Python path to the middleware factory s class or function name. For example, here s the default value created by django-admin startproject:A Django installation doesn t require any middleware   MIDDLEWARE can be empty, if you d like   but it s strongly suggested that you at least use CommonMiddleware.The order in MIDDLEWARE matters because a middleware can depend on other middleware. For instance, AuthenticationMiddleware stores the authenticated user in the session; therefore, it must run after SessionMiddleware. See Middleware ordering for some common hints about ordering of Django middleware classes."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/middleware/#middleware-order-and-layering", "para": "During the request phase, before calling the view, Django applies middleware in the order it s defined in MIDDLEWARE, top-down.You can think of it like an onion: each middleware class is a  layer  that wraps the view, which is in the core of the onion. If the request passes through all the layers of the onion (each one calls get_response to pass the request in to the next layer), all the way to the view at the core, the response will then pass through every layer (in reverse order) on the way back out.If one of the layers decides to short-circuit and return a response without ever calling its get_response, none of the layers of the onion inside that layer (including the view) will see the request or the response. The response will only return through the same layers that the request passed in through."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/middleware/#other-middleware-hooks", "para": "Besides the basic request/response middleware pattern described earlier, you can add three other special methods to class-based middleware:request is an HttpRequest object. view_func is the Python function that Django is about to use. (It s the actual function object, not the name of the function as a string.) view_args is a list of positional arguments that will be passed to the view, and view_kwargs is a dictionary of keyword arguments that will be passed to the view. Neither view_args nor view_kwargs include the first view argument (request).process_view() is called just before Django calls the view.It should return either None or an HttpResponse object. If it returns None, Django will continue processing this request, executing any other process_view() middleware and, then, the appropriate view. If it returns an HttpResponse object, Django won t bother calling the appropriate view; it ll apply response middleware to that HttpResponse and return the result.NoteAccessing request.POST inside middleware before the view runs or in process_view() will prevent any view running after the middleware from being able to modify the upload handlers for the request, and should normally be avoided.The CsrfViewMiddleware class can be considered an exception, as it provides the csrf_exempt() and csrf_protect() decorators which allow views to explicitly control at what point the CSRF validation should occur.request is an HttpRequest object. exception is an Exception object raised by the view function.Django calls process_exception() when a view raises an exception. process_exception() should return either None or an HttpResponse object. If it returns an HttpResponse object, the template response and response middleware will be applied and the resulting response returned to the browser. Otherwise, default exception handling kicks in.Again, middleware are run in reverse order during the response phase, which includes process_exception. If an exception middleware returns a response, the process_exception methods of the middleware classes above that middleware won t be called at all.request is an HttpRequest object. response is the TemplateResponse object (or equivalent) returned by a Django view or by a middleware.process_template_response() is called just after the view has finished executing, if the response instance has a render() method, indicating that it is a TemplateResponse or equivalent.It must return a response object that implements a render method. It could alter the given response by changing response.template_name and response.context_data, or it could create and return a brand-new TemplateResponse or equivalent.You don t need to explicitly render responses   responses will be automatically rendered once all template response middleware has been called.Middleware are run in reverse order during the response phase, which includes process_template_response()."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/middleware/#dealing-with-streaming-responses", "para": "Unlike HttpResponse, StreamingHttpResponse does not have a content attribute. As a result, middleware can no longer assume that all responses will have a content attribute. If they need access to the content, they must test for streaming responses and adjust their behavior accordingly:Notestreaming_content should be assumed to be too large to hold in memory. Response middleware may wrap it in a new generator, but must not consume it. Wrapping is typically implemented as follows:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/middleware/#exception-handling", "para": "Django automatically converts exceptions raised by the view or by middleware into an appropriate HTTP response with an error status code. Certain exceptions are converted to 4xx status codes, while an unknown exception is converted to a 500 status code.This conversion takes place before and after each middleware (you can think of it as the thin film in between each layer of the onion), so that every middleware can always rely on getting some kind of HTTP response back from calling its get_response callable. Middleware don t need to worry about wrapping their call to get_response in a try/except and handling an exception that might have been raised by a later middleware or the view. Even if the very next middleware in the chain raises an Http404 exception, for example, your middleware won t see that exception; instead it will get an HttpResponse object with a status_code of 404."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/middleware/#upgrading-pre-django-1-10-style-middleware", "para": "Django provides django.utils.deprecation.MiddlewareMixin to ease creating middleware classes that are compatible with both MIDDLEWARE and the old MIDDLEWARE_CLASSES. All middleware classes included with Django are compatible with both settings.The mixin provides an __init__() method that accepts an optional get_response argument and stores it in self.get_response.The __call__() method:If used with MIDDLEWARE_CLASSES, the __call__() method will never be used; Django calls process_request() and process_response() directly.In most cases, inheriting from this mixin will be sufficient to make an old-style middleware compatible with the new system with sufficient backwards-compatibility. The new short-circuiting semantics will be harmless or even beneficial to the existing middleware. In a few cases, a middleware class may need some changes to adjust to the new semantics.These are the behavioral differences between using MIDDLEWARE and MIDDLEWARE_CLASSES:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/middleware/#available-middleware", "para": "Enable the site-wide cache. If these are enabled, each Django-powered page will be cached for as long as the CACHE_MIDDLEWARE_SECONDS setting defines. See the cache documentation.Adds a few conveniences for perfectionists:Forbids access to user agents in the DISALLOWED_USER_AGENTS setting, which should be a list of compiled regular expression objects.Performs URL rewriting based on the APPEND_SLASH and PREPEND_WWW settings.If APPEND_SLASH is True and the initial URL doesn t end with a slash, and it is not found in the URLconf, then a new URL is formed by appending a slash at the end. If this new URL is found in the URLconf, then Django redirects the request to this new URL. Otherwise, the initial URL is processed as usual.For example, foo.com/bar will be redirected to foo.com/bar/ if you don t have a valid URL pattern for foo.com/bar but do have a valid pattern for foo.com/bar/.If PREPEND_WWW is True, URLs that lack a leading  www.  will be redirected to the same URL with a leading  www. Both of these options are meant to normalize URLs. The philosophy is that each URL should exist in one, and only one, place. Technically a URL foo.com/bar is distinct from foo.com/bar/   a search-engine indexer would treat them as separate URLs   so it s best practice to normalize URLs.Sets the Content-Length header for non-streaming responses.Defaults to HttpResponsePermanentRedirect. Subclass CommonMiddleware and override the attribute to customize the redirects issued by the middleware.WarningSecurity researchers recently revealed that when compression techniques (including GZipMiddleware) are used on a website, the site may become exposed to a number of possible attacks. Before using GZipMiddleware on your site, you should consider very carefully whether you are subject to these attacks. If you re in any doubt about whether you re affected, you should avoid using GZipMiddleware. For more details, see the the BREACH paper (PDF) and breachattack.com.Compresses content for browsers that understand GZip compression (all modern browsers).This middleware should be placed before any other middleware that need to read or write the response body so that compression happens afterward.It will NOT compress content if any of the following are true:If the response has an ETag header, the ETag is made weak to comply with RFC 7232#section-2.1.You can apply GZip compression to individual views using the gzip_page() decorator.Handles conditional GET operations. If the response doesn t have an ETag header, the middleware adds one if needed. If the response has an ETag or Last-Modified header, and the request has If-None-Match or If-Modified-Since, the response is replaced by an HttpResponseNotModified.Enables language selection based on data from the request. It customizes content for each user. See the internationalization documentation.Defaults to HttpResponseRedirect. Subclass LocaleMiddleware and override the attribute to customize the redirects issued by the middleware.Enables cookie- and session-based message support. See the messages documentation.WarningIf your deployment situation allows, it s usually a good idea to have your front-end Web server perform the functionality provided by the SecurityMiddleware. That way, if there are requests that aren t served by Django (such as static media or user-uploaded files), they will have the same protections as requests to your Django application.The django.middleware.security.SecurityMiddleware provides several security enhancements to the request/response cycle. Each one can be independently enabled or disabled with a setting.For sites that should only be accessed over HTTPS, you can instruct modern browsers to refuse to connect to your domain name via an insecure connection (for a given period of time) by setting the  Strict-Transport-Security  header. This reduces your exposure to some SSL-stripping man-in-the-middle (MITM) attacks.SecurityMiddleware will set this header for you on all HTTPS responses if you set the SECURE_HSTS_SECONDS setting to a non-zero integer value.When enabling HSTS, it s a good idea to first use a small value for testing, for example, SECURE_HSTS_SECONDS = 3600 for one hour. Each time a Web browser sees the HSTS header from your site, it will refuse to communicate non-securely (using HTTP) with your domain for the given period of time. Once you confirm that all assets are served securely on your site (i.e. HSTS didn t break anything), it s a good idea to increase this value so that infrequent visitors will be protected (31536000 seconds, i.e. 1 year, is common).Additionally, if you set the SECURE_HSTS_INCLUDE_SUBDOMAINS setting to True, SecurityMiddleware will add the includeSubDomains directive to the Strict-Transport-Security header. This is recommended (assuming all subdomains are served exclusively using HTTPS), otherwise your site may still be vulnerable via an insecure connection to a subdomain.If you wish to submit your site to the browser preload list, set the SECURE_HSTS_PRELOAD setting to True. That appends the preload directive to the Strict-Transport-Security header.WarningThe HSTS policy applies to your entire domain, not just the URL of the response that you set the header on. Therefore, you should only use it if your entire domain is served via HTTPS only.Browsers properly respecting the HSTS header will refuse to allow users to bypass warnings and connect to a site with an expired, self-signed, or otherwise invalid SSL certificate. If you use HSTS, make sure your certificates are in good shape and stay that way!NoteIf you are deployed behind a load-balancer or reverse-proxy server, and the Strict-Transport-Security header is not being added to your responses, it may be because Django doesn t realize that it s on a secure connection; you may need to set the SECURE_PROXY_SSL_HEADER setting.Some browsers will try to guess the content types of the assets that they fetch, overriding the Content-Type header. While this can help display sites with improperly configured servers, it can also pose a security risk.If your site serves user-uploaded files, a malicious user could upload a specially-crafted file that would be interpreted as HTML or JavaScript by the browser when you expected it to be something harmless.To prevent the browser from guessing the content type and force it to always use the type provided in the Content-Type header, you can pass the X-Content-Type-Options: nosniff header.  SecurityMiddleware will do this for all responses if the SECURE_CONTENT_TYPE_NOSNIFF setting is True.Note that in most deployment situations where Django isn t involved in serving user-uploaded files, this setting won t help you. For example, if your MEDIA_URL is served directly by your front-end Web server (nginx, Apache, etc.) then you d want to set this header there. On the other hand, if you are using Django to do something like require authorization in order to download files and you cannot set the header using your Web server, this setting will be useful.Some browsers have the ability to block content that appears to be an XSS attack. They work by looking for JavaScript content in the GET or POST parameters of a page. If the JavaScript is replayed in the server s response, the page is blocked from rendering and an error page is shown instead.The X-XSS-Protection header is used to control the operation of the XSS filter.To enable the XSS filter in the browser, and force it to always block suspected XSS attacks, you can pass the X-XSS-Protection: 1; mode=block header. SecurityMiddleware will do this for all responses if the SECURE_BROWSER_XSS_FILTER setting is True.WarningThe browser XSS filter is a useful defense measure, but must not be relied upon exclusively. It cannot detect all XSS attacks and not all browsers support the header. Ensure you are still validating and sanitizing all input to prevent XSS attacks.If your site offers both HTTP and HTTPS connections, most users will end up with an unsecured connection by default. For best security, you should redirect all HTTP connections to HTTPS.If you set the SECURE_SSL_REDIRECT setting to True, SecurityMiddleware will permanently (HTTP 301) redirect all HTTP connections to HTTPS.NoteFor performance reasons, it s preferable to do these redirects outside of Django, in a front-end load balancer or reverse-proxy server such as nginx. SECURE_SSL_REDIRECT is intended for the deployment situations where this isn t an option.If the SECURE_SSL_HOST setting has a value, all redirects will be sent to that host instead of the originally-requested host.If there are a few pages on your site that should be available over HTTP, and not redirected to HTTPS, you can list regular expressions to match those URLs in the SECURE_REDIRECT_EXEMPT setting.NoteIf you are deployed behind a load-balancer or reverse-proxy server and Django can t seem to tell when a request actually is already secure, you may need to set the SECURE_PROXY_SSL_HEADER setting.Enables session support. See the session documentation.Adds the site attribute representing the current site to every incoming HttpRequest object. See the sites documentation.Adds the user attribute, representing the currently-logged-in user, to every incoming HttpRequest object. See Authentication in Web requests.Middleware for utilizing Web server provided authentication. See Authentication using REMOTE_USER for usage details.Middleware for utilizing Web server provided authentication when enabled only on the login page. See Using REMOTE_USER on login pages only for usage details.Adds protection against Cross Site Request Forgeries by adding hidden form fields to POST forms and checking requests for the correct value. See the Cross Site Request Forgery protection documentation.Simple clickjacking protection via the X-Frame-Options header."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/middleware/#middleware-ordering", "para": "Here are some hints about the ordering of various Django middleware classes:SecurityMiddlewareIt should go near the top of the list if you re going to turn on the SSL redirect as that avoids running through a bunch of other unnecessary middleware.UpdateCacheMiddlewareBefore those that modify the Vary header (SessionMiddleware, GZipMiddleware, LocaleMiddleware).GZipMiddlewareBefore any middleware that may change or use the response body.After UpdateCacheMiddleware: Modifies Vary header.SessionMiddlewareBefore any middleware that may raise an an exception to trigger an error view (such as PermissionDenied) if you re using CSRF_USE_SESSIONS.After UpdateCacheMiddleware: Modifies Vary header.ConditionalGetMiddlewareBefore any middleware that may change the response (it sets the ETag header).After GZipMiddleware so it won t calculate an ETag header on gzipped contents.LocaleMiddlewareOne of the topmost, after SessionMiddleware (uses session data) and UpdateCacheMiddleware (modifies Vary header).CommonMiddlewareBefore any middleware that may change the response (it sets the Content-Length header). A middleware that appears before CommonMiddleware and changes the response must reset Content-Length.Close to the top: it redirects when APPEND_SLASH or PREPEND_WWW are set to True.After SessionMiddleware if you re using CSRF_USE_SESSIONS.CsrfViewMiddlewareBefore any view middleware that assumes that CSRF attacks have been dealt with.After SessionMiddleware if you re using CSRF_USE_SESSIONS.AuthenticationMiddlewareAfter SessionMiddleware: uses session storage.MessageMiddlewareAfter SessionMiddleware: can use session-based storage.FetchFromCacheMiddlewareAfter any middleware that modifies the Vary header: that header is used to pick a value for the cache hash-key.FlatpageFallbackMiddlewareShould be near the bottom as it s a last-resort type of middleware.RedirectFallbackMiddlewareShould be near the bottom as it s a last-resort type of middleware."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/templates/#support-for-template-engines", "para": "Templates engines are configured with the TEMPLATES setting. It s a list of configurations, one for each engine. The default value is empty. The settings.py generated by the startproject command defines a more useful value:BACKEND is a dotted Python path to a template engine class implementing Django s template backend API. The built-in backends are django.template.backends.django.DjangoTemplates and django.template.backends.jinja2.Jinja2.Since most engines load templates from files, the top-level configuration for each engine contains two common settings:While uncommon, it s possible to configure several instances of the same backend with different options. In that case you should define a unique NAME for each engine.OPTIONS contains backend-specific settings.The django.template.loader module defines two functions to load templates.This function loads the template with the given name and returns a Template object.The exact type of the return value depends on the backend that loaded the template. Each backend has its own Template class.get_template() tries each template engine in order until one succeeds. If the template cannot be found, it raises TemplateDoesNotExist. If the template is found but contains invalid syntax, it raises TemplateSyntaxError.How templates are searched and loaded depends on each engine s backend and configuration.If you want to restrict the search to a particular template engine, pass the engine s NAME in the using argument.select_template() is just like get_template(), except it takes a list of template names. It tries each name in order and returns the first template that exists.If loading a template fails, the following two exceptions, defined in django.template, may be raised:This exception is raised when a template cannot be found. It accepts the following optional arguments for populating the template postmortem on the debug page:This exception is raised when a template was found but contains errors.Template objects returned by get_template() and select_template() must provide a render() method with the following signature:Renders this template with a given context.If context is provided, it must be a dict. If it isn t provided, the engine will render the template with an empty context.If request is provided, it must be an HttpRequest. Then the engine must make it, as well as the CSRF token, available in the template. How this is achieved is up to each backend.Here s an example of the search algorithm. For this example the TEMPLATES setting is:If you call get_template('story_detail.html'), here are the files Django will look for, in order:If you call select_template(['story_253_detail.html', 'story_detail.html']), here s what Django will look for:When Django finds a template that exists, it stops looking.TipYou can use select_template() for flexible template loading. For example, if you ve written a news story and want some stories to have custom templates, use something like select_template(['story_%s_detail.html' % story.id, 'story_detail.html']). That ll allow you to use a custom template for an individual story, with a fallback template for stories that don t have custom templates.It s possible   and preferable   to organize templates in subdirectories inside each directory containing templates. The convention is to make a subdirectory for each Django app, with subdirectories within those subdirectories as needed.Do this for your own sanity. Storing all templates in the root level of a single directory gets messy.To load a template that s within a subdirectory, just use a slash, like so:Using the same TEMPLATES option as above, this will attempt to load the following templates:In addition, to cut down on the repetitive nature of loading and rendering templates, Django provides a shortcut function which automates the process.render_to_string() loads a template like get_template() and calls its render() method immediately. It takes the following arguments.Usage example:See also the render() shortcut which calls render_to_string() and feeds the result into an HttpResponse suitable for returning from a view.Finally, you can use configured engines directly:Template engines are available in django.template.engines:The lookup key   'django' in this example   is the engine s NAME.Set BACKEND to 'django.template.backends.django.DjangoTemplates' to configure a Django template engine.When APP_DIRS is True, DjangoTemplates engines look for templates in the templates subdirectory of installed applications. This generic name was kept for backwards-compatibility.DjangoTemplates engines accept the following OPTIONS:'autoescape': a boolean that controls whether HTML autoescaping is enabled.It defaults to True.WarningOnly set it to False if you re rendering non-HTML templates!'context_processors': a list of dotted Python paths to callables that are used to populate the context when a template is rendered with a request. These callables take a request object as their argument and return a dict of items to be merged into the context.It defaults to an empty list.See RequestContext for more information.'debug': a boolean that turns on/off template debug mode. If it is True, the fancy error page will display a detailed report for any exception raised during template rendering. This report contains the relevant snippet of the template with the appropriate line highlighted.It defaults to the value of the DEBUG setting.'loaders': a list of dotted Python paths to template loader classes. Each Loader class knows how to import templates from a particular source. Optionally, a tuple can be used instead of a string. The first item in the tuple should be the Loader class name, and subsequent items are passed to the Loader during initialization.The default depends on the values of DIRS and APP_DIRS.See Loader types for details.'string_if_invalid': the output, as a string, that the template system should use for invalid (e.g. misspelled) variables.It defaults to an empty string.See How invalid variables are handled for details.'file_charset': the charset used to read template files on disk.It defaults to 'utf-8'.'libraries': A dictionary of labels and dotted Python paths of template tag modules to register with the template engine. This can be used to add new libraries or provide alternate labels for existing ones. For example:Libraries can be loaded by passing the corresponding dictionary key to the {% load %} tag.'builtins': A list of dotted Python paths of template tag modules to add to built-ins. For example:Tags and filters from built-in libraries can be used without first calling the {% load %} tag.Requires Jinja2 to be installed:Set BACKEND to 'django.template.backends.jinja2.Jinja2' to configure a Jinja2 engine.When APP_DIRS is True, Jinja2 engines look for templates in the jinja2 subdirectory of installed applications.The most important entry in OPTIONS is 'environment'. It s a dotted Python path to a callable returning a Jinja2 environment. It defaults to 'jinja2.Environment'. Django invokes that callable and passes other options as keyword arguments. Furthermore, Django adds defaults that differ from Jinja2 s for a few options:Jinja2 engines also accept the following OPTIONS:'context_processors': a list of dotted Python paths to callables that are used to populate the context when a template is rendered with a request. These callables take a request object as their argument and return a dict of items to be merged into the context.It defaults to an empty list.Using context processors with Jinja2 templates is discouraged.Context processors are useful with Django templates because Django templates don t support calling functions with arguments. Since Jinja2 doesn t have that limitation, it s recommended to put the function that you would use as a context processor in the global variables available to the template using jinja2.Environment as described below. You can then call that function in the template:Some Django templates context processors return a fixed value. For Jinja2 templates, this layer of indirection isn t necessary since you can add constants directly in jinja2.Environment.The original use case for adding context processors for Jinja2 involved:Unless all of these conditions are met, passing a function to the template is simpler and more in line with the design of Jinja2.The default configuration is purposefully kept to a minimum. If a template is rendered with a request (e.g. when using render()), the Jinja2 backend adds the globals request, csrf_input, and csrf_token to the context. Apart from that, this backend doesn t create a Django-flavored environment. It doesn t know about Django filters and tags. In order to use Django-specific APIs, you must configure them into the environment.For example, you can create myproject/jinja2.py with this content:and set the 'environment' option to 'myproject.jinja2.environment'.Then you could use the following constructs in Jinja2 templates:The concepts of tags and filters exist both in the Django template language and in Jinja2 but they re used differently. Since Jinja2 supports passing arguments to callables in templates, many features that require a template tag or filter in Django templates can be achieved simply by calling a function in Jinja2 templates, as shown in the example above. Jinja2 s global namespace removes the need for template context processors. The Django template language doesn t have an equivalent of Jinja2 tests.Here s how to implement a custom template backend in order to use another template system. A template backend is a class that inherits django.template.backends.base.BaseEngine. It must implement get_template() and optionally from_string(). Here s an example for a fictional foobar template library:See DEP 182 for more information.The Django debug page has hooks to provide detailed information when a template error arises. Custom template engines can use these hooks to enhance the traceback information that appears to users. The following hooks are available:The postmortem appears when TemplateDoesNotExist is raised. It lists the template engines and loaders that were used when trying to find a given template. For example, if two Django engines are configured, the postmortem will appear like:Custom engines can populate the postmortem by passing the backend and tried arguments when raising TemplateDoesNotExist. Backends that use the postmortem should specify an origin on the template object.If an error happens during template parsing or rendering, Django can display the line the error happened on. For example:Custom engines can populate this information by setting a template_debug attribute on exceptions raised during parsing and rendering. This attribute is a dict with the following values:Given the above template error, template_debug would look like:Django templates have an Origin object available through the template.origin attribute. This enables debug information to be displayed in the template postmortem, as well as in 3rd-party libraries, like the Django Debug Toolbar.Custom engines can provide their own template.origin information by creating an object that specifies the following attributes:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/templates/#the-django-template-language", "para": "About this sectionThis is an overview of the Django template language s syntax. For details see the language syntax reference.A Django template is simply a text document or a Python string marked-up using the Django template language. Some constructs are recognized and interpreted by the template engine. The main ones are variables and tags.A template is rendered with a context. Rendering replaces variables with their values, which are looked up in the context, and executes tags. Everything else is output as is.The syntax of the Django template language involves four constructs.A variable outputs a value from the context, which is a dict-like object mapping keys to values.Variables are surrounded by {{ and }} like this:With a context of {'first_name': 'John', 'last_name': 'Doe'}, this template renders to:Dictionary lookup, attribute lookup and list-index lookups are implemented with a dot notation:If a variable resolves to a callable, the template system will call it with no arguments and use its result instead of the callable.Tags provide arbitrary logic in the rendering process.This definition is deliberately vague. For example, a tag can output content, serve as a control structure e.g. an  if  statement or a  for  loop, grab content from a database, or even enable access to other template tags.Tags are surrounded by {% and %} like this:Most tags accept arguments:Some tags require beginning and ending tags:A reference of built-in tags is available as well as instructions for writing custom tags.Filters transform the values of variables and tag arguments.They look like this:With a context of {'django': 'the web framework for perfectionists with deadlines'}, this template renders to:Some filters take an argument:A reference of built-in filters is available as well as instructions for writing custom filters.Comments look like this:A {% comment %} tag provides multi-line comments.About this sectionThis is an overview of the Django template language s APIs. For details see the API reference.django.template.Engine encapsulates an instance of the Django template system. The main reason for instantiating an Engine directly is to use the Django template language outside of a Django project.django.template.backends.django.DjangoTemplates is a thin wrapper adapting django.template.Engine to Django s template backend API.django.template.Template represents a compiled template. Templates are obtained with Engine.get_template() or Engine.from_string()Likewise django.template.backends.django.Template is a thin wrapper adapting django.template.Template to the common template API.django.template.Context holds some metadata in addition to the context data. It is passed to Template.render() for rendering a template.django.template.RequestContext is a subclass of Context that stores the current HttpRequest and runs template context processors.The common API doesn t have an equivalent concept. Context data is passed in a plain dict and the current HttpRequest is passed separately if needed.Template loaders are responsible for locating templates, loading them, and returning Template objects.Django provides several built-in template loaders and supports custom template loaders.Context processors are functions that receive the current HttpRequest as an argument and return a dict of data to be added to the rendering context.Their main use is to add common data shared by all templates to the context without repeating code in every view.Django provides many built-in context processors. Implementing a custom context processor is as simple as defining a function."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/language/#templates", "para": "A template is simply a text file. It can generate any text-based format (HTML, XML, CSV, etc.).A template contains variables, which get replaced with values when the template is evaluated, and tags, which control the logic of the template.Below is a minimal template that illustrates a few basics. Each element will be explained later in this document.PhilosophyWhy use a text-based template instead of an XML-based one (like Zope s TAL)? We wanted Django s template language to be usable for more than just XML/HTML templates. At World Online, we use it for emails, JavaScript and CSV. You can use the template language for any text-based format.Oh, and one more thing: making humans edit XML is sadistic!"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/language/#variables", "para": "Variables look like this: {{ variable }}. When the template engine encounters a variable, it evaluates that variable and replaces it with the result. Variable names consist of any combination of alphanumeric characters and the underscore (\"_\") but may not start with an underscore. The dot (\".\") also appears in variable sections, although that has a special meaning, as indicated below. Importantly, you cannot have spaces or punctuation characters in variable names.Use a dot (.) to access attributes of a variable.Behind the scenesTechnically, when the template system encounters a dot, it tries the following lookups, in this order:If the resulting value is callable, it is called with no arguments. The result of the call becomes the template value.This lookup order can cause some unexpected behavior with objects that override dictionary lookup. For example, consider the following code snippet that attempts to loop over a collections.defaultdict:Because dictionary lookup happens first, that behavior kicks in and provides a default value instead of using the intended .items() method. In this case, consider converting to a dictionary first.In the above example, {{ section.title }} will be replaced with the title attribute of the section object.If you use a variable that doesn t exist, the template system will insert the value of the string_if_invalid option, which is set to '' (the empty string) by default.Note that  bar  in a template expression like {{ foo.bar }} will be interpreted as a literal string and not using the value of the variable  bar , if one exists in the template context.Variable attributes that begin with an underscore may not be accessed as they re generally considered private."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/language/#filters", "para": "You can modify variables for display by using filters.Filters look like this: {{ name|lower }}. This displays the value of the {{ name }} variable after being filtered through the lower filter, which converts text to lowercase. Use a pipe (|) to apply a filter.Filters can be  chained.  The output of one filter is applied to the next. {{ text|escape|linebreaks }} is a common idiom for escaping text contents, then converting line breaks to <p> tags.Some filters take arguments. A filter argument looks like this: {{ bio|truncatewords:30 }}. This will display the first 30 words of the bio variable.Filter arguments that contain spaces must be quoted; for example, to join a list with commas and spaces you d use {{ list|join:\", \" }}.Django provides about sixty built-in template filters. You can read all about them in the built-in filter reference. To give you a taste of what s available, here are some of the more commonly used template filters:If a variable is false or empty, use given default. Otherwise, use the value of the variable. For example:If value isn t provided or is empty, the above will display  nothing .Returns the length of the value. This works for both strings and lists. For example:If value is ['a', 'b', 'c', 'd'], the output will be 4.Formats the value like a  human-readable  file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc.). For example:If value is 123456789, the output would be 117.7 MB.Again, these are just a few examples; see the built-in filter reference for the complete list.You can also create your own custom template filters; see Custom template tags and filters.See alsoDjango s admin interface can include a complete reference of all template tags and filters available for a given site. See The Django admin documentation generator."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/language/#tags", "para": "Tags look like this: {% tag %}. Tags are more complex than variables: Some create text in the output, some control flow by performing loops or logic, and some load external information into the template to be used by later variables.Some tags require beginning and ending tags (i.e. {% tag %} ... tag contents ... {% endtag %}).Django ships with about two dozen built-in template tags. You can read all about them in the built-in tag reference. To give you a taste of what s available, here are some of the more commonly used tags:Loop over each item in an array.  For example, to display a list of athletes provided in athlete_list:Evaluates a variable, and if that variable is  true  the contents of the block are displayed:In the above, if athlete_list is not empty, the number of athletes will be displayed by the {{ athlete_list|length }} variable. Otherwise, if athlete_in_locker_room_list is not empty, the message  Athletes should be out   will be displayed. If both lists are empty,  No athletes.  will be displayed.You can also use filters and various operators in the if tag:While the above example works, be aware that most template filters return strings, so mathematical comparisons using filters will generally not work as you expect. length is an exception.Again, the above is only a selection of the whole list; see the built-in tag reference for the complete list.You can also create your own custom template tags; see Custom template tags and filters.See alsoDjango s admin interface can include a complete reference of all template tags and filters available for a given site. See The Django admin documentation generator."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/language/#comments", "para": "To comment-out part of a line in a template, use the comment syntax: {# #}.For example, this template would render as 'hello':A comment can contain any template code, invalid or not. For example:This syntax can only be used for single-line comments (no newlines are permitted between the {# and #} delimiters). If you need to comment out a multiline portion of the template, see the comment tag."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/language/#template-inheritance", "para": "The most powerful   and thus the most complex   part of Django s template engine is template inheritance. Template inheritance allows you to build a base  skeleton  template that contains all the common elements of your site and defines blocks that child templates can override.It s easiest to understand template inheritance by starting with an example:This template, which we ll call base.html, defines a simple HTML skeleton document that you might use for a simple two-column page. It s the job of  child  templates to fill the empty blocks with content.In this example, the block tag defines three blocks that child templates can fill in. All the block tag does is to tell the template engine that a child template may override those portions of the template.A child template might look like this:The extends tag is the key here. It tells the template engine that this template  extends  another template. When the template system evaluates this template, first it locates the parent   in this case,  base.html .At that point, the template engine will notice the three block tags in base.html and replace those blocks with the contents of the child template. Depending on the value of blog_entries, the output might look like:Note that since the child template didn t define the sidebar block, the value from the parent template is used instead. Content within a {% block %} tag in a parent template is always used as a fallback.You can use as many levels of inheritance as needed. One common way of using inheritance is the following three-level approach:This approach maximizes code reuse and makes it easy to add items to shared content areas, such as section-wide navigation.Here are some tips for working with inheritance:If you use {% extends %} in a template, it must be the first template tag in that template. Template inheritance won t work, otherwise.More {% block %} tags in your base templates are better. Remember, child templates don t have to define all parent blocks, so you can fill in reasonable defaults in a number of blocks, then only define the ones you need later. It s better to have more hooks than fewer hooks.If you find yourself duplicating content in a number of templates, it probably means you should move that content to a {% block %} in a parent template.If you need to get the content of the block from the parent template, the {{ block.super }} variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using {{ block.super }} will not be automatically escaped (see the next section), since it was already escaped, if necessary, in the parent template.Variables created outside of a {% block %} using the template tag as syntax can t be used inside the block. For example, this template doesn t render anything:For extra readability, you can optionally give a name to your {% endblock %} tag. For example:In larger templates, this technique helps you see which {% block %} tags are being closed.Finally, note that you can t define multiple block tags with the same name in the same template. This limitation exists because a block tag works in  both  directions. That is, a block tag doesn t just provide a hole to fill   it also defines the content that fills the hole in the parent. If there were two similarly-named block tags in a template, that template s parent wouldn t know which one of the blocks  content to use."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/language/#automatic-html-escaping", "para": "When generating HTML from templates, there s always a risk that a variable will include characters that affect the resulting HTML. For example, consider this template fragment:At first, this seems like a harmless way to display a user s name, but consider what would happen if the user entered their name as this:With this name value, the template would be rendered as: which means the browser would pop-up a JavaScript alert box!Similarly, what if the name contained a '<' symbol, like this?That would result in a rendered template like this: which, in turn, would result in the remainder of the Web page being bolded!Clearly, user-submitted data shouldn t be trusted blindly and inserted directly into your Web pages, because a malicious user could use this kind of hole to do potentially bad things. This type of security exploit is called a Cross Site Scripting (XSS) attack.To avoid this problem, you have two options:By default in Django, every template automatically escapes the output of every variable tag. Specifically, these five characters are escaped:Again, we stress that this behavior is on by default. If you re using Django s template system, you re protected.If you don t want data to be auto-escaped, on a per-site, per-template level or per-variable level, you can turn it off in several ways.Why would you want to turn it off? Because sometimes, template variables contain data that you intend to be rendered as raw HTML, in which case you don t want their contents to be escaped. For example, you might store a blob of HTML in your database and want to embed that directly into your template. Or, you might be using Django s template system to produce text that is not HTML   like an email message, for instance.To disable auto-escaping for an individual variable, use the safe filter:Think of safe as shorthand for safe from further escaping or can be safely interpreted as HTML. In this example, if data contains '<b>', the output will be:To control auto-escaping for a template, wrap the template (or just a particular section of the template) in the autoescape tag, like so:The autoescape tag takes either on or off as its argument. At times, you might want to force auto-escaping when it would otherwise be disabled. Here is an example template:The auto-escaping tag passes its effect onto templates that extend the current one as well as templates included via the include tag, just like all block tags. For example:Because auto-escaping is turned off in the base template, it will also be turned off in the child template, resulting in the following rendered HTML when the greeting variable contains the string <b>Hello!</b>:Generally, template authors don t need to worry about auto-escaping very much. Developers on the Python side (people writing views and custom filters) need to think about the cases in which data shouldn t be escaped, and mark data appropriately, so things Just Work in the template.If you re creating a template that might be used in situations where you re not sure whether auto-escaping is enabled, then add an escape filter to any variable that needs escaping. When auto-escaping is on, there s no danger of the escape filter double-escaping data   the escape filter does not affect auto-escaped variables.As we mentioned earlier, filter arguments can be strings:All string literals are inserted without any automatic escaping into the template   they act as if they were all passed through the safe filter. The reasoning behind this is that the template author is in control of what goes into the string literal, so they can make sure the text is correctly escaped when the template is written.This means you would write rather than:This doesn t affect what happens to data coming from the variable itself. The variable s contents are still automatically escaped, if necessary, because they re beyond the control of the template author."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/language/#accessing-method-calls", "para": "Most method calls attached to objects are also available from within templates. This means that templates have access to much more than just class attributes (like field names) and variables passed in from views. For example, the Django ORM provides the  entry_set  syntax for finding a collection of objects related on a foreign key. Therefore, given a model called  comment  with a foreign key relationship to a model called  task  you can loop through all comments attached to a given task like this:Similarly, QuerySets provide a count() method to count the number of objects they contain. Therefore, you can obtain a count of all comments related to the current task with:And of course you can easily access methods you ve explicitly defined on your own models:Because Django intentionally limits the amount of logic processing available in the template language, it is not possible to pass arguments to method calls accessed from within templates. Data should be calculated in views, then passed to templates for display."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/language/#custom-tag-and-filter-libraries", "para": "Certain applications provide custom tag and filter libraries. To access them in a template, ensure the application is in INSTALLED_APPS (we d add 'django.contrib.humanize' for this example), and then use the load tag in a template:In the above, the load tag loads the humanize tag library, which then makes the intcomma filter available for use. If you ve enabled django.contrib.admindocs, you can consult the documentation area in your admin to find the list of custom libraries in your installation.The load tag can take multiple library names, separated by spaces. Example:See Custom template tags and filters for information on writing your own custom template libraries.When you load a custom tag or filter library, the tags/filters are only made available to the current template   not any parent or child templates along the template-inheritance path.For example, if a template foo.html has {% load humanize %}, a child template (e.g., one that has {% extends \"foo.html\" %}) will not have access to the humanize template tags and filters. The child template is responsible for its own {% load humanize %}.This is a feature for the sake of maintainability and sanity.See also"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#built-in-tag-reference", "para": "Controls the current auto-escaping behavior. This tag takes either on or off as an argument and that determines whether auto-escaping is in effect inside the block. The block is closed with an endautoescape ending tag.When auto-escaping is in effect, all variable content has HTML escaping applied to it before placing the result into the output (but after any filters have been applied). This is equivalent to manually applying the escape filter to each variable.The only exceptions are variables that are already marked as  safe  from escaping, either by the code that populated the variable, or because it has had the safe or escape filters applied.Sample usage:Defines a block that can be overridden by child templates. See Template inheritance for more information.Ignores everything between {% comment %} and {% endcomment %}. An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled.Sample usage:comment tags cannot be nested.This tag is used for CSRF protection, as described in the documentation for Cross Site Request Forgeries.Produces one of its arguments each time this tag is encountered. The first argument is produced on the first encounter, the second argument on the second encounter, and so forth. Once all arguments are exhausted, the tag cycles to the first argument and produces it again.This tag is particularly useful in a loop:The first iteration produces HTML that refers to class row1, the second to row2, the third to row1 again, and so on for each iteration of the loop.You can use variables, too. For example, if you have two template variables, rowvalue1 and rowvalue2, you can alternate between their values like this:Variables included in the cycle will be escaped.  You can disable auto-escaping with:You can mix variables and strings:In some cases you might want to refer to the current value of a cycle without advancing to the next value. To do this, just give the {% cycle %} tag a name, using  as , like this:From then on, you can insert the current value of the cycle wherever you d like in your template by referencing the cycle name as a context variable. If you want to move the cycle to the next value independently of the original cycle tag, you can use another cycle tag and specify the name of the variable. So, the following template:would output:You can use any number of values in a cycle tag, separated by spaces. Values enclosed in single quotes (') or double quotes (\") are treated as string literals, while values without quotes are treated as template variables.By default, when you use the as keyword with the cycle tag, the usage of {% cycle %} that initiates the cycle will itself produce the first value in the cycle. This could be a problem if you want to use the value in a nested loop or an included template. If you only want to declare the cycle but not produce the first value, you can add a silent keyword as the last keyword in the tag. For example:This will output a list of <tr> elements with class alternating between row1 and row2. The subtemplate will have access to rowcolors in its context and the value will match the class of the <tr> that encloses it. If the silent keyword were to be omitted, row1 and row2 would be emitted as normal text, outside the <tr> element.When the silent keyword is used on a cycle definition, the silence automatically applies to all subsequent uses of that specific cycle tag. The following template would output nothing, even though the second call to {% cycle %} doesn t specify silent:You can use the resetcycle tag to make a {% cycle %} tag restart from its first value when it s next encountered.Outputs a whole load of debugging information, including the current context and imported modules.Signals that this template extends a parent template.This tag can be used in two ways:See Template inheritance for more information.Normally the template name is relative to the template loader s root directory. A string argument may also be a relative path starting with ./ or ../. For example, assume the following directory structure:In template.html, the following paths would be valid:Filters the contents of the block through one or more filters. Multiple filters can be specified with pipes and filters can have arguments, just as in variable syntax.Note that the block includes all the text between the filter and endfilter tags.Sample usage:NoteThe escape and safe filters are not acceptable arguments. Instead, use the autoescape tag to manage autoescaping for blocks of template code.Outputs the first argument variable that is not False. Outputs nothing if all the passed variables are False.Sample usage:This is equivalent to:You can also use a literal string as a fallback value in case all passed variables are False:This tag auto-escapes variable values. You can disable auto-escaping with:Or if only some variables should be escaped, you can use:You can use the syntax {% firstof var1 var2 var3 as value %} to store the output inside a variable.Loops over each item in an array, making the item available in a context variable. For example, to display a list of athletes provided in athlete_list:You can loop over a list in reverse by using {% for obj in list reversed %}.If you need to loop over a list of lists, you can unpack the values in each sublist into individual variables. For example, if your context contains a list of (x,y) coordinates called points, you could use the following to output the list of points:This can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary data, the following would display the keys and values of the dictionary:Keep in mind that for the dot operator, dictionary key lookup takes precedence over method lookup. Therefore if the data dictionary contains a key named 'items', data.items will return data['items'] instead of data.items(). Avoid adding keys that are named like dictionary methods if you want to use those methods in a template (items, values, keys, etc.). Read more about the lookup order of the dot operator in the documentation of template variables.The for loop sets a number of variables available within the loop:The for tag can take an optional {% empty %} clause whose text is displayed if the given array is empty or could not be found:The above is equivalent to   but shorter, cleaner, and possibly faster than   the following:The {% if %} tag evaluates a variable, and if that variable is  true  (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output:In the above, if athlete_list is not empty, the number of athletes will be displayed by the {{ athlete_list|length }} variable.As you can see, the if tag may take one or several {% elif %} clauses, as well as an {% else %} clause that will be displayed if all previous conditions fail. These clauses are optional.if tags may use and, or or not to test a number of variables or to negate a given variable:Use of both and and or clauses within the same tag is allowed, with and having higher precedence than or e.g.:will be interpreted like:Use of actual parentheses in the if tag is invalid syntax. If you need them to indicate precedence, you should use nested if tags.if tags may also use the operators ==, !=, <, >, <=, >=, in, not in, is, and is not which work as follows:Equality. Example:Inequality. Example:Less than. Example:Greater than. Example:Less than or equal to. Example:Greater than or equal to. Example:Contained within. This operator is supported by many Python containers to test whether the given value is in the container. The following are some examples of how x in y will be interpreted:Not contained within. This is the negation of the in operator.Object identity. Tests if two values are the same object. Example:Negated object identity. Tests if two values are not the same object. This is the negation of the is operator. Example:You can also use filters in the if expression. For example:All of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules. The precedence of the operators, from lowest to highest, is as follows:(This follows Python exactly). So, for example, the following complex if tag: will be interpreted as:If you need different precedence, you will need to use nested if tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules.The comparison operators cannot be  chained  like in Python or in mathematical notation. For example, instead of using:you should use:{% ifequal a b %} ... {% endifequal %} is an obsolete way to write {% if a == b %} ... {% endif %}. Likewise, {% ifnotequal a b %} ... {% endifnotequal %} is superseded by {% if a != b %} ... {% endif %}. The ifequal and ifnotequal tags will be deprecated in a future release.Check if a value has changed from the last iteration of a loop.The {% ifchanged %} block tag is used within a loop. It has two possible uses.Checks its own rendered contents against its previous state and only displays the content if it has changed. For example, this displays a list of days, only displaying the month if it changes:If given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed:The ifchanged tag can also take an optional {% else %} clause that will be displayed if the value has not changed:Loads a template and renders it with the current context. This is a way of  including  other templates within a template.The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes.This example includes the contents of the template \"foo/bar.html\":Normally the template name is relative to the template loader s root directory. A string argument may also be a relative path starting with ./ or ../ as described in the extends tag.This example includes the contents of the template whose name is contained in the variable template_name:The variable may also be any object with a render() method that accepts a context. This allows you to reference a compiled Template in your context.An included template is rendered within the context of the template that includes it. This example produces the output \"Hello, John!\":Context: variable person is set to \"John\" and variable greeting is set to \"Hello\".Template:The name_snippet.html template:You can pass additional context to the template using keyword arguments:If you want to render the context only with the variables provided (or even no variables at all), use the only option. No other variables are available to the included template:NoteThe include tag should be considered as an implementation of  render this subtemplate and include the HTML , not as  parse this subtemplate and include its contents as if it were part of the parent . This means that there is no shared state between included templates   each include is a completely independent rendering process.Blocks are evaluated before they are included. This means that a template that includes blocks from another will contain blocks that have already been evaluated and rendered - not blocks that can be overridden by, for example, an extending template.Loads a custom template tag set.For example, the following template would load all the tags and filters registered in somelibrary and otherlibrary located in package package:You can also selectively load individual filters or tags from a library, using the from argument. In this example, the template tags/filters named foo and bar will be loaded from somelibrary:See Custom tag and filter libraries for more information.Displays random  lorem ipsum  Latin text. This is useful for providing sample data in templates.Usage:The {% lorem %} tag can be used with zero, one, two or three arguments. The arguments are:Examples:Displays the current date and/or time, using a format according to the given string. Such string can contain format specifiers characters as described in the date filter section.Example:Note that you can backslash-escape a format string if you want to use the  raw  value. In this example, both  o  and  f  are backslash-escaped, because otherwise each is a format string that displays the year and the time, respectively:This would display as  It is the 4th of September .NoteThe format passed can also be one of the predefined ones DATE_FORMAT, DATETIME_FORMAT, SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT. The predefined formats may vary depending on the current locale and if Format localization is enabled, e.g.:You can also use the syntax {% now \"Y\" as current_year %} to store the output (as a string) inside a variable. This is useful if you want to use {% now %} inside a template tag like blocktrans for example:Regroups a list of alike objects by a common attribute.This complex tag is best illustrated by way of an example: say that cities is a list of cities represented by dictionaries containing \"name\", \"population\", and \"country\" keys: and you d like to display a hierarchical list that is ordered by country, like this:You can use the {% regroup %} tag to group the list of cities by country. The following snippet of template code would accomplish this:Let s walk through this example. {% regroup %} takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we re regrouping the cities list by the country attribute and calling the result country_list.{% regroup %} produces a list (in this case, country_list) of group objects. Group objects are instances of namedtuple() with two fields:Because {% regroup %} produces namedtuple() objects, you can also write the previous example as:Note that {% regroup %} does not order its input! Our example relies on the fact that the cities list was ordered by country in the first place. If the cities list did not order its members by country, the regrouping would naively display more than one group for a single country. For example, say the cities list was set to this (note that the countries are not grouped together):With this input for cities, the example {% regroup %} template code above would result in the following output:The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it.Another solution is to sort the data in the template using the dictsort filter, if your data is in a list of dictionaries:Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the  country  field is a foreign key to a class with an attribute  description,  you could use:Or, if country is a field with choices, it will have a get_FOO_display() method available as an attribute, allowing  you to group on the display string rather than the choices key:{{ country.grouper }} will now display the value fields from the choices set rather than the keys.Resets a previous cycle so that it restarts from its first item at its next encounter. Without arguments, {% resetcycle %} will reset the last {% cycle %} defined in the template.Example usage:This example would return this HTML:Notice how the first block ends with class=\"odd\" and the new one starts with class=\"odd\". Without the {% resetcycle %} tag, the second block would start with class=\"even\".You can also reset named cycle tags:In this example, we have both the alternating odd/even rows and a  major  row every fifth row. Only the five-row cycle is reset when a category changes.Removes whitespace between HTML tags. This includes tab characters and newlines.Example usage:This example would return this HTML:Only space between tags is removed   not space between tags and text. In this example, the space around Hello won t be stripped:Outputs one of the syntax characters used to compose template tags.Since the template system has no concept of  escaping , to display one of the bits used in template tags, you must use the {% templatetag %} tag.The argument tells which template bit to output:Sample usage:Returns an absolute path reference (a URL without the domain name) matching a given view and optional parameters. Any special characters in the resulting path will be encoded using iri_to_uri().This is a way to output links without violating the DRY principle by having to hard-code URLs in your templates:The first argument is a URL pattern name. It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax:Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present.For example, suppose you have a view, app_views.client, whose URLconf takes a client ID (here, client() is a method inside the views file app_views.py). The URLconf line might look like this:If this app s URLconf is included into the project s URLconf under a path such as this: then, in a template, you can create a link to this view like this:The template tag will output the string /clients/client/123/.Note that if the URL you re reversing doesn t exist, you ll get an NoReverseMatch exception raised, which will cause your site to display an error page.If you d like to retrieve a URL without displaying it, you can use a slightly different call:The scope of the variable created by the  as var syntax is the {% block %} in which the {% url %} tag appears.This {% url ... as var %} syntax will not cause an error if the view is missing. In practice you ll use this to link to views that are optional:If you d like to retrieve a namespaced URL, specify the fully qualified name:This will follow the normal namespaced URL resolution strategy, including using any hints provided by the context as to the current application.WarningDon t forget to put quotes around the URL pattern name, otherwise the value will be interpreted as a context variable!Stops the template engine from rendering the contents of this block tag.A common use is to allow a JavaScript template layer that collides with Django s syntax. For example:You can also designate a specific closing tag, allowing the use of {% endverbatim %} as part of the unrendered contents:For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant.For example:If this_value is 175, max_value is 200, and max_width is 100, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88).In some cases you might want to capture the result of widthratio in a variable. It can be useful, for instance, in a blocktrans like this:Caches a complex variable under a simpler name. This is useful when accessing an  expensive  method (e.g., one that hits the database) multiple times.For example:The populated variable (in the example above, total) is only available between the {% with %} and {% endwith %} tags.You can assign more than one context variable:NoteThe previous more verbose format is still supported: {% with business.employees.count as total %}"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#built-in-filter-reference", "para": "Adds the argument to the value.For example:If value is 4, then the output will be 6.This filter will first try to coerce both values to integers. If this fails, it ll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string.For example, if we have:and first is [1, 2, 3] and second is [4, 5, 6], then the output will be [1, 2, 3, 4, 5, 6].WarningStrings that can be coerced to integers will be summed, not concatenated, as in the first example above.Adds slashes before quotes. Useful for escaping strings in CSV, for example.For example:If value is \"I'm using Django\", the output will be \"I\\'m using Django\".Capitalizes the first character of the value. If the first character is not a letter, this filter has no effect.For example:If value is \"django\", the output will be \"Django\".Centers the value in a field of a given width.For example:If value is \"Django\", the output will be \"     Django    \".Removes all values of arg from the given string.For example:If value is \"String with spaces\", the output will be \"Stringwithspaces\".Formats a date according to the given format.Uses a similar format as PHP s date() function (https://php.net/date) with some differences.NoteThese format characters are not used in Django outside of templates. They were designed to be compatible with PHP to ease transitioning for designers.Available format strings:For example:If value is a datetime object (e.g., the result of datetime.datetime.now()), the output will be the string 'Wed 09 Jan 2008'.The format passed can be one of the predefined ones DATE_FORMAT, DATETIME_FORMAT, SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale.Assuming that USE_L10N is True and LANGUAGE_CODE is, for example, \"es\", then for:the output would be the string \"09/01/2008\" (the \"SHORT_DATE_FORMAT\" format specifier for the es locale as shipped with Django is \"d/m/Y\").When used without a format string, the DATE_FORMAT format specifier is used. Assuming the same settings as the previous example:outputs 9 de Enero de 2008 (the DATE_FORMAT format specifier for the es locale is r'j \\d\\e F \\d\\e Y'.You can combine date with the time filter to render a full representation of a datetime value. E.g.:If value evaluates to False, uses the given default. Otherwise, uses the value.For example:If value is \"\" (the empty string), the output will be nothing.If (and only if) value is None, uses the given default. Otherwise, uses the value.Note that if an empty string is given, the default value will not be used. Use the default filter if you want to fallback for empty strings.For example:If value is None, the output will be nothing.Takes a list of dictionaries and returns that list sorted by the key given in the argument.For example:If value is:then the output would be:You can also do more complicated things like:If books is:then the output would be:dictsort can also order a list of lists (or any other object implementing __getitem__()) by elements at specified index. For example:If value is:then the output would be:You must pass the index as an integer rather than a string. The following produce empty output:Takes a list of dictionaries and returns that list sorted in reverse order by the key given in the argument. This works exactly the same as the above filter, but the returned value will be in reverse order.Returns True if the value is divisible by the argument.For example:If value is 21, the output would be True.Escapes a string s HTML. Specifically, it makes these replacements:Applying escape to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the force_escape filter.For example, you can apply escape to fields when autoescape is off:Escapes characters for use in JavaScript strings. This does not make the string safe for use in HTML or JavaScript template literals, but does protect you from syntax errors when using templates to generate JavaScript/JSON.For example:If value is \"testing\\r\\njavascript \\'string\" <b>escaping</b>\", the output will be \"testing\\\\u000D\\\\u000Ajavascript \\\\u0027string\\\\u0022 \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\".Formats the value like a  human-readable  file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc.).For example:If value is 123456789, the output would be 117.7 MB.File sizes and SI unitsStrictly speaking, filesizeformat does not conform to the International System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes are calculated in powers of 1024 (which is the case here). Instead, Django uses traditional unit names (KB, MB, GB, etc.) corresponding to names that are more commonly used.Returns the first item in a list.For example:If value is the list ['a', 'b', 'c'], the output will be 'a'.When used without an argument, rounds a floating-point number to one decimal place   but only if there s a decimal part to be displayed. For example:If used with a numeric integer argument, floatformat rounds a number to that many decimal places. For example:Particularly useful is passing 0 (zero) as the argument which will round the float to the nearest integer.If the argument passed to floatformat is negative, it will round a number to that many decimal places   but only if there s a decimal part to be displayed. For example:Using floatformat with no argument is equivalent to using floatformat with an argument of -1.Applies HTML escaping to a string (see the escape filter for details). This filter is applied immediately and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the escape filter.For example, if you want to catch the <p> HTML elements created by the linebreaks filter:Given a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer.For example:If value is 123456789, the output will be 8.Converts an IRI (Internationalized Resource Identifier) to a string that is suitable for including in a URL. This is necessary if you re trying to use strings containing non-ASCII characters in a URL.It s safe to use this filter on a string that has already gone through the urlencode filter.For example:If value is \"?test=1&me=2\", the output will be \"?test=1&amp;me=2\".Joins a list with a string, like Python s str.join(list)For example:If value is the list ['a', 'b', 'c'], the output will be the string \"a // b // c\".Safely outputs a Python object as JSON, wrapped in a <script> tag, ready for use with JavaScript.Argument: HTML  id  of the <script> tag.For example:If value is the dictionary {'hello': 'world'}, the output will be:The resulting data can be accessed in JavaScript like this:XSS attacks are mitigated by escaping the characters  < ,  >  and  & . For example if value is {'hello': 'world</script>&amp;'}, the output is:This is compatible with a strict Content Security Policy that prohibits in-page script execution. It also maintains a clean separation between passive data and executable code.Returns the last item in a list.For example:If value is the list ['a', 'b', 'c', 'd'], the output will be the string \"d\".Returns the length of the value. This works for both strings and lists.For example:If value is ['a', 'b', 'c', 'd'] or \"abcd\", the output will be 4.The filter returns 0 for an undefined variable.Returns True if the value s length is the argument, or False otherwise.For example:If value is ['a', 'b', 'c', 'd'] or \"abcd\", the output will be True.Replaces line breaks in plain text with appropriate HTML; a single newline becomes an HTML line break (<br>) and a new line followed by a blank line becomes a paragraph break (</p>).For example:If value is Joel\\nis a slug, the output will be <p>Joel<br>is a slug</p>.Converts all newlines in a piece of plain text to HTML line breaks (<br>).For example:If value is Joel\\nis a slug, the output will be Joel<br>is a slug.Displays text with line numbers.For example:If value is:the output will be:Left-aligns the value in a field of a given width.Argument: field sizeFor example:If value is Django, the output will be \"Django    \".Converts a string into all lowercase.For example:If value is Totally LOVING this Album!, the output will be totally loving this album!.Returns the value turned into a list. For a string, it s a list of characters. For an integer, the argument is cast to a string before creating a list.For example:If value is the string \"Joel\", the output would be the list ['J', 'o', 'e', 'l']. If value is 123, the output will be the list ['1', '2', '3'].Converts a phone number (possibly containing letters) to its numerical equivalent.The input doesn t have to be a valid phone number. This will happily convert any string.For example:If value is 800-COLLECT, the output will be 800-2655328.Returns a plural suffix if the value is not 1. By default, this suffix is 's'.Example:If num_messages is 1, the output will be You have 1 message. If num_messages is 2  the output will be You have 2 messages.For words that require a suffix other than 's', you can provide an alternate suffix as a parameter to the filter.Example:For words that don t pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma.Example:NoteUse blocktrans to pluralize translated strings.A wrapper around pprint.pprint()   for debugging, really.Returns a random item from the given list.For example:If value is the list ['a', 'b', 'c', 'd'], the output could be \"b\".Right-aligns the value in a field of a given width.Argument: field sizeFor example:If value is Django, the output will be \"    Django\".Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect.NoteIf you are chaining filters, a filter applied after safe can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:Applies the safe filter to each element of a sequence. Useful in conjunction with other filters that operate on sequences, such as join. For example:You couldn t use the safe filter directly in this case, as it would first convert the variable into a string, rather than working with the individual elements of the sequence.Returns a slice of the list.Uses the same syntax as Python s list slicing. See https://www.diveinto.org/python3/native-datatypes.html#slicinglists for an introduction.Example:If some_list is ['a', 'b', 'c'], the output will be ['a', 'b'].Converts to ASCII. Converts spaces to hyphens. Removes characters that aren t alphanumerics, underscores, or hyphens. Converts to lowercase. Also strips leading and trailing whitespace.For example:If value is \"Joel is a slug\", the output will be \"joel-is-a-slug\".Formats the variable according to the argument, a string formatting specifier. This specifier uses the printf-style String Formatting syntax, with the exception that the leading  %  is dropped.For example:If value is 10, the output will be 1.000000E+01.Makes all possible efforts to strip all [X]HTML tags.For example:If value is \"<b>Joel</b> <button>is</button> a <span>slug</span>\", the output will be \"Joel is a slug\".No safety guaranteeNote that striptags doesn t give any guarantee about its output being HTML safe, particularly with non valid HTML input. So NEVER apply the safe filter to a striptags output. If you are looking for something more robust, you can use the bleach Python library, notably its clean method.Formats a time according to the given format.Given format can be the predefined one TIME_FORMAT, or a custom format, same as the date filter. Note that the predefined format is locale-dependent.For example:If value is equivalent to datetime.datetime.now(), the output will be the string \"01:23\".Another example:Assuming that USE_L10N is True and LANGUAGE_CODE is, for example, \"de\", then for:the output will be the string \"01:23\" (The \"TIME_FORMAT\" format specifier for the de locale as shipped with Django is \"H:i\").The time filter will only accept parameters in the format string that relate to the time of day, not the date (for obvious reasons). If you need to format a date value, use the date filter instead (or along time if you need to render a full datetime value).There is one exception the above rule: When passed a datetime value with attached timezone information (a time-zone-aware datetime instance) the time filter will accept the timezone-related format specifiers 'e', 'O' , 'T' and 'Z'.When used without a format string, the TIME_FORMAT format specifier is used:is the same as:Formats a date as the time since that date (e.g.,  4 days, 6 hours ).Takes an optional argument that is a variable containing the date to use as the comparison point (without the argument, the comparison point is now). For example, if blog_date is a date instance representing midnight on 1 June 2006, and comment_date is a date instance for 08:00 on 1 June 2006, then the following would return  8 hours :Comparing offset-naive and offset-aware datetimes will return an empty string.Minutes is the smallest unit used, and  0 minutes  will be returned for any date that is in the future relative to the comparison point.Similar to timesince, except that it measures the time from now until the given date or datetime. For example, if today is 1 June 2006 and conference_date is a date instance holding 29 June 2006, then {{ conference_date|timeuntil }} will return  4 weeks .Takes an optional argument that is a variable containing the date to use as the comparison point (instead of now). If from_date contains 22 June 2006, then the following will return  1 week :Comparing offset-naive and offset-aware datetimes will return an empty string.Minutes is the smallest unit used, and  0 minutes  will be returned for any date that is in the past relative to the comparison point.Converts a string into titlecase by making words start with an uppercase character and the remaining characters lowercase. This tag makes no effort to keep  trivial words  in lowercase.For example:If value is \"my FIRST post\", the output will be \"My First Post\".Truncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis character (   ).Argument: Number of characters to truncate toFor example:If value is \"Joel is a slug\", the output will be \"Joel i \".Similar to truncatechars, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point are closed immediately after the truncation.For example:If value is \"<p>Joel is a slug</p>\", the output will be \"<p>Joel i </p>\".Newlines in the HTML content will be preserved.Truncates a string after a certain number of words.Argument: Number of words to truncate afterFor example:If value is \"Joel is a slug\", the output will be \"Joel is  \".Newlines within the string will be removed.Similar to truncatewords, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point, are closed immediately after the truncation.This is less efficient than truncatewords, so should only be used when it is being passed HTML text.For example:If value is \"<p>Joel is a slug</p>\", the output will be \"<p>Joel is  </p>\".Newlines in the HTML content will be preserved.Recursively takes a self-nested list and returns an HTML unordered list   WITHOUT opening and closing <ul> tags.The list is assumed to be in the proper format. For example, if var contains ['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']], then {{ var|unordered_list }} would return:Converts a string into all uppercase.For example:If value is \"Joel is a slug\", the output will be \"JOEL IS A SLUG\".Escapes a value for use in a URL.For example:If value is \"https://www.example.org/foo?a=b&c=d\", the output will be \"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\".An optional argument containing the characters which should not be escaped can be provided.If not provided, the  /  character is assumed safe. An empty string can be provided when all characters should be escaped. For example:If value is \"https://www.example.org/\", the output will be \"https%3A%2F%2Fwww.example.org%2F\".Converts URLs and email addresses in text into clickable links.This template tag works on links prefixed with http://, https://, or www.. For example, https://goo.gl/aia1t will get converted but goo.gl/aia1t won t.It also supports domain-only links ending in one of the original top level domains (.com, .edu, .gov, .int, .mil, .net, and .org). For example, djangoproject.com gets converted.Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and urlize will still do the right thing.Links generated by urlize have a rel=\"nofollow\" attribute added to them.For example:If value is \"Check out www.djangoproject.com\", the output will be \"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproject.com</a>\".In addition to web links, urlize also converts email addresses into mailto: links. If value is \"Send questions to foo@example.com\", the output will be \"Send questions to <a href=\"mailto:foo@example.com\">foo@example.com</a>\".The urlize filter also takes an optional parameter autoescape. If autoescape is True, the link text and URLs will be escaped using Django s built-in escape filter. The default value for autoescape is True.NoteIf urlize is applied to text that already contains HTML markup, things won t work as expected. Apply this filter only to plain text.Converts URLs and email addresses into clickable links just like urlize, but truncates URLs longer than the given character limit.Argument: Number of characters that link text should be truncated to, including the ellipsis that s added if truncation is necessary.For example:If value is \"Check out www.djangoproject.com\", the output would be 'Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproj </a>'.As with urlize, this filter should only be applied to plain text.Returns the number of words.For example:If value is \"Joel is a slug\", the output will be 4.Wraps words at specified line length.Argument: number of characters at which to wrap the textFor example:If value is Joel is a slug, the output would be:Maps values for True, False, and (optionally) None, to the strings  yes ,  no ,  maybe , or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#internationalization-tags-and-filters", "para": "Django provides template tags and filters to control each aspect of internationalization in templates. They allow for granular control of translations, formatting, and time zone conversions.This library allows specifying translatable text in templates. To enable it, set USE_I18N to True, then load it with {% load i18n %}.See Internationalization: in template code.This library provides control over the localization of values in templates. You only need to load the library using {% load l10n %}, but you ll often set USE_L10N to True so that localization is active by default.See Controlling localization in templates.This library provides control over time zone conversions in templates. Like l10n, you only need to load the library using {% load tz %}, but you ll usually also set USE_TZ to True so that conversion to local time happens by default.See Time zone aware output in templates."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#other-tags-and-filters-libraries", "para": "Django comes with a couple of other template-tag libraries that you have to enable explicitly in your INSTALLED_APPS setting and enable in your template with the {% load %} tag.A set of Django template filters useful for adding a  human touch  to data. See django.contrib.humanize.To link to static files that are saved in STATIC_ROOT Django ships with a static template tag. If the django.contrib.staticfiles app is installed, the tag will serve files using url() method of the storage specified by STATICFILES_STORAGE. For example:It is also able to consume standard context variables, e.g. assuming a user_stylesheet variable is passed to the template:If you d like to retrieve a static URL without displaying it, you can use a slightly different call:Using Jinja2 templates?See Jinja2 for information on using the static tag with Jinja2.You should prefer the static template tag, but if you need more control over exactly where and how STATIC_URL is injected into the template, you can use the get_static_prefix template tag:There s also a second form you can use to avoid extra processing if you need the value multiple times:Similar to the get_static_prefix, get_media_prefix populates a template variable with the media prefix MEDIA_URL, e.g.:By storing the value in a data attribute, we ensure it s escaped appropriately if we want to use it in a JavaScript context."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/humanize/#apnumber", "para": "For numbers 1-9, returns the number spelled out. Otherwise, returns the number. This follows Associated Press style.Examples:You can pass in either an integer or a string representation of an integer."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/humanize/#intcomma", "para": "Converts an integer or float (or a string representation of either) to a string containing commas every three digits.Examples:Format localization will be respected if enabled, e.g. with the 'de' language:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/humanize/#intword", "para": "Converts a large integer (or a string representation of an integer) to a friendly text representation. Works best for numbers over 1 million.Examples:Values up to 10^100 (Googol) are supported.Format localization will be respected if enabled, e.g. with the 'de' language:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/humanize/#naturalday", "para": "For dates that are the current day or within one day, return  today ,  tomorrow  or  yesterday , as appropriate. Otherwise, format the date using the passed in format string.Argument: Date formatting string as described in the date tag.Examples (when  today  is 17 Feb 2007):"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/humanize/#naturaltime", "para": "For datetime values, returns a string representing how many seconds, minutes or hours ago it was   falling back to the timesince format if the value is more than a day old. In case the datetime value is in the future the return value will automatically use an appropriate phrase.Examples (when  now  is 17 Feb 2007 16:30:00):"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/humanize/#ordinal", "para": "Converts an integer to its ordinal as a string.Examples:You can pass in either an integer or a string representation of an integer."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/api/#overview", "para": "Using the template system in Python is a three-step process:Django projects generally rely on the high level, backend agnostic APIs for each of these steps instead of the template system s lower level APIs:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/api/#configuring-an-engine", "para": "If you are simply using the DjangoTemplates backend, this probably isn t the documentation you re looking for. An instance of the Engine class described below is accessible using the engine attribute of that backend and any attribute defaults mentioned below are overridden by what s passed by DjangoTemplates.When instantiating an Engine all arguments must be passed as keyword arguments:dirs is a list of directories where the engine should look for template source files. It is used to configure filesystem.Loader.It defaults to an empty list.app_dirs only affects the default value of loaders. See below.It defaults to False.autoescape controls whether HTML autoescaping is enabled.It defaults to True.WarningOnly set it to False if you re rendering non-HTML templates!context_processors is a list of dotted Python paths to callables that are used to populate the context when a template is rendered with a request. These callables take a request object as their argument and return a dict of items to be merged into the context.It defaults to an empty list.See RequestContext for more information.debug is a boolean that turns on/off template debug mode. If it is True, the template engine will store additional debug information which can be used to display a detailed report for any exception raised during template rendering.It defaults to False.loaders is a list of template loader classes, specified as strings. Each Loader class knows how to import templates from a particular source. Optionally, a tuple can be used instead of a string. The first item in the tuple should be the Loader class name, subsequent items are passed to the Loader during initialization.It defaults to a list containing:If debug is False, these loaders are wrapped in django.template.loaders.cached.Loader.See Loader types for details.string_if_invalid is the output, as a string, that the template system should use for invalid (e.g. misspelled) variables.It defaults to the empty string.See How invalid variables are handled for details.file_charset is the charset used to read template files on disk.It defaults to 'utf-8'.'libraries': A dictionary of labels and dotted Python paths of template tag modules to register with the template engine. This is used to add new libraries or provide alternate labels for existing ones. For example:Libraries can be loaded by passing the corresponding dictionary key to the {% load %} tag.'builtins': A list of dotted Python paths of template tag modules to add to built-ins. For example:Tags and filters from built-in libraries can be used without first calling the {% load %} tag.Returns the underlying Engine from the first configured DjangoTemplates engine. Raises ImproperlyConfigured if no engines are configured.It s required for preserving APIs that rely on a globally available, implicitly configured engine. Any other use is strongly discouraged.Compiles the given template code and returns a Template object.Loads a template with the given name, compiles it and returns a Template object.Like get_template(), except it takes a list of names and returns the first template that was found."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/api/#loading-a-template", "para": "The recommended way to create a Template is by calling the factory methods of the Engine: get_template(), select_template() and from_string().In a Django project where the TEMPLATES setting defines a DjangoTemplates engine, it s possible to instantiate a Template directly. If more than one DjangoTemplates engine is defined, the first one will be used.This class lives at django.template.Template. The constructor takes one argument   the raw template code:Behind the scenesThe system only parses your raw template code once   when you create the Template object. From then on, it s stored internally as a tree structure for performance.Even the parsing itself is quite fast. Most of the parsing happens via a single call to a single, short, regular expression."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/api/#rendering-a-context", "para": "Once you have a compiled Template object, you can render a context with it. You can reuse the same template to render it several times with different contexts.The constructor of django.template.Context takes an optional argument   a dictionary mapping variable names to variable values.For details, see Playing with Context objects below.Call the Template object s render() method with a Context to  fill  the template:Variable names must consist of any letter (A-Z), any digit (0-9), an underscore (but they must not start with an underscore) or a dot.Dots have a special meaning in template rendering. A dot in a variable name signifies a lookup. Specifically, when the template system encounters a dot in a variable name, it tries the following lookups, in this order:Note that  bar  in a template expression like {{ foo.bar }} will be interpreted as a literal string and not using the value of the variable  bar , if one exists in the template context.The template system uses the first lookup type that works. It s short-circuit logic. Here are a few examples:If any part of the variable is callable, the template system will try calling it. Example:Callable variables are slightly more complex than variables which only require straight lookups. Here are some things to keep in mind:If the variable raises an exception when called, the exception will be propagated, unless the exception has an attribute silent_variable_failure whose value is True. If the exception does have a silent_variable_failure attribute whose value is True, the variable will render as the value of the engine s string_if_invalid configuration option (an empty string, by default). Example:Note that django.core.exceptions.ObjectDoesNotExist, which is the base class for all Django database API DoesNotExist exceptions, has silent_variable_failure = True. So if you re using Django templates with Django model objects, any DoesNotExist exception will fail silently.A variable can only be called if it has no required arguments. Otherwise, the system will return the value of the engine s string_if_invalid option.Obviously, there can be side effects when calling some variables, and it d be either foolish or a security hole to allow the template system to access them.A good example is the delete() method on each Django model object. The template system shouldn t be allowed to do something like this:To prevent this, set an alters_data attribute on the callable variable. The template system won t call a variable if it has alters_data=True set, and will instead replace the variable with string_if_invalid, unconditionally.  The dynamically-generated delete() and save() methods on Django model objects get alters_data=True automatically. Example:Occasionally you may want to turn off this feature for other reasons, and tell the template system to leave a variable uncalled no matter what.  To do so, set a do_not_call_in_templates attribute on the callable with the value True.  The template system then will act as if your variable is not callable (allowing you to access attributes of the callable, for example).Generally, if a variable doesn t exist, the template system inserts the value of the engine s string_if_invalid configuration option, which is set to '' (the empty string) by default.Filters that are applied to an invalid variable will only be applied if string_if_invalid is set to '' (the empty string). If string_if_invalid is set to any other value, variable filters will be ignored.This behavior is slightly different for the if, for and regroup template tags. If an invalid variable is provided to one of these template tags, the variable will be interpreted as None. Filters are always applied to invalid variables within these template tags.If string_if_invalid contains a '%s', the format marker will be replaced with the name of the invalid variable.For debug purposes only!While string_if_invalid can be a useful debugging tool, it is a bad idea to turn it on as a  development default .Many templates, including some of Django s, rely upon the silence of the template system when a nonexistent variable is encountered. If you assign a value other than '' to string_if_invalid, you will experience rendering problems with these templates and sites.Generally, string_if_invalid should only be enabled in order to debug a specific template problem, then cleared once debugging is complete.Every context contains True, False and None. As you would expect, these variables resolve to the corresponding Python objects.Django s template language has no way to escape the characters used for its own syntax. For example, the templatetag tag is required if you need to output character sequences like {% and %}.A similar issue exists if you want to include these sequences in template filter or tag arguments. For example, when parsing a block tag, Django s template parser looks for the first occurrence of %} after a {%. This prevents the use of \"%}\" as a string literal. For example, a TemplateSyntaxError will be raised for the following expressions:The same issue can be triggered by using a reserved sequence in filter arguments:If you need to use strings with these sequences, store them in template variables or use a custom template tag or filter to workaround the limitation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/api/#playing-with-context-objects", "para": "Most of the time, you ll instantiate Context objects by passing in a fully-populated dictionary to Context(). But you can add and delete items from a Context object once it s been instantiated, too, using standard dictionary syntax:Returns the value for key if key is in the context, else returns otherwise.If key is in the context, returns its value. Otherwise inserts key with a value of default and returns default.A Context object is a stack. That is, you can push() and pop() it. If you pop() too much, it ll raise django.template.ContextPopException:You can also use push() as a context manager to ensure a matching pop() is called.All arguments passed to push() will be passed to the dict constructor used to build the new context level.In addition to push() and pop(), the Context object also defines an update() method. This works like push() but takes a dictionary as an argument and pushes that dictionary onto the stack instead of an empty one.Like push(), you can use update() as a context manager to ensure a matching pop() is called.Using a Context as a stack comes in handy in some custom template tags.Using flatten() method you can get whole Context stack as one dictionary including builtin variables.A flatten() method is also internally used to make Context objects comparable.Result from flatten() can be useful in unit tests to compare Context against dict:Django comes with a special Context class, django.template.RequestContext, that acts slightly differently from the normal django.template.Context. The first difference is that it takes an HttpRequest as its first argument. For example:The second difference is that it automatically populates the context with a few variables, according to the engine s context_processors configuration option.The context_processors option is a list of callables   called context processors   that take a request object as their argument and return a dictionary of items to be merged into the context. In the default generated settings file, the default template engine contains the following context processors:In addition to these, RequestContext always enables 'django.template.context_processors.csrf'.  This is a security related context processor required by the admin and other contrib apps, and, in case of accidental misconfiguration, it is deliberately hardcoded in and cannot be turned off in the context_processors option.Each processor is applied in order. That means, if one processor adds a variable to the context and a second processor adds a variable with the same name, the second will override the first. The default processors are explained below.When context processors are appliedContext processors are applied on top of context data. This means that a context processor may overwrite variables you ve supplied to your Context or RequestContext, so take care to avoid variable names that overlap with those supplied by your context processors.If you want context data to take priority over context processors, use the following pattern:Django does this to allow context data to override context processors in APIs such as render() and TemplateResponse.Also, you can give RequestContext a list of additional processors, using the optional, third positional argument, processors. In this example, the RequestContext instance gets a ip_address variable:Here s what each of the built-in processors does:If this processor is enabled, every RequestContext will contain these variables:If this processor is enabled, every RequestContext will contain these two variables   but only if your DEBUG setting is set to True and the request s IP address (request.META['REMOTE_ADDR']) is in the INTERNAL_IPS setting:If this processor is enabled, every RequestContext will contain these variables:See i18n template tags for template tags that generate the same values.If this processor is enabled, every RequestContext will contain a variable MEDIA_URL, providing the value of the MEDIA_URL setting.If this processor is enabled, every RequestContext will contain a variable STATIC_URL, providing the value of the STATIC_URL setting.This processor adds a token that is needed by the csrf_token template tag for protection against Cross Site Request Forgeries.If this processor is enabled, every RequestContext will contain a variable request, which is the current HttpRequest.If this processor is enabled, every RequestContext will contain a variable TIME_ZONE, providing the name of the currently active time zone.If this processor is enabled, every RequestContext will contain these two variables:A context processor has a very simple interface: It s a Python function that takes one argument, an HttpRequest object, and returns a dictionary that gets added to the template context. Each context processor must return a dictionary.Custom context processors can live anywhere in your code base. All Django cares about is that your custom context processors are pointed to by the 'context_processors' option in your TEMPLATES setting   or the context_processors argument of Engine if you re using it directly."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/api/#loading-templates", "para": "Generally, you ll store templates in files on your filesystem rather than using the low-level Template API yourself. Save templates in a directory specified as a template directory.Django searches for template directories in a number of places, depending on your template loading settings (see  Loader types  below), but the most basic way of specifying template directories is by using the DIRS option.Tell Django what your template directories are by using the DIRS option in the TEMPLATES setting in your settings file   or the dirs argument of Engine. This should be set to a list of strings that contain full paths to your template directories:Your templates can go anywhere you want, as long as the directories and templates are readable by the Web server. They can have any extension you want, such as .html or .txt, or they can have no extension at all.Note that these paths should use Unix-style forward slashes, even on Windows.By default, Django uses a filesystem-based template loader, but Django comes with a few other template loaders, which know how to load templates from other sources.Some of these other loaders are disabled by default, but you can activate them by adding a 'loaders' option to your DjangoTemplates backend in the TEMPLATES setting or passing a loaders argument to Engine. loaders should be a list of strings or tuples, where each represents a template loader class. Here are the template loaders that come with Django:django.template.loaders.filesystem.LoaderLoads templates from the filesystem, according to DIRS.This loader is enabled by default. However it won t find any templates until you set DIRS to a non-empty list:You can also override 'DIRS' and specify specific directories for a particular filesystem loader:django.template.loaders.app_directories.LoaderLoads templates from Django apps on the filesystem. For each app in INSTALLED_APPS, the loader looks for a templates subdirectory. If the directory exists, Django looks for templates in there.This means you can store templates with your individual apps. This also makes it easy to distribute Django apps with default templates.For example, for this setting: then get_template('foo.html') will look for foo.html in these directories, in this order:  and will use the one it finds first.The order of INSTALLED_APPS is significant! For example, if you want to customize the Django admin, you might choose to override the standard admin/base_site.html template, from django.contrib.admin, with your own admin/base_site.html in myproject.polls. You must then make sure that your myproject.polls comes before django.contrib.admin in INSTALLED_APPS, otherwise django.contrib.admin s will be loaded first and yours will be ignored.Note that the loader performs an optimization when it first runs: it caches a list of which INSTALLED_APPS packages have a templates subdirectory.You can enable this loader simply by setting APP_DIRS to True:django.template.loaders.cached.LoaderBy default (when DEBUG is True), the template system reads and compiles your templates every time they re rendered. While the Django template system is quite fast, the overhead from reading and compiling templates can add up.You configure the cached template loader with a list of other loaders that it should wrap. The wrapped loaders are used to locate unknown templates when they re first encountered. The cached loader then stores the compiled Template in memory. The cached Template instance is returned for subsequent requests to load the same template.This loader is automatically enabled if OPTIONS['loaders'] isn t specified and OPTIONS['debug'] is False (the latter option defaults to the value of DEBUG).You can also enable template caching with some custom template loaders using settings like this:NoteAll of the built-in Django template tags are safe to use with the cached loader, but if you re using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the Node implementation for each tag is thread-safe. For more information, see template tag thread safety considerations.django.template.loaders.locmem.LoaderLoads templates from a Python dictionary. This is useful for testing.This loader takes a dictionary of templates as its first argument:This loader is disabled by default.Django uses the template loaders in order according to the 'loaders' option. It uses each loader until a loader finds a match."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/api/#custom-loaders", "para": "It s possible to load templates from additional sources using custom template loaders. Custom Loader classes should inherit from django.template.loaders.base.Loader and define the get_contents() and get_template_sources() methods.Loads templates from a given source, such as the filesystem or a database.A method that takes a template_name and yields Origin instances for each possible source.For example, the filesystem loader may receive 'index.html' as a template_name argument.  This method would yield origins for the full path of index.html as it appears in each template directory the loader looks at.The method doesn t need to verify that the template exists at a given path, but it should ensure the path is valid. For instance, the filesystem loader makes sure the path lies under a valid template directory.Returns the contents for a template given a Origin instance.This is where a filesystem loader would read contents from the filesystem, or a database loader would read from the database. If a matching template doesn t exist, this should raise a TemplateDoesNotExist error.Returns a Template object for a given template_name by looping through results from get_template_sources() and calling get_contents(). This returns the first matching template. If no template is found, TemplateDoesNotExist is raised.The optional skip argument is a list of origins to ignore when extending templates. This allow templates to extend other templates of the same name. It also used to avoid recursion errors.In general, it is enough to define get_template_sources() and get_contents() for custom template loaders. get_template() will usually not need to be overridden.Building your ownFor examples, read the source code for Django s built-in loaders."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/templates/api/#template-origin", "para": "Templates have an origin containing attributes depending on the source they are loaded from.The path to the template as returned by the template loader. For loaders that read from the file system, this is the full path to the template.If the template is instantiated directly rather than through a template loader, this is a string value of <unknown_source>.The relative path to the template as passed into the template loader.If the template is instantiated directly rather than through a template loader, this is None.The template loader instance that constructed this Origin.If the template is instantiated directly rather than through a template loader, this is None.django.template.loaders.cached.Loader requires all of its wrapped loaders to set this attribute, typically by instantiating the Origin with loader=self."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/#code-layout", "para": "The most common place to specify custom template tags and filters is inside a Django app. If they relate to an existing app, it makes sense to bundle them there; otherwise, they can be added to a new app. When a Django app is added to INSTALLED_APPS, any tags it defines in the conventional location described below are automatically made available to load within templates.The app should contain a templatetags directory, at the same level as models.py, views.py, etc. If this doesn t already exist, create it - don t forget the __init__.py file to ensure the directory is treated as a Python package.Development server won t automatically restartAfter adding the templatetags  module, you will need to restart your server before you can use the tags or filters in templates.Your custom tags and filters will live in a module inside the templatetags directory. The name of the module file is the name you ll use to load the tags later, so be careful to pick a name that won t clash with custom tags and filters in another app.For example, if your custom tags/filters are in a file called poll_extras.py, your app layout might look like this:And in your template you would use the following:The app that contains the custom tags must be in INSTALLED_APPS in order for the {% load %} tag to work. This is a security feature: It allows you to host Python code for many template libraries on a single host machine without enabling access to all of them for every Django installation.There s no limit on how many modules you put in the templatetags package. Just keep in mind that a {% load %} statement will load tags/filters for the given Python module name, not the name of the app.To be a valid tag library, the module must contain a module-level variable named register that is a template.Library instance, in which all the tags and filters are registered. So, near the top of your module, put the following:Alternatively, template tag modules can be registered through the 'libraries' argument to DjangoTemplates. This is useful if you want to use a different label from the template tag module name when loading template tags. It also enables you to register tags without installing an application.Behind the scenesFor a ton of examples, read the source code for Django s default filters and tags. They re in django/template/defaultfilters.py and django/template/defaulttags.py, respectively.For more information on the load tag, read its documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/#writing-custom-template-filters", "para": "Custom filters are just Python functions that take one or two arguments:For example, in the filter {{ var|foo:\"bar\" }}, the filter foo would be passed the variable var and the argument \"bar\".Since the template language doesn t provide exception handling, any exception raised from a template filter will be exposed as a server error. Thus, filter functions should avoid raising exceptions if there is a reasonable fallback value to return. In case of input that represents a clear bug in a template, raising an exception may still be better than silent failure which hides the bug.Here s an example filter definition:And here s an example of how that filter would be used:Most filters don t take arguments. In this case, just leave the argument out of your function. Example:Once you ve written your filter definition, you need to register it with your Library instance, to make it available to Django s template language:The Library.filter() method takes two arguments:You can use register.filter() as a decorator instead:If you leave off the name argument, as in the second example above, Django will use the function s name as the filter name.Finally, register.filter() also accepts three keyword arguments, is_safe, needs_autoescape, and expects_localtime. These arguments are described in filters and auto-escaping and filters and time zones below.If you re writing a template filter that only expects a string as the first argument, you should use the decorator stringfilter. This will convert an object to its string value before being passed to your function:This way, you ll be able to pass, say, an integer to this filter, and it won t cause an AttributeError (because integers don t have lower() methods).When writing a custom filter, give some thought to how the filter will interact with Django s auto-escaping behavior. Note that two types of strings can be passed around inside the template code:Raw strings are the native Python strings. On output, they re escaped if auto-escaping is in effect and presented unchanged, otherwise.Safe strings are strings that have been marked safe from further escaping at output time. Any necessary escaping has already been done. They re commonly used for output that contains raw HTML that is intended to be interpreted as-is on the client side.Internally, these strings are of type SafeText. You can test for them using code like:Template filter code falls into one of two situations:Your filter does not introduce any HTML-unsafe characters (<, >, ', \" or &) into the result that were not already present. In this case, you can let Django take care of all the auto-escaping handling for you. All you need to do is set the is_safe flag to True when you register your filter function, like so:This flag tells Django that if a  safe  string is passed into your filter, the result will still be  safe  and if a non-safe string is passed in, Django will automatically escape it, if necessary.You can think of this as meaning  this filter is safe   it doesn t introduce any possibility of unsafe HTML. The reason is_safe is necessary is because there are plenty of normal string operations that will turn a SafeData object back into a normal str object and, rather than try to catch them all, which would be very difficult, Django repairs the damage after the filter has completed.For example, suppose you have a filter that adds the string xx to the end of any input. Since this introduces no dangerous HTML characters to the result (aside from any that were already present), you should mark your filter with is_safe:When this filter is used in a template where auto-escaping is enabled, Django will escape the output whenever the input is not already marked as  safe .By default, is_safe is False, and you can omit it from any filters where it isn t required.Be careful when deciding if your filter really does leave safe strings as safe. If you re removing characters, you might inadvertently leave unbalanced HTML tags or entities in the result. For example, removing a > from the input might turn <a> into <a, which would need to be escaped on output to avoid causing problems. Similarly, removing a semicolon (;) can turn &amp; into &amp, which is no longer a valid entity and thus needs further escaping. Most cases won t be nearly this tricky, but keep an eye out for any problems like that when reviewing your code.Marking a filter is_safe will coerce the filter s return value to a string.  If your filter should return a boolean or other non-string value, marking it is_safe will probably have unintended consequences (such as converting a boolean False to the string  False ).Alternatively, your filter code can manually take care of any necessary escaping. This is necessary when you re introducing new HTML markup into the result. You want to mark the output as safe from further escaping so that your HTML markup isn t escaped further, so you ll need to handle the input yourself.To mark the output as a safe string, use django.utils.safestring.mark_safe().Be careful, though. You need to do more than just mark the output as safe. You need to ensure it really is safe, and what you do depends on whether auto-escaping is in effect. The idea is to write filters that can operate in templates where auto-escaping is either on or off in order to make things easier for your template authors.In order for your filter to know the current auto-escaping state, set the needs_autoescape flag to True when you register your filter function. (If you don t specify this flag, it defaults to False). This flag tells Django that your filter function wants to be passed an extra keyword argument, called autoescape, that is True if auto-escaping is in effect and False otherwise. It is recommended to set the default of the autoescape parameter to True, so that if you call the function from Python code it will have escaping enabled by default.For example, let s write a filter that emphasizes the first character of a string:The needs_autoescape flag and the autoescape keyword argument mean that our function will know whether automatic escaping is in effect when the filter is called. We use autoescape to decide whether the input data needs to be passed through django.utils.html.conditional_escape or not. (In the latter case, we just use the identity function as the  escape  function.) The conditional_escape() function is like escape() except it only escapes input that is not a SafeData instance. If a SafeData instance is passed to conditional_escape(), the data is returned unchanged.Finally, in the above example, we remember to mark the result as safe so that our HTML is inserted directly into the template without further escaping.There s no need to worry about the is_safe flag in this case (although including it wouldn t hurt anything). Whenever you manually handle the auto-escaping issues and return a safe string, the is_safe flag won t change anything either way.WarningAvoiding XSS vulnerabilities when reusing built-in filtersDjango s built-in filters have autoescape=True by default in order to get the proper autoescaping behavior and avoid a cross-site script vulnerability.In older versions of Django, be careful when reusing Django s built-in filters as autoescape defaults to None. You ll need to pass autoescape=True to get autoescaping.For example, if you wanted to write a custom filter called urlize_and_linebreaks that combined the urlize and linebreaksbr filters, the filter would look like:Then:would be equivalent to:If you write a custom filter that operates on datetime objects, you ll usually register it with the expects_localtime flag set to True:When this flag is set, if the first argument to your filter is a time zone aware datetime, Django will convert it to the current time zone before passing it to your filter when appropriate, according to rules for time zones conversions in templates."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/#writing-custom-template-tags", "para": "Tags are more complex than filters, because tags can do anything. Django provides a number of shortcuts that make writing most types of tags easier. First we ll explore those shortcuts, then explain how to write a tag from scratch for those cases when the shortcuts aren t powerful enough.Many template tags take a number of arguments   strings or template variables   and return a result after doing some processing based solely on the input arguments and some external information. For example, a current_time tag might accept a format string and return the time as a string formatted accordingly.To ease the creation of these types of tags, Django provides a helper function, simple_tag. This function, which is a method of django.template.Library, takes a function that accepts any number of arguments, wraps it in a render function and the other necessary bits mentioned above and registers it with the template system.Our current_time function could thus be written like this:A few things to note about the simple_tag helper function:Unlike other tag utilities, simple_tag passes its output through conditional_escape() if the template context is in autoescape mode, to ensure correct HTML and protect you from XSS vulnerabilities.If additional escaping is not desired, you will need to use mark_safe() if you are absolutely sure that your code does not contain XSS vulnerabilities. For building small HTML snippets, use of format_html() instead of mark_safe() is strongly recommended.If your template tag needs to access the current context, you can use the takes_context argument when registering your tag:Note that the first argument must be called context.For more information on how the takes_context option works, see the section on inclusion tags.If you need to rename your tag, you can provide a custom name for it:simple_tag functions may accept any number of positional or keyword arguments. For example:Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign ( = ) and must be provided after the positional arguments. For example:It s possible to store the tag results in a template variable rather than directly outputting it. This is done by using the as argument followed by the variable name. Doing so enables you to output the content yourself where you see fit:Another common type of template tag is the type that displays some data by rendering another template. For example, Django s admin interface uses custom template tags to display the buttons along the bottom of the  add/change  form pages. Those buttons always look the same, but the link targets change depending on the object being edited   so they re a perfect case for using a small template that is filled with details from the current object. (In the admin s case, this is the submit_row tag.)These sorts of tags are called  inclusion tags .Writing inclusion tags is probably best demonstrated by example. Let s write a tag that outputs a list of choices for a given Poll object, such as was created in the tutorials. We ll use the tag like this: and the output will be something like this:First, define the function that takes the argument and produces a dictionary of data for the result. The important point here is we only need to return a dictionary, not anything more complex. This will be used as a template context for the template fragment. Example:Next, create the template used to render the tag s output. This template is a fixed feature of the tag: the tag writer specifies it, not the template designer. Following our example, the template is very simple:Now, create and register the inclusion tag by calling the inclusion_tag() method on a Library object. Following our example, if the above template is in a file called results.html in a directory that s searched by the template loader, we d register the tag like this:Alternatively it is possible to register the inclusion tag using a django.template.Template instance: when first creating the function.Sometimes, your inclusion tags might require a large number of arguments, making it a pain for template authors to pass in all the arguments and remember their order. To solve this, Django provides a takes_context option for inclusion tags. If you specify takes_context in creating a template tag, the tag will have no required arguments, and the underlying Python function will have one argument   the template context as of when the tag was called.For example, say you re writing an inclusion tag that will always be used in a context that contains home_link and home_title variables that point back to the main page. Here s what the Python function would look like:Note that the first parameter to the function must be called context.In that register.inclusion_tag() line, we specified takes_context=True and the name of the template. Here s what the template link.html might look like:Then, any time you want to use that custom tag, load its library and call it without any arguments, like so:Note that when you re using takes_context=True, there s no need to pass arguments to the template tag. It automatically gets access to the context.The takes_context parameter defaults to False. When it s set to True, the tag is passed the context object, as in this example. That s the only difference between this case and the previous inclusion_tag example.inclusion_tag functions may accept any number of positional or keyword arguments. For example:Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign ( = ) and must be provided after the positional arguments. For example:Sometimes the basic features for custom template tag creation aren t enough. Don t worry, Django gives you complete access to the internals required to build a template tag from the ground up.The template system works in a two-step process: compiling and rendering. To define a custom template tag, you specify how the compilation works and how the rendering works.When Django compiles a template, it splits the raw template text into   nodes  . Each node is an instance of django.template.Node and has a render() method. A compiled template is, simply, a list of Node objects. When you call render() on a compiled template object, the template calls render() on each Node in its node list, with the given context. The results are all concatenated together to form the output of the template.Thus, to define a custom template tag, you specify how the raw template tag is converted into a Node (the compilation function), and what the node s render() method does.For each template tag the template parser encounters, it calls a Python function with the tag contents and the parser object itself. This function is responsible for returning a Node instance based on the contents of the tag.For example, let s write a full implementation of our simple template tag, {% current_time %}, that displays the current date/time, formatted according to a parameter given in the tag, in strftime() syntax. It s a good idea to decide the tag syntax before anything else. In our case, let s say the tag should be used like this:The parser for this function should grab the parameter and create a Node object:Notes:The second step in writing custom tags is to define a Node subclass that has a render() method.Continuing the above example, we need to define CurrentTimeNode:Notes:Ultimately, this decoupling of compilation and rendering results in an efficient template system, because a template can render multiple contexts without having to be parsed multiple times.The output from template tags is not automatically run through the auto-escaping filters (with the exception of simple_tag() as described above). However, there are still a couple of things you should keep in mind when writing a template tag.If the render() function of your template stores the result in a context variable (rather than returning the result in a string), it should take care to call mark_safe() if appropriate. When the variable is ultimately rendered, it will be affected by the auto-escape setting in effect at the time, so content that should be safe from further escaping needs to be marked as such.Also, if your template tag creates a new context for performing some sub-rendering, set the auto-escape attribute to the current context s value. The __init__ method for the Context class takes a parameter called autoescape that you can use for this purpose. For example:This is not a very common situation, but it s useful if you re rendering a template yourself. For example:If we had neglected to pass in the current context.autoescape value to our new Context in this example, the results would have always been automatically escaped, which may not be the desired behavior if the template tag is used inside a {% autoescape off %} block.Once a node is parsed, its render method may be called any number of times. Since Django is sometimes run in multi-threaded environments, a single node may be simultaneously rendering with different contexts in response to two separate requests. Therefore, it s important to make sure your template tags are thread safe.To make sure your template tags are thread safe, you should never store state information on the node itself. For example, Django provides a builtin cycle template tag that cycles among a list of given strings each time it s rendered:A naive implementation of CycleNode might look something like this:But, suppose we have two templates rendering the template snippet from above at the same time:The CycleNode is iterating, but it s iterating globally. As far as Thread 1 and Thread 2 are concerned, it s always returning the same value. This is obviously not what we want!To address this problem, Django provides a render_context that s associated with the context of the template that is currently being rendered. The render_context behaves like a Python dictionary, and should be used to store Node state between invocations of the render method.Let s refactor our CycleNode implementation to use the render_context:Note that it s perfectly safe to store global information that will not change throughout the life of the Node as an attribute. In the case of CycleNode, the cyclevars argument doesn t change after the Node is instantiated, so we don t need to put it in the render_context. But state information that is specific to the template that is currently being rendered, like the current iteration of the CycleNode, should be stored in the render_context.NoteNotice how we used self to scope the CycleNode specific information within the render_context. There may be multiple CycleNodes in a given template, so we need to be careful not to clobber another node s state information. The easiest way to do this is to always use self as the key into render_context. If you re keeping track of several state variables, make render_context[self] a dictionary.Finally, register the tag with your module s Library instance, as explained in writing custom template filters above. Example:The tag() method takes two arguments:As with filter registration, it is also possible to use this as a decorator:If you leave off the name argument, as in the second example above, Django will use the function s name as the tag name.Although you can pass any number of arguments to a template tag using token.split_contents(), the arguments are all unpacked as string literals. A little more work is required in order to pass dynamic content (a template variable) to a template tag as an argument.While the previous examples have formatted the current time into a string and returned the string, suppose you wanted to pass in a DateTimeField from an object and have the template tag format that date-time:Initially, token.split_contents() will return three values:Now your tag should begin to look like this:You also have to change the renderer to retrieve the actual contents of the date_updated property of the blog_entry object.  This can be accomplished by using the Variable() class in django.template.To use the Variable class, simply instantiate it with the name of the variable to be resolved, and then call variable.resolve(context). So, for example:Variable resolution will throw a VariableDoesNotExist exception if it cannot resolve the string passed to it in the current context of the page.The above examples simply output a value. Generally, it s more flexible if your template tags set template variables instead of outputting values. That way, template authors can reuse the values that your template tags create.To set a variable in the context, just use dictionary assignment on the context object in the render() method. Here s an updated version of CurrentTimeNode that sets a template variable current_time instead of outputting it:Note that render() returns the empty string. render() should always return string output. If all the template tag does is set a variable, render() should return the empty string.Here s how you d use this new version of the tag:Variable scope in contextAny variable set in the context will only be available in the same block of the template in which it was assigned. This behavior is intentional; it provides a scope for variables so that they don t conflict with context in other blocks.But, there s a problem with CurrentTimeNode2: The variable name current_time is hard-coded. This means you ll need to make sure your template doesn t use {{ current_time }} anywhere else, because the {% current_time %} will blindly overwrite that variable s value. A cleaner solution is to make the template tag specify the name of the output variable, like so:To do that, you ll need to refactor both the compilation function and Node class, like so:The difference here is that do_current_time() grabs the format string and the variable name, passing both to CurrentTimeNode3.Finally, if you only need to have a simple syntax for your custom context-updating template tag, consider using the simple_tag() shortcut, which supports assigning the tag results to a template variable.Template tags can work in tandem. For instance, the standard {% comment %} tag hides everything until {% endcomment %}. To create a template tag such as this, use parser.parse() in your compilation function.Here s how a simplified {% comment %} tag might be implemented:NoteThe actual implementation of {% comment %} is slightly different in that it allows broken template tags to appear between {% comment %} and {% endcomment %}. It does so by calling parser.skip_past('endcomment') instead of parser.parse(('endcomment',)) followed by parser.delete_first_token(), thus avoiding the generation of a node list.parser.parse() takes a tuple of names of block tags   to parse until  . It returns an instance of django.template.NodeList, which is a list of all Node objects that the parser encountered   before   it encountered any of the tags named in the tuple.In \"nodelist = parser.parse(('endcomment',))\" in the above example, nodelist is a list of all nodes between the {% comment %} and {% endcomment %}, not counting {% comment %} and {% endcomment %} themselves.After parser.parse() is called, the parser hasn t yet  consumed  the {% endcomment %} tag, so the code needs to explicitly call parser.delete_first_token().CommentNode.render() simply returns an empty string. Anything between {% comment %} and {% endcomment %} is ignored.In the previous example, do_comment() discarded everything between {% comment %} and {% endcomment %}. Instead of doing that, it s possible to do something with the code between block tags.For example, here s a custom template tag, {% upper %}, that capitalizes everything between itself and {% endupper %}.Usage:As in the previous example, we ll use parser.parse(). But this time, we pass the resulting nodelist to the Node:The only new concept here is the self.nodelist.render(context) in UpperNode.render().For more examples of complex rendering, see the source code of {% for %} in django/template/defaulttags.py and {% if %} in django/template/smartif.py."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/#html-forms", "para": "In HTML, a form is a collection of elements inside <form>...</form> that allow a visitor to do things like enter text, select options, manipulate objects or controls, and so on, and then send that information back to the server.Some of these form interface elements - text input or checkboxes - are fairly simple and are built into HTML itself. Others are much more complex; an interface that pops up a date picker or allows you to move a slider or manipulate controls will typically use JavaScript and CSS as well as HTML form <input> elements to achieve these effects.As well as its <input> elements, a form must specify two things:As an example, the login form for the Django admin contains several <input> elements: one of type=\"text\" for the username, one of type=\"password\" for the password, and one of type=\"submit\" for the  Log in  button. It also contains some hidden text fields that the user doesn t see, which Django uses to determine what to do next.It also tells the browser that the form data should be sent to the URL specified in the <form> s action attribute - /admin/ - and that it should be sent using the HTTP mechanism specified by the method attribute - post.When the <input type=\"submit\" value=\"Log in\"> element is triggered, the data is returned to /admin/.GET and POST are the only HTTP methods to use when dealing with forms.Django s login form is returned using the POST method, in which the browser bundles up the form data, encodes it for transmission, sends it to the server, and then receives back its response.GET, by contrast, bundles the submitted data into a string, and uses this to compose a URL. The URL contains the address where the data must be sent, as well as the data keys and values. You can see this in action if you do a search in the Django documentation, which will produce a URL of the form https://docs.djangoproject.com/search/?q=forms&release=1.GET and POST are typically used for different purposes.Any request that could be used to change the state of the system - for example, a request that makes changes in the database - should use POST. GET should be used only for requests that do not affect the state of the system.GET would also be unsuitable for a password form, because the password would appear in the URL, and thus, also in browser history and server logs, all in plain text. Neither would it be suitable for large quantities of data, or for binary data, such as an image. A Web application that uses GET requests for admin forms is a security risk: it can be easy for an attacker to mimic a form s request to gain access to sensitive parts of the system. POST, coupled with other protections like Django s CSRF protection offers more control over access.On the other hand, GET is suitable for things like a web search form, because the URLs that represent a GET request can easily be bookmarked, shared, or resubmitted."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/#django-s-role-in-forms", "para": "Handling forms is a complex business. Consider Django s admin, where numerous items of data of several different types may need to be prepared for display in a form, rendered as HTML, edited using a convenient interface, returned to the server, validated and cleaned up, and then saved or passed on for further processing.Django s form functionality can simplify and automate vast portions of this work, and can also do it more securely than most programmers would be able to do in code they wrote themselves.Django handles three distinct parts of the work involved in forms:It is possible to write code that does all of this manually, but Django can take care of it all for you."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/#forms-in-django", "para": "We ve described HTML forms briefly, but an HTML <form> is just one part of the machinery required.In the context of a Web application,  form  might refer to that HTML <form>, or to the Django Form that produces it, or to the structured data returned when it is submitted, or to the end-to-end working collection of these parts.At the heart of this system of components is Django s Form class. In much the same way that a Django model describes the logical structure of an object, its behavior, and the way its parts are represented to us, a Form class describes a form and determines how it works and appears.In a similar way that a model class s fields map to database fields, a form class s fields map to HTML form <input> elements. (A ModelForm maps a model class s fields to HTML form <input> elements via a Form; this is what the Django admin is based upon.)A form s fields are themselves classes; they manage form data and perform validation when a form is submitted. A DateField and a FileField handle very different kinds of data and have to do different things with it.A form field is represented to a user in the browser as an HTML  widget  - a piece of user interface machinery. Each field type has an appropriate default Widget class, but these can be overridden as required.When rendering an object in Django, we generally:Rendering a form in a template involves nearly the same work as rendering any other kind of object, but there are some key differences.In the case of a model instance that contained no data, it would rarely if ever be useful to do anything with it in a template. On the other hand, it makes perfect sense to render an unpopulated form - that s what we do when we want the user to populate it.So when we handle a model instance in a view, we typically retrieve it from the database. When we re dealing with a form we typically instantiate it in the view.When we instantiate a form, we can opt to leave it empty or pre-populate it, for example with:The last of these cases is the most interesting, because it s what makes it possible for users not just to read a website, but to send information back to it too."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/#building-a-form", "para": "Suppose you want to create a simple form on your website, in order to obtain the user s name. You d need something like this in your template:This tells the browser to return the form data to the URL /your-name/, using the POST method. It will display a text field, labeled  Your name: , and a button marked  OK . If the template context contains a current_name variable, that will be used to pre-fill the your_name field.You ll need a view that renders the template containing the HTML form, and that can supply the current_name field as appropriate.When the form is submitted, the POST request which is sent to the server will contain the form data.Now you ll also need a view corresponding to that /your-name/ URL which will find the appropriate key/value pairs in the request, and then process them.This is a very simple form. In practice, a form might contain dozens or hundreds of fields, many of which might need to be pre-populated, and we might expect the user to work through the edit-submit cycle several times before concluding the operation.We might require some validation to occur in the browser, even before the form is submitted; we might want to use much more complex fields, that allow the user to do things like pick dates from a calendar and so on.At this point it s much easier to get Django to do most of this work for us.We already know what we want our HTML form to look like. Our starting point for it in Django is this:This defines a Form class with a single field (your_name). We ve applied a human-friendly label to the field, which will appear in the <label> when it s rendered (although in this case, the label we specified is actually the same one that would be generated automatically if we had omitted it).The field s maximum allowable length is defined by max_length. This does two things. It puts a maxlength=\"100\" on the HTML <input> (so the browser should prevent the user from entering more than that number of characters in the first place). It also means that when Django receives the form back from the browser, it will validate the length of the data.A Form instance has an is_valid() method, which runs validation routines for all its fields. When this method is called, if all fields contain valid data, it will:The whole form, when rendered for the first time, will look like:Note that it does not include the <form> tags, or a submit button. We ll have to provide those ourselves in the template.Form data sent back to a Django website is processed by a view, generally the same view which published the form. This allows us to reuse some of the same logic.To handle the form we need to instantiate it in the view for the URL where we want it to be published:If we arrive at this view with a GET request, it will create an empty form instance and place it in the template context to be rendered. This is what we can expect to happen the first time we visit the URL.If the form is submitted using a POST request, the view will once again create a form instance and populate it with data from the request: form = NameForm(request.POST) This is called  binding data to the form  (it is now a bound form).We call the form s is_valid() method; if it s not True, we go back to the template with the form. This time the form is no longer empty (unbound) so the HTML form will be populated with the data previously submitted, where it can be edited and corrected as required.If is_valid() is True, we ll now be able to find all the validated form data in its cleaned_data attribute. We can use this data to update the database or do other processing before sending an HTTP redirect to the browser telling it where to go next.We don t need to do much in our name.html template. The simplest example is:All the form s fields and their attributes will be unpacked into HTML markup from that {{ form }} by Django s template language.Forms and Cross Site Request Forgery protectionDjango ships with an easy-to-use protection against Cross Site Request Forgeries. When submitting a form via POST with CSRF protection enabled you must use the csrf_token template tag as in the preceding example. However, since CSRF protection is not directly tied to forms in templates, this tag is omitted from the following examples in this document.HTML5 input types and browser validationIf your form includes a URLField, an EmailField or any integer field type, Django will use the url, email and number HTML5 input types. By default, browsers may apply their own validation on these fields, which may be stricter than Django s validation. If you would like to disable this behavior, set the novalidate attribute on the form tag, or specify a different widget on the field, like TextInput.We now have a working web form, described by a Django Form, processed by a view, and rendered as an HTML <form>.That s all you need to get started, but the forms framework puts a lot more at your fingertips. Once you understand the basics of the process described above, you should be prepared to understand other features of the forms system and ready to learn a bit more about the underlying machinery."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/../../ref/forms/api/#django.forms.Form", "para": "All form classes are created as subclasses of either django.forms.Form or django.forms.ModelForm. You can think of ModelForm as a subclass of Form. Form and ModelForm actually inherit common functionality from a (private) BaseForm class, but this implementation detail is rarely important.Models and FormsIn fact if your form is going to be used to directly add or edit a Django model, a ModelForm can save you a great deal of time, effort, and code, because it will build a form, along with the appropriate fields and their attributes, from a Model class.The distinction between Bound and unbound forms is important:The form s is_bound attribute will tell you whether a form has data bound to it or not.Consider a more useful form than our minimal example above, which we could use to implement  contact me  functionality on a personal website:Our earlier form used a single field, your_name, a CharField. In this case, our form has four fields: subject, message, sender and cc_myself. CharField, EmailField and BooleanField are just three of the available field types; a full list can be found in Form fields.Each form field has a corresponding Widget class, which in turn corresponds to an HTML form widget such as <input type=\"text\">.In most cases, the field will have a sensible default widget. For example, by default, a CharField will have a TextInput widget, that produces an <input type=\"text\"> in the HTML. If you needed <textarea> instead, you d specify the appropriate widget when defining your form field, as we have done for the message field.Whatever the data submitted with a form, once it has been successfully validated by calling is_valid() (and is_valid() has returned True), the validated form data will be in the form.cleaned_data dictionary. This data will have been nicely converted into Python types for you.NoteYou can still access the unvalidated data directly from request.POST at this point, but the validated data is better.In the contact form example above, cc_myself will be a boolean value. Likewise, fields such as IntegerField and FloatField convert values to a Python int and float respectively.Here s how the form data could be processed in the view that handles this form:TipFor more on sending email from Django, see Sending email.Some field types need some extra handling. For example, files that are uploaded using a form need to be handled differently (they can be retrieved from request.FILES, rather than request.POST). For details of how to handle file uploads with your form, see Binding uploaded files to a form."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/#working-with-form-templates", "para": "All you need to do to get your form into a template is to place the form instance into the template context. So if your form is called form in the context, {{ form }} will render its <label> and <input> elements appropriately.Additional form template furnitureDon t forget that a form s output does not include the surrounding <form> tags, or the form s submit control. You will have to provide these yourself.There are other output options though for the <label>/<input> pairs:Note that you ll have to provide the surrounding <table> or <ul> elements yourself.Here s the output of {{ form.as_p }} for our ContactForm instance:Note that each form field has an ID attribute set to id_<field-name>, which is referenced by the accompanying label tag. This is important in ensuring that forms are accessible to assistive technology such as screen reader software. You can also customize the way in which labels and ids are generated.See Outputting forms as HTML for more on this.We don t have to let Django unpack the form s fields; we can do it manually if we like (allowing us to reorder the fields, for example). Each field is available as an attribute of the form using {{ form.name_of_field }}, and in a Django template, will be rendered appropriately. For example:Complete <label> elements can also be generated using the label_tag(). For example:Of course, the price of this flexibility is more work. Until now we haven t had to worry about how to display form errors, because that s taken care of for us. In this example we have had to make sure we take care of any errors for each field and any errors for the form as a whole. Note {{ form.non_field_errors }} at the top of the form and the template lookup for errors on each field.Using {{ form.name_of_field.errors }} displays a list of form errors, rendered as an unordered list. This might look like:The list has a CSS class of errorlist to allow you to style its appearance. If you wish to further customize the display of errors you can do so by looping over them:Non-field errors (and/or hidden field errors that are rendered at the top of the form when using helpers like form.as_p()) will be rendered with an additional class of nonfield to help distinguish them from field-specific errors. For example, {{ form.non_field_errors }} would look like:See The Forms API for more on errors, styling, and working with form attributes in templates.If you re using the same HTML for each of your form fields, you can reduce duplicate code by looping through each field in turn using a {% for %} loop:Useful attributes on {{ field }} include:The field s label wrapped in the appropriate HTML <label> tag. This includes the form s label_suffix. For example, the default label_suffix is a colon:See alsoFor a complete list of attributes and methods, see BoundField.If you re manually laying out a form in a template, as opposed to relying on Django s default form layout, you might want to treat <input type=\"hidden\"> fields differently from non-hidden fields. For example, because hidden fields don t display anything, putting error messages  next to  the field could cause confusion for your users   so errors for those fields should be handled differently.Django provides two methods on a form that allow you to loop over the hidden and visible fields independently: hidden_fields() and visible_fields(). Here s a modification of an earlier example that uses these two methods:This example does not handle any errors in the hidden fields. Usually, an error in a hidden field is a sign of form tampering, since normal form interaction won t alter them. However, you could easily insert some error displays for those form errors, as well.If your site uses the same rendering logic for forms in multiple places, you can reduce duplication by saving the form s loop in a standalone template and using the include tag to reuse it in other templates:If the form object passed to a template has a different name within the context, you can alias it using the with argument of the include tag:If you find yourself doing this often, you might consider creating a custom inclusion tag."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/#further-topics", "para": "This covers the basics, but forms can do a whole lot more:See also"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#bound-and-unbound-forms", "para": "A Form instance is either bound to a set of data, or unbound.To create an unbound Form instance, simply instantiate the class:To bind data to a form, pass the data as a dictionary as the first parameter to your Form class constructor:In this dictionary, the keys are the field names, which correspond to the attributes in your Form class. The values are the data you re trying to validate. These will usually be strings, but there s no requirement that they be strings; the type of data you pass depends on the Field, as we ll see in a moment.If you need to distinguish between bound and unbound form instances at runtime, check the value of the form s is_bound attribute:Note that passing an empty dictionary creates a bound form with empty data:If you have a bound Form instance and want to change the data somehow, or if you want to bind an unbound Form instance to some data, create another Form instance. There is no way to change data in a Form instance. Once a Form instance has been created, you should consider its data immutable, whether it has data or not."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#using-forms-to-validate-data", "para": "Implement a clean() method on your Form when you must add custom validation for fields that are interdependent. See Cleaning and validating fields that depend on each other for example usage.The primary task of a Form object is to validate data. With a bound Form instance, call the is_valid() method to run validation and return a boolean designating whether the data was valid:Let s try with some invalid data. In this case, subject is blank (an error, because all fields are required by default) and sender is not a valid email address:Access the errors attribute to get a dictionary of error messages:In this dictionary, the keys are the field names, and the values are lists of strings representing the error messages. The error messages are stored in lists because a field can have multiple error messages.You can access errors without having to call is_valid() first. The form s data will be validated the first time either you call is_valid() or access errors.The validation routines will only get called once, regardless of how many times you access errors or call is_valid(). This means that if validation has side effects, those side effects will only be triggered once.Returns a dict that maps fields to their original ValidationError instances.Use this method anytime you need to identify an error by its code. This enables things like rewriting the error s message or writing custom logic in a view when a given error is present. It can also be used to serialize the errors in a custom format (e.g. XML); for instance, as_json() relies on as_data().The need for the as_data() method is due to backwards compatibility. Previously ValidationError instances were lost as soon as their rendered error messages were added to the Form.errors dictionary. Ideally Form.errors would have stored ValidationError instances and methods with an as_ prefix could render them, but it had to be done the other way around in order not to break code that expects rendered error messages in Form.errors.Returns the errors serialized as JSON.By default, as_json() does not escape its output. If you are using it for something like AJAX requests to a form view where the client interprets the response and inserts errors into the page, you ll want to be sure to escape the results on the client-side to avoid the possibility of a cross-site scripting attack. It s trivial to do so using a JavaScript library like jQuery - simply use $(el).text(errorText) rather than .html().If for some reason you don t want to use client-side escaping, you can also set escape_html=True and error messages will be escaped so you can use them directly in HTML.Returns the errors as a dictionary suitable for serializing to JSON. Form.errors.as_json() returns serialized JSON, while this returns the error data before it s serialized.The escape_html parameter behaves as described in Form.errors.as_json().This method allows adding errors to specific fields from within the Form.clean() method, or from outside the form altogether; for instance from a view.The field argument is the name of the field to which the errors should be added. If its value is None the error will be treated as a non-field error as returned by Form.non_field_errors().The error argument can be a simple string, or preferably an instance of ValidationError. See Raising ValidationError for best practices when defining form errors.Note that Form.add_error() automatically removes the relevant field from cleaned_data.This method returns a boolean designating whether a field has an error with a specific error code. If code is None, it will return True if the field contains any errors at all.To check for non-field errors use NON_FIELD_ERRORS as the field parameter.This method returns the list of errors from Form.errors  that aren t associated with a particular field. This includes ValidationErrors that are raised in Form.clean() and errors added using Form.add_error(None, \"...\").It s meaningless to validate a form with no data, but, for the record, here s what happens with unbound forms:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#dynamic-initial-values", "para": "Use initial to declare the initial value of form fields at runtime. For example, you might want to fill in a username field with the username of the current session.To accomplish this, use the initial argument to a Form. This argument, if given, should be a dictionary mapping field names to initial values. Only include the fields for which you re specifying an initial value; it s not necessary to include every field in your form. For example:These values are only displayed for unbound forms, and they re not used as fallback values if a particular value isn t provided.If a Field defines initial and you include initial when instantiating the Form, then the latter initial will have precedence. In this example, initial is provided both at the field level and at the form instance level, and the latter gets precedence:Use get_initial_for_field() to retrieve initial data for a form field. It retrieves data from Form.initial and Field.initial, in that order, and evaluates any callable initial values."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#checking-which-form-data-has-changed", "para": "Use the has_changed() method on your Form when you need to check if the form data has been changed from the initial data.When the form is submitted, we reconstruct it and provide the original data so that the comparison can be done:has_changed() will be True if the data from request.POST differs from what was provided in initial or False otherwise. The result is computed by calling Field.has_changed() for each field in the form.The changed_data attribute returns a list of the names of the fields whose values in the form s bound data (usually request.POST) differ from what was provided in initial. It returns an empty list if no data differs."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#accessing-the-fields-from-the-form", "para": "You can access the fields of Form instance from its fields attribute:You can alter the field of Form instance to change the way it is presented in the form:Beware not to alter the base_fields attribute because this modification will influence all subsequent ContactForm instances within the same Python process:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#accessing-clean-data", "para": "Each field in a Form class is responsible not only for validating data, but also for  cleaning  it   normalizing it to a consistent format. This is a nice feature, because it allows data for a particular field to be input in a variety of ways, always resulting in consistent output.For example, DateField normalizes input into a Python datetime.date object. Regardless of whether you pass it a string in the format '1994-07-15', a datetime.date object, or a number of other formats, DateField will always normalize it to a datetime.date object as long as it s valid.Once you ve created a Form instance with a set of data and validated it, you can access the clean data via its cleaned_data attribute:Note that any text-based field   such as CharField or EmailField   always cleans the input into a string. We ll cover the encoding implications later in this document.If your data does not validate, the cleaned_data dictionary contains only the valid fields:cleaned_data will always only contain a key for fields defined in the Form, even if you pass extra data when you define the Form. In this example, we pass a bunch of extra fields to the ContactForm constructor, but cleaned_data contains only the form s fields:When the Form is valid, cleaned_data will include a key and value for all its fields, even if the data didn t include a value for some optional fields. In this example, the data dictionary doesn t include a value for the nick_name field, but cleaned_data includes it, with an empty value:In this above example, the cleaned_data value for nick_name is set to an empty string, because nick_name is CharField, and CharFields treat empty values as an empty string. Each field type knows what its  blank  value is   e.g., for DateField, it s None instead of the empty string. For full details on each field s behavior in this case, see the  Empty value  note for each field in the  Built-in Field classes  section below.You can write code to perform validation for particular form fields (based on their name) or for the form as a whole (considering combinations of various fields). More information about this is in Form and field validation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#outputting-forms-as-html", "para": "The second task of a Form object is to render itself as HTML. To do so, simply print it:If the form is bound to data, the HTML output will include that data appropriately. For example, if a field is represented by an <input type=\"text\">, the data will be in the value attribute. If a field is represented by an <input type=\"checkbox\">, then that HTML will include checked if appropriate:This default output is a two-column HTML table, with a <tr> for each field. Notice the following:Although <table> output is the default output style when you print a form, other output styles are available. Each style is available as a method on a form object, and each rendering method returns a string.as_p() renders the form as a series of <p> tags, with each <p> containing one field:as_ul() renders the form as a series of <li> tags, with each <li> containing one field. It does not include the <ul> or </ul>, so that you can specify any HTML attributes on the <ul> for flexibility:Finally, as_table() outputs the form as an HTML <table>. This is exactly the same as print. In fact, when you print a form object, it calls its as_table() method behind the scenes:It s pretty common to style form rows and fields that are required or have errors. For example, you might want to present required form rows in bold and highlight errors in red.The Form class has a couple of hooks you can use to add class attributes to required rows or to rows with errors: simply set the Form.error_css_class and/or Form.required_css_class attributes:Once you ve done that, rows will be given \"error\" and/or \"required\" classes, as needed. The HTML will look something like:By default, the form rendering methods include:The id attribute values are generated by prepending id_ to the form field names.  This behavior is configurable, though, if you want to change the id convention or remove HTML id attributes and <label> tags entirely.Use the auto_id argument to the Form constructor to control the id and label behavior. This argument must be True, False or a string.If auto_id is False, then the form output will not include <label> tags nor id attributes:If auto_id is set to True, then the form output will include <label> tags and will simply use the field name as its id for each form field:If auto_id is set to a string containing the format character '%s', then the form output will include <label> tags, and will generate id attributes based on the format string. For example, for a format string 'field_%s', a field named subject will get the id value 'field_subject'. Continuing our example:If auto_id is set to any other true value   such as a string that doesn t include %s   then the library will act as if auto_id is True.By default, auto_id is set to the string 'id_%s'.A translatable string (defaults to a colon (:) in English) that will be appended after any label name when a form is rendered.It s possible to customize that character, or omit it entirely, using the label_suffix parameter:Note that the label suffix is added only if the last character of the label isn t a punctuation character (in English, those are ., !, ? or :).Fields can also define their own label_suffix. This will take precedence over Form.label_suffix. The suffix can also be overridden at runtime using the label_suffix parameter to label_tag().When set to True (the default), required form fields will have the required HTML attribute.Formsets instantiate forms with use_required_attribute=False to avoid incorrect browser validation when adding and deleting forms from a formset.Specifies the renderer to use for the form. Defaults to None which means to use the default renderer specified by the FORM_RENDERER setting.You can set this as a class attribute when declaring your form or use the renderer argument to Form.__init__(). For example:or:In the as_p(), as_ul() and as_table() shortcuts, the fields are displayed in the order in which you define them in your form class. For example, in the ContactForm example, the fields are defined in the order subject, message, sender, cc_myself. To reorder the HTML output, just change the order in which those fields are listed in the class.There are several other ways to customize the order:By default Form.field_order=None, which retains the order in which you define the fields in your form class. If field_order is a list of field names, the fields are ordered as specified by the list and remaining fields are appended according to the default order. Unknown field names in the list are ignored. This makes it possible to disable a field in a subclass by setting it to None without having to redefine ordering.You can also use the Form.field_order argument to a Form to override the field order. If a Form defines field_order and you include field_order when instantiating the Form, then the latter field_order will have precedence.You may rearrange the fields any time using order_fields() with a list of field names as in field_order.If you render a bound Form object, the act of rendering will automatically run the form s validation if it hasn t already happened, and the HTML output will include the validation errors as a <ul class=\"errorlist\"> near the field. The particular positioning of the error messages depends on the output method you re using:By default, forms use django.forms.utils.ErrorList to format validation errors. If you d like to use an alternate class for displaying errors, you can pass that in at construction time:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#more-granular-output", "para": "The as_p(), as_ul(), and as_table() methods are simply shortcuts   they re not the only way a form object can be displayed.Used to display HTML or access attributes for a single field of a Form instance.The __str__() method of this object displays the HTML for this field.To retrieve a single BoundField, use dictionary lookup syntax on your form using the field s name as the key:To retrieve all BoundField objects, iterate the form:The field-specific output honors the form object s auto_id setting:The HTML ID attribute for this BoundField. Returns an empty string if Form.auto_id is False.This property returns the data for this BoundField extracted by the widget s value_from_datadict() method, or None if it wasn t given:A list-like object that is displayed as an HTML <ul class=\"errorlist\"> when printed:The form Field instance from the form class that this BoundField wraps.The Form instance this BoundField is bound to.The help_text of the field.The name that will be used in the widget s HTML name attribute. It takes the form prefix into account.Use this property to render the ID of this field. For example, if you are manually constructing a <label> in your template (despite the fact that label_tag() will do this for you):By default, this will be the field s name prefixed by id_ ( id_my_field  for the example above). You may modify the ID by setting attrs on the field s widget. For example, declaring a field like this:and using the template above, would render something like:Returns True if this BoundField s widget is hidden.The label of the field. This is used in label_tag().The name of this field in the form:Returns a string of HTML for representing this as an <input type=\"hidden\">.**kwargs are passed to as_widget().This method is primarily used internally. You should use a widget instead.Renders the field by rendering the passed widget, adding any HTML attributes passed as attrs.  If no widget is specified, then the field s default widget will be used.only_initial is used by Django internals and should not be set explicitly.When you use Django s rendering shortcuts, CSS classes are used to indicate required form fields or fields that contain errors. If you re manually rendering a form, you can access these CSS classes using the css_classes method:If you want to provide some additional classes in addition to the error and required classes that may be required, you can provide those classes as an argument:To separately render the label tag of a form field, you can call its label_tag() method:You can provide the contents parameter which will replace the auto-generated label tag. An attrs dictionary may contain additional attributes for the <label> tag.The HTML that s generated includes the form s label_suffix (a colon, by default) or, if set, the current field s label_suffix. The optional label_suffix parameter allows you to override any previously set suffix. For example, you can use an empty string to hide the label on selected fields. If you need to do this in a template, you could write a custom filter to allow passing parameters to label_tag.Use this method to render the raw value of this field as it would be rendered by a Widget:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#customizing-boundfield", "para": "If you need to access some additional information about a form field in a template and using a subclass of Field isn t sufficient, consider also customizing BoundField.A custom form field can override get_bound_field():Takes an instance of Form and the name of the field. The return value will be used when accessing the field in a template. Most likely it will be an instance of a subclass of BoundField.If you have a GPSCoordinatesField, for example, and want to be able to access additional information about the coordinates in a template, this could be implemented as follows:Now you can access the country in a template with {{ form.coordinates.country }}."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#binding-uploaded-files-to-a-form", "para": "Dealing with forms that have FileField and ImageField fields is a little more complicated than a normal form.Firstly, in order to upload files, you ll need to make sure that your <form> element correctly defines the enctype as \"multipart/form-data\":Secondly, when you use the form, you need to bind the file data. File data is handled separately to normal form data, so when your form contains a FileField and ImageField, you will need to specify a second argument when you bind your form. So if we extend our ContactForm to include an ImageField called mugshot, we need to bind the file data containing the mugshot image:In practice, you will usually specify request.FILES as the source of file data (just like you use request.POST as the source of form data):Constructing an unbound form is the same as always   just omit both form data and file data:If you re writing reusable views or templates, you may not know ahead of time whether your form is a multipart form or not. The is_multipart() method tells you whether the form requires multipart encoding for submission:Here s an example of how you might use this in a template:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#subclassing-forms", "para": "If you have multiple Form classes that share fields, you can use subclassing to remove redundancy.When you subclass a custom Form class, the resulting subclass will include all fields of the parent class(es), followed by the fields you define in the subclass.In this example, ContactFormWithPriority contains all the fields from ContactForm, plus an additional field, priority. The ContactForm fields are ordered first:It s possible to subclass multiple forms, treating forms as mixins. In this example, BeatleForm subclasses both PersonForm and InstrumentForm (in that order), and its field list includes the fields from the parent classes:It s possible to declaratively remove a Field inherited from a parent class by setting the name of the field to None on the subclass. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/api/#prefixes-for-forms", "para": "You can put several Django forms inside one <form> tag. To give each Form its own namespace, use the prefix keyword argument:The prefix can also be specified on the form class:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/fields/#core-field-arguments", "para": "Each Field class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted:By default, each Field class assumes the value is required, so if you pass an empty value   either None or the empty string (\"\")   then clean() will raise a ValidationError exception:To specify that a field is not required, pass required=False to the Field constructor:If a Field has required=False and you pass clean() an empty value, then clean() will return a normalized empty value rather than raising ValidationError. For CharField, this will be an empty string. For other Field classes, it might be None. (This varies from field to field.)Widgets of required form fields have the required HTML attribute. Set the Form.use_required_attribute attribute to False to disable it. The required attribute isn t included on forms of formsets because the browser validation may not be correct when adding and deleting formsets.The label argument lets you specify the  human-friendly  label for this field. This is used when the Field is displayed in a Form.As explained in  Outputting forms as HTML  above, the default label for a Field is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Specify label if that default behavior doesn t result in an adequate label.Here s a full example Form that implements label for two of its fields. We ve specified auto_id=False to simplify the output:The label_suffix argument lets you override the form s label_suffix on a per-field basis:The initial argument lets you specify the initial value to use when rendering this Field in an unbound Form.To specify dynamic initial data, see the Form.initial parameter.The use-case for this is when you want to display an  empty  form in which a field is initialized to a particular value. For example:You may be thinking, why not just pass a dictionary of the initial values as data when displaying the form? Well, if you do that, you ll trigger validation, and the HTML output will include any validation errors:This is why initial values are only displayed for unbound forms. For bound forms, the HTML output will use the bound data.Also note that initial values are not used as  fallback  data in validation if a particular field s value is not given. initial values are only intended for initial form display:Instead of a constant, you can also pass any callable:The callable will be evaluated only when the unbound form is displayed, not when it is defined.The widget argument lets you specify a Widget class to use when rendering this Field. See Widgets for more information.The help_text argument lets you specify descriptive text for this Field. If you provide help_text, it will be displayed next to the Field when the Field is rendered by one of the convenience Form methods (e.g., as_ul()).Like the model field s help_text, this value isn t HTML-escaped in automatically-generated forms.Here s a full example Form that implements help_text for two of its fields. We ve specified auto_id=False to simplify the output:The error_messages argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override. For example, here is the default error message:And here is a custom error message:In the built-in Field classes section below, each Field defines the error message keys it uses.The validators argument lets you provide a list of validation functions for this field.See the validators documentation for more information.The localize argument enables the localization of form data input, as well as the rendered output.See the format localization documentation for more information.The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won t be editable by users. Even if a user tampers with the field s value submitted to the server, it will be ignored in favor of the value from the form s initial data."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/fields/#checking-if-the-field-data-has-changed", "para": "The has_changed() method is used to determine if the field value has changed from the initial value. Returns True or False.See the Form.has_changed() documentation for more information."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/fields/#built-in-field-classes", "para": "Naturally, the forms library comes with a set of Field classes that represent common validation needs. This section documents each built-in field.For each field, we describe the default widget used if you don t specify widget. We also specify the value returned when you provide an empty value (see the section on required above to understand what that means).NoteSince all Field subclasses have required=True by default, the validation condition here is important. If you want to include a boolean in your form that can be either True or False (e.g. a checked or unchecked checkbox), you must remember to pass in required=False when creating the BooleanField.Has three optional arguments for validation:If provided, these arguments ensure that the string is at most or at least the given length.If True (default), the value will be stripped of leading and trailing whitespace.The value to use to represent  empty . Defaults to an empty string.The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.Takes one extra argument:Either an iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field, or a callable that returns such an iterable. This argument accepts the same formats as the choices argument to a model field. See the model field reference documentation on choices for more details. If the argument is a callable, it is evaluated each time the field s form is initialized. Defaults to an empty list.Just like a ChoiceField, except TypedChoiceField takes two extra arguments, coerce and empty_value.Takes extra arguments:A function that takes one argument and returns a coerced value. Examples include the built-in int, float, bool and other types. Defaults to an identity function. Note that coercion happens after input validation, so it is possible to coerce to a value not present in choices.The value to use to represent  empty.  Defaults to the empty string; None is another common choice here. Note that this value will not be coerced by the function given in the coerce argument, so choose it accordingly.Takes one optional argument:A list of formats used to attempt to convert a string to a valid datetime.date object.If no input_formats argument is provided, the default input formats are:Additionally, if you specify USE_L10N=False in your settings, the following will also be included in the default input formats:See also format localization.Takes one optional argument:A list of formats used to attempt to convert a string to a valid datetime.datetime object.If no input_formats argument is provided, the default input formats are:See also format localization.The max_value and min_value error messages may contain %(limit_value)s, which will be substituted by the appropriate limit. Similarly, the max_digits, max_decimal_places and max_whole_digits error messages may contain %(max)s.Takes four optional arguments:These control the range of values permitted in the field, and should be given as decimal.Decimal values.The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value.The maximum number of decimal places permitted.Accepts any format understood by parse_duration().Has two optional arguments for validation, max_length and min_length. If provided, these arguments ensure that the string is at most or at least the given length.Has two optional arguments for validation, max_length and allow_empty_file. If provided, these ensure that the file name is at most the given length, and that validation will succeed even if the file content is empty.To learn more about the UploadedFile object, see the file uploads documentation.When you use a FileField in a form, you must also remember to bind the file data to the form.The max_length error refers to the length of the filename. In the error message for that key, %(max)d will be replaced with the maximum filename length and %(length)d will be replaced with the current filename length.The field allows choosing from files inside a certain directory. It takes five extra arguments; only path is required:The absolute path to the directory whose contents you want listed. This directory must exist.If False (the default) only the direct contents of path will be offered as choices. If True, the directory will be descended into recursively and all descendants will be listed as choices.A regular expression pattern; only files with names matching this expression will be allowed as choices.Optional.  Either True or False.  Default is True.  Specifies whether files in the specified location should be included.  Either this or allow_folders must be True.Optional.  Either True or False.  Default is False.  Specifies whether folders in the specified location should be included.  Either this or allow_files must be True.Takes two optional arguments for validation, max_value and min_value. These control the range of values permitted in the field.Using an ImageField requires that Pillow is installed with support for the image formats you use. If you encounter a corrupt image error when you upload an image, it usually means that Pillow doesn t understand its format. To fix this, install the appropriate library and reinstall Pillow.When you use an ImageField on a form, you must also remember to bind the file data to the form.After the field has been cleaned and validated, the UploadedFile object will have an additional image attribute containing the Pillow Image instance used to check if the file was a valid image. Also, UploadedFile.content_type will be updated with the image s content type if Pillow can determine it, otherwise it will be set to None.The max_value and min_value error messages may contain %(limit_value)s, which will be substituted by the appropriate limit.Takes two optional arguments for validation:These control the range of values permitted in the field.A field containing either an IPv4 or an IPv6 address.The IPv6 address normalization follows RFC 4291#section-2.2 section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like ::ffff:192.0.2.0. For example, 2001:0::0:01 would be normalized to 2001::1, and ::ffff:0a0a:0a0a to ::ffff:10.10.10.10. All characters are converted to lowercase.Takes two optional arguments:Limits valid inputs to the specified protocol. Accepted values are both (default), IPv4 or IPv6. Matching is case insensitive.Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'.The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.Takes one extra required argument, choices, as for ChoiceField.Just like a MultipleChoiceField, except TypedMultipleChoiceField takes two extra arguments, coerce and empty_value.The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.Takes two extra arguments, coerce and empty_value, as for TypedChoiceField.Takes one required argument:A regular expression specified either as a string or a compiled regular expression object.Also takes max_length, min_length, and strip, which work just as they do for CharField.Defaults to False. If enabled, stripping will be applied before the regex validation.This field is intended for use in representing a model SlugField in forms.Takes an optional parameter:A boolean instructing the field to accept Unicode letters in addition to ASCII letters. Defaults to False.Takes one optional argument:A list of formats used to attempt to convert a string to a valid datetime.time object.If no input_formats argument is provided, the default input formats are:Takes the following optional arguments:These are the same as CharField.max_length and CharField.min_length.This field will accept any string format accepted as the hex argument to the UUID constructor."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/fields/#slightly-complex-built-in-field-classes", "para": "Takes one extra required argument:The list of fields that should be used to validate the field s value (in the order in which they are provided).Aggregates the logic of multiple fields that together produce a single value.This field is abstract and must be subclassed. In contrast with the single-value fields, subclasses of MultiValueField must not implement clean() but instead - implement compress().Takes one extra required argument:A tuple of fields whose values are cleaned and subsequently combined into a single value.  Each value of the field is cleaned by the corresponding field in fields   the first value is cleaned by the first field, the second value is cleaned by the second field, etc. Once all fields are cleaned, the list of clean values is combined into a single value by compress().Also takes some optional arguments:Defaults to True, in which case a required validation error will be raised if no value is supplied for any field.When set to False, the Field.required attribute can be set to False for individual fields to make them optional. If no value is supplied for a required field, an incomplete validation error will be raised.A default incomplete error message can be defined on the MultiValueField subclass, or different messages can be defined on each individual field. For example:Must be a subclass of django.forms.MultiWidget. Default value is TextInput, which probably is not very useful in this case.Takes a list of valid values and returns  a  compressed  version of those values   in a single value. For example, SplitDateTimeField is a subclass which combines a time field and a date field into a datetime object.This method must be implemented in the subclasses.Takes two optional arguments:A list of formats used to attempt to convert a string to a valid datetime.date object.If no input_date_formats argument is provided, the default input formats for DateField are used.A list of formats used to attempt to convert a string to a valid datetime.time object.If no input_time_formats argument is provided, the default input formats for TimeField are used."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/fields/#fields-which-handle-relationships", "para": "Two fields are available for representing relationships between models: ModelChoiceField and ModelMultipleChoiceField.  Both of these fields require a single queryset parameter that is used to create the choices for the field.  Upon form validation, these fields will place either one model object (in the case of ModelChoiceField) or multiple model objects (in the case of ModelMultipleChoiceField) into the cleaned_data dictionary of the form.For more complex uses, you can specify queryset=None when declaring the form field and then populate the queryset in the form s __init__() method:Allows the selection of a single model object, suitable for representing a foreign key. Note that the default widget for ModelChoiceField becomes impractical when the number of entries increases. You should avoid using it for more than 100 items.A single argument is required:A QuerySet of model objects from which the choices for the field are derived and which is used to validate the user s selection. It s evaluated when the form is rendered.ModelChoiceField also takes two optional arguments:By default the <select> widget used by ModelChoiceField will have an empty choice at the top of the list. You can change the text of this label (which is \"---------\" by default) with the empty_label attribute, or you can disable the empty label entirely by setting empty_label to None:Note that if a ModelChoiceField is required and has a default initial value, no empty choice is created (regardless of the value of empty_label).This optional argument is used to specify the field to use as the value of the choices in the field s widget. Be sure it s a unique field for the model, otherwise the selected value could match more than one object. By default it is set to None, in which case the primary key of each object will be used. For example:would yield:and:would yield:The __str__() method of the model will be called to generate string representations of the objects for use in the field s choices. To provide customized representations, subclass ModelChoiceField and override label_from_instance. This method will receive a model object and should return a string suitable for representing it. For example:The invalid_choice message may contain %(value)s and the invalid_pk_value message may contain %(pk)s, which will be substituted by the appropriate values.Allows the selection of one or more model objects, suitable for representing a many-to-many relation. As with ModelChoiceField, you can use label_from_instance to customize the object representations.A single argument is required:Same as ModelChoiceField.queryset.Takes one optional argument:Same as ModelChoiceField.to_field_name."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/fields/#creating-custom-fields", "para": "If the built-in Field classes don t meet your needs, you can easily create custom Field classes. To do this, just create a subclass of django.forms.Field. Its only requirements are that it implement a clean() method and that its __init__() method accept the core arguments mentioned above (required, label, initial, widget, help_text).You can also customize how a field will be accessed by overriding get_bound_field()."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/widgets/#specifying-widgets", "para": "Whenever you specify a field on a form, Django will use a default widget that is appropriate to the type of data that is to be displayed. To find which widget is used on which field, see the documentation about Built-in Field classes.However, if you want to use a different widget for a field, you can just use the widget argument on the field definition. For example:This would specify a form with a comment that uses a larger Textarea widget, rather than the default TextInput widget."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/widgets/#setting-arguments-for-widgets", "para": "Many widgets have optional extra arguments; they can be set when defining the widget on the field. In the following example, the years attribute is set for a SelectDateWidget:See the Built-in widgets for more information about which widgets are available and which arguments they accept."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/widgets/#widgets-inheriting-from-the-select-widget", "para": "Widgets inheriting from the Select widget deal with choices. They present the user with a list of options to choose from. The different widgets present this choice differently; the Select widget itself uses a <select> HTML list representation, while RadioSelect uses radio buttons.Select widgets are used by default on ChoiceField fields. The choices displayed on the widget are inherited from the ChoiceField and changing ChoiceField.choices will update Select.choices. For example:Widgets which offer a choices attribute can however be used with fields which are not based on choice   such as a CharField   but it is recommended to use a ChoiceField-based field when the choices are inherent to the model and not just the representational widget."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/widgets/#customizing-widget-instances", "para": "When Django renders a widget as HTML, it only renders very minimal markup - Django doesn t add class names, or any other widget-specific attributes. This means, for example, that all TextInput widgets will appear the same on your Web pages.There are two ways to customize widgets: per widget instance and per widget class.If you want to make one widget instance look different from another, you will need to specify additional attributes at the time when the widget object is instantiated and assigned to a form field (and perhaps add some rules to your CSS files).For example, take the following simple form:This form will include three default TextInput widgets, with default rendering   no CSS class, no extra attributes. This means that the input boxes provided for each widget will be rendered exactly the same:On a real Web page, you probably don t want every widget to look the same. You might want a larger input element for the comment, and you might want the  name  widget to have some special CSS class. It is also possible to specify the  type  attribute to take advantage of the new HTML5 input types.  To do this, you use the Widget.attrs argument when creating the widget:You can also modify a widget in the form definition:Or if the field isn t declared directly on the form (such as model form fields), you can use the Form.fields attribute:Django will then include the extra attributes in the rendered output:You can also set the HTML id using attrs. See BoundField.id_for_label for an example.With widgets, it is possible to add assets (css and javascript) and more deeply customize their appearance and behavior.In a nutshell, you will need to subclass the widget and either define a  Media  inner class or create a  media  property.These methods involve somewhat advanced Python programming and are described in detail in the Form Assets topic guide."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/widgets/#base-widget-classes", "para": "Base widget classes Widget and MultiWidget are subclassed by all the built-in widgets and may serve as a foundation for custom widgets.This abstract class cannot be rendered, but provides the basic attribute attrs.  You may also implement or override the render() method on custom widgets.A dictionary containing HTML attributes to be set on the rendered widget.If you assign a value of True or False to an attribute, it will be rendered as an HTML5 boolean attribute:An attribute that defaults to True. If set to False, the microseconds part of datetime and time values will be set to 0.Cleans and returns a value for use in the widget template. value isn t guaranteed to be valid input, therefore subclass implementations should program defensively.Returns a dictionary of values to use when rendering the widget template. By default, the dictionary contains a single key, 'widget', which is a dictionary representation of the widget containing the following keys:Widget subclasses can provide custom context values by overriding this method.Returns the HTML ID attribute of this widget for use by a <label>, given the ID of the field. Returns None if an ID isn t available.This hook is necessary because some widgets have multiple HTML elements and, thus, multiple IDs. In that case, this method should return an ID value that corresponds to the first ID in the widget s tags.Renders a widget to HTML using the given renderer. If renderer is None, the renderer from the FORM_RENDERER setting is used.Given a dictionary of data and this widget s name, returns the value of this widget. files may contain data coming from request.FILES. Returns None if a value wasn t provided. Note also that value_from_datadict may be called more than once during handling of form data, so if you customize it and add expensive processing, you should implement some caching mechanism yourself.Given data and files dictionaries and this widget s name, returns whether or not there s data or files for the widget.The method s result affects whether or not a field in a model form falls back to its default.Special cases are CheckboxInput, CheckboxSelectMultiple, and SelectMultiple, which always return False because an unchecked checkbox and unselected <select multiple> don t appear in the data of an HTML form submission, so it s unknown whether or not the user submitted a value.Given a form field s initial value, returns whether or not the widget can be rendered with the required HTML attribute. Forms use this method along with Field.required and Form.use_required_attribute to determine whether or not to display the required attribute for each field.By default, returns False for hidden widgets and True otherwise. Special cases are ClearableFileInput, which returns False when initial is not set, and CheckboxSelectMultiple, which always returns False because browser validation would require all checkboxes to be checked instead of at least one.Override this method in custom widgets that aren t compatible with browser validation. For example, a WSYSIWG text editor widget backed by a hidden textarea element may want to always return False to avoid browser validation on the hidden field.A widget that is composed of multiple widgets. MultiWidget works hand in hand with the MultiValueField.MultiWidget has one required argument:An iterable containing the widgets needed.And one required method:This method takes a single  compressed  value from the field and returns a list of  decompressed  values. The input value can be assumed valid, but not necessarily non-empty.This method must be implemented by the subclass, and since the value may be empty, the implementation must be defensive.The rationale behind  decompression  is that it is necessary to  split  the combined value of the form field into the values for each widget.An example of this is how SplitDateTimeWidget turns a datetime value into a list with date and time split into two separate values:TipNote that MultiValueField has a complementary method compress() with the opposite responsibility - to combine cleaned values of all member fields into one.It provides some custom context:In addition to the 'widget' key described in Widget.get_context(), MultiValueWidget adds a widget['subwidgets'] key.These can be looped over in the widget template:Here s an example widget which subclasses MultiWidget to display a date with the day, month, and year in different select boxes. This widget is intended to be used with a DateField rather than a MultiValueField, thus we have implemented value_from_datadict():The constructor creates several Select widgets in a tuple. The super class uses this tuple to setup the widget.The required method decompress() breaks up a datetime.date value into the day, month, and year values corresponding to each widget. Note how the method handles the case where value is None.The default implementation of value_from_datadict() returns a list of values corresponding to each Widget.  This is appropriate when using a MultiWidget with a MultiValueField, but since we want to use this widget with a DateField which takes a single value, we have overridden this method to combine the data of all the subwidgets into a datetime.date. The method extracts data from the POST dictionary and constructs and validates the date. If it is valid, we return the string, otherwise, we return an empty string which will cause form.is_valid to return False."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/widgets/#built-in-widgets", "para": "Django provides a representation of all the basic HTML widgets, plus some commonly used groups of widgets in the django.forms.widgets module, including the input of text, various checkboxes and selectors, uploading files, and handling of multi-valued input.These widgets make use of the HTML elements input and textarea.Beware that not all browsers support entering localized numbers in number input types. Django itself avoids using them for fields having their localize property set to True.Takes one optional argument:Determines whether the widget will have a value filled in when the form is re-displayed after a validation error (default is False).Note that there also is a MultipleHiddenInput widget that encapsulates a set of hidden input elements.Takes same arguments as TextInput, with one more optional argument:The format in which this field s initial value will be displayed.If no format argument is provided, the default format is the first format found in DATE_INPUT_FORMATS and respects Format localization.Takes same arguments as TextInput, with one more optional argument:The format in which this field s initial value will be displayed.If no format argument is provided, the default format is the first format found in DATETIME_INPUT_FORMATS and respects Format localization.By default, the microseconds part of the time value is always set to 0. If microseconds are required, use a subclass with the supports_microseconds attribute set to True.Takes same arguments as TextInput, with one more optional argument:The format in which this field s initial value will be displayed.If no format argument is provided, the default format is the first format found in TIME_INPUT_FORMATS and respects Format localization.For the treatment of microseconds, see DateTimeInput.These widgets make use of the HTML elements <select>, <input type=\"checkbox\">, and <input type=\"radio\">.Widgets that render multiple choices have an option_template_name attribute that specifies the template used to render each choice. For example, for the Select widget, select_option.html renders the <option> for a <select>.Takes one optional argument:A callable that takes the value of the CheckboxInput and returns True if the checkbox should be checked for that value.This attribute is optional when the form field does not have a choices attribute. If it does, it will override anything you set here when the attribute is updated on the Field.Select widget with options  Unknown ,  Yes  and  No Similar to Select, but allows multiple selection: <select multiple>...</select>Similar to Select, but rendered as a list of radio buttons within <li> tags:For more granular control over the generated markup, you can loop over the radio buttons in the template. Assuming a form myform with a field beatles that uses a RadioSelect as its widget:This would generate the following HTML:That included the <label> tags. To get more granular, you can use each radio button s tag, choice_label and id_for_label attributes. For example, this template  will result in the following HTML:If you decide not to loop over the radio buttons   e.g., if your template simply includes {{ myform.beatles }}   they ll be output in a <ul> with <li> tags, as above.The outer <ul> container receives the id attribute of the widget, if defined, or BoundField.auto_id otherwise.When looping over the radio buttons, the label and input tags include for and id attributes, respectively. Each radio button has an id_for_label attribute to output the element s ID.Similar to SelectMultiple, but rendered as a list of checkboxes:The outer <ul> container receives the id attribute of the widget, if defined, or BoundField.auto_id otherwise.Like RadioSelect, you can loop over the individual checkboxes for the widget s choices. Unlike RadioSelect, the checkboxes won t include the required HTML attribute if the field is required because browser validation would require all checkboxes to be checked instead of at least one.When looping over the checkboxes, the label and input tags include for and id attributes, respectively. Each checkbox has an id_for_label attribute to output the element s ID.A widget that handles multiple hidden widgets for fields that have a list of values.This attribute is optional when the form field does not have a choices attribute. If it does, it will override anything you set here when the attribute is updated on the Field.Wrapper (using MultiWidget) around two widgets: DateInput for the date, and TimeInput for the time. Must be used with SplitDateTimeField rather than DateTimeField.SplitDateTimeWidget has several optional arguments:Similar to DateInput.formatSimilar to TimeInput.formatSimilar to Widget.attrs. A dictionary containing HTML attributes to be set on the rendered DateInput and TimeInput widgets, respectively. If these attributes aren t set, Widget.attrs is used instead.Similar to SplitDateTimeWidget, but uses HiddenInput for both date and time.Wrapper around three Select widgets: one each for month, day, and year.Takes several optional arguments:An optional list/tuple of years to use in the  year  select box. The default is a list containing the current year and the next 9 years.An optional dict of months to use in the  months  select box.The keys of the dict correspond to the month number (1-indexed) and the values are the displayed months:If the DateField is not required, SelectDateWidget will have an empty choice at the top of the list (which is --- by default). You can change the text of this label with the empty_label attribute. empty_label can be a string, list, or tuple. When a string is used, all select boxes will each have an empty choice with this label. If empty_label is a list or tuple of 3 string elements, the select boxes will have their own custom label. The labels should be in this order ('year_label', 'month_label', 'day_label')."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/modelforms/#modelform", "para": "If you re building a database-driven app, chances are you ll have forms that map closely to Django models. For instance, you might have a BlogComment model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the field types in your form, because you ve already defined the fields in your model.For this reason, Django provides a helper class that lets you create a Form class from a Django model.For example:The generated Form class will have a form field for every model field specified, in the order specified in the fields attribute.Each model field has a corresponding default form field. For example, a CharField on a model is represented as a CharField on a form. A model ManyToManyField is represented as a MultipleChoiceField. Here is the full list of conversions:As you might expect, the ForeignKey and ManyToManyField model field types are special cases:In addition, each generated form field has attributes set as follows:Finally, note that you can override the form field used for a given model field. See Overriding the default fields below.Consider this set of models:With these models, the ModelForm subclasses above would be roughly equivalent to this (the only difference being the save() method, which we ll discuss in a moment.):There are two main steps involved in validating a ModelForm:Just like normal form validation, model form validation is triggered implicitly when calling is_valid() or accessing the errors attribute and explicitly when calling full_clean(), although you will typically not use the latter method in practice.Model validation (Model.full_clean()) is triggered from within the form validation step, right after the form s clean() method is called.WarningThe cleaning process modifies the model instance passed to the ModelForm constructor in various ways. For instance, any date fields on the model are converted into actual date objects. Failed validation may leave the underlying model instance in an inconsistent state and therefore it s not recommended to reuse it.You can override the clean() method on a model form to provide additional validation in the same way you can on a normal form.A model form instance attached to a model object will contain an instance attribute that gives its methods access to that specific model instance.WarningThe ModelForm.clean() method sets a flag that makes the model validation step validate the uniqueness of model fields that are marked as unique, unique_together or unique_for_date|month|year.If you would like to override the clean() method and maintain this validation, you must call the parent class s clean() method.As part of the validation process, ModelForm will call the clean() method of each field on your model that has a corresponding field on your form. If you have excluded any model fields, validation will not be run on those fields. See the form validation documentation for more on how field cleaning and validation work.The model s clean() method will be called before any uniqueness checks are made. See Validating objects for more information on the model s clean() hook.Error messages defined at the form field level or at the form Meta level always take precedence over the error messages defined at the model field level.Error messages  defined on model fields are only used when the ValidationError is raised during the model validation step and no corresponding error messages are defined at the form level.You can override the error messages from NON_FIELD_ERRORS raised by model validation by adding the NON_FIELD_ERRORS key to the error_messages dictionary of the ModelForm s inner Meta class:Every ModelForm also has a save() method. This method creates and saves a database object from the data bound to the form. A subclass of ModelForm can accept an existing model instance as the keyword argument instance; if this is supplied, save() will update that instance. If it s not supplied, save() will create a new instance of the specified model:Note that if the form hasn t been validated, calling save() will do so by checking form.errors. A ValueError will be raised if the data in the form doesn t validate   i.e., if form.errors evaluates to True.If an optional field doesn t appear in the form s data, the resulting model instance uses the model field default, if there is one, for that field. This behavior doesn t apply to fields that use CheckboxInput, CheckboxSelectMultiple, or SelectMultiple (or any custom widget whose value_omitted_from_data() method always returns False) since an unchecked checkbox and unselected <select multiple> don t appear in the data of an HTML form submission. Use a custom form field or widget if you re designing an API and want the default fallback behavior for a field that uses one of these widgets.This save() method accepts an optional commit keyword argument, which accepts either True or False. If you call save() with commit=False, then it will return an object that hasn t yet been saved to the database. In this case, it s up to you to call save() on the resulting model instance. This is useful if you want to do custom processing on the object before saving it, or if you want to use one of the specialized model saving options. commit is True by default.Another side effect of using commit=False is seen when your model has a many-to-many relation with another model. If your model has a many-to-many relation and you specify commit=False when you save a form, Django cannot immediately save the form data for the many-to-many relation. This is because it isn t possible to save many-to-many data for an instance until the instance exists in the database.To work around this problem, every time you save a form using commit=False, Django adds a save_m2m() method to your ModelForm subclass. After you ve manually saved the instance produced by the form, you can invoke save_m2m() to save the many-to-many form data. For example:Calling save_m2m() is only required if you use save(commit=False). When you use a simple save() on a form, all data   including many-to-many data   is saved without the need for any additional method calls. For example:Other than the save() and save_m2m() methods, a ModelForm works exactly the same way as any other forms form. For example, the is_valid() method is used to check for validity, the is_multipart() method is used to determine whether a form requires multipart file upload (and hence whether request.FILES must be passed to the form), etc. See Binding uploaded files to a form for more information.It is strongly recommended that you explicitly set all fields that should be edited in the form using the fields attribute. Failure to do so can easily lead to security problems when a form unexpectedly allows a user to set certain fields, especially when new fields are added to a model. Depending on how the form is rendered, the problem may not even be visible on the web page.The alternative approach would be to include all fields automatically, or blacklist only some. This fundamental approach is known to be much less secure and has led to serious exploits on major websites (e.g. GitHub).There are, however, two shortcuts available for cases where you can guarantee these security concerns do not apply to you:Set the fields attribute to the special value '__all__' to indicate that all fields in the model should be used. For example:Set the exclude attribute of the ModelForm s inner Meta class to a list of fields to be excluded from the form.For example:Since the Author model has the 3 fields name, title and birth_date, this will result in the fields name and birth_date being present on the form.If either of these are used, the order the fields appear in the form will be the order the fields are defined in the model, with ManyToManyField instances appearing last.In addition, Django applies the following rule: if you set editable=False on the model field, any form created from the model via ModelForm will not include that field.NoteAny fields not included in a form by the above logic will not be set by the form s save() method. Also, if you manually add the excluded fields back to the form, they will not be initialized from the model instance.Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for the missing fields, any attempt to save() a ModelForm with missing fields will fail.  To avoid this failure, you must instantiate your model with initial values for the missing, but required fields:Alternatively, you can use save(commit=False) and manually set any extra required fields:See the section on saving forms for more details on using save(commit=False).The default field types, as described in the Field types table above, are sensible defaults. If you have a DateField in your model, chances are you d want that to be represented as a DateField in your form. But ModelForm gives you the flexibility of changing the form field for a given model.To specify a custom widget for a field, use the widgets attribute of the inner Meta class. This should be a dictionary mapping field names to widget classes or instances.For example, if you want the CharField for the name attribute of Author to be represented by a <textarea> instead of its default <input type=\"text\">, you can override the field s widget:The widgets dictionary accepts either widget instances (e.g., Textarea(...)) or classes (e.g., Textarea).Similarly, you can specify the labels, help_texts and error_messages attributes of the inner Meta class if you want to further customize a field.For example if you wanted to customize the wording of all user facing strings for the name field:You can also specify field_classes to customize the type of fields instantiated by the form.For example, if you wanted to use MySlugFormField for the slug field, you could do the following:Finally, if you want complete control over of a field   including its type, validators, required, etc.   you can do this by declaratively specifying fields like you would in a regular Form.If you want to specify a field s validators, you can do so by defining the field declaratively and setting its validators parameter:NoteWhen you explicitly instantiate a form field like this, it is important to understand how ModelForm and regular Form are related.ModelForm is a regular Form which can automatically generate certain fields. The fields that are automatically generated depend on the content of the Meta class and on which fields have already been defined declaratively. Basically, ModelForm will only generate fields that are missing from the form, or in other words, fields that weren t defined declaratively.Fields defined declaratively are left as-is, therefore any customizations made to Meta attributes such as widgets, labels, help_texts, or error_messages are ignored; these only apply to fields that are generated automatically.Similarly, fields defined declaratively do not draw their attributes like max_length or required from the corresponding model. If you want to maintain the behavior specified in the model, you must set the relevant arguments explicitly when declaring the form field.For example, if the Article model looks like this:and you want to do some custom validation for headline, while keeping the blank and help_text values as specified, you might define ArticleForm like this:You must ensure that the type of the form field can be used to set the contents of the corresponding model field. When they are not compatible, you will get a ValueError as no implicit conversion takes place.See the form field documentation for more information on fields and their arguments.By default, the fields in a ModelForm will not localize their data. To enable localization for fields, you can use the localized_fields attribute on the Meta class.If localized_fields is set to the special value '__all__', all fields will be localized.As with basic forms, you can extend and reuse ModelForms by inheriting them. This is useful if you need to declare extra fields or extra methods on a parent class for use in a number of forms derived from models. For example, using the previous ArticleForm class:This creates a form that behaves identically to ArticleForm, except there s some extra validation and cleaning for the pub_date field.You can also subclass the parent s Meta inner class if you want to change the Meta.fields or Meta.exclude lists:This adds the extra method from the EnhancedArticleForm and modifies the original ArticleForm.Meta to remove one field.There are a couple of things to note, however.Normal Python name resolution rules apply. If you have multiple base classes that declare a Meta inner class, only the first one will be used. This means the child s Meta, if it exists, otherwise the Meta of the first parent, etc.It s possible to inherit from both Form and ModelForm simultaneously, however, you must ensure that ModelForm appears first in the MRO. This is because these classes rely on different metaclasses and a class can only have one metaclass.It s possible to declaratively remove a Field inherited from a parent class by setting the name to be None on the subclass.You can only use this technique to opt out from a field defined declaratively by a parent class; it won t prevent the ModelForm metaclass from generating a default field. To opt-out from default fields, see Selecting the fields to use.As with regular forms, it s possible to specify initial data for forms by specifying an initial parameter when instantiating the form. Initial values provided this way will override both initial values from the form field and values from an attached model instance. For example:You can create forms from a given model using the standalone function modelform_factory(), instead of using a class definition. This may be more convenient if you do not have many customizations to make:This can also be used to make simple modifications to existing forms, for example by specifying the widgets to be used for a given field:The fields to include can be specified using the fields and exclude keyword arguments, or the corresponding attributes on the ModelForm inner Meta class. Please see the ModelForm Selecting the fields to use documentation.  or enable localization for specific fields:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/modelforms/#model-formsets", "para": "Like regular formsets, Django provides a couple of enhanced formset classes that make it easy to work with Django models. Let s reuse the Author model from above:Using fields restricts the formset to use only the given fields. Alternatively, you can take an  opt-out  approach, specifying which fields to exclude:This will create a formset that is capable of working with the data associated with the Author model. It works just like a regular formset:Notemodelformset_factory() uses formset_factory() to generate formsets. This means that a model formset is just an extension of a basic formset that knows how to interact with a particular model.By default, when you create a formset from a model, the formset will use a queryset that includes all objects in the model (e.g., Author.objects.all()). You can override this behavior by using the queryset argument:Alternatively, you can create a subclass that sets self.queryset in __init__:Then, pass your BaseAuthorFormSet class to the factory function:If you want to return a formset that doesn t include any pre-existing instances of the model, you can specify an empty QuerySet:By default, when you use modelformset_factory, a model form will be created using modelform_factory(). Often, it can be useful to specify a custom model form. For example, you can create a custom model form that has custom validation:Then, pass your model form to the factory function:It is not always necessary to define a custom model form. The modelformset_factory function has several arguments which are passed through to modelform_factory, which are described below.Using the widgets parameter, you can specify a dictionary of values to customize the ModelForm s widget class for a particular field. This works the same way as the widgets dictionary on the inner Meta class of a ModelForm works:Using the localized_fields parameter, you can enable localization for fields in the form.If localized_fields is set to the special value '__all__', all fields will be localized.As with regular formsets, it s possible to specify initial data for forms in the formset by specifying an initial parameter when instantiating the model formset class returned by modelformset_factory(). However, with model formsets, the initial values only apply to extra forms, those that aren t attached to an existing model instance. If the length of initial exceeds the number of extra forms, the excess initial data is ignored. If the extra forms with initial data aren t changed by the user, they won t be validated or saved.As with a ModelForm, you can save the data as a model object. This is done with the formset s save() method:The save() method returns the instances that have been saved to the database. If a given instance s data didn t change in the bound data, the instance won t be saved to the database and won t be included in the return value (instances, in the above example).When fields are missing from the form (for example because they have been excluded), these fields will not be set by the save() method. You can find more information about this restriction, which also holds for regular ModelForms, in Selecting the fields to use.Pass commit=False to return the unsaved model instances:This gives you the ability to attach data to the instances before saving them to the database. If your formset contains a ManyToManyField, you ll also need to call formset.save_m2m() to ensure the many-to-many relationships are saved properly.After calling save(), your model formset will have three new attributes containing the formset s changes:As with regular formsets, you can use the max_num and extra parameters to modelformset_factory() to limit the number of extra forms displayed.max_num does not prevent existing objects from being displayed:Also, extra=0 doesn t prevent creation of new model instances as you can add additional forms with JavaScript or just send additional POST data. Formsets don t yet provide functionality for an  edit only  view that prevents creation of new instances.If the value of max_num is greater than the number of existing related objects, up to extra additional blank forms will be added to the formset, so long as the total number of forms does not exceed max_num:A max_num value of None (the default) puts a high limit on the number of forms displayed (1000). In practice this is equivalent to no limit.Model formsets are very similar to formsets. Let s say we want to present a formset to edit Author model instances:As you can see, the view logic of a model formset isn t drastically different than that of a  normal  formset. The only difference is that we call formset.save() to save the data into the database. (This was described above, in Saving objects in the formset.)Just like with ModelForms, by default the clean() method of a ModelFormSet will validate that none of the items in the formset violate the unique constraints on your model (either unique, unique_together or unique_for_date|month|year).  If you want to override the clean() method on a ModelFormSet and maintain this validation, you must call the parent class s clean method:Also note that by the time you reach this step, individual model instances have already been created for each Form. Modifying a value in form.cleaned_data is not sufficient to affect the saved value. If you wish to modify a value in ModelFormSet.clean() you must modify form.instance:As stated earlier, you can override the default queryset used by the model formset:Note that we pass the queryset argument in both the POST and GET cases in this example.There are three ways to render a formset in a Django template.First, you can let the formset do most of the work:Second, you can manually render the formset, but let the form deal with itself:When you manually render the forms yourself, be sure to render the management form as shown above. See the management form documentation.Third, you can manually render each field:If you opt to use this third method and you don t iterate over the fields with a {% for %} loop, you ll need to render the primary key field. For example, if you were rendering the name and age fields of a model:Notice how we need to explicitly render {{ form.id }}. This ensures that the model formset, in the POST case, will work correctly. (This example assumes a primary key named id. If you ve explicitly defined your own primary key that isn t called id, make sure it gets rendered.)"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/modelforms/#inline-formsets", "para": "Inline formsets is a small abstraction layer on top of model formsets. These simplify the case of working with related objects via a foreign key. Suppose you have these two models:If you want to create a formset that allows you to edit books belonging to a particular author, you could do this:BookFormSet s prefix is 'book_set' (<model name>_set ). If Book s ForeignKey to Author has a related_name, that s used instead.Noteinlineformset_factory() uses modelformset_factory() and marks can_delete=True.See alsoManually rendered can_delete and can_order.When overriding methods on InlineFormSet, you should subclass BaseInlineFormSet rather than BaseModelFormSet.For example, if you want to override clean():See also Overriding clean() on a ModelFormSet.Then when you create your inline formset, pass in the optional argument formset:If your model contains more than one foreign key to the same model, you ll need to resolve the ambiguity manually using fk_name. For example, consider the following model:To resolve this, you can use fk_name to inlineformset_factory():You may want to provide a view that allows a user to edit the related objects of a model. Here s how you can do that:Notice how we pass instance in both the POST and GET cases.inlineformset_factory uses modelformset_factory and passes most of its arguments to modelformset_factory. This means you can use the widgets parameter in much the same way as passing it to modelformset_factory. See Specifying widgets to use in the form with widgets above."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/media/#assets-as-a-static-definition", "para": "The easiest way to define assets is as a static definition. Using this method, the declaration is an inner Media class. The properties of the inner class define the requirements.Here s a simple example:This code defines a CalendarWidget, which will be based on TextInput. Every time the CalendarWidget is used on a form, that form will be directed to include the CSS file pretty.css, and the JavaScript files animations.js and actions.js.This static definition is converted at runtime into a widget property named media. The list of assets for a CalendarWidget instance can be retrieved through this property:Here s a list of all possible Media options. There are no required options.A dictionary describing the CSS files required for various forms of output media.The values in the dictionary should be a tuple/list of file names. See the section on paths for details of how to specify paths to these files.The keys in the dictionary are the output media types. These are the same types accepted by CSS files in media declarations:  all ,  aural ,  braille ,  embossed ,  handheld ,  print ,  projection ,  screen ,  tty  and  tv . If you need to have different stylesheets for different media types, provide a list of CSS files for each output medium. The following example would provide two CSS options   one for the screen, and one for print:If a group of CSS files are appropriate for multiple output media types, the dictionary key can be a comma separated list of output media types. In the following example, TV s and projectors will have the same media requirements:If this last CSS definition were to be rendered, it would become the following HTML:A tuple describing the required JavaScript files. See the section on paths for details of how to specify paths to these files.A boolean defining inheritance behavior for Media declarations.By default, any object using a static Media definition will inherit all the assets associated with the parent widget. This occurs regardless of how the parent defines its own requirements. For example, if we were to extend our basic Calendar widget from the example above:The FancyCalendar widget inherits all the assets from its parent widget. If you don t want Media to be inherited in this way, add an extend=False declaration to the Media declaration:If you require even more control over inheritance, define your assets using a dynamic property. Dynamic properties give you complete control over which files are inherited, and which are not."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/media/#media-as-a-dynamic-property", "para": "If you need to perform some more sophisticated manipulation of asset requirements, you can define the media property directly. This is done by defining a widget property that returns an instance of forms.Media.  The constructor for forms.Media accepts css and js keyword arguments in the same format as that used in a static media definition.For example, the static definition for our Calendar Widget could also be defined in a dynamic fashion:See the section on Media objects for more details on how to construct return values for dynamic media properties."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/media/#paths-in-asset-definitions", "para": "Paths used to specify assets can be either relative or absolute. If a path starts with /, http:// or https://, it will be interpreted as an absolute path, and left as-is. All other paths will be prepended with the value of the appropriate prefix. If the django.contrib.staticfiles app is installed, it will be used to serve assets.Whether or not you use django.contrib.staticfiles,  the STATIC_URL and STATIC_ROOT settings are required to render a complete web page.To find the appropriate prefix to use, Django will check if the STATIC_URL setting is not None and automatically fall back to using MEDIA_URL. For example, if the MEDIA_URL for your site was 'http://uploads.example.com/' and STATIC_URL was None:But if STATIC_URL is 'http://static.example.com/':Or if staticfiles is configured using the ManifestStaticFilesStorage:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/media/#media-objects", "para": "When you interrogate the media attribute of a widget or form, the value that is returned is a forms.Media object. As we have already seen, the string representation of a Media object is the HTML required to include the relevant files in the <head> block of your HTML page.However, Media objects have some other interesting properties.If you only want files of a particular type, you can use the subscript operator to filter out a medium of interest. For example:When you use the subscript operator, the value that is returned is a new Media object   but one that only contains the media of interest.Media objects can also be added together. When two Media objects are added, the resulting Media object contains the union of the assets specified by both:The order in which assets are inserted into the DOM is often important. For example, you may have a script that depends on jQuery. Therefore, combining Media objects attempts to preserve the relative order in which assets are defined in each Media class.For example:Combining Media objects with assets in a conflicting order results in a MediaOrderConflictWarning."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/media/#media-on-forms", "para": "Widgets aren t the only objects that can have media definitions   forms can also define media. The rules for media definitions on forms are the same as the rules for widgets: declarations can be static or dynamic; path and inheritance rules for those declarations are exactly the same.Regardless of whether you define a media declaration, all Form objects have a media property. The default value for this property is the result of adding the media definitions for all widgets that are part of the form:If you want to associate additional assets with a form   for example, CSS for form layout   simply add a Media declaration to the form:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#using-initial-data-with-a-formset", "para": "Initial data is what drives the main usability of a formset. As shown above you can define the number of extra forms. What this means is that you are telling the formset how many additional forms to show in addition to the number of forms it generates from the initial data. Let s take a look at an example:There are now a total of three forms showing above. One for the initial data that was passed in and two extra forms. Also note that we are passing in a list of dictionaries as the initial data.If you use an initial for displaying a formset, you should pass the same initial when processing that formset s submission so that the formset can detect which forms were changed by the user. For example, you might have something like: ArticleFormSet(request.POST, initial=[...]).See alsoCreating formsets from models with model formsets."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#limiting-the-maximum-number-of-forms", "para": "The max_num parameter to formset_factory() gives you the ability to limit the number of forms the formset will display:If the value of max_num is greater than the number of existing items in the initial data, up to extra additional blank forms will be added to the formset, so long as the total number of forms does not exceed max_num. For example, if extra=2 and max_num=2 and the formset is initialized with one initial item, a form for the initial item and one blank form will be displayed.If the number of items in the initial data exceeds max_num, all initial data forms will be displayed regardless of the value of max_num and no extra forms will be displayed. For example, if extra=3 and max_num=1 and the formset is initialized with two initial items, two forms with the initial data will be displayed.A max_num value of None (the default) puts a high limit on the number of forms displayed (1000). In practice this is equivalent to no limit.By default, max_num only affects how many forms are displayed and does not affect validation.  If validate_max=True is passed to the formset_factory(), then max_num will affect validation.  See validate_max."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#formset-validation", "para": "Validation with a formset is almost identical to a regular Form. There is an is_valid method on the formset to provide a convenient way to validate all forms in the formset:We passed in no data to the formset which is resulting in a valid form. The formset is smart enough to ignore extra forms that were not changed. If we provide an invalid article:As we can see, formset.errors is a list whose entries correspond to the forms in the formset. Validation was performed for each of the two forms, and the expected error message appears for the second item.Just like when using a normal Form, each field in a formset s forms may include HTML attributes such as maxlength for browser validation. However, form fields of formsets won t include the required attribute as that validation may be incorrect when adding and deleting forms.To check how many errors there are in the formset, we can use the total_error_count method:We can also check if form data differs from the initial data (i.e. the form was sent without any data):You may have noticed the additional data (form-TOTAL_FORMS, form-INITIAL_FORMS and form-MAX_NUM_FORMS) that was required in the formset s data above. This data is required for the ManagementForm. This form is used by the formset to manage the collection of forms contained in the formset. If you don t provide this management data, an exception will be raised:It is used to keep track of how many form instances are being displayed. If you are adding new forms via JavaScript, you should increment the count fields in this form as well. On the other hand, if you are using JavaScript to allow deletion of existing objects, then you need to ensure the ones being removed are properly marked for deletion by including form-#-DELETE in the POST data. It is expected that all forms are present in the POST data regardless.The management form is available as an attribute of the formset itself. When rendering a formset in a template, you can include all the management data by rendering {{ my_formset.management_form }} (substituting the name of your formset as appropriate).BaseFormSet has a couple of methods that are closely related to the ManagementForm, total_form_count and initial_form_count.total_form_count returns the total number of forms in this formset. initial_form_count returns the number of forms in the formset that were pre-filled, and is also used to determine how many forms are required. You will probably never need to override either of these methods, so please be sure you understand what they do before doing so.BaseFormSet provides an additional attribute empty_form which returns a form instance with a prefix of __prefix__ for easier use in dynamic forms with JavaScript.A formset has a clean method similar to the one on a Form class. This is where you define your own validation that works at the formset level:The formset clean method is called after all the Form.clean methods have been called. The errors will be found using the non_form_errors() method on the formset."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#validating-the-number-of-forms-in-a-formset", "para": "Django provides a couple ways to validate the minimum or maximum number of submitted forms. Applications which need more customizable validation of the number of forms should use custom formset validation.If validate_max=True is passed to formset_factory(), validation will also check that the number of forms in the data set, minus those marked for deletion, is less than or equal to max_num.validate_max=True validates against max_num strictly even if max_num was exceeded because the amount of initial data supplied was excessive.NoteRegardless of validate_max, if the number of forms in a data set exceeds max_num by more than 1000, then the form will fail to validate as if validate_max were set, and additionally only the first 1000 forms above max_num will be validated.  The remainder will be truncated entirely.  This is to protect against memory exhaustion attacks using forged POST requests.If validate_min=True is passed to formset_factory(), validation will also check that the number of forms in the data set, minus those marked for deletion, is greater than or equal to min_num."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#dealing-with-ordering-and-deletion-of-forms", "para": "The formset_factory() provides two optional parameters can_order and can_delete to help with ordering of forms in formsets and deletion of forms from a formset.Default: FalseLets you create a formset with the ability to order:This adds an additional field to each form. This new field is named ORDER and is an forms.IntegerField. For the forms that came from the initial data it automatically assigned them a numeric value. Let s look at what will happen when the user changes these values:Default: FalseLets you create a formset with the ability to select forms for deletion:Similar to can_order this adds a new field to each form named DELETE and is a forms.BooleanField. When data comes through marking any of the delete fields you can access them with deleted_forms:If you are using a ModelFormSet, model instances for deleted forms will be deleted when you call formset.save().If you call formset.save(commit=False), objects will not be deleted automatically.  You ll need to call delete() on each of the formset.deleted_objects to actually delete them:On the other hand, if you are using a plain FormSet, it s up to you to handle formset.deleted_forms, perhaps in your formset s save() method, as there s no general notion of what it means to delete a form."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#adding-additional-fields-to-a-formset", "para": "If you need to add additional fields to the formset this can be easily accomplished. The formset base class provides an add_fields method. You can simply override this method to add your own fields or even redefine the default fields/attributes of the order and deletion fields:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#passing-custom-parameters-to-formset-forms", "para": "Sometimes your form class takes custom parameters, like MyArticleForm. You can pass this parameter when instantiating the formset:The form_kwargs may also depend on the specific form instance. The formset base class provides a get_form_kwargs method. The method takes a single argument - the index of the form in the formset. The index is None for the empty_form:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#customizing-a-formset-s-prefix", "para": "In the rendered HTML, formsets include a prefix on each field s name. By default, the prefix is 'form', but it can be customized using the formset s prefix argument.For example, in the default case, you might see:But with ArticleFormset(prefix='article') that becomes:This is useful if you want to use more than one formset in a view."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#using-a-formset-in-views-and-templates", "para": "Using a formset inside a view is as easy as using a regular Form class. The only thing you will want to be aware of is making sure to use the management form inside the template. Let s look at a sample view:The manage_articles.html template might look like this:However there s a slight shortcut for the above by letting the formset itself deal with the management form:The above ends up calling the as_table method on the formset class.If you manually render fields in the template, you can render can_delete parameter with {{ form.DELETE }}:Similarly, if the formset has the ability to order (can_order=True), it is possible to render it with {{ form.ORDER }}.You are able to use more than one formset in a view if you like. Formsets borrow much of its behavior from forms. With that said you are able to use prefix to prefix formset form field names with a given value to allow more than one formset to be sent to a view without name clashing. Let s take a look at how this might be accomplished:You would then render the formsets as normal. It is important to point out that you need to pass prefix on both the POST and non-POST cases so that it is rendered and processed correctly.Each formset s prefix replaces the default form prefix that s added to each field s name and id HTML attributes."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/validation/#raising-validationerror", "para": "In order to make error messages flexible and easy to override, consider the following guidelines:Provide a descriptive error code to the constructor:Don t coerce variables into the message; use placeholders and the params argument of the constructor:Use mapping keys instead of positional formatting. This enables putting the variables in any order or omitting them altogether when rewriting the message:Wrap the message with gettext to enable translation:Putting it all together:Following these guidelines is particularly necessary if you write reusable forms, form fields, and model fields.While not recommended, if you are at the end of the validation chain (i.e. your form clean() method) and you know you will never need to override your error message you can still opt for the less verbose:The Form.errors.as_data() and Form.errors.as_json() methods greatly benefit from fully featured ValidationErrors (with a code name and a params dictionary).If you detect multiple errors during a cleaning method and wish to signal all of them to the form submitter, it is possible to pass a list of errors to the ValidationError constructor.As above, it is recommended to pass a list of ValidationError instances with codes and params but a list of strings will also work:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/validation/#using-validation-in-practice", "para": "The previous sections explained how validation works in general for forms. Since it can sometimes be easier to put things into place by seeing each feature in use, here are a series of small examples that use each of the previous features.Django s form (and model) fields support use of simple utility functions and classes known as validators. A validator is merely a callable object or function that takes a value and simply returns nothing if the value is valid or raises a ValidationError if not. These can be passed to a field s constructor, via the field s validators argument, or defined on the Field class itself with the default_validators attribute.Simple validators can be used to validate values inside the field, let s have a look at Django s SlugField:As you can see, SlugField is just a CharField with a customized validator that validates that submitted text obeys to some character rules. This can also be done on field definition so:is equivalent to:Common cases such as validating against an email or a regular expression can be handled using existing validator classes available in Django. For example, validators.validate_slug is an instance of a RegexValidator constructed with the first argument being the pattern: ^[-a-zA-Z0-9_]+$. See the section on writing validators to see a list of what is already available and for an example of how to write a validator.Let s first create a custom form field that validates its input is a string containing comma-separated email addresses. The full class looks like this:Every form that uses this field will have these methods run before anything else can be done with the field s data. This is cleaning that is specific to this type of field, regardless of how it is subsequently used.Let s create a simple ContactForm to demonstrate how you d use this field:Simply use MultiEmailField like any other form field. When the is_valid() method is called on the form, the MultiEmailField.clean() method will be run as part of the cleaning process and it will, in turn, call the custom to_python() and validate() methods.Continuing on from the previous example, suppose that in our ContactForm, we want to make sure that the recipients field always contains the address \"fred@example.com\". This is validation that is specific to our form, so we don t want to put it into the general MultiEmailField class. Instead, we write a cleaning method that operates on the recipients field, like so:Suppose we add another requirement to our contact form: if the cc_myself field is True, the subject must contain the word \"help\". We are performing validation on more than one field at a time, so the form s clean() method is a good spot to do this. Notice that we are talking about the clean() method on the form here, whereas earlier we were writing a clean() method on a field. It s important to keep the field and form difference clear when working out where to validate things. Fields are single data points, forms are a collection of fields.By the time the form s clean() method is called, all the individual field clean methods will have been run (the previous two sections), so self.cleaned_data will be populated with any data that has survived so far. So you also need to remember to allow for the fact that the fields you are wanting to validate might not have survived the initial individual field checks.There are two ways to report any errors from this step. Probably the most common method is to display the error at the top of the form. To create such an error, you can raise a ValidationError from the clean() method. For example:In this code, if the validation error is raised, the form will display an error message at the top of the form (normally) describing the problem.The call to super().clean() in the example code ensures that any validation logic in parent classes is maintained. If your form inherits another that doesn t return a cleaned_data dictionary in its clean() method (doing so is optional), then don t assign cleaned_data to the result of the super() call and use self.cleaned_data instead:The second approach for reporting validation errors might involve assigning the error message to one of the fields. In this case, let s assign an error message to both the  subject  and  cc_myself  rows in the form display. Be careful when doing this in practice, since it can lead to confusing form output. We re showing what is possible here and leaving it up to you and your designers to work out what works effectively in your particular situation. Our new code (replacing the previous sample) looks like this:The second argument of add_error() can be a simple string, or preferably an instance of ValidationError. See Raising ValidationError for more details. Note that add_error() automatically removes the field from cleaned_data."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/settings/#the-basics", "para": "A settings file is just a Python module with module-level variables.Here are a couple of example settings:NoteIf you set DEBUG to False, you also need to properly set the ALLOWED_HOSTS setting.Because a settings file is a Python module, the following apply:It doesn t allow for Python syntax errors.It can assign settings dynamically using normal Python syntax. For example:It can import values from other settings files."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/settings/#designating-the-settings", "para": "When you use Django, you have to tell it which settings you re using. Do this by using an environment variable, DJANGO_SETTINGS_MODULE.The value of DJANGO_SETTINGS_MODULE should be in Python path syntax, e.g. mysite.settings. Note that the settings module should be on the Python import search path.When using django-admin, you can either set the environment variable once, or explicitly pass in the settings module each time you run the utility.Example (Unix Bash shell):Example (Windows shell):Use the --settings command-line argument to specify the settings manually:In your live server environment, you ll need to tell your WSGI application what settings file to use. Do that with os.environ:Read the Django mod_wsgi documentation for more information and other common elements to a Django WSGI application."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/settings/#default-settings", "para": "A Django settings file doesn t have to define any settings if it doesn t need to. Each setting has a sensible default value. These defaults live in the module django/conf/global_settings.py.Here s the algorithm Django uses in compiling settings:Note that a settings file should not import from global_settings, because that s redundant.There s an easy way to view which of your settings deviate from the default settings. The command python manage.py diffsettings displays differences between the current settings file and Django s default settings.For more, see the diffsettings documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/settings/#using-settings-in-python-code", "para": "In your Django apps, use settings by importing the object django.conf.settings. Example:Note that django.conf.settings isn t a module   it s an object. So importing individual settings is not possible:Also note that your code should not import from either global_settings or your own settings file. django.conf.settings abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/settings/#altering-settings-at-runtime", "para": "You shouldn t alter settings in your applications at runtime. For example, don t do this in a view:The only place you should assign to settings is in a settings file."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/settings/#security", "para": "Because a settings file contains sensitive information, such as the database password, you should make every attempt to limit access to it. For example, change its file permissions so that only you and your Web server s user can read it. This is especially important in a shared-hosting environment."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/settings/#available-settings", "para": "For a full list of available settings, see the settings reference."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/settings/#creating-your-own-settings", "para": "There s nothing stopping you from creating your own settings, for your own Django apps. Just follow these guidelines:For settings that are sequences, Django itself uses lists, but this is only a convention."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/settings/#using-settings-without-setting-django-settings-module", "para": "In some cases, you might want to bypass the DJANGO_SETTINGS_MODULE environment variable. For example, if you re using the template system by itself, you likely don t want to have to set up an environment variable pointing to a settings module.In these cases, you can configure Django s settings manually. Do this by calling:Example:Pass configure() as many keyword arguments as you d like, with each keyword argument representing a setting and its value. Each argument name should be all uppercase, with the same name as the settings described above. If a particular setting is not passed to configure() and is needed at some later point, Django will use the default setting value.Configuring Django in this fashion is mostly necessary   and, indeed, recommended   when you re using a piece of the framework inside a larger application.Consequently, when configured via settings.configure(), Django will not make any modifications to the process environment variables (see the documentation of TIME_ZONE for why this would normally occur). It s assumed that you re already in full control of your environment in these cases.If you d like default values to come from somewhere other than django.conf.global_settings, you can pass in a module or class that provides the default settings as the default_settings argument (or as the first positional argument) in the call to configure().In this example, default settings are taken from myapp_defaults, and the DEBUG setting is set to True, regardless of its value in myapp_defaults:The following example, which uses myapp_defaults as a positional argument, is equivalent:Normally, you will not need to override the defaults in this fashion. The Django defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely replaces the Django defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in django.conf.settings.global_settings for the full list.If you re not setting the DJANGO_SETTINGS_MODULE environment variable, you must call configure() at some point before using any code that reads settings.If you don t set DJANGO_SETTINGS_MODULE and don t call configure(), Django will raise an ImportError exception the first time a setting is accessed.If you set DJANGO_SETTINGS_MODULE, access settings values somehow, then call configure(), Django will raise a RuntimeError indicating that settings have already been configured. There is a property just for this purpose:For example:Also, it s an error to call configure() more than once, or to call configure() after any setting has been accessed.It boils down to this: Use exactly one of either configure() or DJANGO_SETTINGS_MODULE. Not both, and not neither.If you re using components of Django  standalone    for example, writing a Python script which loads some Django templates and renders them, or uses the ORM to fetch some data   there s one more step you ll need in addition to configuring settings.After you ve either set DJANGO_SETTINGS_MODULE or called configure(), you ll need to call django.setup() to load your settings and populate Django s application registry. For example:Note that calling django.setup() is only necessary if your code is truly standalone. When invoked by your Web server, or through django-admin, Django will handle this for you.django.setup() may only be called once.Therefore, avoid putting reusable application logic in standalone scripts so that you have to import from the script elsewhere in your application. If you can t avoid that, put the call to django.setup() inside an if block:See also"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/settings/#id12", "para": "Here s a list of settings available in Django core and their default values. Settings provided by contrib apps are listed below, followed by a topical index of the core settings. For introductory material, see the settings topic guide.Default: {} (Empty dictionary)A dictionary mapping \"app_label.model_name\" strings to functions that take a model object and return its URL. This is a way of inserting or overriding get_absolute_url() methods on a per-installation basis. Example:The model name used in this setting should be all lowercase, regardless of the case of the actual model class name.Default: [] (Empty list)A list of all the people who get code error notifications. When DEBUG=False and AdminEmailHandler is configured in LOGGING (done by default), Django emails these people the details of exceptions raised in the request/response cycle.Each item in the list should be a tuple of (Full name, email address). Example:Default: [] (Empty list)A list of strings representing the host/domain names that this Django site can serve. This is a security measure to prevent HTTP Host header attacks, which are possible even under many seemingly-safe web server configurations.Values in this list can be fully qualified names (e.g. 'www.example.com'), in which case they will be matched against the request s Host header exactly (case-insensitive, not including port). A value beginning with a period can be used as a subdomain wildcard: '.example.com' will match example.com, www.example.com, and any other subdomain of example.com. A value of '*' will match anything; in this case you are responsible to provide your own validation of the Host header (perhaps in a middleware; if so this middleware must be listed first in MIDDLEWARE).Django also allows the fully qualified domain name (FQDN) of any entries. Some browsers include a trailing dot in the Host header which Django strips when performing host validation.If the Host header (or X-Forwarded-Host if USE_X_FORWARDED_HOST is enabled) does not match any value in this list, the django.http.HttpRequest.get_host() method will raise SuspiciousOperation.When DEBUG is True and ALLOWED_HOSTS is empty, the host is validated against ['localhost', '127.0.0.1', '[::1]'].ALLOWED_HOSTS is also checked when running tests.This validation only applies via get_host(); if your code accesses the Host header directly from request.META you are bypassing this security protection.Default: TrueWhen set to True, if the request URL does not match any of the patterns in the URLconf and it doesn t end in a slash, an HTTP redirect is issued to the same URL with a slash appended. Note that the redirect may cause any data submitted in a POST request to be lost.The APPEND_SLASH setting is only used if CommonMiddleware is installed (see Middleware). See also PREPEND_WWW.Default:A dictionary containing the settings for all caches to be used with Django. It is a nested dictionary whose contents maps cache aliases to a dictionary containing the options for an individual cache.The CACHES setting must configure a default cache; any number of additional caches may also be specified. If you are using a cache backend other than the local memory cache, or you need to define multiple caches, other options will be required. The following cache options are available.Default: '' (Empty string)The cache backend to use. The built-in cache backends are:You can use a cache backend that doesn t ship with Django by setting BACKEND to a fully-qualified path of a cache backend class (i.e. mypackage.backends.whatever.WhateverCache).A string containing a dotted path to a function (or any callable) that defines how to compose a prefix, version and key into a final cache key. The default implementation is equivalent to the function:You may use any key function you want, as long as it has the same argument signature.See the cache documentation for more information.Default: '' (Empty string)A string that will be automatically included (prepended by default) to all cache keys used by the Django server.See the cache documentation for more information.Default: '' (Empty string)The location of the cache to use. This might be the directory for a file system cache, a host and port for a memcache server, or simply an identifying name for a local memory cache. e.g.:Default: NoneExtra parameters to pass to the cache backend. Available parameters vary depending on your cache backend.Some information on available parameters can be found in the cache arguments documentation. For more information, consult your backend module s own documentation.Default: 300The number of seconds before a cache entry is considered stale. If the value of this settings is None, cache entries will not expire.Default: 1The default version number for cache keys generated by the Django server.See the cache documentation for more information.Default: defaultThe cache connection to use for the cache middleware.Default: '' (Empty string)A string which will be prefixed to the cache keys generated by the cache middleware. This prefix is combined with the KEY_PREFIX setting; it does not replace it.See Django s cache framework.Default: 600The default number of seconds to cache a page for the cache middleware.See Django s cache framework.Default: 31449600 (approximately 1 year, in seconds)The age of CSRF cookies, in seconds.The reason for setting a long-lived expiration time is to avoid problems in the case of a user closing a browser or bookmarking a page and then loading that page from a browser cache. Without persistent cookies, the form submission would fail in this case.Some browsers (specifically Internet Explorer) can disallow the use of persistent cookies or can have the indexes to the cookie jar corrupted on disk, thereby causing CSRF protection checks to (sometimes intermittently) fail. Change this setting to None to use session-based CSRF cookies, which keep the cookies in-memory instead of on persistent storage.Default: NoneThe domain to be used when setting the CSRF cookie.  This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection.  It should be set to a string such as \"example.com\" to allow a POST request from a form on one subdomain to be accepted by a view served from another subdomain.Please note that the presence of this setting does not imply that Django s CSRF protection is safe from cross-subdomain attacks by default - please see the CSRF limitations section.Default: FalseWhether to use HttpOnly flag on the CSRF cookie. If this is set to True, client-side JavaScript will not to be able to access the CSRF cookie.Designating the CSRF cookie as HttpOnly doesn t offer any practical protection because CSRF is only to protect against cross-domain attacks. If an attacker can read the cookie via JavaScript, they re already on the same domain as far as the browser knows, so they can do anything they like anyway. (XSS is a much bigger hole than CSRF.)Although the setting offers little practical benefit, it s sometimes required by security auditors.If you enable this and need to send the value of the CSRF token with an AJAX request, your JavaScript must pull the value from a hidden CSRF token form input instead of from the cookie.See SESSION_COOKIE_HTTPONLY for details on HttpOnly.Default: 'csrftoken'The name of the cookie to use for the CSRF authentication token. This can be whatever you want (as long as it s different from the other cookie names in your application). See Cross Site Request Forgery protection.Default: '/'The path set on the CSRF cookie. This should either match the URL path of your Django installation or be a parent of that path.This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own CSRF cookie.Default: 'Lax'The value of the SameSite flag on the CSRF cookie. This flag prevents the cookie from being sent in cross-site requests.See SESSION_COOKIE_SAMESITE for details about SameSite.Default: FalseWhether to use a secure cookie for the CSRF cookie. If this is set to True, the cookie will be marked as  secure , which means browsers may ensure that the cookie is only sent with an HTTPS connection.Default: FalseWhether to store the CSRF token in the user s session instead of in a cookie. It requires the use of django.contrib.sessions.Storing the CSRF token in a cookie (Django s default) is safe, but storing it in the session is common practice in other web frameworks and therefore sometimes demanded by security auditors.Since the default error views require the CSRF token, SessionMiddleware must appear in MIDDLEWARE before any middleware that may raise an exception to trigger an error view (such as PermissionDenied) if you re using CSRF_USE_SESSIONS. See Middleware ordering.Default: 'django.views.csrf.csrf_failure'A dotted path to the view function to be used when an incoming request is rejected by the CSRF protection. The function should have this signature:where reason is a short message (intended for developers or logging, not for end users) indicating the reason the request was rejected. It should return an HttpResponseForbidden.django.views.csrf.csrf_failure() accepts an additional template_name parameter that defaults to '403_csrf.html'. If a template with that name exists, it will be used to render the page.Default: 'HTTP_X_CSRFTOKEN'The name of the request header used for CSRF authentication.As with other HTTP headers in request.META, the header name received from the server is normalized by converting all characters to uppercase, replacing any hyphens with underscores, and adding an 'HTTP_' prefix to the name. For example, if your client sends a 'X-XSRF-TOKEN' header, the setting should be 'HTTP_X_XSRF_TOKEN'.Default: [] (Empty list)A list of hosts which are trusted origins for unsafe requests (e.g. POST). For a secure unsafe request, Django s CSRF protection requires that the request have a Referer header that matches the origin present in the Host header. This prevents, for example, a POST request from subdomain.example.com from succeeding against api.example.com. If you need cross-origin unsafe requests over HTTPS, continuing the example, add \"subdomain.example.com\" to this list. The setting also supports subdomains, so you could add \".example.com\", for example, to allow access from all subdomains of example.com.Default: {} (Empty dictionary)A dictionary containing the settings for all databases to be used with Django. It is a nested dictionary whose contents map a database alias to a dictionary containing the options for an individual database.The DATABASES setting must configure a default database; any number of additional databases may also be specified.The simplest possible settings file is for a single-database setup using SQLite. This can be configured using the following:When connecting to other database backends, such as MySQL, Oracle, or PostgreSQL, additional connection parameters will be required. See the ENGINE setting below on how to specify other database types. This example is for PostgreSQL:The following inner options that may be required for more complex configurations are available:Default: FalseSet this to True to wrap each view in a transaction on this database. See Tying transactions to HTTP requests.Default: TrueSet this to False if you want to disable Django s transaction management and implement your own.Default: '' (Empty string)The database backend to use. The built-in database backends are:You can use a database backend that doesn t ship with Django by setting ENGINE to a fully-qualified path (i.e. mypackage.backends.whatever).Default: '' (Empty string)Which host to use when connecting to the database. An empty string means localhost. Not used with SQLite.If this value starts with a forward slash ('/') and you re using MySQL, MySQL will connect via a Unix socket to the specified socket. For example:If you re using MySQL and this value doesn t start with a forward slash, then this value is assumed to be the host.If you re using PostgreSQL, by default (empty HOST), the connection to the database is done through UNIX domain sockets ( local  lines in pg_hba.conf). If your UNIX domain socket is not in the standard location, use the same value of unix_socket_directory from postgresql.conf. If you want to connect through TCP sockets, set HOST to  localhost  or  127.0.0.1  ( host  lines in pg_hba.conf). On Windows, you should always define HOST, as UNIX domain sockets are not available.Default: '' (Empty string)The name of the database to use. For SQLite, it s the full path to the database file. When specifying the path, always use forward slashes, even on Windows (e.g. C:/homes/user/mysite/sqlite3.db).Default: 0The lifetime of a database connection, in seconds. Use 0 to close database connections at the end of each request   Django s historical behavior   and None for unlimited persistent connections.Default: {} (Empty dictionary)Extra parameters to use when connecting to the database. Available parameters vary depending on your database backend.Some information on available parameters can be found in the Database Backends documentation. For more information, consult your backend module s own documentation.Default: '' (Empty string)The password to use when connecting to the database. Not used with SQLite.Default: '' (Empty string)The port to use when connecting to the database. An empty string means the default port. Not used with SQLite.Default: NoneA string representing the time zone for datetimes stored in this database (assuming that it doesn t support time zones) or None. This inner option of the DATABASES setting accepts the same values as the general TIME_ZONE setting.This allows interacting with third-party databases that store datetimes in local time rather than UTC. To avoid issues around DST changes, you shouldn t set this option for databases managed by Django.When USE_TZ is True and the database doesn t support time zones (e.g. SQLite, MySQL, Oracle), Django reads and writes datetimes in local time according to this option if it is set and in UTC if it isn t.When USE_TZ is True and the database supports time zones (e.g. PostgreSQL), it is an error to set this option.When USE_TZ is False, it is an error to set this option.Default: FalseSet this to True if you want to disable the use of server-side cursors with QuerySet.iterator(). Transaction pooling and server-side cursors describes the use case.This is a PostgreSQL-specific setting.Default: '' (Empty string)The username to use when connecting to the database. Not used with SQLite.Default: {} (Empty dictionary)A dictionary of settings for test databases; for more details about the creation and use of test databases, see The test database.Here s an example with a test database configuration:The following keys in the TEST dictionary are available:Default: NoneThe character set encoding used to create the test database. The value of this string is passed directly through to the database, so its format is backend-specific.Supported by the PostgreSQL (postgresql) and MySQL (mysql) backends.Default: NoneThe collation order to use when creating the test database. This value is passed directly to the backend, so its format is backend-specific.Only supported for the mysql backend (see the MySQL manual for details).Default: ['default'], for all databases other than default, which has no dependencies.The creation-order dependencies of the database. See the documentation on controlling the creation order of test databases for details.Default: NoneThe alias of the database that this database should mirror during testing.This setting exists to allow for testing of primary/replica (referred to as master/slave by some databases) configurations of multiple databases. See the documentation on testing primary/replica configurations for details.Default: NoneThe name of database to use when running the test suite.If the default value (None) is used with the SQLite database engine, the tests will use a memory resident database. For all other database engines the test database will use the name 'test_' + DATABASE_NAME.See The test database.Boolean value to control whether or not the default test runner serializes the database into an in-memory JSON string before running tests (used to restore the database state between tests if you don t have transactions). You can set this to False to speed up creation time if you don t have any test classes with serialized_rollback=True.This is a PostgreSQL-specific setting.The name of a template (e.g. 'template0') from which to create the test database.Default: TrueThis is an Oracle-specific setting.If it is set to False, the test tablespaces won t be automatically created at the beginning of the tests or dropped at the end.Default: TrueThis is an Oracle-specific setting.If it is set to False, the test user won t be automatically created at the beginning of the tests and dropped at the end.Default: NoneThis is an Oracle-specific setting.The username to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use 'test_' + USER.Default: NoneThis is an Oracle-specific setting.The password to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will generate a random password.Default: FalseThis is an Oracle-specific setting.If set to True, Oracle Managed Files (OMF) tablespaces will be used. DATAFILE and DATAFILE_TMP will be ignored.Default: NoneThis is an Oracle-specific setting.The name of the tablespace that will be used when running tests. If not provided, Django will use 'test_' + USER.Default: NoneThis is an Oracle-specific setting.The name of the temporary tablespace that will be used when running tests. If not provided, Django will use 'test_' + USER + '_temp'.Default: NoneThis is an Oracle-specific setting.The name of the datafile to use for the TBLSPACE. If not provided, Django will use TBLSPACE + '.dbf'.Default: NoneThis is an Oracle-specific setting.The name of the datafile to use for the TBLSPACE_TMP. If not provided, Django will use TBLSPACE_TMP + '.dbf'.Default: '500M'This is an Oracle-specific setting.The maximum size that the DATAFILE is allowed to grow to.Default: '500M'This is an Oracle-specific setting.The maximum size that the DATAFILE_TMP is allowed to grow to.Default: '50M'This is an Oracle-specific setting.The initial size of the DATAFILE.Default: '50M'This is an Oracle-specific setting.The initial size of the DATAFILE_TMP.Default: '25M'This is an Oracle-specific setting.The amount by which the DATAFILE is extended when more space is required.Default: '25M'This is an Oracle-specific setting.The amount by which the DATAFILE_TMP is extended when more space is required.Default: 2621440 (i.e. 2.5 MB).The maximum size in bytes that a request body may be before a SuspiciousOperation (RequestDataTooBig) is raised. The check is done when accessing request.body or request.POST and is calculated against the total request size excluding any file upload data. You can set this to None to disable the check. Applications that are expected to receive unusually large form posts should tune this setting.The amount of request data is correlated to the amount of memory needed to process the request and populate the GET and POST dictionaries. Large requests could be used as a denial-of-service attack vector if left unchecked. Since web servers don t typically perform deep request inspection, it s not possible to perform a similar check at that level.See also FILE_UPLOAD_MAX_MEMORY_SIZE.Default: 1000The maximum number of parameters that may be received via GET or POST before a SuspiciousOperation (TooManyFields) is raised. You can set this to None to disable the check. Applications that are expected to receive an unusually large number of form fields should tune this setting.The number of request parameters is correlated to the amount of time needed to process the request and populate the GET and POST dictionaries. Large requests could be used as a denial-of-service attack vector if left unchecked. Since web servers don t typically perform deep request inspection, it s not possible to perform a similar check at that level.Default: [] (Empty list)The list of routers that will be used to determine which database to use when performing a database query.See the documentation on automatic database routing in multi database configurations.Default: 'N j, Y' (e.g. Feb. 4, 2003)The default formatting to use for displaying date fields in any part of the system. Note that if USE_L10N is set to True, then the locale-dictated format has higher precedence and will be applied instead. See allowed date format strings.See also DATETIME_FORMAT, TIME_FORMAT and SHORT_DATE_FORMAT.Default:A list of formats that will be accepted when inputting data on a date field. Formats will be tried in order, using the first valid one. Note that these format strings use Python s datetime module syntax, not the format strings from the date template filter.When USE_L10N is True, the locale-dictated format has higher precedence and will be applied instead.See also DATETIME_INPUT_FORMATS and TIME_INPUT_FORMATS.Default: 'N j, Y, P' (e.g. Feb. 4, 2003, 4 p.m.)The default formatting to use for displaying datetime fields in any part of the system. Note that if USE_L10N is set to True, then the locale-dictated format has higher precedence and will be applied instead. See allowed date format strings.See also DATE_FORMAT, TIME_FORMAT and SHORT_DATETIME_FORMAT.Default:A list of formats that will be accepted when inputting data on a datetime field. Formats will be tried in order, using the first valid one. Note that these format strings use Python s datetime module syntax, not the format strings from the date template filter.When USE_L10N is True, the locale-dictated format has higher precedence and will be applied instead.See also DATE_INPUT_FORMATS and TIME_INPUT_FORMATS.Default: FalseA boolean that turns on/off debug mode.Never deploy a site into production with DEBUG turned on.One of the main features of debug mode is the display of detailed error pages. If your app raises an exception when DEBUG is True, Django will display a detailed traceback, including a lot of metadata about your environment, such as all the currently defined Django settings (from settings.py).As a security measure, Django will not include settings that might be sensitive, such as SECRET_KEY. Specifically, it will exclude any setting whose name includes any of the following:Note that these are partial matches. 'PASS' will also match PASSWORD, just as 'TOKEN' will also match TOKENIZED and so on.Still, note that there are always going to be sections of your debug output that are inappropriate for public consumption. File paths, configuration options and the like all give attackers extra information about your server.It is also important to remember that when running with DEBUG turned on, Django will remember every SQL query it executes. This is useful when you re debugging, but it ll rapidly consume memory on a production server.Finally, if DEBUG is False, you also need to properly set the ALLOWED_HOSTS setting. Failing to do so will result in all requests being returned as  Bad Request (400) .NoteThe default settings.py file created by django-admin startproject sets DEBUG = True for convenience.Default: FalseIf set to True, Django s exception handling of view functions (handler500, or the debug view if DEBUG is True) and logging of 500 responses (django.request) is skipped and exceptions propagate upwards.This can be useful for some test setups. It shouldn t be used on a live site unless you want your web server (instead of Django) to generate  Internal Server Error  responses. In that case, make sure your server doesn t show the stack trace or other sensitive information in the response.Default: '.' (Dot)Default decimal separator used when formatting decimal numbers.Note that if USE_L10N is set to True, then the locale-dictated format has higher precedence and will be applied instead.See also NUMBER_GROUPING, THOUSAND_SEPARATOR and USE_THOUSAND_SEPARATOR.Default: 'utf-8'Default charset to use for all HttpResponse objects, if a MIME type isn t manually specified. Used with DEFAULT_CONTENT_TYPE to construct the Content-Type header.Default: 'text/html'Default content type to use for all HttpResponse objects, if a MIME type isn t manually specified. Used with DEFAULT_CHARSET to construct the Content-Type header.Deprecated since version 2.0: This setting is deprecated because it doesn t interact well with third-party apps and is obsolete since HTML5 has mostly superseded XHTML.Default: 'django.views.debug.SafeExceptionReporterFilter'Default exception reporter filter class to be used if none has been assigned to the HttpRequest instance yet. See Filtering error reports.Default: 'django.core.files.storage.FileSystemStorage'Default file storage class to be used for any file-related operations that don t specify a particular storage system. See Managing files.Default: 'webmaster@localhost'Default email address to use for various automated correspondence from the site manager(s). This doesn t include error messages sent to ADMINS and MANAGERS; for that, see SERVER_EMAIL.Default: '' (Empty string)Default tablespace to use for indexes on fields that don t specify one, if the backend supports it (see Tablespaces).Default: '' (Empty string)Default tablespace to use for models that don t specify one, if the backend supports it (see Tablespaces).Default: [] (Empty list)List of compiled regular expression objects representing User-Agent strings that are not allowed to visit any page, systemwide. Use this for bots/crawlers. This is only used if CommonMiddleware is installed (see Middleware).Default: 'django.core.mail.backends.smtp.EmailBackend'The backend to use for sending emails. For the list of available backends see Sending email.Default: Not definedThe directory used by the file email backend to store output files.Default: 'localhost'The host to use for sending email.See also EMAIL_PORT.Default: '' (Empty string)Password to use for the SMTP server defined in EMAIL_HOST. This setting is used in conjunction with EMAIL_HOST_USER when authenticating to the SMTP server. If either of these settings is empty, Django won t attempt authentication.See also EMAIL_HOST_USER.Default: '' (Empty string)Username to use for the SMTP server defined in EMAIL_HOST. If empty, Django won t attempt authentication.See also EMAIL_HOST_PASSWORD.Default: 25Port to use for the SMTP server defined in EMAIL_HOST.Default: '[Django] 'Subject-line prefix for email messages sent with django.core.mail.mail_admins or django.core.mail.mail_managers. You ll probably want to include the trailing space.Default: FalseWhether to send the SMTP Date header of email messages in the local time zone (True) or in UTC (False).Default: FalseWhether to use a TLS (secure) connection when talking to the SMTP server. This is used for explicit TLS connections, generally on port 587. If you are experiencing hanging connections, see the implicit TLS setting EMAIL_USE_SSL.Default: FalseWhether to use an implicit TLS (secure) connection when talking to the SMTP server. In most email documentation this type of TLS connection is referred to as SSL. It is generally used on port 465. If you are experiencing problems, see the explicit TLS setting EMAIL_USE_TLS.Note that EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True.Default: NoneIf EMAIL_USE_SSL or EMAIL_USE_TLS is True, you can optionally specify the path to a PEM-formatted certificate chain file to use for the SSL connection.Default: NoneIf EMAIL_USE_SSL or EMAIL_USE_TLS is True, you can optionally specify the path to a PEM-formatted private key file to use for the SSL connection.Note that setting EMAIL_SSL_CERTFILE and EMAIL_SSL_KEYFILE doesn t result in any certificate checking. They re passed to the underlying SSL connection. Please refer to the documentation of Python s ssl.wrap_socket() function for details on how the certificate chain file and private key file are handled.Default: NoneSpecifies a timeout in seconds for blocking operations like the connection attempt.Default: 'utf-8'The character encoding used to decode any files read from disk. This includes template files, static files, and translation catalogs.Deprecated since version 2.2: This setting is deprecated. Starting with Django 3.1, files read from disk must be UTF-8 encoded.Default:A list of handlers to use for uploading. Changing this setting allows complete customization   even replacement   of Django s upload process.See Managing files for details.Default: 2621440 (i.e. 2.5 MB).The maximum size (in bytes) that an upload will be before it gets streamed to the file system. See Managing files for details.See also DATA_UPLOAD_MAX_MEMORY_SIZE.Default: NoneThe numeric mode to apply to directories created in the process of uploading files.This setting also determines the default permissions for collected static directories when using the collectstatic management command. See collectstatic for details on overriding it.This value mirrors the functionality and caveats of the FILE_UPLOAD_PERMISSIONS setting.Default: NoneThe numeric mode (i.e. 0o644) to set newly uploaded files to. For more information about what these modes mean, see the documentation for os.chmod().If this isn t given or is None, you ll get operating-system dependent behavior. On most platforms, temporary files will have a mode of 0o600, and files saved from memory will be saved using the system s standard umask.For security reasons, these permissions aren t applied to the temporary files that are stored in FILE_UPLOAD_TEMP_DIR.This setting also determines the default permissions for collected static files when using the collectstatic management command. See collectstatic for details on overriding it.WarningAlways prefix the mode with a 0.If you re not familiar with file modes, please note that the leading 0 is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use 644, you ll get totally incorrect behavior.Default: NoneThe directory to store data to (typically files larger than FILE_UPLOAD_MAX_MEMORY_SIZE) temporarily while uploading files. If None, Django will use the standard temporary directory for the operating system. For example, this will default to /tmp on *nix-style operating systems.See Managing files for details.Default: 0 (Sunday)A number representing the first day of the week. This is especially useful when displaying a calendar. This value is only used when not using format internationalization, or when a format cannot be found for the current locale.The value must be an integer from 0 to 6, where 0 means Sunday, 1 means Monday and so on.Default: [] (Empty list)List of directories searched for fixture files, in addition to the fixtures directory of each application, in search order.Note that these paths should use Unix-style forward slashes, even on Windows.See Providing data with fixtures and Fixture loading.Default: NoneIf not None, this will be used as the value of the SCRIPT_NAME environment variable in any HTTP request. This setting can be used to override the server-provided value of SCRIPT_NAME, which may be a rewritten version of the preferred value or not supplied at all. It is also used by django.setup() to set the URL resolver script prefix outside of the request/response cycle (e.g. in management commands and standalone scripts) to generate correct URLs when SCRIPT_NAME is not /.Default: 'django.forms.renderers.DjangoTemplates'The class that renders form widgets. It must implement the low-level render API.Default: NoneA full Python path to a Python package that contains custom format definitions for project locales. If not None, Django will check for a formats.py file, under the directory named as the current locale, and will use the formats defined in this file.For example, if FORMAT_MODULE_PATH is set to mysite.formats, and current language is en (English), Django will expect a directory tree like:You can also set this setting to a list of Python paths, for example:When Django searches for a certain format, it will go through all given Python paths until it finds a module that actually defines the given format. This means that formats defined in packages farther up in the list will take precedence over the same formats in packages farther down.Available formats are:Default: [] (Empty list)List of compiled regular expression objects describing URLs that should be ignored when reporting HTTP 404 errors via email (see Error reporting). Regular expressions are matched against request's full paths (including query string, if any). Use this if your site does not provide a commonly requested file such as favicon.ico or robots.txt.This is only used if BrokenLinkEmailsMiddleware is enabled (see Middleware).Default: [] (Empty list)A list of strings designating all applications that are enabled in this Django installation. Each string should be a dotted Python path to:Learn more about application configurations.Use the application registry for introspectionYour code should never access INSTALLED_APPS directly. Use django.apps.apps instead.Application names and labels must be unique in             INSTALLED_APPSApplication names   the dotted Python path to the application package   must be unique. There is no way to include the same application twice, short of duplicating its code under another name.Application labels   by default the final part of the name   must be unique too. For example, you can t include both django.contrib.auth and myproject.auth. However, you can relabel an application with a custom configuration that defines a different label.These rules apply regardless of whether INSTALLED_APPS references application configuration classes or application packages.When several applications provide different versions of the same resource (template, static file, management command, translation), the application listed first in INSTALLED_APPS has precedence.Default: [] (Empty list)A list of IP addresses, as strings, that:Default: 'en-us'A string representing the language code for this installation. This should be in standard language ID format. For example, U.S. English is \"en-us\". See also the list of language identifiers and Internationalization and localization.USE_I18N must be active for this setting to have any effect.It serves two purposes:See How Django discovers language preference for more details.Default: None (expires at browser close)The age of the language cookie, in seconds.Default: NoneThe domain to use for the language cookie. Set this to a string such as \"example.com\" for cross-domain cookies, or use None for a standard domain cookie.Be cautious when updating this setting on a production site. If you update this setting to enable cross-domain cookies on a site that previously used standard domain cookies, existing user cookies that have the old domain will not be updated. This will result in site users being unable to switch the language as long as these cookies persist. The only safe and reliable option to perform the switch is to change the language cookie name permanently (via the LANGUAGE_COOKIE_NAME setting) and to add a middleware that copies the value from the old cookie to a new one and then deletes the old one.Default: 'django_language'The name of the cookie to use for the language cookie. This can be whatever you want (as long as it s different from the other cookie names in your application). See Internationalization and localization.Default: '/'The path set on the language cookie. This should either match the URL path of your Django installation or be a parent of that path.This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths and each instance will only see its own language cookie.Be cautious when updating this setting on a production site. If you update this setting to use a deeper path than it previously used, existing user cookies that have the old path will not be updated. This will result in site users being unable to switch the language as long as these cookies persist. The only safe and reliable option to perform the switch is to change the language cookie name permanently (via the LANGUAGE_COOKIE_NAME setting), and to add a middleware that copies the value from the old cookie to a new one and then deletes the one.Default: A list of all available languages. This list is continually growing and including a copy here would inevitably become rapidly out of date. You can see the current list of translated languages by looking in django/conf/global_settings.py.The list is a list of two-tuples in the format (language code, language name)   for example, ('ja', 'Japanese'). This specifies which languages are available for language selection. See Internationalization and localization.Generally, the default value should suffice. Only set this setting if you want to restrict language selection to a subset of the Django-provided languages.If you define a custom LANGUAGES setting, you can mark the language names as translation strings using the gettext_lazy() function.Here s a sample settings file:Default: A list of all language codes from the LANGUAGES setting that are written right-to-left. You can see the current list of these languages by looking in django/conf/global_settings.py.The list contains language codes for languages that are written right-to-left.Generally, the default value should suffice. Only set this setting if you want to restrict language selection to a subset of the Django-provided languages.Default: [] (Empty list)A list of directories where Django looks for translation files. See How Django discovers translations.Example:Django will look within each of these paths for the <locale_code>/LC_MESSAGES directories containing the actual translation files.Default: A logging configuration dictionary.A data structure containing configuration information. The contents of this data structure will be passed as the argument to the configuration method described in LOGGING_CONFIG.Among other things, the default logging configuration passes HTTP 500 server errors to an email log handler when DEBUG is False. See also Configuring logging.You can see the default logging configuration by looking in django/utils/log.py.Default: 'logging.config.dictConfig'A path to a callable that will be used to configure logging in the Django project. Points at an instance of Python s dictConfig configuration method by default.If you set LOGGING_CONFIG to None, the logging configuration process will be skipped.Default: [] (Empty list)A list in the same format as ADMINS that specifies who should get broken link notifications when BrokenLinkEmailsMiddleware is enabled.Default: '' (Empty string)Absolute filesystem path to the directory that will hold user-uploaded files.Example: \"/var/www/example.com/media/\"See also MEDIA_URL.WarningMEDIA_ROOT and STATIC_ROOT must have different values. Before STATIC_ROOT was introduced, it was common to rely or fallback on MEDIA_ROOT to also serve static files; however, since this can have serious security implications, there is a validation check to prevent it.Default: '' (Empty string)URL that handles the media served from MEDIA_ROOT, used for managing stored files. It must end in a slash if set to a non-empty value. You will need to configure these files to be served in both development and production environments.If you want to use {{ MEDIA_URL }} in your templates, add 'django.template.context_processors.media' in the 'context_processors' option of TEMPLATES.Example: \"http://media.example.com/\"WarningThere are security risks if you are accepting uploaded content from untrusted users! See the security guide s topic on User-uploaded content for mitigation details.WarningMEDIA_URL and STATIC_URL must have different values. See MEDIA_ROOT for more details.Default: NoneA list of middleware to use. See Middleware.Default: {} (Empty dictionary)A dictionary specifying the package where migration modules can be found on a per-app basis. The default value of this setting is an empty dictionary, but the default package name for migration modules is migrations.Example:In this case, migrations pertaining to the blog app will be contained in the blog.db_migrations package.If you provide the app_label argument, makemigrations will automatically create the package if it doesn t already exist.When you supply None as a value for an app, Django will consider the app as an app without migrations regardless of an existing migrations submodule. This can be used, for example, in a test settings file to skip migrations while testing (tables will still be created for the apps  models). If this is used in your general project settings, remember to use the migrate --run-syncdb option if you want to create tables for the app.Default: 'F j'The default formatting to use for date fields on Django admin change-list pages   and, possibly, by other parts of the system   in cases when only the month and day are displayed.For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given day displays the day and month. Different locales have different formats. For example, U.S. English would say  January 1,  whereas Spanish might say  1 Enero. Note that if USE_L10N is set to True, then the corresponding locale-dictated format has higher precedence and will be applied.See allowed date format strings. See also DATE_FORMAT, DATETIME_FORMAT, TIME_FORMAT and YEAR_MONTH_FORMAT.Default: 0Number of digits grouped together on the integer part of a number.Common use is to display a thousand separator. If this setting is 0, then no grouping will be applied to the number. If this setting is greater than 0, then THOUSAND_SEPARATOR will be used as the separator between those groups.Some locales use non-uniform digit grouping, e.g. 10,00,00,000 in en_IN. For this case, you can provide a sequence with the number of digit group sizes to be applied. The first number defines the size of the group preceding the decimal delimiter, and each number that follows defines the size of preceding groups. If the sequence is terminated with -1, no further grouping is performed. If the sequence terminates with a 0, the last group size is used for the remainder of the number.Example tuple for en_IN:Note that if USE_L10N is set to True, then the locale-dictated format has higher precedence and will be applied instead.See also DECIMAL_SEPARATOR, THOUSAND_SEPARATOR and USE_THOUSAND_SEPARATOR.Default: FalseWhether to prepend the  www.  subdomain to URLs that don t have it. This is only used if CommonMiddleware is installed (see Middleware). See also APPEND_SLASH.Default: Not definedA string representing the full Python import path to your root URLconf, for example \"mydjangoapps.urls\". Can be overridden on a per-request basis by setting the attribute urlconf on the incoming HttpRequest object. See How Django processes a request for details.Default: '' (Empty string)A secret key for a particular Django installation. This is used to provide cryptographic signing, and should be set to a unique, unpredictable value.django-admin startproject automatically adds a randomly-generated SECRET_KEY to each new project.Uses of the key shouldn t assume that it s text or bytes. Every use should go through force_text() or force_bytes() to convert it to the desired type.Django will refuse to start if SECRET_KEY is not set.WarningKeep this value secret.Running Django with a known SECRET_KEY defeats many of Django s security protections, and can lead to privilege escalation and remote code execution vulnerabilities.The secret key is used for:If you rotate your secret key, all of the above will be invalidated. Secret keys are not used for passwords of users and key rotation will not affect them.NoteThe default settings.py file created by django-admin startproject creates a unique SECRET_KEY for convenience.Default: FalseIf True, the SecurityMiddleware sets the X-XSS-Protection: 1; mode=block header on all responses that do not already have it.Default: FalseIf True, the SecurityMiddleware sets the X-Content-Type-Options: nosniff header on all responses that do not already have it.Default: FalseIf True, the SecurityMiddleware adds the includeSubDomains directive to the HTTP Strict Transport Security header. It has no effect unless SECURE_HSTS_SECONDS is set to a non-zero value.WarningSetting this incorrectly can irreversibly (for the value of SECURE_HSTS_SECONDS) break your site. Read the HTTP Strict Transport Security documentation first.Default: FalseIf True, the SecurityMiddleware adds the preload directive to the HTTP Strict Transport Security header. It has no effect unless SECURE_HSTS_SECONDS is set to a non-zero value.Default: 0If set to a non-zero integer value, the SecurityMiddleware sets the HTTP Strict Transport Security header on all responses that do not already have it.WarningSetting this incorrectly can irreversibly (for some time) break your site. Read the HTTP Strict Transport Security documentation first.Default: NoneA tuple representing a HTTP header/value combination that signifies a request is secure. This controls the behavior of the request object s is_secure() method.By default, is_secure() determines if a request is secure by confirming that a requested URL uses https://. This method is important for Django s CSRF protection, and it may be used by your own code or third-party apps.If your Django app is behind a proxy, though, the proxy may be  swallowing  the fact that a request is HTTPS, using a non-HTTPS connection between the proxy and Django. In this case, is_secure() would always return False   even for requests that were made via HTTPS by the end user.In this situation, configure your proxy to set a custom HTTP header that tells Django whether the request came in via HTTPS, and set SECURE_PROXY_SSL_HEADER so that Django knows what header to look for.Set a tuple with two elements   the name of the header to look for and the required value. For example:This tells Django to trust the X-Forwarded-Proto header that comes from our proxy, and any time its value is 'https', then the request is guaranteed to be secure (i.e., it originally came in via HTTPS).You should only set this setting if you control your proxy or have some other guarantee that it sets/strips this header appropriately.Note that the header needs to be in the format as used by request.META   all caps and likely starting with HTTP_. (Remember, Django automatically adds 'HTTP_' to the start of x-header names before making the header available in request.META.)WarningModifying this setting can compromise your site s security. Ensure you fully understand your setup before changing it.Make sure ALL of the following are true before setting this (assuming the values from the example above):If any of those are not true, you should keep this setting set to None and find another way of determining HTTPS, perhaps via custom middleware.Default: [] (Empty list)If a URL path matches a regular expression in this list, the request will not be redirected to HTTPS. If SECURE_SSL_REDIRECT is False, this setting has no effect.Default: NoneIf a string (e.g. secure.example.com), all SSL redirects will be directed to this host rather than the originally-requested host (e.g. www.example.com). If SECURE_SSL_REDIRECT is False, this setting has no effect.Default: FalseIf True, the SecurityMiddleware redirects all non-HTTPS requests to HTTPS (except for those URLs matching a regular expression listed in SECURE_REDIRECT_EXEMPT).NoteIf turning this to True causes infinite redirects, it probably means your site is running behind a proxy and can t tell which requests are secure and which are not. Your proxy likely sets a header to indicate secure requests; you can correct the problem by finding out what that header is and configuring the SECURE_PROXY_SSL_HEADER setting accordingly.Default: Not definedA dictionary of modules containing serializer definitions (provided as strings), keyed by a string identifier for that serialization type. For example, to define a YAML serializer, use:Default: 'root@localhost'The email address that error messages come from, such as those sent to ADMINS and MANAGERS.Why are my emails sent from a different address?This address is used only for error messages. It is not the address that regular email messages sent with send_mail() come from; for that, see DEFAULT_FROM_EMAIL.Default: 'm/d/Y' (e.g. 12/31/2003)An available formatting that can be used for displaying date fields on templates. Note that if USE_L10N is set to True, then the corresponding locale-dictated format has higher precedence and will be applied. See allowed date format strings.See also DATE_FORMAT and SHORT_DATETIME_FORMAT.Default: 'm/d/Y P' (e.g. 12/31/2003 4 p.m.)An available formatting that can be used for displaying datetime fields on templates. Note that if USE_L10N is set to True, then the corresponding locale-dictated format has higher precedence and will be applied. See allowed date format strings.See also DATE_FORMAT and SHORT_DATE_FORMAT.Default: 'django.core.signing.TimestampSigner'The backend used for signing cookies and other data.See also the Cryptographic signing documentation.Default: [] (Empty list)A list of identifiers of messages generated by the system check framework (i.e. [\"models.W001\"]) that you wish to permanently acknowledge and ignore. Silenced checks will not be output to the console.See also the System check framework documentation.Default: [] (Empty list)A list containing the settings for all template engines to be used with Django. Each item of the list is a dictionary containing the options for an individual engine.Here s a simple setup that tells the Django template engine to load templates from the templates subdirectory inside each installed application:The following options are available for all backends.Default: Not definedThe template backend to use. The built-in template backends are:You can use a template backend that doesn t ship with Django by setting BACKEND to a fully-qualified path (i.e. 'mypackage.whatever.Backend').Default: see belowThe alias for this particular template engine. It s an identifier that allows selecting an engine for rendering. Aliases must be unique across all configured template engines.It defaults to the name of the module defining the engine class, i.e. the next to last piece of BACKEND, when it isn t provided. For example if the backend is 'mypackage.whatever.Backend' then its default name is 'whatever'.Default: [] (Empty list)Directories where the engine should look for template source files, in search order.Default: FalseWhether the engine should look for template source files inside installed applications.NoteThe default settings.py file created by django-admin startproject sets 'APP_DIRS': True.Default: {} (Empty dict)Extra parameters to pass to the template backend. Available parameters vary depending on the template backend. See DjangoTemplates and Jinja2 for the options of the built-in backends.Default: 'django.test.runner.DiscoverRunner'The name of the class to use for starting the test suite. See Using different testing frameworks.Default: [] (Empty list)In order to restore the database state between tests for TransactionTestCases and database backends without transactions, Django will serialize the contents of all apps when it starts the test run so it can then reload from that copy before running tests that need it.This slows down the startup time of the test runner; if you have apps that you know don t need this feature, you can add their full names in here (e.g. 'django.contrib.contenttypes') to exclude them from this serialization process.Default: ',' (Comma)Default thousand separator used when formatting numbers. This setting is used only when USE_THOUSAND_SEPARATOR is True and NUMBER_GROUPING is greater than 0.Note that if USE_L10N is set to True, then the locale-dictated format has higher precedence and will be applied instead.See also NUMBER_GROUPING, DECIMAL_SEPARATOR and USE_THOUSAND_SEPARATOR.Default: 'P' (e.g. 4 p.m.)The default formatting to use for displaying time fields in any part of the system. Note that if USE_L10N is set to True, then the locale-dictated format has higher precedence and will be applied instead. See allowed date format strings.See also DATE_FORMAT and DATETIME_FORMAT.Default:A list of formats that will be accepted when inputting data on a time field. Formats will be tried in order, using the first valid one. Note that these format strings use Python s datetime module syntax, not the format strings from the date template filter.When USE_L10N is True, the locale-dictated format has higher precedence and will be applied instead.See also DATE_INPUT_FORMATS and DATETIME_INPUT_FORMATS.Default: 'America/Chicago'A string representing the time zone for this installation. See the list of time zones.NoteSince Django was first released with the TIME_ZONE set to 'America/Chicago', the global setting (used if nothing is defined in your project s settings.py) remains 'America/Chicago' for backwards compatibility. New project templates default to 'UTC'.Note that this isn t necessarily the time zone of the server. For example, one server may serve multiple Django-powered sites, each with a separate time zone setting.When USE_TZ is False, this is the time zone in which Django will store all datetimes. When USE_TZ is True, this is the default time zone that Django will use to display datetimes in templates and to interpret datetimes entered in forms.On Unix environments (where time.tzset() is implemented), Django sets the os.environ['TZ'] variable to the time zone you specify in the TIME_ZONE setting. Thus, all your views and models will automatically operate in this time zone. However, Django won t set the TZ environment variable if you re using the manual configuration option as described in manually configuring settings. If Django doesn t set the TZ environment variable, it s up to you to ensure your processes are running in the correct environment.NoteDjango cannot reliably use alternate time zones in a Windows environment. If you re running Django on Windows, TIME_ZONE must be set to match the system time zone.Default: TrueA boolean that specifies whether Django s translation system should be enabled. This provides an easy way to turn it off, for performance. If this is set to False, Django will make some optimizations so as not to load the translation machinery.See also LANGUAGE_CODE, USE_L10N and USE_TZ.NoteThe default settings.py file created by django-admin startproject includes USE_I18N = True for convenience.Default: FalseA boolean that specifies if localized formatting of data will be enabled by default or not. If this is set to True, e.g. Django will display numbers and dates using the format of the current locale.See also LANGUAGE_CODE, USE_I18N and USE_TZ.NoteThe default settings.py file created by django-admin startproject includes USE_L10N = True for convenience.Default: FalseA boolean that specifies whether to display numbers using a thousand separator. When USE_L10N is set to True and if this is also set to True, Django will use the values of THOUSAND_SEPARATOR and NUMBER_GROUPING to format numbers unless the locale already has an existing thousands separator. If there is a thousands separator in the locale format, it will have higher precedence and will be applied instead.See also DECIMAL_SEPARATOR, NUMBER_GROUPING and THOUSAND_SEPARATOR.Default: FalseA boolean that specifies if datetimes will be timezone-aware by default or not. If this is set to True, Django will use timezone-aware datetimes internally. Otherwise, Django will use naive datetimes in local time.See also TIME_ZONE, USE_I18N and USE_L10N.NoteThe default settings.py file created by django-admin startproject includes USE_TZ = True for convenience.Default: FalseA boolean that specifies whether to use the X-Forwarded-Host header in preference to the Host header. This should only be enabled if a proxy which sets this header is in use.This setting takes priority over USE_X_FORWARDED_PORT. Per RFC 7239#page-7, the X-Forwarded-Host header can include the port number, in which case you shouldn t use USE_X_FORWARDED_PORT.Default: FalseA boolean that specifies whether to use the X-Forwarded-Port header in preference to the SERVER_PORT META variable. This should only be enabled if a proxy which sets this header is in use.USE_X_FORWARDED_HOST takes priority over this setting.Default: NoneThe full Python path of the WSGI application object that Django s built-in servers (e.g. runserver) will use. The django-admin startproject management command will create a simple wsgi.py file with an application callable in it, and point this setting to that application.If not set, the return value of django.core.wsgi.get_wsgi_application() will be used. In this case, the behavior of runserver will be identical to previous Django versions.Default: 'F Y'The default formatting to use for date fields on Django admin change-list pages   and, possibly, by other parts of the system   in cases when only the year and month are displayed.For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given month displays the month and the year. Different locales have different formats. For example, U.S. English would say  January 2006,  whereas another locale might say  2006/January. Note that if USE_L10N is set to True, then the corresponding locale-dictated format has higher precedence and will be applied.See allowed date format strings. See also DATE_FORMAT, DATETIME_FORMAT, TIME_FORMAT and MONTH_DAY_FORMAT.Default: 'SAMEORIGIN'The default value for the X-Frame-Options header used by XFrameOptionsMiddleware. See the clickjacking protection documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/settings/#id13", "para": "Settings for django.contrib.auth.Default: ['django.contrib.auth.backends.ModelBackend']A list of authentication backend classes (as strings) to use when attempting to authenticate a user. See the authentication backends documentation for details.Default: 'auth.User'The model to use to represent a User. See Substituting a custom User model.WarningYou cannot change the AUTH_USER_MODEL setting during the lifetime of a project (i.e. once you have made and migrated models that depend on it) without serious effort. It is intended to be set at the project start, and the model it refers to must be available in the first migration of the app that it lives in. See Substituting a custom User model for more details.Default: '/accounts/profile/'The URL or named URL pattern where requests are redirected after login when the LoginView doesn t get a next GET parameter.Default: '/accounts/login/'The URL or named URL pattern where requests are redirected for login when using the login_required() decorator, LoginRequiredMixin, or AccessMixin.Default: NoneThe URL or named URL pattern where requests are redirected after logout if LogoutView doesn t have a next_page attribute.If None, no redirect will be performed and the logout view will be rendered.Default: 3The minimum number of days a password reset link is valid for. Depending on when the link is generated, it will be valid for up to a day longer.Used by the PasswordResetConfirmView.See How Django stores passwords.Default:Default: [] (Empty list)The list of validators that are used to check the strength of user s passwords. See Password validation for more details. By default, no validation is performed and all passwords are accepted."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/settings/#id14", "para": "Settings for django.contrib.messages.Default: messages.INFOSets the minimum message level that will be recorded by the messages framework. See message levels for more details.ImportantIf you override MESSAGE_LEVEL in your settings file and rely on any of the built-in constants, you must import the constants module directly to avoid the potential for circular imports, e.g.:If desired, you may specify the numeric values for the constants directly according to the values in the above constants table.Default: 'django.contrib.messages.storage.fallback.FallbackStorage'Controls where Django stores message data. Valid values are:See message storage backends for more details.The backends that use cookies   CookieStorage and FallbackStorage   use the value of SESSION_COOKIE_DOMAIN, SESSION_COOKIE_SECURE and SESSION_COOKIE_HTTPONLY when setting their cookies.Default:This sets the mapping of message level to message tag, which is typically rendered as a CSS class in HTML. If you specify a value, it will extend the default. This means you only have to specify those values which you need to override. See Displaying messages above for more details.ImportantIf you override MESSAGE_TAGS in your settings file and rely on any of the built-in constants, you must import the constants module directly to avoid the potential for circular imports, e.g.:If desired, you may specify the numeric values for the constants directly according to the values in the above constants table."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/settings/#id15", "para": "Settings for django.contrib.sessions.Default: 'default'If you re using cache-based session storage, this selects the cache to use.Default: 1209600 (2 weeks, in seconds)The age of session cookies, in seconds.Default: NoneThe domain to use for session cookies. Set this to a string such as \"example.com\" for cross-domain cookies, or use None for a standard domain cookie.Be cautious when updating this setting on a production site. If you update this setting to enable cross-domain cookies on a site that previously used standard domain cookies, existing user cookies will be set to the old domain. This may result in them being unable to log in as long as these cookies persist.This setting also affects cookies set by django.contrib.messages.Default: TrueWhether to use HttpOnly flag on the session cookie. If this is set to True, client-side JavaScript will not to be able to access the session cookie.HttpOnly is a flag included in a Set-Cookie HTTP response header. It s part of the RFC 6265 standard for cookies and can be a useful way to mitigate the risk of a client-side script accessing the protected cookie data.This makes it less trivial for an attacker to escalate a cross-site scripting vulnerability into full hijacking of a user s session. There aren t many good reasons for turning this off. Your code shouldn t read session cookies from JavaScript.Default: 'sessionid'The name of the cookie to use for sessions. This can be whatever you want (as long as it s different from the other cookie names in your application).Default: '/'The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path.This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own session cookie.Default: 'Lax'The value of the SameSite flag on the session cookie. This flag prevents the cookie from being sent in cross-site requests thus preventing CSRF attacks and making some methods of stealing session cookie impossible.Possible values for the setting are:'Strict': prevents the cookie from being sent by the browser to the target site in all cross-site browsing context, even when following a regular link.For example, for a GitHub-like website this would mean that if a logged-in user follows a link to a private GitHub project posted on a corporate discussion forum or email, GitHub will not receive the session cookie and the user won t be able to access the project. A bank website, however, most likely doesn t want to allow any transactional pages to be linked from external sites so the 'Strict' flag would be appropriate.'Lax' (default): provides a balance between security and usability for websites that want to maintain user s logged-in session after the user arrives from an external link.In the GitHub scenario, the session cookie would be allowed when following a regular link from an external website and be blocked in CSRF-prone request methods (e.g. POST).None: disables the flag.Default: FalseWhether to use a secure cookie for the session cookie. If this is set to True, the cookie will be marked as  secure , which means browsers may ensure that the cookie is only sent under an HTTPS connection.Leaving this setting off isn t a good idea because an attacker could capture an unencrypted session cookie with a packet sniffer and use the cookie to hijack the user s session.Default: 'django.contrib.sessions.backends.db'Controls where Django stores session data. Included engines are:See Configuring the session engine for more details.Default: FalseWhether to expire the session when the user closes their browser. See Browser-length sessions vs. persistent sessions.Default: NoneIf you re using file-based session storage, this sets the directory in which Django will store session data. When the default value (None) is used, Django will use the standard temporary directory for the system.Default: FalseWhether to save the session data on every request. If this is False (default), then the session data will only be saved if it has been modified   that is, if any of its dictionary values have been assigned or deleted. Empty sessions won t be created, even if this setting is active.Default: 'django.contrib.sessions.serializers.JSONSerializer'Full import path of a serializer class to use for serializing session data. Included serializers are:See Session serialization for details, including a warning regarding possible remote code execution when using PickleSerializer."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/settings/#id16", "para": "Settings for django.contrib.sites.Default: Not definedThe ID, as an integer, of the current site in the django_site database table. This is used so that application data can hook into specific sites and a single database can manage content for multiple sites."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/settings/#id17", "para": "Settings for django.contrib.staticfiles.Default: NoneThe absolute path to the directory where collectstatic will collect static files for deployment.Example: \"/var/www/example.com/static/\"If the staticfiles contrib app is enabled (as in the default project template), the collectstatic management command will collect static files into this directory. See the how-to on managing static files for more details about usage.WarningThis should be an initially empty destination directory for collecting your static files from their permanent locations into one directory for ease of deployment; it is not a place to store your static files permanently. You should do that in directories that will be found by staticfiles s finders, which by default, are 'static/' app sub-directories and any directories you include in STATICFILES_DIRS).Default: NoneURL to use when referring to static files located in STATIC_ROOT.Example: \"/static/\" or \"http://static.example.com/\"If not None, this will be used as the base path for asset definitions (the Media class) and the staticfiles app.It must end in a slash if set to a non-empty value.You may need to configure these files to be served in development and will definitely need to do so in production.Default: [] (Empty list)This setting defines the additional locations the staticfiles app will traverse if the FileSystemFinder finder is enabled, e.g. if you use the collectstatic or findstatic management command or use the static file serving view.This should be set to a list of strings that contain full paths to your additional files directory(ies) e.g.:Note that these paths should use Unix-style forward slashes, even on Windows (e.g. \"C:/Users/user/mysite/extra_static_content\").In case you want to refer to files in one of the locations with an additional namespace, you can optionally provide a prefix as (prefix, path) tuples, e.g.:For example, assuming you have STATIC_URL set to '/static/', the collectstatic management command would collect the  stats  files in a 'downloads' subdirectory of STATIC_ROOT.This would allow you to refer to the local file '/opt/webfiles/stats/polls_20101022.tar.gz' with '/static/downloads/polls_20101022.tar.gz' in your templates, e.g.:Default: 'django.contrib.staticfiles.storage.StaticFilesStorage'The file storage engine to use when collecting static files with the collectstatic management command.A ready-to-use instance of the storage backend defined in this setting can be found at django.contrib.staticfiles.storage.staticfiles_storage.For an example, see Serving static files from a cloud service or CDN.Default:The list of finder backends that know how to find static files in various locations.The default will find files stored in the STATICFILES_DIRS setting (using django.contrib.staticfiles.finders.FileSystemFinder) and in a static subdirectory of each app (using django.contrib.staticfiles.finders.AppDirectoriesFinder). If multiple files with the same name are present, the first file that is found will be used.One finder is disabled by default: django.contrib.staticfiles.finders.DefaultStorageFinder. If added to your STATICFILES_FINDERS setting, it will look for static files in the default file storage as defined by the DEFAULT_FILE_STORAGE setting.NoteWhen using the AppDirectoriesFinder finder, make sure your apps can be found by staticfiles. Simply add the app to the INSTALLED_APPS setting of your site.Static file finders are currently considered a private interface, and this interface is thus undocumented."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/settings/#id18", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/ref/applications/#projects-and-applications", "para": "The term project describes a Django web application. The project Python package is defined primarily by a settings module, but it usually contains other things. For example, when you run  django-admin startproject mysite you ll get a mysite project directory that contains a mysite Python package with settings.py, urls.py, and wsgi.py. The project package is often extended to include things like fixtures, CSS, and templates which aren t tied to a particular application.A project s root directory (the one that contains manage.py) is usually the container for all of a project s applications which aren t installed separately.The term application describes a Python package that provides some set of features. Applications may be reused in various projects.Applications include some combination of models, views, templates, template tags, static files, URLs, middleware, etc. They re generally wired into projects with the INSTALLED_APPS setting and optionally with other mechanisms such as URLconfs, the MIDDLEWARE setting, or template inheritance.It is important to understand that a Django application is just a set of code that interacts with various parts of the framework. There s no such thing as an Application object. However, there s a few places where Django needs to interact with installed applications, mainly for configuration and also for introspection. That s why the application registry maintains metadata in an AppConfig instance for each installed application.There s no restriction that a project package can t also be considered an application and have models, etc. (which would require adding it to INSTALLED_APPS)."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/applications/#configuring-applications", "para": "To configure an application, subclass AppConfig and put the dotted path to that subclass in INSTALLED_APPS.When INSTALLED_APPS simply contains the dotted path to an application module, Django checks for a default_app_config variable in that module.If it s defined, it s the dotted path to the AppConfig subclass for that application.If there is no default_app_config, Django uses the base AppConfig class.default_app_config allows applications that predate Django 1.7 such as django.contrib.admin to opt-in to AppConfig features without requiring users to update their INSTALLED_APPS.New applications should avoid default_app_config. Instead they should require the dotted path to the appropriate AppConfig subclass to be configured explicitly in INSTALLED_APPS.If you re creating a pluggable app called  Rock  n  roll , here s how you would provide a proper name for the admin:You can make your application load this AppConfig subclass by default as follows:That will cause RockNRollConfig to be used when INSTALLED_APPS just contains 'rock_n_roll'. This allows you to make use of AppConfig features without requiring your users to update their INSTALLED_APPS setting. Besides this use case, it s best to avoid using default_app_config and instead specify the app config class in INSTALLED_APPS as described next.Of course, you can also tell your users to put 'rock_n_roll.apps.RockNRollConfig' in their INSTALLED_APPS setting. You can even provide several different AppConfig subclasses with different behaviors and allow your users to choose one via their INSTALLED_APPS setting.The recommended convention is to put the configuration class in a submodule of the application called apps. However, this isn t enforced by Django.You must include the name attribute for Django to determine which application this configuration applies to. You can define any attributes documented in the AppConfig API reference.NoteIf your code imports the application registry in an application s __init__.py, the name apps will clash with the apps submodule. The best practice is to move that code to a submodule and import it. A workaround is to import the registry under a different name:If you re using  Rock  n  roll  in a project called anthology, but you want it to show up as  Jazz Manouche  instead, you can provide your own configuration:Again, defining project-specific configuration classes in a submodule called apps is a convention, not a requirement."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/applications/#application-configuration", "para": "Application configuration objects store metadata for an application. Some attributes can be configured in AppConfig subclasses. Others are set by Django and read-only.Full Python path to the application, e.g. 'django.contrib.admin'.This attribute defines which application the configuration applies to. It must be set in all AppConfig subclasses.It must be unique across a Django project.Short name for the application, e.g. 'admin'This attribute allows relabeling an application when two applications have conflicting labels. It defaults to the last component of name. It should be a valid Python identifier.It must be unique across a Django project.Human-readable name for the application, e.g.  Administration .This attribute defaults to label.title().Filesystem path to the application directory, e.g. '/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'.In most cases, Django can automatically detect and set this, but you can also provide an explicit override as a class attribute on your AppConfig subclass. In a few situations this is required; for instance if the app package is a namespace package with multiple paths.Root module for the application, e.g. <module 'django.contrib.admin' from 'django/contrib/admin/__init__.py'>.Module containing the models, e.g. <module 'django.contrib.admin.models' from 'django/contrib/admin/models.py'>.It may be None if the application doesn t contain a models module. Note that the database related signals such as pre_migrate and post_migrate are only emitted for applications that have a models module.Returns an iterable of Model classes for this application.Requires the app registry to be fully populated.Returns the Model with the given model_name. model_name is case-insensitive.Raises LookupError if no such model exists in this application.Requires the app registry to be fully populated unless the require_ready argument is set to False. require_ready behaves exactly as in apps.get_model().Subclasses can override this method to perform initialization tasks such as registering signals. It is called as soon as the registry is fully populated.Although you can t import models at the module-level where AppConfig classes are defined, you can import them in ready(), using either an import statement or get_model().If you re registering model signals, you can refer to the sender by its string label instead of using the model class itself.Example:WarningAlthough you can access model classes as described above, avoid interacting with the database in your ready() implementation. This includes model methods that execute queries (save(), delete(), manager methods etc.), and also raw SQL queries via django.db.connection. Your ready() method will run during startup of every management command. For example, even though the test database configuration is separate from the production settings, manage.py test would still execute some queries against your production database!NoteIn the usual initialization process, the ready method is only called once by Django. But in some corner cases, particularly in tests which are fiddling with installed applications, ready might be called more than once. In that case, either write idempotent methods, or put a flag on your AppConfig classes to prevent re-running code which should be executed exactly one time.Python packages without an __init__.py file are known as  namespace packages  and may be spread across multiple directories at different locations on sys.path (see PEP 420).Django applications require a single base filesystem path where Django (depending on configuration) will search for templates, static assets, etc. Thus, namespace packages may only be Django applications if one of the following is true:If neither of these conditions is met, Django will raise ImproperlyConfigured."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/applications/#application-registry", "para": "The application registry provides the following public API. Methods that aren t listed below are considered private and may change without notice.Boolean attribute that is set to True after the registry is fully populated and all AppConfig.ready() methods are called.Returns an iterable of AppConfig instances.Returns an AppConfig for the application with the given app_label. Raises LookupError if no such application exists.Checks whether an application with the given name exists in the registry. app_name is the full name of the app, e.g. 'django.contrib.admin'.Returns the Model with the given app_label and model_name. As a shortcut, this method also accepts a single argument in the form app_label.model_name. model_name is case-insensitive.Raises LookupError if no such application or model exists. Raises ValueError when called with a single argument that doesn t contain exactly one dot.Requires the app registry to be fully populated unless the require_ready argument is set to False.Setting require_ready to False allows looking up models while the app registry is being populated, specifically during the second phase where it imports models. Then get_model() has the same effect as importing the model. The main use case is to configure model classes with settings, such as AUTH_USER_MODEL.When require_ready is False, get_model() returns a model class that may not be fully functional (reverse accessors may be missing, for example) until the app registry is fully populated. For this reason, it s best to leave require_ready to the default value of True whenever possible."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/applications/#initialization-process", "para": "When Django starts, django.setup() is responsible for populating the application registry.Configures Django by:This function is called automatically:It must be called explicitly in other cases, for instance in plain Python scripts.The application registry is initialized in three stages. At each stage, Django processes all applications in the order of INSTALLED_APPS.First Django imports each item in INSTALLED_APPS.If it s an application configuration class, Django imports the root package of the application, defined by its name attribute. If it s a Python package, Django creates a default application configuration.At this stage, your code shouldn t import any models!In other words, your applications  root packages and the modules that define your application configuration classes shouldn t import any models, even indirectly.Strictly speaking, Django allows importing models once their application configuration is loaded. However, in order to avoid needless constraints on the order of INSTALLED_APPS, it s strongly recommended not import any models at this stage.Once this stage completes, APIs that operate on application configurations such as get_app_config() become usable.Then Django attempts to import the models submodule of each application, if there is one.You must define or import all models in your application s models.py or models/__init__.py. Otherwise, the application registry may not be fully populated at this point, which could cause the ORM to malfunction.Once this stage completes, APIs that operate on models such as get_model() become usable.Finally Django runs the ready() method of each application configuration.Here are some common problems that you may encounter during initialization:AppRegistryNotReady: This happens when importing an application configuration or a models module triggers code that depends on the app registry.For example, gettext() uses the app registry to look up translation catalogs in applications. To translate at import time, you need gettext_lazy() instead. (Using gettext() would be a bug, because the translation would happen at import time, rather than at each request depending on the active language.)Executing database queries with the ORM at import time in models modules will also trigger this exception. The ORM cannot function properly until all models are available.This exception also happens if you forget to call django.setup() in a standalone Python script.ImportError: cannot import name ... This happens if the import sequence ends up in a loop.To eliminate such problems, you should minimize dependencies between your models modules and do as little work as possible at import time. To avoid executing code at import time, you can move it into a function and cache its results. The code will be executed when you first need its results. This concept is known as  lazy evaluation .django.contrib.admin automatically performs autodiscovery of admin modules in installed applications. To prevent it, change your INSTALLED_APPS to contain 'django.contrib.admin.apps.SimpleAdminConfig' instead of 'django.contrib.admin'."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/exceptions/#module-django.core.exceptions", "para": "Django core exception classes are defined in django.core.exceptions.This exception is raised when attempting to use models before the app loading process, which initializes the ORM, is complete.The base class for DoesNotExist exceptions; a try/except for ObjectDoesNotExist will catch DoesNotExist exceptions for all models.See get() for further information on ObjectDoesNotExist and DoesNotExist.EmptyResultSet may be raised during query generation if a query won t return any results. Most Django projects won t encounter this exception, but it might be useful for implementing custom lookups and expressions.The FieldDoesNotExist exception is raised by a model s _meta.get_field() method when the requested field does not exist on the model or on the model s parents.The MultipleObjectsReturned exception is raised by a query if only one object is expected, but multiple objects are returned. A base version of this exception is provided in django.core.exceptions; each model class contains a subclassed version that can be used to identify the specific object type that has returned multiple objects.See get() for further information.The SuspiciousOperation exception is raised when a user has performed an operation that should be considered suspicious from a security perspective, such as tampering with a session cookie. Subclasses of SuspiciousOperation include:If a SuspiciousOperation exception reaches the WSGI handler level it is logged at the Error level and results in a HttpResponseBadRequest. See the logging documentation for more information.The PermissionDenied exception is raised when a user does not have permission to perform the action requested.The ViewDoesNotExist exception is raised by django.urls when a requested view does not exist.The MiddlewareNotUsed exception is raised when a middleware is not used in the server configuration.The ImproperlyConfigured exception is raised when Django is somehow improperly configured   for example, if a value in settings.py is incorrect or unparseable.The FieldError exception is raised when there is a problem with a model field. This can happen for several reasons:The ValidationError exception is raised when data fails form or model field validation. For more information about validation, see Form and Field Validation, Model Field Validation and the Validator Reference.ValidationErrors that don t belong to a particular field in a form or model are classified as NON_FIELD_ERRORS. This constant is used as a key in dictionaries that otherwise map fields to their respective list of errors."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/exceptions/#url-resolver-exceptions", "para": "URL Resolver exceptions are defined in django.urls.The Resolver404 exception is raised by resolve() if the path passed to resolve() doesn t map to a view. It s a subclass of django.http.Http404.The NoReverseMatch exception is raised by django.urls when a matching URL in your URLconf cannot be identified based on the parameters supplied."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/exceptions/#database-exceptions", "para": "Database exceptions may be imported from django.db.Django wraps the standard database exceptions so that your Django code has a guaranteed common implementation of these classes.The Django wrappers for database exceptions behave exactly the same as the underlying database exceptions. See PEP 249, the Python Database API Specification v2.0, for further information.As per PEP 3134, a __cause__ attribute is set with the original (underlying) database exception, allowing access to any additional information provided.Raised to prevent deletion of referenced objects when using django.db.models.PROTECT. models.ProtectedError is a subclass of IntegrityError."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/exceptions/#http-exceptions", "para": "Http exceptions may be imported from django.http.UnreadablePostError is raised when a user cancels an upload."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/exceptions/#transaction-exceptions", "para": "Transaction exceptions are defined in django.db.transaction.TransactionManagementError is raised for any and all problems related to database transactions."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/exceptions/#testing-framework-exceptions", "para": "Exceptions provided by the django.test package.RedirectCycleError is raised when the test client detects a loop or an overly long chain of redirects."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/exceptions/#python-exceptions", "para": "Django raises built-in Python exceptions when appropriate as well. See the Python documentation for further information on the Built-in Exceptions."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/django-admin/#usage", "para": "command should be one of the commands listed in this document. options, which is optional, should be zero or more of the options available for the given command.Run django-admin help to display usage information and a list of the commands provided by each application.Run django-admin help --commands to display a list of all available commands.Run django-admin help <command> to display a description of the given command and a list of its available options.Many commands take a list of  app names.  An  app name  is the basename of the package containing your models. For example, if your INSTALLED_APPS contains the string 'mysite.blog', the app name is blog.Run django-admin version to display the current Django version.The output follows the schema described in PEP 440:Use --verbosity to specify the amount of notification and debug information that django-admin prints to the console."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/django-admin/#available-commands", "para": "Uses the system check framework to inspect the entire Django project for common problems.By default, all apps will be checked. You can check a subset of apps by providing a list of app labels as arguments:If you do not specify any app, all apps will be checked.The system check framework performs many different types of checks that are categorized with tags. You can use these tags to restrict the checks performed to just those in a particular category. For example, to perform only models and compatibility checks, run:Lists all available tags.Activates some additional checks that are only relevant in a deployment setting.You can use this option in your local development environment, but since your local development settings module may not have many of your production settings, you will probably want to point the check command at a different settings module, either by setting the DJANGO_SETTINGS_MODULE environment variable, or by passing the --settings option:Or you could run it directly on a production or staging deployment to verify that the correct settings are in use (omitting --settings). You could even make it part of your integration test suite.Specifies the message level that will cause the command to exit with a non-zero status. Default is ERROR.Compiles .po files created by makemessages to .mo files for use with the built-in gettext support. See Internationalization and localization.Specifies the locale(s) to process. If not provided, all locales are processed.Specifies the locale(s) to exclude from processing. If not provided, no locales are excluded.Includes fuzzy translations into compiled files.Example usage:Creates the cache tables for use with the database cache backend using the information from your settings file. See Django s cache framework for more information.Specifies the database in which the cache table(s) will be created. Defaults to default.Prints the SQL that would be run without actually running it, so you can customize it or use the migrations framework.Runs the command-line client for the database engine specified in your ENGINE setting, with the connection parameters specified in your USER, PASSWORD, etc., settings.This command assumes the programs are on your PATH so that a simple call to the program name (psql, mysql, sqlite3, sqlplus) will find the program in the right place. There s no way to specify the location of the program manually.Specifies the database onto which to open a shell. Defaults to default.Displays differences between the current settings file and Django s default settings (or another settings file specified by --default).Settings that don t appear in the defaults are followed by \"###\". For example, the default settings don t define ROOT_URLCONF, so ROOT_URLCONF is followed by \"###\" in the output of diffsettings.Displays all settings, even if they have Django s default value. Such settings are prefixed by \"###\".The settings module to compare the current settings against. Leave empty to compare against Django s default settings.Specifies the output format. Available values are hash and unified. hash is the default mode that displays the output that s described above. unified displays the output similar to diff -u. Default settings are prefixed with a minus sign, followed by the changed setting prefixed with a plus sign.Outputs to standard output all data in the database associated with the named application(s).If no application name is provided, all installed applications will be dumped.The output of dumpdata can be used as input for loaddata.Note that dumpdata uses the default manager on the model for selecting the records to dump. If you re using a custom manager as the default manager and it filters some of the available records, not all of the objects will be dumped.Uses Django s base manager, dumping records which might otherwise be filtered or modified by a custom manager.Specifies the serialization format of the output. Defaults to JSON. Supported formats are listed in Serialization formats.Specifies the number of indentation spaces to use in the output. Defaults to None which displays all data on single line.Prevents specific applications or models (specified in the form of app_label.ModelName) from being dumped. If you specify a model name, the output will be restricted to that model, rather than the entire application. You can also mix application names and model names.If you want to exclude multiple applications, pass --exclude more than once:Specifies the database from which data will be dumped. Defaults to default.Uses the natural_key() model method to serialize any foreign key and many-to-many relationship to objects of the type that defines the method. If you re dumping contrib.auth Permission objects or contrib.contenttypes ContentType objects, you should probably use this flag. See the natural keys documentation for more details on this and the next option.Omits the primary key in the serialized data of this object since it can be calculated during deserialization.Outputs only the objects specified by a comma separated list of primary keys. This is only available when dumping one model. By default, all the records of the model are output.Specifies a file to write the serialized data to. By default, the data goes to standard output.When this option is set and --verbosity is greater than 0 (the default), a progress bar is shown in the terminal.Removes all data from the database and re-executes any post-synchronization handlers. The table of which migrations have been applied is not cleared.If you would rather start from an empty database and re-run all migrations, you should drop and recreate the database and then run migrate instead.Suppresses all user prompts.Specifies the database to flush. Defaults to default.Introspects the database tables in the database pointed-to by the NAME setting and outputs a Django model module (a models.py file) to standard output.You may choose what tables or views to inspect by passing their names as arguments. If no arguments are provided, models are created for views only if the --include-views option is used. Models for partition tables are created on PostgreSQL if the --include-partitions option is used.Use this if you have a legacy database with which you d like to use Django. The script will inspect the database and create a model for each table within it.As you might expect, the created models will have an attribute for every field in the table. Note that inspectdb has a few special cases in its field-name output:This feature is meant as a shortcut, not as definitive model generation. After you run it, you ll want to look over the generated models yourself to make customizations. In particular, you ll need to rearrange models  order, so that models that refer to other models are ordered properly.Django doesn t create database defaults when a default is specified on a model field. Similarly, database defaults aren t translated to model field defaults or detected in any fashion by inspectdb.By default, inspectdb creates unmanaged models. That is, managed = False in the model s Meta class tells Django not to manage each table s creation, modification, and deletion. If you do want to allow Django to manage the table s lifecycle, you ll need to change the managed option to True (or simply remove it because True is its default value).Support for foreign tables and materialized views was added.Specifies the database to introspect. Defaults to default.If this option is provided, models are also created for partitions.Only support for PostgreSQL is implemented.If this option is provided, models are also created for database views.Searches for and loads the contents of the named fixture into the database.Specifies the database into which the data will be loaded. Defaults to default.Ignores fields and models that may have been removed since the fixture was originally generated.Specifies a single app to look for fixtures in rather than looking in all apps.Specifies the serialization format (e.g., json or xml) for fixtures read from stdin.Excludes loading the fixtures from the given applications and/or models (in the form of app_label or app_label.ModelName). Use the option multiple times to exclude more than one app or model.A fixture is a collection of files that contain the serialized contents of the database. Each fixture has a unique name, and the files that comprise the fixture can be distributed over multiple directories, in multiple applications.Django will search in three locations for fixtures:Django will load any and all fixtures it finds in these locations that match the provided fixture names.If the named fixture has a file extension, only fixtures of that type will be loaded. For example:would only load JSON fixtures called mydata. The fixture extension must correspond to the registered name of a serializer (e.g., json or xml).If you omit the extensions, Django will search all available fixture types for a matching fixture. For example:would look for any fixture of any fixture type called mydata. If a fixture directory contained mydata.json, that fixture would be loaded as a JSON fixture.The fixtures that are named can include directory components. These directories will be included in the search path. For example:would search <app_label>/fixtures/foo/bar/mydata.json for each installed application,  <dirname>/foo/bar/mydata.json for each directory in FIXTURE_DIRS, and the literal path foo/bar/mydata.json.When fixture files are processed, the data is saved to the database as is. Model defined save() methods are not called, and any pre_save or post_save signals will be called with raw=True since the instance only contains attributes that are local to the model. You may, for example, want to disable handlers that access related fields that aren t present during fixture loading and would otherwise raise an exception:You could also write a simple decorator to encapsulate this logic:Just be aware that this logic will disable the signals whenever fixtures are deserialized, not just during loaddata.Note that the order in which fixture files are processed is undefined. However, all fixture data is installed as a single transaction, so data in one fixture can reference data in another fixture. If the database backend supports row-level constraints, these constraints will be checked at the end of the transaction.The dumpdata command can be used to generate input for loaddata.Fixtures may be compressed in zip, gz, or bz2 format. For example:would look for any of mydata.json, mydata.json.zip, mydata.json.gz, or mydata.json.bz2. The first file contained within a zip-compressed archive is used.Note that if two fixtures with the same name but different fixture type are discovered (for example, if mydata.json and mydata.xml.gz were found in the same fixture directory), fixture installation will be aborted, and any data installed in the call to loaddata will be removed from the database.MySQL with MyISAM and fixturesThe MyISAM storage engine of MySQL doesn t support transactions or constraints, so if you use MyISAM, you won t get validation of fixture data, or a rollback if multiple transaction files are found.If you re in a multi-database setup, you might have fixture data that you want to load onto one database, but not onto another. In this situation, you can add a database identifier into the names of your fixtures.For example, if your DATABASES setting has a  master  database defined, name the fixture mydata.master.json or mydata.master.json.gz and the fixture will only be loaded when you specify you want to load data into the master database.You can use a dash as the fixture name to load input from sys.stdin. For example:When reading from stdin, the --format option is required to specify the serialization format of the input (e.g., json or xml).Loading from stdin is useful with standard input and output redirections. For example:Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the Django tree) or locale (for project and application) directory. After making changes to the messages files you need to compile them with compilemessages for use with the builtin gettext support. See the i18n documentation for details.This command doesn t require configured settings. However, when settings aren t configured, the command can t ignore the MEDIA_ROOT and STATIC_ROOT directories or include LOCALE_PATHS.Updates the message files for all available languages.Specifies a list of file extensions to examine (default: html, txt, py or js if --domain is js).Example usage:Separate multiple extensions with commas or use -e or --extension multiple times:Specifies the locale(s) to process.Specifies the locale(s) to exclude from processing. If not provided, no locales are excluded.Example usage:Specifies the domain of the messages files. Supported options are:Follows symlinks to directories when looking for new translation strings.Example usage:Ignores files or directories matching the given glob-style pattern. Use multiple times to ignore more.These patterns are used by default: 'CVS', '.*', '*~', '*.pyc'.Example usage:Disables the default values of --ignore.Disables breaking long message lines into several lines in language files.Suppresses writing  #: filename:line  comment lines in language files. Using this option makes it harder for technically skilled translators to understand each message s context.Controls #: filename:line comment lines in language files. If the option is:Requires gettext 0.19 or newer.Prevents deleting the temporary .pot files generated before creating the .po file. This is useful for debugging errors which may prevent the final language files from being created.See alsoSee Customizing the makemessages command for instructions on how to customize the keywords that makemessages passes to xgettext.Creates new migrations based on the changes detected to your models. Migrations, their relationship with apps and more are covered in depth in the migrations documentation.Providing one or more app names as arguments will limit the migrations created to the app(s) specified and any dependencies needed (the table at the other end of a ForeignKey, for example).To add migrations to an app that doesn t have a migrations directory, run makemigrations with the app s app_label.Suppresses all user prompts. If a suppressed prompt cannot be resolved automatically, the command will exit with error code 3.Outputs an empty migration for the specified apps, for manual editing. This is for advanced users and should not be used unless you are familiar with the migration format, migration operations, and the dependencies between your migrations.Shows what migrations would be made without actually writing any migrations files to disk. Using this option along with --verbosity 3 will also show the complete migrations files that would be written.Enables fixing of migration conflicts.Allows naming the generated migration(s) instead of using a generated name. The name must be a valid Python identifier.Generate migration files without Django version and timestamp header.Makes makemigrations exit with a non-zero status when model changes without migrations are detected.Synchronizes the database state with the current set of models and migrations. Migrations, their relationship with apps and more are covered in depth in the migrations documentation.The behavior of this command changes depending on the arguments provided:Specifies the database to migrate. Defaults to default.Marks the migrations up to the target one (following the rules above) as applied, but without actually running the SQL to change your database schema.This is intended for advanced users to manipulate the current migration state directly if they re manually applying changes; be warned that using --fake runs the risk of putting the migration state table into a state where manual recovery will be needed to make migrations run correctly.Allows Django to skip an app s initial migration if all database tables with the names of all models created by all CreateModel operations in that migration already exist. This option is intended for use when first running migrations against a database that preexisted the use of migrations. This option does not, however, check for matching database schema beyond matching table names and so is only safe to use if you are confident that your existing schema matches what is recorded in your initial migration.Shows the migration operations that will be performed for the given migrate command.Allows creating tables for apps without migrations. While this isn t recommended, the migrations framework is sometimes too slow on large projects with hundreds of models.Suppresses all user prompts. An example prompt is asking about removing stale content types.Starts a lightweight development Web server on the local machine. By default, the server runs on port 8000 on the IP address 127.0.0.1. You can pass in an IP address and port number explicitly.If you run this script as a user with normal privileges (recommended), you might not have access to start a port on a low port number. Low port numbers are reserved for the superuser (root).This server uses the WSGI application object specified by the WSGI_APPLICATION setting.DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests. (And that s how it s gonna stay. We re in the business of making Web frameworks, not Web servers, so improving this server to be able to handle a production environment is outside the scope of Django.)The development server automatically reloads Python code for each request, as needed. You don t need to restart the server for code changes to take effect. However, some actions like adding files don t trigger a restart, so you ll have to restart the server in these cases.If you re using Linux or MacOS and install both pywatchman and the Watchman service, kernel signals will be used to autoreload the server (rather than polling file modification timestamps each second). This offers better performance on large projects, reduced response time after code changes, more robust change detection, and a reduction in power usage.Large directories with many files may cause performance issuesWhen using Watchman with a project that includes large non-Python directories like node_modules, it s advisable to ignore this directory for optimal performance. See the watchman documentation for information on how to do this.Watchman support replaced support for pyinotify.When you start the server, and each time you change Python code while the server is running, the system check framework will check your entire Django project for some common errors (see the check command). If any errors are found, they will be printed to standard output.You can run as many concurrent servers as you want, as long as they re on separate ports. Just execute django-admin runserver more than once.Note that the default IP address, 127.0.0.1, is not accessible from other machines on your network. To make your development server viewable to other machines on the network, use its own IP address (e.g. 192.168.2.1) or 0.0.0.0 or :: (with IPv6 enabled).You can provide an IPv6 address surrounded by brackets (e.g. [200a::1]:8000). This will automatically enable IPv6 support.A hostname containing ASCII-only characters can also be used.If the staticfiles contrib app is enabled (default in new projects) the runserver command will be overridden with its own runserver command.Logging of each request and response of the server is sent to the django.server logger.Disables the auto-reloader. This means any Python code changes you make while the server is running will not take effect if the particular Python modules have already been loaded into memory.Disables use of threading in the development server. The server is multithreaded by default.Uses IPv6 for the development server. This changes the default IP address from 127.0.0.1 to ::1.Port 8000 on IP address 127.0.0.1:Port 8000 on IP address 1.2.3.4:Port 7000 on IP address 127.0.0.1:Port 7000 on IP address 1.2.3.4:Port 8000 on IPv6 address ::1:Port 7000 on IPv6 address ::1:Port 7000 on IPv6 address 2001:0db8:1234:5678::9:Port 8000 on IPv4 address of host localhost:Port 8000 on IPv6 address of host localhost:By default, the development server doesn t serve any static files for your site (such as CSS files, images, things under MEDIA_URL and so forth). If you want to configure Django to serve static media, read Managing static files (e.g. images, JavaScript, CSS).Sends a test email (to confirm email sending through Django is working) to the recipient(s) specified. For example:There are a couple of options, and you may use any combination of them together:Mails the email addresses specified in MANAGERS using mail_managers().Mails the email addresses specified in ADMINS using mail_admins().Starts the Python interactive interpreter.Specifies the shell to use. By default, Django will use IPython or bpython if either is installed. If both are installed, specify which one you want like so:IPython:bpython:If you have a  rich  shell installed but want to force use of the  plain  Python interpreter, use python as the interface name, like so:Disables reading the startup script for the  plain  Python interpreter. By default, the script pointed to by the PYTHONSTARTUP environment variable or the ~/.pythonrc.py script is read.Lets you pass a command as a string to execute it as Django, like so:You can also pass code in on standard input to execute it. For example:On Windows, the REPL is output due to implementation limits of select.select() on that platform.Shows all migrations in a project. You can choose from one of two formats:Lists all of the apps Django knows about, the migrations available for each app, and whether or not each migration is applied (marked by an [X] next to the migration name).Apps without migrations are also listed, but have (no migrations) printed under them.This is the default output format.Shows the migration plan Django will follow to apply migrations. Like --list, applied migrations are marked by an [X]. For a --verbosity of 2 and above, all dependencies of a migration will also be shown.app_labels arguments limit the output, however, dependencies of provided apps may also be included.Specifies the database to examine. Defaults to default.Prints the SQL statements that would be executed for the flush command.Specifies the database for which to print the SQL. Defaults to default.Prints the SQL for the named migration. This requires an active database connection, which it will use to resolve constraint names; this means you must generate the SQL against a copy of the database you wish to later apply it on.Note that sqlmigrate doesn t colorize its output.Generates the SQL for unapplying the migration. By default, the SQL created is for running the migration in the forwards direction.Specifies the database for which to generate the SQL. Defaults to default.Prints the SQL statements for resetting sequences for the given app name(s).Sequences are indexes used by some database engines to track the next available number for automatically incremented fields.Use this command to generate SQL which will fix cases where a sequence is out of sync with its automatically incremented field data.Specifies the database for which to print the SQL. Defaults to default.Squashes the migrations for app_label up to and including migration_name down into fewer migrations, if possible. The resulting squashed migrations can live alongside the unsquashed ones safely. For more information, please read Squashing migrations.When start_migration_name is given, Django will only include migrations starting from and including this migration. This helps to mitigate the squashing limitation of RunPython and django.db.migrations.operations.RunSQL migration operations.Disables the optimizer when generating a squashed migration. By default, Django will try to optimize the operations in your migrations to reduce the size of the resulting file. Use this option if this process is failing or creating incorrect migrations, though please also file a Django bug report about the behavior, as optimization is meant to be safe.Suppresses all user prompts.Sets the name of the squashed migration. When omitted, the name is based on the first and last migration, with _squashed_ in between.Generate squashed migration file without Django version and timestamp header.Creates a Django app directory structure for the given app name in the current directory or the given destination.By default, the new directory contains a models.py file and other app template files. If only the app name is given, the app directory will be created in the current working directory.If the optional destination is provided, Django will use that existing directory rather than creating a new one. You can use  .  to denote the current working directory.For example:Provides the path to a directory with a custom app template file or a path to a compressed file (.tar.gz, .tar.bz2, .tgz, .tbz, .zip) containing the app template files.For example, this would look for an app template in the given directory when creating the myapp app:Django will also accept URLs (http, https, ftp) to compressed archives with the app template files, downloading and extracting them on the fly.For example, taking advantage of GitHub s feature to expose repositories as zip files, you can use a URL like:Specifies which file extensions in the app template should be rendered with the template engine. Defaults to py.Specifies which files in the app template (in addition to those matching --extension) should be rendered with the template engine. Defaults to an empty list.The template context used for all matching files is:WarningWhen the app template files are rendered with the Django template engine (by default all *.py files), Django will also replace all stray template variables contained. For example, if one of the Python files contains a docstring explaining a particular feature related to template rendering, it might result in an incorrect example.To work around this problem, you can use the templatetag template tag to  escape  the various parts of the template syntax.In addition, to allow Python template files that contain Django template language syntax while also preventing packaging systems from trying to byte-compile invalid *.py files, template files ending with .py-tpl will be renamed to .py.Creates a Django project directory structure for the given project name in the current directory or the given destination.By default, the new directory contains manage.py and a project package (containing a settings.py and other files).If only the project name is given, both the project directory and project package will be named <projectname> and the project directory will be created in the current working directory.If the optional destination is provided, Django will use that existing directory as the project directory, and create manage.py and the project package within it. Use  .  to denote the current working directory.For example:Specifies a directory, file path, or URL of a custom project template. See the startapp --template documentation for examples and usage.Specifies which file extensions in the project template should be rendered with the template engine. Defaults to py.Specifies which files in the project template (in addition to those matching --extension) should be rendered with the template engine. Defaults to an empty list.The template context used is:Please also see the rendering warning as mentioned for startapp.Runs tests for all installed apps. See Testing in Django for more information.Stops running tests and reports the failure immediately after a test fails.Controls the test runner class that is used to execute tests. This value overrides the value provided by the TEST_RUNNER setting.Suppresses all user prompts. A typical prompt is a warning about deleting an existing test database.The test command receives options on behalf of the specified --testrunner. These are the options of the default test runner: DiscoverRunner.Preserves the test database between test runs. This has the advantage of skipping both the create and destroy actions which can greatly decrease the time to run tests, especially those in a large test suite. If the test database does not exist, it will be created on the first run and then preserved for each subsequent run. Any unapplied migrations will also be applied to the test database before running the test suite.Sorts test cases in the opposite execution order. This may help in debugging the side effects of tests that aren t properly isolated. Grouping by test class is preserved when using this option.Sets the DEBUG setting to True prior to running tests. This may help troubleshoot test failures.Enables SQL logging for failing tests. If --verbosity is 2, then queries in passing tests are also output.Runs tests in separate parallel processes. Since modern processors have multiple cores, this allows running tests significantly faster.By default --parallel runs one process per core according to multiprocessing.cpu_count(). You can adjust the number of processes either by providing it as the option s value, e.g. --parallel=4, or by setting the DJANGO_TEST_PROCESSES environment variable.Django distributes test cases   unittest.TestCase subclasses   to subprocesses. If there are fewer test cases than configured processes, Django will reduce the number of processes accordingly.Each process gets its own database. You must ensure that different test cases don t access the same resources. For instance, test cases that touch the filesystem should create a temporary directory for their own use.This option requires the third-party tblib package to display tracebacks correctly:This feature isn t available on Windows. It doesn t work with the Oracle database backend either.If you want to use pdb while debugging tests, you must disable parallel execution (--parallel=1). You ll see something like bdb.BdbQuit if you don t.WarningWhen test parallelization is enabled and a test fails, Django may be unable to display the exception traceback. This can make debugging difficult. If you encounter this problem, run the affected test without parallelization to see the traceback of the failure.This is a known limitation. It arises from the need to serialize objects in order to exchange them between processes. See What can be pickled and unpickled? for details.Runs only tests marked with the specified tags. May be specified multiple times and combined with test --exclude-tag.Excludes tests marked with the specified tags. May be specified multiple times and combined with test --tag.Runs a Django development server (as in runserver) using data from the given fixture(s).For example, this command: would perform the following steps:This is useful in a number of ways:Note that this server does not automatically detect changes to your Python source code (as runserver does). It does, however, detect changes to templates.Specifies a different port, or IP address and port, from the default of 127.0.0.1:8000. This value follows exactly the same format and serves exactly the same function as the argument to the runserver command.Examples:To run the test server on port 7000 with fixture1 and fixture2:(The above statements are equivalent. We include both of them to demonstrate that it doesn t matter whether the options come before or after the fixture arguments.)To run on 1.2.3.4:7000 with a test fixture:Suppresses all user prompts. A typical prompt is a warning about deleting an existing test database."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/django-admin/#commands-provided-by-applications", "para": "Some commands are only available when the django.contrib application that implements them has been enabled. This section describes them grouped by their application.This command is only available if Django s authentication system (django.contrib.auth) is installed.Allows changing a user s password. It prompts you to enter a new password twice for the given user. If the entries are identical, this immediately becomes the new password. If you do not supply a user, the command will attempt to change the password whose username matches the current user.Specifies the database to query for the user. Defaults to default.Example usage:This command is only available if Django s authentication system (django.contrib.auth) is installed.Creates a superuser account (a user who has all permissions). This is useful if you need to create an initial superuser account or if you need to programmatically generate superuser accounts for your site(s).When run interactively, this command will prompt for a password for the new superuser account. When run non-interactively, no password will be set, and the superuser account will not be able to log in until a password has been manually set for it.The username and email address for the new account can be supplied by using the --username and --email arguments on the command line. If either of those is not supplied, createsuperuser will prompt for it when running interactively.Specifies the database into which the superuser object will be saved.You can subclass the management command and override get_input_data() if you want to customize data input and validation. Consult the source code for details on the existing implementation and the method s parameters. For example, it could be useful if you have a ForeignKey in REQUIRED_FIELDS and want to allow creating an instance instead of entering the primary key of an existing instance.This command is only available if Django s contenttypes app (django.contrib.contenttypes) is installed.Deletes stale content types (from deleted models) in your database. Any objects that depend on the deleted content types will also be deleted. A list of deleted objects will be displayed before you confirm it s okay to proceed with the deletion.Specifies the database to use. Defaults to default.This command is only available if GeoDjango (django.contrib.gis) is installed.Please refer to its description in the GeoDjango documentation.Can be run as a cron job or directly to clean out expired sessions.This command is only available if the Sitemaps framework (django.contrib.sitemaps) is installed.Please refer to its description in the Sitemaps documentation.This command is only available if the static files application (django.contrib.staticfiles) is installed.Please refer to its description in the staticfiles documentation.This command is only available if the static files application (django.contrib.staticfiles) is installed.Please refer to its description in the staticfiles documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/django-admin/#default-options", "para": "Although some commands may allow their own custom options, every command allows for the following options:Adds the given filesystem path to the Python import search path. If this isn t provided, django-admin will use the PYTHONPATH environment variable.This option is unnecessary in manage.py, because it takes care of setting the Python path for you.Example usage:Specifies the settings module to use. The settings module should be in Python package syntax, e.g. mysite.settings. If this isn t provided, django-admin will use the DJANGO_SETTINGS_MODULE environment variable.This option is unnecessary in manage.py, because it uses settings.py from the current project by default.Example usage:Displays a full stack trace when a CommandError is raised. By default, django-admin will show a simple error message when a CommandError occurs and a full stack trace for any other exception.Example usage:Specifies the amount of notification and debug information that a command should print to the console.Example usage:Disables colorized command output.  Some commands format their output to be colorized. For example, errors will be printed to the console in red and SQL statements will be syntax highlighted.Example usage:Forces colorization of the command output if it would otherwise be disabled as discussed in Syntax coloring. For example, you may want to pipe colored output to another command."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/django-admin/#extra-niceties", "para": "The django-admin / manage.py commands will use pretty color-coded output if your terminal supports ANSI-colored output. It won t use the color codes if you re piping the command s output to another program unless the --force-color option is used.Under Windows, the native console doesn t support ANSI escape sequences so by default there is no color output. But you can install the ANSICON third-party tool, the Django commands will detect its presence and will make use of its services to color output just like on Unix-based platforms.The colors used for syntax highlighting can be customized. Django ships with three color palettes:You select a palette by setting a DJANGO_COLORS environment variable to specify the palette you want to use. For example, to specify the light palette under a Unix or OS/X BASH shell, you would run the following at a command prompt:You can also customize the colors that are used. Django specifies a number of roles in which color is used:Each of these roles can be assigned a specific foreground and background color, from the following list:Each of these colors can then be modified by using the following display options:A color specification follows one of the following patterns:where role is the name of a valid color role, fg is the foreground color, bg is the background color and each option is one of the color modifying options. Multiple color specifications are then separated by a semicolon. For example:would specify that errors be displayed using blinking yellow on blue, and notices displayed using magenta. All other color roles would be left uncolored.Colors can also be specified by extending a base palette. If you put a palette name in a color specification, all the colors implied by that palette will be loaded. So:would specify the use of all the colors in the light color palette, except for the colors for errors and notices which would be overridden as specified.If you use the Bash shell, consider installing the Django bash completion script, which lives in extras/django_bash_completion in the Django source distribution. It enables tab-completion of django-admin and manage.py commands, so you can, for instance See Writing custom django-admin commands for how to add customized actions."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/django-admin/#output-redirection", "para": "Note that you can redirect standard output and error streams as all commands support the stdout and stderr options. For example, you could write:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-management-commands/#accepting-optional-arguments", "para": "The same closepoll could be easily modified to delete a given poll instead of closing it by accepting additional command line options. These custom options can be added in the add_arguments() method like this:The option (delete in our example) is available in the options dict parameter of the handle method. See the argparse Python documentation for more about add_argument usage.In addition to being able to add custom command line options, all management commands can accept some default options such as --verbosity and --traceback."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-management-commands/#management-commands-and-locales", "para": "By default, management commands are executed with the current active locale.If, for some reason, your custom management command must run without an active locale (for example, to prevent translated content from being inserted into the database), deactivate translations using the @no_translations decorator on your handle() method:Since translation deactivation requires access to configured settings, the decorator can t be used for commands that work without configured settings.The @no_translations decorator is new. In older versions, translations are deactivated before running a command unless the command s leave_locale_alone attribute (now removed) is set to True."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-management-commands/#testing", "para": "Information on how to test custom management commands can be found in the testing docs."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-management-commands/#overriding-commands", "para": "Django registers the built-in commands and then searches for commands in INSTALLED_APPS in reverse. During the search, if a command name duplicates an already registered command, the newly discovered command overrides the first.In other words, to override a command, the new command must have the same name and its app must be before the overridden command s app in INSTALLED_APPS.Management commands from third-party apps that have been unintentionally overridden can be made available under a new name by creating a new command in one of your project s apps (ordered before the third-party app in INSTALLED_APPS) which imports the Command of the overridden command."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/custom-management-commands/#command-objects", "para": "The base class from which all management commands ultimately derive.Use this class if you want access to all of the mechanisms which parse the command-line arguments and work out what code to call in response; if you don t need to change any of that behavior, consider using one of its subclasses.Subclassing the BaseCommand class requires that you implement the handle() method.All attributes can be set in your derived class and can be used in BaseCommand s subclasses.A short description of the command, which will be printed in the help message when the user runs the command python manage.py help <command>.If your command defines mandatory positional arguments, you can customize the message error returned in the case of missing arguments. The default is output by argparse ( too few arguments ).A boolean indicating whether the command outputs SQL statements; if True, the output will automatically be wrapped with BEGIN; and COMMIT;. Default value is False.A boolean; if True, the command prints a warning if the set of migrations on disk don t match the migrations in the database. A warning doesn t prevent the command from executing. Default value is False.A boolean; if True, the entire Django project will be checked for potential problems prior to executing the command. Default value is True.An instance attribute that helps create colored output when writing to stdout or stderr. For example:See Syntax coloring to learn how to modify the color palette and to see the available styles (use uppercased versions of the  roles  described in that section).If you pass the --no-color option when running your command, all self.style() calls will return the original string uncolored.BaseCommand has a few methods that can be overridden but only the handle() method must be implemented.Implementing a constructor in a subclassIf you implement __init__ in your subclass of BaseCommand, you must call BaseCommand s __init__:Returns a CommandParser instance, which is an ArgumentParser subclass with a few customizations for Django.You can customize the instance by overriding this method and calling super() with kwargs of ArgumentParser parameters.kwargs was added.Entry point to add parser arguments to handle command line arguments passed to the command. Custom commands should override this method to add both positional and optional arguments accepted by the command. Calling super() is not needed when directly subclassing BaseCommand.Returns the Django version, which should be correct for all built-in Django commands. User-supplied commands can override this method to return their own version.Tries to execute this command, performing system checks if needed (as controlled by the requires_system_checks attribute). If the command raises a CommandError, it s intercepted and printed to stderr.Calling a management command in your codeexecute() should not be called directly from your code to execute a command. Use call_command() instead.The actual logic of the command. Subclasses must implement this method.It may return a string which will be printed to stdout (wrapped by BEGIN; and COMMIT; if output_transaction is True).Uses the system check framework to inspect the entire Django project for potential problems. Serious problems are raised as a CommandError; warnings are output to stderr; minor notifications are output to stdout.If app_configs and tags are both None, all system checks are performed. tags can be a list of check tags, like compatibility or models.A management command which takes one or more installed application labels as arguments, and does something with each of them.Rather than implementing handle(), subclasses must implement handle_app_config(), which will be called once for each application.Perform the command s actions for app_config, which will be an AppConfig instance corresponding to an application label given on the command line.A management command which takes one or more arbitrary arguments (labels) on the command line, and does something with each of them.Rather than implementing handle(), subclasses must implement handle_label(), which will be called once for each label.A string describing the arbitrary arguments passed to the command. The string is used in the usage text and error messages of the command. Defaults to 'label'.Perform the command s actions for label, which will be the string as given on the command line.Exception class indicating a problem while executing a management command.If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command.If a management command is called from code through call_command(), it s up to you to catch the exception when needed."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/overview/#writing-tests", "para": "Django s unit tests use a Python standard library module: unittest. This module defines tests using a class-based approach.Here is an example which subclasses from django.test.TestCase, which is a subclass of unittest.TestCase that runs each test inside a transaction to provide isolation:When you run your tests, the default behavior of the test utility is to find all the test cases (that is, subclasses of unittest.TestCase) in any file whose name begins with test, automatically build a test suite out of those test cases, and run that suite.For more details about unittest, see the Python documentation.Where should the tests live?The default startapp template creates a tests.py file in the new application. This might be fine if you only have a few tests, but as your test suite grows you ll likely want to restructure it into a tests package so you can split your tests into different submodules such as test_models.py, test_views.py, test_forms.py, etc. Feel free to pick whatever organizational scheme you like.See also Using the Django test runner to test reusable applications.WarningIf your tests rely on database access such as creating or querying models, be sure to create your test classes as subclasses of django.test.TestCase rather than unittest.TestCase.Using unittest.TestCase avoids the cost of running each test in a transaction and flushing the database, but if your tests interact with the database their behavior will vary based on the order that the test runner executes them. This can lead to unit tests that pass when run in isolation but fail when run in a suite."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/overview/#running-tests", "para": "Once you ve written tests, run them using the test command of your project s manage.py utility:Test discovery is based on the unittest module s built-in test discovery.  By default, this will discover tests in any file named  test*.py  under the current working directory.You can specify particular tests to run by supplying any number of  test labels  to ./manage.py test. Each test label can be a full Python dotted path to a package, module, TestCase subclass, or test method. For instance:You can also provide a path to a directory to discover tests below that directory:You can specify a custom filename pattern match using the -p (or --pattern) option, if your test files are named differently from the test*.py pattern:If you press Ctrl-C while the tests are running, the test runner will wait for the currently running test to complete and then exit gracefully. During a graceful exit the test runner will output details of any test failures, report on how many tests were run and how many errors and failures were encountered, and destroy any test databases as usual. Thus pressing Ctrl-C can be very useful if you forget to pass the --failfast option, notice that some tests are unexpectedly failing and want to get details on the failures without waiting for the full test run to complete.If you do not want to wait for the currently running test to finish, you can press Ctrl-C a second time and the test run will halt immediately, but not gracefully. No details of the tests run before the interruption will be reported, and any test databases created by the run will not be destroyed.Test with warnings enabledIt s a good idea to run your tests with Python warnings enabled: python -Wa manage.py test. The -Wa flag tells Python to display deprecation warnings. Django, like many other Python libraries, uses these warnings to flag when features are going away. It also might flag areas in your code that aren t strictly wrong but could benefit from a better implementation.Tests that require a database (namely, model tests) will not use your  real  (production) database. Separate, blank databases are created for the tests.Regardless of whether the tests pass or fail, the test databases are destroyed when all the tests have been executed.You can prevent the test databases from being destroyed by using the test --keepdb option. This will preserve the test database between runs. If the database does not exist, it will first be created. Any migrations will also be applied in order to keep it up to date.As described in the previous section, if a test run is forcefully interrupted, the test database may not be destroyed. On the next run, you ll be asked whether you want to reuse or destroy the database. Use the test --noinput option to suppress that prompt and automatically destroy the database. This can be useful when running tests on a continuous integration server where tests may be interrupted by a timeout, for example.The default test database names are created by prepending test_ to the value of each NAME in DATABASES. When using SQLite, the tests will use an in-memory database by default (i.e., the database will be created in memory, bypassing the filesystem entirely!). The TEST dictionary in DATABASES offers a number of settings to configure your test database. For example, if you want to use a different database name, specify NAME in the TEST dictionary for any given database in DATABASES.On PostgreSQL, USER will also need read access to the built-in postgres database.Aside from using a separate database, the test runner will otherwise use all of the same database settings you have in your settings file: ENGINE, USER, HOST, etc. The test database is created by the user specified by USER, so you ll need to make sure that the given user account has sufficient privileges to create a new database on the system.For fine-grained control over the character encoding of your test database, use the CHARSET TEST option. If you re using MySQL, you can also use the COLLATION option to control the particular collation used by the test database. See the settings documentation for details of these and other advanced settings.If using an SQLite in-memory database with SQLite, shared cache is enabled, so you can write tests with ability to share the database between threads.Finding data from your production database when running tests?If your code attempts to access the database when its modules are compiled, this will occur before the test database is set up, with potentially unexpected results. For example, if you have a database query in module-level code and a real database exists, production data could pollute your tests. It is a bad idea to have such import-time database queries in your code anyway - rewrite your code so that it doesn t do this.This also applies to customized implementations of ready().See alsoThe advanced multi-db testing topics.In order to guarantee that all TestCase code starts with a clean database, the Django test runner reorders tests in the following way:NoteThe new ordering of tests may reveal unexpected dependencies on test case ordering. This is the case with doctests that relied on state left in the database by a given TransactionTestCase test, they must be updated to be able to run independently.You may reverse the execution order inside groups using the test --reverse option. This can help with ensuring your tests are independent from each other.Any initial data loaded in migrations will only be available in TestCase tests and not in TransactionTestCase tests, and additionally only on backends where transactions are supported (the most important exception being MyISAM). This is also true for tests which rely on TransactionTestCase such as LiveServerTestCase and StaticLiveServerTestCase.Django can reload that data for you on a per-testcase basis by setting the serialized_rollback option to True in the body of the TestCase or TransactionTestCase, but note that this will slow down that test suite by approximately 3x.Third-party apps or those developing against MyISAM will need to set this; in general, however, you should be developing your own projects against a transactional database and be using TestCase for most tests, and thus not need this setting.The initial serialization is usually very quick, but if you wish to exclude some apps from this process (and speed up test runs slightly), you may add those apps to TEST_NON_SERIALIZED_APPS.To prevent serialized data from being loaded twice, setting serialized_rollback=True disables the post_migrate signal when flushing the test database.Regardless of the value of the DEBUG setting in your configuration file, all Django tests run with DEBUG=False. This is to ensure that the observed output of your code matches what will be seen in a production setting.Caches are not cleared after each test, and running  manage.py test fooapp  can insert data from the tests into the cache of a live system if you run your tests in production because, unlike databases, a separate  test cache  is not used. This behavior may change in the future.When you run your tests, you ll see a number of messages as the test runner prepares itself. You can control the level of detail of these messages with the verbosity option on the command line:This tells you that the test runner is creating a test database, as described in the previous section.Once the test database has been created, Django will run your tests. If everything goes well, you ll see something like this:If there are test failures, however, you ll see full details about which tests failed:A full explanation of this error output is beyond the scope of this document, but it s pretty intuitive. You can consult the documentation of Python s unittest library for details.Note that the return code for the test-runner script is 1 for any number of failed and erroneous tests. If all the tests pass, the return code is 0. This feature is useful if you re using the test-runner script in a shell script and need to test for success or failure at that level.As long as your tests are properly isolated, you can run them in parallel to gain a speed up on multi-core hardware. See test --parallel.The default password hasher is rather slow by design. If you re authenticating many users in your tests, you may want to use a custom settings file and set the PASSWORD_HASHERS setting to a faster hashing algorithm:Don t forget to also include in PASSWORD_HASHERS any hashing algorithm used in fixtures, if any.The test --keepdb option preserves the test database between test runs. It skips the create and destroy actions which can greatly decrease the time to run tests."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/tools/#the-test-client", "para": "The test client is a Python class that acts as a dummy Web browser, allowing you to test your views and interact with your Django-powered application programmatically.Some of the things you can do with the test client are:Note that the test client is not intended to be a replacement for Selenium or other  in-browser  frameworks. Django s test client has a different focus. In short:A comprehensive test suite should use a combination of both test types.To use the test client, instantiate django.test.Client and retrieve Web pages:As this example suggests, you can instantiate Client from within a session of the Python interactive interpreter.Note a few important things about how the test client works:The test client does not require the Web server to be running. In fact, it will run just fine with no Web server running at all! That s because it avoids the overhead of HTTP and deals directly with the Django framework. This helps make the unit tests run quickly.When retrieving pages, remember to specify the path of the URL, not the whole domain. For example, this is correct:This is incorrect:The test client is not capable of retrieving Web pages that are not powered by your Django project. If you need to retrieve other Web pages, use a Python standard library module such as urllib.To resolve URLs, the test client uses whatever URLconf is pointed-to by your ROOT_URLCONF setting.Although the above example would work in the Python interactive interpreter, some of the test client s functionality, notably the template-related functionality, is only available while tests are running.The reason for this is that Django s test runner performs a bit of black magic in order to determine which template was loaded by a given view. This black magic (essentially a patching of Django s template system in memory) only happens during test running.By default, the test client will disable any CSRF checks performed by your site.If, for some reason, you want the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks. To do this, pass in the enforce_csrf_checks argument when you construct your client:Use the django.test.Client class to make requests.It requires no arguments at time of construction. However, you can use keywords arguments to specify some default headers. For example, this will send a User-Agent HTTP header in each request:The values from the extra keywords arguments passed to get(), post(), etc. have precedence over the defaults passed to the class constructor.The enforce_csrf_checks argument can be used to test CSRF protection (see above).The json_encoder argument allows setting a custom JSON encoder for the JSON serialization that s described in post().The json_encoder argument was added.Once you have a Client instance, you can call any of the following methods:Makes a GET request on the provided path and returns a Response object, which is documented below.The key-value pairs in the data dictionary are used to create a GET data payload. For example: will result in the evaluation of a GET request equivalent to:The extra keyword arguments parameter can be used to specify headers to be sent in the request. For example: will send the HTTP header HTTP_X_REQUESTED_WITH to the details view, which is a good way to test code paths that use the django.http.HttpRequest.is_ajax() method.CGI specificationThe headers sent via **extra should follow CGI specification. For example, emulating a different  Host  header as sent in the HTTP request from the browser to the server should be passed as HTTP_HOST.If you already have the GET arguments in URL-encoded form, you can use that encoding instead of using the data argument. For example, the previous GET request could also be posed as:If you provide a URL with both an encoded GET data and a data argument, the data argument will take precedence.If you set follow to True the client will follow any redirects and a redirect_chain attribute will be set in the response object containing tuples of the intermediate urls and status codes.If you had a URL /redirect_me/ that redirected to /next/, that redirected to /final/, this is what you d see:If you set secure to True the client will emulate an HTTPS request.Makes a POST request on the provided path and returns a Response object, which is documented below.The key-value pairs in the data dictionary are used to submit POST data. For example: will result in the evaluation of a POST request to this URL: with this POST data:If you provide content_type as application/json, the data is serialized using json.dumps() if it s a dict, list, or tuple. Serialization is performed with DjangoJSONEncoder by default, and can be overridden by providing a json_encoder argument to Client. This serialization also happens for put(), patch(), and delete() requests.The JSON serialization described above was added. In older versions, you can call json.dumps() on data before passing it to post() to achieve the same thing.The JSON serialization was extended to support lists and tuples. In older versions, only dicts are serialized.If you provide any other content_type (e.g. text/xml for an XML payload), the contents of data are sent as-is in the POST request, using content_type in the HTTP Content-Type header.If you don t provide a value for content_type, the values in data will be transmitted with a content type of multipart/form-data. In this case, the key-value pairs in data will be encoded as a multipart message and used to create the POST data payload.To submit multiple values for a given key   for example, to specify the selections for a <select multiple>   provide the values as a list or tuple for the required key. For example, this value of data would submit three selected values for the field named choices:Submitting files is a special case. To POST a file, you need only provide the file field name as a key, and a file handle to the file you wish to upload as a value. For example:(The name attachment here is not relevant; use whatever name your file-processing code expects.)You may also provide any file-like object (e.g., StringIO or BytesIO) as a file handle. If you re uploading to an ImageField, the object needs a name attribute that passes the validate_image_file_extension validator. For example:Note that if you wish to use the same file handle for multiple post() calls then you will need to manually reset the file pointer between posts. The easiest way to do this is to manually close the file after it has been provided to post(), as demonstrated above.You should also ensure that the file is opened in a way that allows the data to be read. If your file contains binary data such as an image, this means you will need to open the file in rb (read binary) mode.The extra argument acts the same as for Client.get().If the URL you request with a POST contains encoded parameters, these parameters will be made available in the request.GET data. For example, if you were to make the request:  the view handling this request could interrogate request.POST to retrieve the username and password, and could interrogate request.GET to determine if the user was a visitor.If you set follow to True the client will follow any redirects and a redirect_chain attribute will be set in the response object containing tuples of the intermediate urls and status codes.If you set secure to True the client will emulate an HTTPS request.Makes a HEAD request on the provided path and returns a Response object. This method works just like Client.get(), including the follow, secure and extra arguments, except it does not return a message body.Makes an OPTIONS request on the provided path and returns a Response object. Useful for testing RESTful interfaces.When data is provided, it is used as the request body, and a Content-Type header is set to content_type.The follow, secure and extra arguments act the same as for Client.get().Makes a PUT request on the provided path and returns a Response object. Useful for testing RESTful interfaces.When data is provided, it is used as the request body, and a Content-Type header is set to content_type.The follow, secure and extra arguments act the same as for Client.get().Makes a PATCH request on the provided path and returns a Response object. Useful for testing RESTful interfaces.The follow, secure and extra arguments act the same as for Client.get().Makes a DELETE request on the provided path and returns a Response object. Useful for testing RESTful interfaces.When data is provided, it is used as the request body, and a Content-Type header is set to content_type.The follow, secure and extra arguments act the same as for Client.get().Makes a TRACE request on the provided path and returns a Response object. Useful for simulating diagnostic probes.Unlike the other request methods, data is not provided as a keyword parameter in order to comply with RFC 7231#section-4.3.8, which mandates that TRACE requests must not have a body.The follow, secure, and extra arguments act the same as for Client.get().If your site uses Django s authentication system and you deal with logging in users, you can use the test client s login() method to simulate the effect of a user logging into the site.After you call this method, the test client will have all the cookies and session data required to pass any login-based tests that may form part of a view.The format of the credentials argument depends on which authentication backend you re using (which is configured by your AUTHENTICATION_BACKENDS setting). If you re using the standard authentication backend provided by Django (ModelBackend), credentials should be the user s username and password, provided as keyword arguments:If you re using a different authentication backend, this method may require different credentials. It requires whichever credentials are required by your backend s authenticate() method.login() returns True if it the credentials were accepted and login was successful.Finally, you ll need to remember to create user accounts before you can use this method. As we explained above, the test runner is executed using a test database, which contains no users by default. As a result, user accounts that are valid on your production site will not work under test conditions. You ll need to create users as part of the test suite   either manually (using the Django model API) or with a test fixture. Remember that if you want your test user to have a password, you can t set the user s password by setting the password attribute directly   you must use the set_password() function to store a correctly hashed password. Alternatively, you can use the create_user() helper method to create a new user with a correctly hashed password.If your site uses Django s authentication system, you can use the force_login() method to simulate the effect of a user logging into the site. Use this method instead of login() when a test requires a user be logged in and the details of how a user logged in aren t important.Unlike login(), this method skips the authentication and verification steps: inactive users (is_active=False) are permitted to login and the user s credentials don t need to be provided.The user will have its backend attribute set to the value of the backend argument (which should be a dotted Python path string), or to settings.AUTHENTICATION_BACKENDS[0] if a value isn t provided. The authenticate() function called by login() normally annotates the user like this.This method is faster than login() since the expensive password hashing algorithms are bypassed. Also, you can speed up login() by using a weaker hasher while testing.If your site uses Django s authentication system, the logout() method can be used to simulate the effect of a user logging out of your site.After you call this method, the test client will have all the cookies and session data cleared to defaults. Subsequent requests will appear to come from an AnonymousUser.The get() and post() methods both return a Response object. This Response object is not the same as the HttpResponse object returned by Django views; the test response object has some additional data useful for test code to verify.Specifically, a Response object has the following attributes:The test client that was used to make the request that resulted in the response.The body of the response, as a bytestring. This is the final page content as rendered by the view, or any error message.The template Context instance that was used to render the template that produced the response content.If the rendered page used multiple templates, then context will be a list of Context objects, in the order in which they were rendered.Regardless of the number of templates used during rendering, you can retrieve context values using the [] operator. For example, the context variable name could be retrieved using:Not using Django templates?This attribute is only populated when using the DjangoTemplates backend. If you re using another template engine, context_data may be a suitable alternative on responses with that attribute.The body of the response, parsed as JSON. Extra keyword arguments are passed to json.loads(). For example:If the Content-Type header is not \"application/json\", then a ValueError will be raised when trying to parse the response.The request data that stimulated the response.The WSGIRequest instance generated by the test handler that generated the response.The HTTP status of the response, as an integer. For a full list of defined codes, see the IANA status code registry.A list of Template instances used to render the final content, in the order they were rendered. For each template in the list, use template.name to get the template s file name, if the template was loaded from a file. (The name is a string such as 'admin/index.html'.)Not using Django templates?This attribute is only populated when using the DjangoTemplates backend. If you re using another template engine, template_name may be a suitable alternative if you only need the name of the template used for rendering.An instance of ResolverMatch for the response. You can use the func attribute, for example, to verify the view that served the response:If the given URL is not found, accessing this attribute will raise a Resolver404 exception.You can also use dictionary syntax on the response object to query the value of any settings in the HTTP headers. For example, you could determine the content type of a response using response['Content-Type'].If you point the test client at a view that raises an exception, that exception will be visible in the test case. You can then use a standard try ... except block or assertRaises() to test for exceptions.The only exceptions that are not visible to the test client are Http404, PermissionDenied, SystemExit, and SuspiciousOperation. Django catches these exceptions internally and converts them into the appropriate HTTP response codes. In these cases, you can check response.status_code in your test.The test client is stateful. If a response returns a cookie, then that cookie will be stored in the test client and sent with all subsequent get() and post() requests.Expiration policies for these cookies are not followed. If you want a cookie to expire, either delete it manually or create a new Client instance (which will effectively delete all cookies).A test client has two attributes that store persistent state information. You can access these properties as part of a test condition.A Python SimpleCookie object, containing the current values of all the client cookies. See the documentation of the http.cookies module for more.A dictionary-like object containing session information. See the session documentation for full details.To modify the session and then save it, it must be stored in a variable first (because a new SessionStore is created every time this property is accessed):When testing applications that support internationalization and localization, you might want to set the language for a test client request. The method for doing so depends on whether or not the LocaleMiddleware is enabled.If the middleware is enabled, the language can be set by creating a cookie with a name of LANGUAGE_COOKIE_NAME and a value of the language code:or by including the Accept-Language HTTP header in the request:More details are in How Django discovers language preference.If the middleware isn t enabled, the active language may be set using translation.override():More details are in Explicitly setting the active language.The following is a simple unit test using the test client:See alsodjango.test.RequestFactory"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/tools/#provided-test-case-classes", "para": "Normal Python unit test classes extend a base class of unittest.TestCase. Django provides a few extensions of this base class:Hierarchy of Django unit testing classesConverting a normal unittest.TestCase to any of the subclasses is easy: change the base class of your test from unittest.TestCase to the subclass. All of the standard Python unit test functionality will be available, and it will be augmented with some useful additions as described in each section below.A subclass of unittest.TestCase that adds this functionality:If your tests make any database queries, use subclasses TransactionTestCase or TestCase.SimpleTestCase disallows database queries by default. This helps to avoid executing write queries which will affect other tests since each SimpleTestCase test isn t run in a transaction. If you aren t concerned about this problem, you can disable this behavior by setting the databases class attribute to '__all__' on your test class.Deprecated since version 2.2.This attribute is deprecated in favor of databases. The previous behavior of allow_database_queries = True can be achieved by setting databases = '__all__'.WarningSimpleTestCase and its subclasses (e.g. TestCase,  ) rely on setUpClass() and tearDownClass() to perform some class-wide initialization (e.g. overriding settings). If you need to override those methods, don t forget to call the super implementation:Be sure to account for Python s behavior if an exception is raised during setUpClass(). If that happens, neither the tests in the class nor tearDownClass() are run. In the case of django.test.TestCase, this will leak the transaction created in super()  which results in various symptoms including a segmentation fault on some platforms (reported on macOS). If you want to intentionally raise an exception such as unittest.SkipTest in setUpClass(), be sure to do it before calling super() to avoid this.TransactionTestCase inherits from SimpleTestCase to add some database-specific features:Django s TestCase class is a more commonly used subclass of TransactionTestCase that makes use of database transaction facilities to speed up the process of resetting the database to a known state at the beginning of each test. A consequence of this, however, is that some database behaviors cannot be tested within a Django TestCase class. For instance, you cannot test that a block of code is executing within a transaction, as is required when using select_for_update(). In those cases, you should use TransactionTestCase.TransactionTestCase and TestCase are identical except for the manner in which the database is reset to a known state and the ability for test code to test the effects of commit and rollback:WarningTestCase running on a database that does not support rollback (e.g. MySQL with the MyISAM storage engine), and all instances of TransactionTestCase, will roll back at the end of the test by deleting all data from the test database.Apps will not see their data reloaded; if you need this functionality (for example, third-party apps should enable this) you can set serialized_rollback = True inside the TestCase body.This is the most common class to use for writing tests in Django. It inherits from TransactionTestCase (and by extension SimpleTestCase). If your Django application doesn t use a database, use SimpleTestCase.The class:It also provides an additional method:The class-level atomic block described above allows the creation of initial data at the class level, once for the whole TestCase. This technique allows for faster tests as compared to using setUp().For example:Note that if the tests are run on a database with no transaction support (for instance, MySQL with the MyISAM engine), setUpTestData() will be called before each test, negating the speed benefits.Be careful not to modify any objects created in setUpTestData() in your test methods. Modifications to in-memory objects from setup work done at the class level will persist between test methods. If you do need to modify them, you could reload them in the setUp() method with refresh_from_db(), for example.LiveServerTestCase does basically the same as TransactionTestCase with one extra feature: it launches a live Django server in the background on setup, and shuts it down on teardown. This allows the use of automated test clients other than the Django dummy client such as, for example, the Selenium client, to execute a series of functional tests inside a browser and simulate a real user s actions.The live server listens on localhost and binds to port 0 which uses a free port assigned by the operating system. The server s URL can be accessed with self.live_server_url during the tests.To demonstrate how to use LiveServerTestCase, let s write a simple Selenium test. First of all, you need to install the selenium package into your Python path:Then, add a LiveServerTestCase-based test to your app s tests module (for example: myapp/tests.py). For this example, we ll assume you re using the staticfiles app and want to have static files served during the execution of your tests similar to what we get at development time with DEBUG=True, i.e. without having to collect them using collectstatic. We ll use the  StaticLiveServerTestCase subclass which provides that functionality. Replace it with django.test.LiveServerTestCase if you don t need that.The code for this test may look as follows:Finally, you may run the test as follows:This example will automatically open Firefox then go to the login page, enter the credentials and press the  Log in  button. Selenium offers other drivers in case you do not have Firefox installed or wish to use another browser. The example above is just a tiny fraction of what the Selenium client can do; check out the full reference for more details.NoteWhen using an in-memory SQLite database to run the tests, the same database connection will be shared by two threads in parallel: the thread in which the live server is run and the thread in which the test case is run. It s important to prevent simultaneous database queries via this shared connection by the two threads, as that may sometimes randomly cause the tests to fail. So you need to ensure that the two threads don t access the database at the same time. In particular, this means that in some cases (for example, just after clicking a link or submitting a form), you might need to check that a response is received by Selenium and that the next page is loaded before proceeding with further test execution. Do this, for example, by making Selenium wait until the <body> HTML tag is found in the response (requires Selenium > 2.13):The tricky thing here is that there s really no such thing as a  page load,  especially in modern Web apps that generate HTML dynamically after the server generates the initial document. So, simply checking for the presence of <body> in the response might not necessarily be appropriate for all use cases. Please refer to the Selenium FAQ and Selenium documentation for more information."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/tools/#test-cases-features", "para": "Every test case in a django.test.*TestCase instance has access to an instance of a Django test client. This client can be accessed as self.client. This client is recreated for each test, so you don t have to worry about state (such as cookies) carrying over from one test to another.This means, instead of instantiating a Client in each test: you can just refer to self.client, like so:If you want to use a different Client class (for example, a subclass with customized behavior), use the client_class class attribute:A test case for a database-backed website isn t much use if there isn t any data in the database. Tests are more readable and it s more maintainable to create objects using the ORM, for example in TestCase.setUpTestData(), however, you can also use fixtures.A fixture is a collection of data that Django knows how to import into a database. For example, if your site has user accounts, you might set up a fixture of fake user accounts in order to populate your database during tests.The most straightforward way of creating a fixture is to use the manage.py dumpdata command. This assumes you already have some data in your database. See the dumpdata documentation for more details.Once you ve created a fixture and placed it in a fixtures directory in one of your INSTALLED_APPS, you can use it in your unit tests by specifying a fixtures class attribute on your django.test.TestCase subclass:Here s specifically what will happen:For performance reasons, TestCase loads fixtures once for the entire test class, before setUpTestData(), instead of before each test, and it uses transactions to clean the database before each test. In any case, you can be certain that the outcome of a test will not be affected by another test or by the order of test execution.By default, fixtures are only loaded into the default database. If you are using multiple databases and set TransactionTestCase.databases, fixtures will be loaded into all specified databases.If your application provides views, you may want to include tests that use the test client to exercise those views. However, an end user is free to deploy the views in your application at any URL of their choosing. This means that your tests can t rely upon the fact that your views will be available at a particular URL. Decorate your test class or test method with @override_settings(ROOT_URLCONF=...) for URLconf configuration.Django sets up a test database corresponding to every database that is defined in the DATABASES definition in your settings and referred to by at least one test through databases.However, a big part of the time taken to run a Django TestCase is consumed by the call to flush that ensures that you have a clean database at the start of each test run. If you have multiple databases, multiple flushes are required (one for each database), which can be a time consuming activity   especially if your tests don t need to test multi-database activity.As an optimization, Django only flushes the default database at the start of each test run. If your setup contains multiple databases, and you have a test that requires every database to be clean, you can use the databases attribute on the test suite to request extra databases to be flushed.For example:This test case will flush the default and other test databases before running test_index_page_view. You can also use '__all__' to specify that all of the test databases must be flushed.The databases flag also controls which databases the TransactionTestCase.fixtures are loaded into. By default, fixtures are only loaded into the default database.Queries against databases not in databases will give assertion errors to prevent state leaking between tests.Deprecated since version 2.2.This attribute is deprecated in favor of databases. The previous behavior of multi_db = True can be achieved by setting databases = '__all__'.By default, only the default database will be wrapped in a transaction during a TestCase s execution and attempts to query other databases will result in assertion errors to prevent state leaking between tests.Use the databases class attribute on the test class to request transaction wrapping against non-default databases.For example:This test will only allow queries against the other database. Just like for SimpleTestCase.databases and TransactionTestCase.databases, the '__all__' constant can be used to specify that the test should allow queries to all databases.Deprecated since version 2.2.This attribute is deprecated in favor of databases. The previous behavior of multi_db = True can be achieved by setting databases = '__all__'.WarningUse the functions below to temporarily alter the value of settings in tests. Don t manipulate django.conf.settings directly as Django won t restore the original values after such manipulations.For testing purposes it s often useful to change a setting temporarily and revert to the original value after running the testing code. For this use case Django provides a standard Python context manager (see PEP 343) called settings(), which can be used like this:This example will override the LOGIN_URL setting for the code in the with block and reset its value to the previous state afterwards.It can prove unwieldy to redefine settings that contain a list of values. In practice, adding or removing values is often sufficient. The modify_settings() context manager makes it easy:For each action, you can supply either a list of values or a string. When the value already exists in the list, append and prepend have no effect; neither does remove when the value doesn t exist.In case you want to override a setting for a test method, Django provides the override_settings() decorator (see PEP 318). It s used like this:The decorator can also be applied to TestCase classes:Likewise, Django provides the modify_settings() decorator:The decorator can also be applied to test case classes:NoteWhen given a class, these decorators modify the class directly and return it; they don t create and return a modified copy of it. So if you try to tweak the above examples to assign the return value to a different name than LoginTestCase or MiddlewareTestCase, you may be surprised to find that the original test case classes are still equally affected by the decorator. For a given class, modify_settings() is always applied after override_settings().Considerations with Python 3.5If using Python 3.5 (or older, if using an older version of Django), avoid mixing  remove with append and prepend in modify_settings(). In some cases it matters whether a value is first added and then removed or vice versa, and dictionary key order isn t preserved until Python 3.6. Instead, apply the decorator twice to guarantee the order of operations. For example, to ensure that SessionMiddleware appears first in MIDDLEWARE:WarningThe settings file contains some settings that are only consulted during initialization of Django internals. If you change them with override_settings, the setting is changed if you access it via the django.conf.settings module, however, Django s internals access it differently. Effectively, using override_settings() or modify_settings() with these settings is probably not going to do what you expect it to do.We do not recommend altering the DATABASES setting. Altering the CACHES setting is possible, but a bit tricky if you are using internals that make using of caching, like django.contrib.sessions. For example, you will have to reinitialize the session backend in a test that uses cached sessions and overrides CACHES.Finally, avoid aliasing your settings as module-level constants as override_settings() won t work on such values since they are only evaluated the first time the module is imported.You can also simulate the absence of a setting by deleting it after settings have been overridden, like this:When overriding settings, make sure to handle the cases in which your app s code uses a cache or similar feature that retains state even if the setting is changed. Django provides the django.test.signals.setting_changed signal that lets you register callbacks to clean up and otherwise reset state when settings are changed.Django itself uses this signal to reset various data:If you use any of Django s custom TestCase classes, the test runner will clear the contents of the test email outbox at the start of each test case.For more detail on email services during tests, see Email services below.As Python s normal unittest.TestCase class implements assertion methods such as assertTrue() and assertEqual(), Django s custom TestCase class provides a number of custom assertion methods that are useful for testing Web applications:The failure messages given by most of these assertion methods can be customized with the msg_prefix argument. This string will be prefixed to any failure message generated by the assertion. This allows you to provide additional details that may help you to identify the location and cause of a failure in your test suite.Asserts that execution of callable raises expected_exception and that expected_message is found in the exception s message. Any other outcome is reported as a failure. It s a simpler version of unittest.TestCase.assertRaisesRegex() with the difference that expected_message isn t treated as a regular expression.If only the expected_exception and expected_message parameters are given, returns a context manager so that the code being tested can be written inline rather than as a function:Analogous to SimpleTestCase.assertRaisesMessage() but for assertWarnsRegex() instead of assertRaisesRegex().Asserts that a form field behaves correctly with various inputs.For example, the following code tests that an EmailField accepts a@a.com as a valid email address, but rejects aaa with a reasonable error message:Asserts that a field on a form raises the provided list of errors when rendered on the form.form is the name the Form instance was given in the template context.field is the name of the field on the form to check. If field has a value of None, non-field errors (errors you can access via form.non_field_errors()) will be checked.errors is an error string, or a list of error strings, that are expected as a result of form validation.Asserts that the formset raises the provided list of errors when rendered.formset is the name the Formset instance was given in the template context.form_index is the number of the form within the Formset.  If form_index has a value of None, non-form errors (errors you can access via formset.non_form_errors()) will be checked.field is the name of the field on the form to check. If field has a value of None, non-field errors (errors you can access via form.non_field_errors()) will be checked.errors is an error string, or a list of error strings, that are expected as a result of form validation.Asserts that a Response instance produced the given status_code and that text appears in the content of the response. If count is provided, text must occur exactly count times in the response.Set html to True to handle text as HTML. The comparison with the response content will be based on HTML semantics instead of character-by-character equality. Whitespace is ignored in most cases, attribute ordering is not significant. See assertHTMLEqual() for more details.Asserts that a Response instance produced the given status_code and that text does not appear in the content of the response.Set html to True to handle text as HTML. The comparison with the response content will be based on HTML semantics instead of character-by-character equality. Whitespace is ignored in most cases, attribute ordering is not significant. See assertHTMLEqual() for more details.Asserts that the template with the given name was used in rendering the response.The name is a string such as 'admin/index.html'.The count argument is an integer indicating the number of times the template should be rendered. Default is None, meaning that the template should be rendered one or more times.You can use this as a context manager, like this:Asserts that the template with the given name was not used in rendering the response.You can use this as a context manager in the same way as assertTemplateUsed().Asserts that two URLs are the same, ignoring the order of query string parameters except for parameters with the same name. For example, /path/?x=1&y=2 is equal to /path/?y=2&x=1, but /path/?a=1&a=2 isn t equal to /path/?a=2&a=1.Asserts that the response returned a status_code redirect status, redirected to expected_url (including any GET data), and that the final page was received with target_status_code.If your request used the follow argument, the expected_url and target_status_code will be the url and status code for the final point of the redirect chain.If fetch_redirect_response is False, the final page won t be loaded. Since the test client can t fetch external URLs, this is particularly useful if expected_url isn t part of your Django app.Scheme is handled correctly when making comparisons between two URLs. If there isn t any scheme specified in the location where we are redirected to, the original request s scheme is used. If present, the scheme in expected_url is the one used to make the comparisons to.Asserts that the strings html1 and html2 are equal. The comparison is based on HTML semantics. The comparison takes following things into account:The following examples are valid tests and don t raise any AssertionError:html1 and html2 must be valid HTML. An AssertionError will be raised if one of them cannot be parsed.Output in case of error can be customized with the msg argument.Asserts that the strings html1 and html2 are not equal. The comparison is based on HTML semantics. See assertHTMLEqual() for details.html1 and html2 must be valid HTML. An AssertionError will be raised if one of them cannot be parsed.Output in case of error can be customized with the msg argument.Asserts that the strings xml1 and xml2 are equal. The comparison is based on XML semantics. Similarly to assertHTMLEqual(), the comparison is made on parsed content, hence only semantic differences are considered, not syntax differences. When invalid XML is passed in any parameter, an AssertionError is always raised, even if both string are identical.Output in case of error can be customized with the msg argument.Asserts that the strings xml1 and xml2 are not equal. The comparison is based on XML semantics. See assertXMLEqual() for details.Output in case of error can be customized with the msg argument.Asserts that the HTML fragment needle is contained in the haystack one.If the count integer argument is specified, then additionally the number of needle occurrences will be strictly verified.Whitespace in most cases is ignored, and attribute ordering is not significant. The passed-in arguments must be valid HTML.Asserts that the JSON fragments raw and expected_data are equal. Usual JSON non-significant whitespace rules apply as the heavyweight is delegated to the json library.Output in case of error can be customized with the msg argument.Asserts that the JSON fragments raw and expected_data are not equal. See assertJSONEqual() for further details.Output in case of error can be customized with the msg argument.Asserts that a queryset qs returns a particular list of values values.The comparison of the contents of qs and values is performed using the function transform; by default, this means that the repr() of each value is compared. Any other callable can be used if repr() doesn t provide a unique or helpful comparison.By default, the comparison is also ordering dependent. If qs doesn t provide an implicit ordering, you can set the ordered parameter to False, which turns the comparison into a collections.Counter comparison. If the order is undefined (if the given qs isn t ordered and the comparison is against more than one ordered values), a ValueError is raised.Output in case of error can be customized with the msg argument.Asserts that when func is called with *args and **kwargs that num database queries are executed.If a \"using\" key is present in kwargs it is used as the database alias for which to check the number of queries.  If you wish to call a function with a using parameter you can do it by wrapping the call with a lambda to add an extra parameter:You can also use this as a context manager:You can tag your tests so you can easily run a particular subset. For example, you might label fast or slow tests:You can also tag a test case:Subclasses inherit tags from superclasses, and methods inherit tags from their class. Given:SampleTestCaseChild.test will be labeled with 'slow', 'core', 'bar', and 'foo'.In older versions, tagged tests don t inherit tags from classes, and tagged subclasses don t inherit tags from superclasses. For example, SampleTestCaseChild.test is labeled only with 'bar'.Then you can choose which tests to run. For example, to run only fast tests:Or to run fast tests and the core one (even though it s slow):You can also exclude tests by tag. To run core tests if they are not slow:test --exclude-tag has precedence over test --tag, so if a test has two tags and you select one of them and exclude the other, the test won t be run."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/tools/#email-services", "para": "If any of your Django views send email using Django s email functionality, you probably don t want to send email each time you run a test using that view. For this reason, Django s test runner automatically redirects all Django-sent email to a dummy outbox. This lets you test every aspect of sending email   from the number of messages sent to the contents of each message   without actually sending the messages.The test runner accomplishes this by transparently replacing the normal email backend with a testing backend. (Don t worry   this has no effect on any other email senders outside of Django, such as your machine s mail server, if you re running one.)During test running, each outgoing email is saved in django.core.mail.outbox. This is a simple list of all EmailMessage instances that have been sent. The outbox attribute is a special attribute that is created only when the locmem email backend is used. It doesn t normally exist as part of the django.core.mail module and you can t import it directly. The code below shows how to access this attribute correctly.Here s an example test that examines django.core.mail.outbox for length and contents:As noted previously, the test outbox is emptied at the start of every test in a Django *TestCase. To empty the outbox manually, assign the empty list to mail.outbox:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/tools/#management-commands", "para": "Management commands can be tested with the call_command() function. The output can be redirected into a StringIO instance:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/tools/#skipping-tests", "para": "The unittest library provides the @skipIf and @skipUnless decorators to allow you to skip tests if you know ahead of time that those tests are going to fail under certain conditions.For example, if your test requires a particular optional library in order to succeed, you could decorate the test case with @skipIf. Then, the test runner will report that the test wasn t executed and why, instead of failing the test or omitting the test altogether.To supplement these test skipping behaviors, Django provides two additional skip decorators. Instead of testing a generic boolean, these decorators check the capabilities of the database, and skip the test if the database doesn t support a specific named feature.The decorators use a string identifier to describe database features. This string corresponds to attributes of the database connection features class. See django.db.backends.BaseDatabaseFeatures class for a full list of database features that can be used as a basis for skipping tests.Skip the decorated test or TestCase if all of the named database features are supported.For example, the following test will not be executed if the database supports transactions (e.g., it would not run under PostgreSQL, but it would under MySQL with MyISAM tables):Skip the decorated test or TestCase if any of the named database features are not supported.For example, the following test will only be executed if the database supports transactions (e.g., it would run under PostgreSQL, but not under MySQL with MyISAM tables):"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/advanced/#the-request-factory", "para": "The RequestFactory shares the same API as the test client. However, instead of behaving like a browser, the RequestFactory provides a way to generate a request instance that can be used as the first argument to any view. This means you can test a view function the same way as you would test any other function   as a black box, with exactly known inputs, testing for specific outputs.The API for the RequestFactory is a slightly restricted subset of the test client API:The following is a simple unit test using the request factory:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/advanced/#tests-and-multiple-host-names", "para": "The ALLOWED_HOSTS setting is validated when running tests. This allows the test client to differentiate between internal and external URLs.Projects that support multitenancy or otherwise alter business logic based on the request s host and use custom host names in tests must include those hosts in ALLOWED_HOSTS.The first and simplest option to do so is to add the hosts to your settings file. For example, the test suite for docs.djangoproject.com includes the following:and the settings file includes a list of the domains supported by the project:Another option is to add the required hosts to ALLOWED_HOSTS using override_settings() or modify_settings(). This option may be preferable in standalone apps that can t package their own settings file or for projects where the list of domains is not static (e.g., subdomains for multitenancy). For example, you could write a test for the domain http://otherserver/ as follows:Disabling ALLOWED_HOSTS checking (ALLOWED_HOSTS = ['*']) when running tests prevents the test client from raising a helpful error message if you follow a redirect to an external URL."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/advanced/#tests-and-multiple-databases", "para": "If you re testing a multiple database configuration with primary/replica (referred to as master/slave by some databases) replication, this strategy of creating test databases poses a problem. When the test databases are created, there won t be any replication, and as a result, data created on the primary won t be seen on the replica.To compensate for this, Django allows you to define that a database is a test mirror. Consider the following (simplified) example database configuration:In this setup, we have two database servers: dbprimary, described by the database alias default, and dbreplica described by the alias replica. As you might expect, dbreplica has been configured by the database administrator as a read replica of dbprimary, so in normal activity, any write to default will appear on replica.If Django created two independent test databases, this would break any tests that expected replication to occur. However, the replica database has been configured as a test mirror (using the MIRROR test setting), indicating that under testing, replica should be treated as a mirror of default.When the test environment is configured, a test version of replica will not be created. Instead the connection to replica will be redirected to point at default. As a result, writes to default will appear on replica   but because they are actually the same database, not because there is data replication between the two databases.By default, Django will assume all databases depend on the default database and therefore always create the default database first. However, no guarantees are made on the creation order of any other databases in your test setup.If your database configuration requires a specific creation order, you can specify the dependencies that exist using the DEPENDENCIES test setting. Consider the following (simplified) example database configuration:Under this configuration, the diamonds database will be created first, as it is the only database alias without dependencies. The default and clubs alias will be created next (although the order of creation of this pair is not guaranteed), then hearts, and finally spades.If there are any circular dependencies in the DEPENDENCIES definition, an ImproperlyConfigured exception will be raised."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/advanced/#advanced-features-of-transactiontestcase", "para": "WarningThis attribute is a private API. It may be changed or removed without a deprecation period in the future, for instance to accommodate changes in application loading.It s used to optimize Django s own test suite, which contains hundreds of models but no relations between models in different applications.By default, available_apps is set to None. After each test, Django calls flush to reset the database state. This empties all tables and emits the post_migrate signal, which recreates one content type and four permissions for each model. This operation gets expensive proportionally to the number of models.Setting available_apps to a list of applications instructs Django to behave as if only the models from these applications were available. The behavior of TransactionTestCase changes as follows:Since the database isn t fully flushed, if a test creates instances of models not included in available_apps, they will leak and they may cause unrelated tests to fail. Be careful with tests that use sessions; the default session engine stores them in the database.Since post_migrate isn t emitted after flushing the database, its state after a TransactionTestCase isn t the same as after a TestCase: it s missing the rows created by listeners to post_migrate. Considering the order in which tests are executed, this isn t an issue, provided either all TransactionTestCase in a given test suite declare available_apps, or none of them.available_apps is mandatory in Django s own test suite.Setting reset_sequences = True on a TransactionTestCase will make sure sequences are always reset before the test run:Unless you are explicitly testing primary keys sequence numbers, it is recommended that you do not hard code primary key values in tests.Using reset_sequences = True will slow down the test, since the primary key reset is a relatively expensive database operation."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/advanced/#using-the-django-test-runner-to-test-reusable-applications", "para": "If you are writing a reusable application you may want to use the Django test runner to run your own test suite and thus benefit from the Django testing infrastructure.A common practice is a tests directory next to the application code, with the following structure:Let s take a look inside a couple of those files:This is the script that you invoke to run the test suite. It sets up the Django environment, creates the test database and runs the tests.For the sake of clarity, this example contains only the bare minimum necessary to use the Django test runner. You may want to add command-line options for controlling verbosity, passing in specific test labels to run, etc.This file contains the Django settings required to run your app s tests.Again, this is a minimal example; your tests may require additional settings to run.Since the tests package is included in INSTALLED_APPS when running your tests, you can define test-only models in its models.py file."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/advanced/#using-different-testing-frameworks", "para": "Clearly, unittest is not the only Python testing framework. While Django doesn t provide explicit support for alternative frameworks, it does provide a way to invoke tests constructed for an alternative framework as if they were normal Django tests.When you run ./manage.py test, Django looks at the TEST_RUNNER setting to determine what to do. By default, TEST_RUNNER points to 'django.test.runner.DiscoverRunner'. This class defines the default Django testing behavior. This behavior involves:If you define your own test runner class and point TEST_RUNNER at that class, Django will execute your test runner whenever you run ./manage.py test. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have.A test runner is a class defining a run_tests() method. Django ships with a DiscoverRunner class that defines the default Django testing behavior. This class defines the run_tests() entry point, plus a selection of other methods that are used to by run_tests() to set up, execute and tear down the test suite.DiscoverRunner will search for tests in any file matching pattern.top_level can be used to specify the directory containing your top-level Python modules. Usually Django can figure this out automatically, so it s not necessary to specify this option. If specified, it should generally be the directory containing your manage.py file.verbosity determines the amount of notification and debug information that will be printed to the console; 0 is no output, 1 is normal output, and 2 is verbose output.If interactive is True, the test suite has permission to ask the user for instructions when the test suite is executed. An example of this behavior would be asking for permission to delete an existing test database. If interactive is False, the test suite must be able to run without any manual intervention.If failfast is True, the test suite will stop running after the first test failure is detected.If keepdb is True, the test suite will use the existing database, or create one if necessary. If False, a new database will be created, prompting the user to remove the existing one, if present.If reverse is True, test cases will be executed in the opposite order. This could be useful to debug tests that aren t properly isolated and have side effects. Grouping by test class is preserved when using this option.debug_mode specifies what the DEBUG setting should be set to prior to running tests.If debug_sql is True, failing test cases will output SQL queries logged to the django.db.backends logger as well as the traceback. If verbosity is 2, then queries in all tests are output.Django may, from time to time, extend the capabilities of the test runner by adding new arguments. The **kwargs declaration allows for this expansion. If you subclass DiscoverRunner or write your own test runner, ensure it accepts **kwargs.Your test runner may also define additional command-line options. Create or override an add_arguments(cls, parser) class method and add custom arguments by calling parser.add_argument() inside the method, so that the test command will be able to use those arguments.The class used to build the test suite. By default it is set to unittest.TestSuite. This can be overridden if you wish to implement different logic for collecting tests.This is the class of the low-level test runner which is used to execute the individual tests and format the results. By default it is set to unittest.TextTestRunner. Despite the unfortunate similarity in naming conventions, this is not the same type of class as DiscoverRunner, which covers a broader set of responsibilities. You can override this attribute to modify the way tests are run and reported.This is the class that loads tests, whether from TestCases or modules or otherwise and bundles them into test suites for the runner to execute. By default it is set to unittest.defaultTestLoader. You can override this attribute if your tests are going to be loaded in unusual ways.Run the test suite.test_labels allows you to specify which tests to run and supports several formats (see DiscoverRunner.build_suite() for a list of supported formats).extra_tests is a list of extra TestCase instances to add to the suite that is executed by the test runner. These extra tests are run in addition to those discovered in the modules listed in test_labels.This method should return the number of tests that failed.Override this class method to add custom arguments accepted by the test management command. See argparse.ArgumentParser.add_argument() for details about adding arguments to a parser.Sets up the test environment by calling setup_test_environment() and setting DEBUG to self.debug_mode (defaults to False).Constructs a test suite that matches the test labels provided.test_labels is a list of strings describing the tests to be run. A test label can take one of four forms:If test_labels has a value of None, the test runner will search for tests in all files below the current directory whose names match its pattern (see above).extra_tests is a list of extra TestCase instances to add to the suite that is executed by the test runner. These extra tests are run in addition to those discovered in the modules listed in test_labels.Returns a TestSuite instance ready to be run.Creates the test databases by calling setup_databases().Runs the system checks.Runs the test suite.Returns the result produced by the running the test suite.Returns the keyword arguments to instantiate the DiscoverRunner.test_runner with.Destroys the test databases, restoring pre-test conditions by calling teardown_databases().Restores the pre-test environment.Computes and returns a return code based on a test suite, and the result from that test suite.To assist in the creation of your own test runner, Django provides a number of utility methods in the django.test.utils module.Performs global pre-test setup, such as installing instrumentation for the template rendering system and setting up the dummy email outbox.If debug isn t None, the DEBUG setting is updated to its value.Performs global post-test teardown, such as removing instrumentation from the template system and restoring normal email services.Creates the test databases.Returns a data structure that provides enough detail to undo the changes that have been made. This data will be provided to the teardown_databases() function at the conclusion of testing.The aliases argument determines which DATABASES aliases test databases should be setup for. If it s not provided, it defaults to all of DATABASES aliases.The aliases argument was added.Destroys the test databases, restoring pre-test conditions.old_config is a data structure defining the changes in the database configuration that need to be reversed. It s the return value of the setup_databases() method.The creation module of the database backend also provides some utilities that can be useful during testing.Creates a new test database and runs migrate against it.verbosity has the same behavior as in run_tests().autoclobber describes the behavior that will occur if a database with the same name as the test database is discovered:serialize determines if Django serializes the database into an in-memory JSON string before running tests (used to restore the database state between tests if you don t have transactions). You can set this to False to speed up creation time if you don t have any test classes with serialized_rollback=True.If you are using the default test runner, you can control this with the the SERIALIZE entry in the TEST dictionary.keepdb determines if the test run should use an existing database, or create a new one. If True, the existing database will be used, or created if not present. If False, a new database will be created, prompting the user to remove the existing one, if present.Returns the name of the test database that it created.create_test_db() has the side effect of modifying the value of NAME in DATABASES to match the name of the test database.Destroys the database whose name is the value of NAME in DATABASES, and sets NAME to the value of old_database_name.The verbosity argument has the same behavior as for DiscoverRunner.If the keepdb argument is True, then the connection to the database will be closed, but the database will not be destroyed."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/testing/advanced/#integration-with-coverage-py", "para": "Code coverage describes how much source code has been tested. It shows which parts of your code are being exercised by tests and which are not. It s an important part of testing applications, so it s strongly recommended to check the coverage of your tests.Django can be easily integrated with coverage.py, a tool for measuring code coverage of Python programs. First, install coverage.py. Next, run the following from your project folder containing manage.py:This runs your tests and collects coverage data of the executed files in your project. You can see a report of this data by typing following command:Note that some Django code was executed while running tests, but it is not listed here because of the source flag passed to the previous command.For more options like annotated HTML listings detailing missed lines, see the coverage.py docs."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/#the-application-object", "para": "The key concept of deploying with WSGI is the application callable which the application server uses to communicate with your code. It s commonly provided as an object named application in a Python module accessible to the server.The startproject command creates a file <project_name>/wsgi.py that contains such an application callable.It s used both by Django s development server and in production WSGI deployments.WSGI servers obtain the path to the application callable from their configuration. Django s built-in server, namely the runserver command, reads it from the WSGI_APPLICATION setting. By default, it s set to <project_name>.wsgi.application, which points to the application callable in <project_name>/wsgi.py."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/#configuring-the-settings-module", "para": "When the WSGI server loads your application, Django needs to import the settings module   that s where your entire application is defined.Django uses the DJANGO_SETTINGS_MODULE environment variable to locate the appropriate settings module. It must contain the dotted path to the settings module. You can use a different value for development and production; it all depends on how you organize your settings.If this variable isn t set, the default wsgi.py sets it to mysite.settings, where mysite is the name of your project. That s how runserver discovers the default settings file by default.NoteSince environment variables are process-wide, this doesn t work when you run multiple Django sites in the same process. This happens with mod_wsgi.To avoid this problem, use mod_wsgi s daemon mode with each site in its own daemon process, or override the value from the environment by enforcing os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\" in your wsgi.py."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/#applying-wsgi-middleware", "para": "To apply WSGI middleware you can simply wrap the application object. For instance you could add these lines at the bottom of wsgi.py:You could also replace the Django WSGI application with a custom WSGI application that later delegates to the Django WSGI application, if you want to combine a Django application with a WSGI application of another framework."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/static-files/deployment/#serving-static-files-in-production", "para": "The basic outline of putting static files into production is simple: run the collectstatic command when static files change, then arrange for the collected static files directory (STATIC_ROOT) to be moved to the static file server and served. Depending on STATICFILES_STORAGE, files may need to be moved to a new location manually or the post_process method of the Storage class might take care of that.Of course, as with all deployment tasks, the devil s in the details. Every production setup will be a bit different, so you ll need to adapt the basic outline to fit your needs. Below are a few common patterns that might help.If you want to serve your static files from the same server that s already serving your site, the process may look something like:You ll probably want to automate this process, especially if you ve got multiple web servers.Most larger Django sites use a separate Web server   i.e., one that s not also running Django   for serving static files. This server often runs a different type of web server   faster but less full-featured. Some common choices are:Configuring these servers is out of scope of this document; check each server s respective documentation for instructions.Since your static file server won t be running Django, you ll need to modify the deployment strategy to look something like:Another common tactic is to serve static files from a cloud storage provider like Amazon s S3 and/or a CDN (content delivery network). This lets you ignore the problems of serving static files and can often make for faster-loading Web pages (especially when using a CDN).When using these services, the basic workflow would look a bit like the above, except that instead of using rsync to transfer your static files to the server you d need to transfer the static files to the storage provider or CDN.There s any number of ways you might do this, but if the provider has an API a custom file storage backend will make the process incredibly simple. If you ve written or are using a 3rd party custom storage backend, you can tell collectstatic to use it by setting STATICFILES_STORAGE to the storage engine.For example, if you ve written an S3 storage backend in myproject.storage.S3Storage you could use it with:Once that s done, all you have to do is run collectstatic and your static files would be pushed through your storage package up to S3. If you later needed to switch to a different storage provider, it could be as simple as changing your STATICFILES_STORAGE setting.For details on how you d write one of these backends, see Writing a custom storage system. There are 3rd party apps available that provide storage backends for many common file storage APIs. A good starting point is the overview at djangopackages.org."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/static-files/deployment/#learn-more", "para": "For complete details on all the settings, commands, template tags, and other pieces included in django.contrib.staticfiles, see the staticfiles reference."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/error-reporting/#email-reports", "para": "When DEBUG is False, Django will email the users listed in the ADMINS setting whenever your code raises an unhandled exception and results in an internal server error (HTTP status code 500). This gives the administrators immediate notification of any errors. The ADMINS will get a description of the error, a complete Python traceback, and details about the HTTP request that caused the error.NoteIn order to send email, Django requires a few settings telling it how to connect to your mail server. At the very least, you ll need to specify EMAIL_HOST and possibly EMAIL_HOST_USER and EMAIL_HOST_PASSWORD, though other settings may be also required depending on your mail server s configuration. Consult the Django settings documentation for a full list of email-related settings.By default, Django will send email from root@localhost. However, some mail providers reject all email from this address. To use a different sender address, modify the SERVER_EMAIL setting.To activate this behavior, put the email addresses of the recipients in the ADMINS setting.See alsoServer error emails are sent using the logging framework, so you can customize this behavior by customizing your logging configuration.Django can also be configured to email errors about broken links (404  page not found  errors). Django sends emails about 404 errors when:If those conditions are met, Django will email the users listed in the MANAGERS setting whenever your code raises a 404 and the request has a referer. It doesn t bother to email for 404s that don t have a referer   those are usually just people typing in broken URLs or broken Web bots. It also ignores 404s when the referer is equal to the requested URL, since this behavior is from broken Web bots too.NoteBrokenLinkEmailsMiddleware must appear before other middleware that intercepts 404 errors, such as LocaleMiddleware or FlatpageFallbackMiddleware. Put it towards the top of your MIDDLEWARE setting.You can tell Django to stop reporting particular 404s by tweaking the IGNORABLE_404_URLS setting. It should be a list of compiled regular expression objects. For example:In this example, a 404 to any URL ending with .php or .cgi will not be reported. Neither will any URL starting with /phpmyadmin/.The following example shows how to exclude some conventional URLs that browsers and crawlers often request:(Note that these are regular expressions, so we put a backslash in front of periods to escape them.)If you d like to customize the behavior of django.middleware.common.BrokenLinkEmailsMiddleware further (for example to ignore requests coming from web crawlers), you should subclass it and override its methods.See also404 errors are logged using the logging framework. By default, these log records are ignored, but you can use them for error reporting by writing a handler and configuring logging appropriately."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/error-reporting/#filtering-error-reports", "para": "WarningFiltering sensitive data is a hard problem, and it s nearly impossible to guarantee that sensitive data won t leak into an error report. Therefore, error reports should only be available to trusted team members and you should avoid transmitting error reports unencrypted over the Internet (such as through email).Error reports are really helpful for debugging errors, so it is generally useful to record as much relevant information about those errors as possible. For example, by default Django records the full traceback for the exception raised, each traceback frame s local variables, and the HttpRequest s attributes.However, sometimes certain types of information may be too sensitive and thus may not be appropriate to be kept track of, for example a user s password or credit card number. So in addition to filtering out settings that appear to be sensitive as described in the DEBUG documentation, Django offers a set of function decorators to help you control which information should be filtered out of error reports in a production environment (that is, where DEBUG is set to False): sensitive_variables() and sensitive_post_parameters().If a function (either a view or any regular callback) in your code uses local variables susceptible to contain sensitive information, you may prevent the values of those variables from being included in error reports using the sensitive_variables decorator:In the above example, the values for the user, pw and cc variables will be hidden and replaced with stars (**********) in the error reports, whereas the value of the name variable will be disclosed.To systematically hide all local variables of a function from error logs, do not provide any argument to the sensitive_variables decorator:When using multiple decoratorsIf the variable you want to hide is also a function argument (e.g.  user  in the following example), and if the decorated function has multiple decorators, then make sure to place @sensitive_variables at the top of the decorator chain. This way it will also hide the function argument as it gets passed through the other decorators:If one of your views receives an HttpRequest object with POST parameters susceptible to contain sensitive information, you may prevent the values of those parameters from being included in the error reports using the sensitive_post_parameters decorator:In the above example, the values for the pass_word and credit_card_number POST parameters will be hidden and replaced with stars (**********) in the request s representation inside the error reports, whereas the value of the name parameter will be disclosed.To systematically hide all POST parameters of a request in error reports, do not provide any argument to the sensitive_post_parameters decorator:All POST parameters are systematically filtered out of error reports for certain django.contrib.auth.views views (login, password_reset_confirm, password_change, and add_view and user_change_password in the auth admin) to prevent the leaking of sensitive information such as user passwords.All sensitive_variables() and sensitive_post_parameters() do is, respectively, annotate the decorated function with the names of sensitive variables and annotate the HttpRequest object with the names of sensitive POST parameters, so that this sensitive information can later be filtered out of reports when an error occurs. The actual filtering is done by Django s default error reporter filter: django.views.debug.SafeExceptionReporterFilter. This filter uses the decorators  annotations to replace the corresponding values with stars (**********) when the error reports are produced. If you wish to override or customize this default behavior for your entire site, you need to define your own filter class and tell Django to use it via the DEFAULT_EXCEPTION_REPORTER_FILTER setting:You may also control in a more granular way which filter to use within any given view by setting the HttpRequest s exception_reporter_filter attribute:Your custom filter class needs to inherit from django.views.debug.SafeExceptionReporterFilter and may override the following methods:Returns True to activate the filtering operated in the other methods. By default the filter is active if DEBUG is False.Returns the filtered dictionary of POST parameters. By default it replaces the values of sensitive parameters with stars (**********).Returns the filtered dictionary of local variables for the given traceback frame. By default it replaces the values of sensitive variables with stars (**********).See alsoYou can also set up custom error reporting by writing a custom piece of exception middleware. If you do write custom error handling, it s a good idea to emulate Django s built-in error handling and only report/log errors if DEBUG is False."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#overview", "para": "The admin is enabled in the default project template used by startproject.If you re not using the default project template, here are the requirements:After you ve taken these steps, you ll be able to use the admin site by visiting the URL you hooked it into (/admin/, by default).If you need to create a user to login with, use the createsuperuser command. By default, logging in to the admin requires that the user has the is_superuser or is_staff attribute set to True.Finally, determine which of your application s models should be editable in the admin interface. For each of those models, register them with the admin as described in ModelAdmin.See alsoFor information about serving the static files (images, JavaScript, and CSS) associated with the admin in production, see Serving files.Having problems?  Try FAQ: The admin."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#modeladmin-objects", "para": "The ModelAdmin class is the representation of a model in the admin interface. Usually, these are stored in a file named admin.py in your application. Let s take a look at a very simple example of the ModelAdmin:Do you need a ModelAdmin object at all?In the preceding example, the ModelAdmin class doesn t define any custom values (yet). As a result, the default admin interface will be provided. If you are happy with the default admin interface, you don t need to define a ModelAdmin object at all   you can register the model class without providing a ModelAdmin description. The preceding example could be simplified to:There is also a decorator for registering your ModelAdmin classes:It s given one or more model classes to register with the ModelAdmin. If you re using a custom AdminSite, pass it using the site keyword argument:You can t use this decorator if you have to reference your model admin class in its __init__() method, e.g. super(PersonAdmin, self).__init__(*args, **kwargs). You can use super().__init__(*args, **kwargs).When you put 'django.contrib.admin' in your INSTALLED_APPS setting, Django automatically looks for an admin module in each application and imports it.This is the default AppConfig class for the admin. It calls autodiscover() when Django starts.This class works like AdminConfig, except it doesn t call autodiscover().A dotted import path to the default admin site s class or to a callable that returns a site instance. Defaults to 'django.contrib.admin.sites.AdminSite'. See Overriding the default admin site for usage.This function attempts to import an admin module in each installed application. Such modules are expected to register models with the admin.Typically you won t need to call this function directly as AdminConfig calls it when Django starts.If you are using a custom AdminSite, it is common to import all of the ModelAdmin subclasses into your code and register them to the custom AdminSite. In that case, in order to disable auto-discovery, you should put 'django.contrib.admin.apps.SimpleAdminConfig' instead of 'django.contrib.admin' in your INSTALLED_APPS setting.The ModelAdmin is very flexible. It has several options for dealing with customizing the interface. All options are defined on the ModelAdmin subclass:A list of actions to make available on the change list page. See Admin actions for details.Controls where on the page the actions bar appears. By default, the admin changelist displays actions at the top of the page (actions_on_top = True; actions_on_bottom = False).Controls whether a selection counter is displayed next to the action dropdown. By default, the admin changelist will display it (actions_selection_counter = True).Set date_hierarchy to the name of a DateField or DateTimeField in your model, and the change list page will include a date-based drilldown navigation by that field.Example:You can also specify a field on a related model using the __ lookup, for example:This will intelligently populate itself based on available data, e.g. if all the dates are in one month, it ll show the day-level drill-down only.Notedate_hierarchy uses QuerySet.datetimes() internally. Please refer to its documentation for some caveats when time zone support is enabled (USE_TZ = True).This attribute overrides the default display value for record s fields that are empty (None, empty string, etc.). The default value is - (a dash). For example:You can also override empty_value_display for all admin pages with AdminSite.empty_value_display, or for specific fields like this:This attribute, if given, should be a list of field names to exclude from the form.For example, let s consider the following model:If you want a form for the Author model that includes only the name and title fields, you would specify fields or exclude like this:Since the Author model only has three fields, name, title, and birth_date, the forms resulting from the above declarations will contain exactly the same fields.Use the fields option to make simple layout changes in the forms on the  add  and  change  pages such as showing only a subset of available fields, modifying their order, or grouping them into rows. For example, you could define a simpler version of the admin form for the django.contrib.flatpages.models.FlatPage model as follows:In the above example, only the fields url, title and content will be displayed, sequentially, in the form. fields can contain values defined in ModelAdmin.readonly_fields to be displayed as read-only.For more complex layout needs, see the fieldsets option.The fields option accepts the same types of values as list_display, except that callables aren t accepted. Names of model and model admin methods will only be used if they re listed in readonly_fields.To display multiple fields on the same line, wrap those fields in their own tuple. In this example, the url and title fields will display on the same line and the content field will be displayed below them on its own line:NoteThis fields option should not be confused with the fields dictionary key that is within the fieldsets option, as described in the next section.If neither fields nor fieldsets options are present, Django will default to displaying each field that isn t an AutoField and has editable=True, in a single fieldset, in the same order as the fields are defined in the model.Set fieldsets to control the layout of admin  add  and  change  pages.fieldsets is a list of two-tuples, in which each two-tuple represents a <fieldset> on the admin form page. (A <fieldset> is a  section  of the form.)The two-tuples are in the format (name, field_options), where name is a string representing the title of the fieldset and field_options is a dictionary of information about the fieldset, including a list of fields to be displayed in it.A full example, taken from the django.contrib.flatpages.models.FlatPage model:This results in an admin page that looks like:If neither fieldsets nor fields options are present, Django will default to displaying each field that isn t an AutoField and has editable=True, in a single fieldset, in the same order as the fields are defined in the model.The field_options dictionary can have the following keys:A tuple of field names to display in this fieldset. This key is required.Example:As with the fields option, to display multiple fields on the same line, wrap those fields in their own tuple. In this example, the first_name and last_name fields will display on the same line:fields can contain values defined in readonly_fields to be displayed as read-only.If you add the name of a callable to fields, the same rule applies as with the fields option: the callable must be listed in readonly_fields.A list or tuple containing extra CSS classes to apply to the fieldset.Example:Two useful classes defined by the default admin site stylesheet are collapse and wide. Fieldsets with the collapse style will be initially collapsed in the admin and replaced with a small  click to expand  link. Fieldsets with the wide style will be given extra horizontal space.A string of optional extra text to be displayed at the top of each fieldset, under the heading of the fieldset. This string is not rendered for TabularInline due to its layout.Note that this value is not HTML-escaped when it s displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and django.utils.html.escape() to escape any HTML special characters.By default, a ManyToManyField is displayed in the admin site with a <select multiple>. However, multiple-select boxes can be difficult to use when selecting many items. Adding a ManyToManyField to this list will instead use a nifty unobtrusive JavaScript  filter  interface that allows searching within the options. The unselected and selected options appear in two boxes side by side. See filter_vertical to use a vertical interface.Same as filter_horizontal, but uses a vertical display of the filter interface with the box of unselected options appearing above the box of selected options.By default a ModelForm is dynamically created for your model. It is used to create the form presented on both the add/change pages. You can easily provide your own ModelForm to override any default form behavior on the add/change pages. Alternatively, you can customize the default form rather than specifying an entirely new one by using the ModelAdmin.get_form() method.For an example see the section Adding custom validation to the admin.NoteIf you define the Meta.model attribute on a ModelForm, you must also define the Meta.fields attribute (or the Meta.exclude attribute). However, since the admin has its own way of defining fields, the Meta.fields attribute will be ignored.If the ModelForm is only going to be used for the admin, the easiest solution is to omit the Meta.model attribute, since ModelAdmin will provide the correct model to use. Alternatively, you can set fields = [] in the Meta class to satisfy the validation on the ModelForm.NoteIf your ModelForm and ModelAdmin both define an exclude option then ModelAdmin takes precedence:In the above example, the  age  field will be excluded but the  name  field will be included in the generated form.This provides a quick-and-dirty way to override some of the Field options for use in the admin. formfield_overrides is a dictionary mapping a field class to a dict of arguments to pass to the field at construction time.Since that s a bit abstract, let s look at a concrete example. The most common use of formfield_overrides is to add a custom widget for a certain type of field. So, imagine we ve written a RichTextEditorWidget that we d like to use for large text fields instead of the default <textarea>. Here s how we d do that:Note that the key in the dictionary is the actual field class, not a string. The value is another dictionary; these arguments will be passed to the form field s __init__() method. See The Forms API for details.WarningIf you want to use a custom widget with a relation field (i.e. ForeignKey or ManyToManyField), make sure you haven t included that field s name in raw_id_fields, radio_fields, or autocomplete_fields.formfield_overrides won t let you change the widget on relation fields that have raw_id_fields, radio_fields, or autocomplete_fields set. That s because raw_id_fields, radio_fields, and autocomplete_fields imply custom widgets of their own.See InlineModelAdmin objects below as well as ModelAdmin.get_formsets_with_inlines().Set list_display to control which fields are displayed on the change list page of the admin.Example:If you don t set list_display, the admin site will display a single column that displays the __str__() representation of each object.There are four types of values that can be used in list_display:The name of a model field. For example:A callable that accepts one argument, the model instance. For example:A string representing a ModelAdmin method that accepts one argument, the model instance. For example:A string representing a model attribute or method (without any required arguments). For example:A few special cases to note about list_display:If the field is a ForeignKey, Django will display the __str__() of the related object.ManyToManyField fields aren t supported, because that would entail executing a separate SQL statement for each row in the table. If you want to do this nonetheless, give your model a custom method, and add that method s name to list_display. (See below for more on custom methods in list_display.)If the field is a BooleanField, Django will display a pretty  on  or  off  icon instead of True or False.If the string given is a method of the model, ModelAdmin or a callable, Django will HTML-escape the output by default. To escape user input and allow your own unescaped tags, use format_html().Here s a full example model:As some examples have already demonstrated, when using a callable, a model method, or a ModelAdmin method, you can customize the column s title by adding a short_description attribute to the callable.If the value of a field is None, an empty string, or an iterable without elements, Django will display - (a dash). You can override this with AdminSite.empty_value_display:You can also use ModelAdmin.empty_value_display:Or on a field level:If the string given is a method of the model, ModelAdmin or a callable that returns True or False Django will display a pretty  on  or  off  icon if you give the method a boolean attribute whose value is True.Here s a full example model:The __str__() method is just as valid in list_display as any other model method, so it s perfectly OK to do this:Usually, elements of list_display that aren t actual database fields can t be used in sorting (because Django does all the sorting at the database level).However, if an element of list_display represents a certain database field, you can indicate this fact by setting the admin_order_field attribute of the item.For example:The above will tell Django to order by the first_name field when trying to sort by colored_first_name in the admin.To indicate descending order with admin_order_field you can use a hyphen prefix on the field name. Using the above example, this would look like:admin_order_field supports query lookups to sort by values on related models. This example includes an  author first name  column in the list display and allows sorting it by first name:Query expressions may be used in admin_order_field. For example:Support for expressions in admin_order_field was added.Elements of list_display can also be properties. Please note however, that due to the way properties work in Python, setting short_description on a property is only possible when using the property() function and not with the @property decorator.For example:The field names in list_display will also appear as CSS classes in the HTML output, in the form of column-<field_name> on each <th> element. This can be used to set column widths in a CSS file for example.Django will try to interpret every element of list_display in this order:For example if you have first_name as a model field and as a ModelAdmin attribute, the model field will be used.Use list_display_links to control if and which fields in list_display should be linked to the  change  page for an object.By default, the change list page will link the first column   the first field specified in list_display   to the change page for each item. But list_display_links lets you change this:Set it to None to get no links at all.Set it to a list or tuple of fields (in the same format as list_display) whose columns you want converted to links.You can specify one or many fields. As long as the fields appear in list_display, Django doesn t care how many (or how few) fields are linked. The only requirement is that if you want to use list_display_links in this fashion, you must define list_display.In this example, the first_name and last_name fields will be linked on the change list page:In this example, the change list page grid will have no links:Set list_editable to a list of field names on the model which will allow editing on the change list page. That is, fields listed in list_editable will be displayed as form widgets on the change list page, allowing users to edit and save multiple rows at once.Notelist_editable interacts with a couple of other options in particular ways; you should note the following rules:You ll get a validation error if either of these rules are broken.Set list_filter to activate filters in the right sidebar of the change list page of the admin, as illustrated in the following screenshot:list_filter should be a list or tuple of elements, where each element should be of one of the following types:a field name, where the specified field should be either a BooleanField, CharField, DateField, DateTimeField, IntegerField, ForeignKey or ManyToManyField, for example:Field names in list_filter can also span relations using the __ lookup, for example:a class inheriting from django.contrib.admin.SimpleListFilter, which you need to provide the title and parameter_name attributes to and override the lookups and queryset methods, e.g.:NoteAs a convenience, the HttpRequest object is passed to the lookups and queryset methods, for example:Also as a convenience, the ModelAdmin object is passed to the lookups method, for example if you want to base the lookups on the available data:a tuple, where the first element is a field name and the second element is a class inheriting from django.contrib.admin.FieldListFilter, for example:You can limit the choices of a related model to the objects involved in that relation using RelatedOnlyFieldListFilter:Assuming author is a ForeignKey to a User model, this will limit the list_filter choices to the users who have written a book instead of listing all users.NoteThe FieldListFilter API is considered internal and might be changed.List filter s typically appear only if the filter has more than one choice. A filter s has_output() method controls whether or not it appears.It is possible to specify a custom template for rendering a list filter:See the default template provided by Django (admin/filter.html) for a concrete example.Set list_max_show_all to control how many items can appear on a  Show all  admin change list page. The admin will display a  Show all  link on the change list only if the total result count is less than or equal to this setting. By default, this is set to 200.Set list_per_page to control how many items appear on each paginated admin change list page. By default, this is set to 100.Set list_select_related to tell Django to use select_related() in retrieving the list of objects on the admin change list page. This can save you a bunch of database queries.The value should be either a boolean, a list or a tuple. Default is False.When value is True, select_related() will always be called. When value is set to False, Django will look at list_display and call select_related() if any ForeignKey is present.If you need more fine-grained control, use a tuple (or list) as value for list_select_related. Empty tuple will prevent Django from calling select_related at all. Any other tuple will be passed directly to select_related as parameters. For example:will call select_related('author', 'category').If you need to specify a dynamic value based on the request, you can implement a get_list_select_related() method.Set ordering to specify how lists of objects should be ordered in the Django admin views. This should be a list or tuple in the same format as a model s ordering parameter.If this isn t provided, the Django admin will use the model s default ordering.If you need to specify a dynamic order (for example depending on user or language) you can implement a get_ordering() method.Performance considerations with ordering and sortingTo ensure a deterministic ordering of results, the changelist adds pk to the ordering if it can t find a single or unique together set of fields that provide total ordering.For example, if the default ordering is by a non-unique name field, then the changelist is sorted by name and pk. This could perform poorly if you have a lot of rows and don t have an index on name and pk.The paginator class to be used for pagination. By default, django.core.paginator.Paginator is used. If the custom paginator class doesn t have the same constructor interface as django.core.paginator.Paginator, you will also need to provide an implementation for ModelAdmin.get_paginator().Set prepopulated_fields to a dictionary mapping field names to the fields it should prepopulate from:When set, the given fields will use a bit of JavaScript to populate from the fields assigned. The main use for this functionality is to automatically generate the value for SlugField fields from one or more other fields. The generated value is produced by concatenating the values of the source fields, and then by transforming that result into a valid slug (e.g. substituting dashes for spaces; lowercasing ASCII letters; and removing various English stop words such as  a ,  an ,  as , and similar).Prepopulated fields aren t modified by JavaScript after a value has been saved. It s usually undesired that slugs change (which would cause an object s URL to change if the slug is used in it).prepopulated_fields doesn t accept DateTimeField, ForeignKey, OneToOneField, and ManyToManyField fields.The admin now preserves filters on the list view after creating, editing or deleting an object. You can restore the previous behavior of clearing filters by setting this attribute to False.By default, Django s admin uses a select-box interface (<select>) for fields that are ForeignKey or have choices set. If a field is present in radio_fields, Django will use a radio-button interface instead. Assuming group is a ForeignKey on the Person model:You have the choice of using HORIZONTAL or VERTICAL from the django.contrib.admin module.Don t include a field in radio_fields unless it s a ForeignKey or has choices set.autocomplete_fields is a list of ForeignKey and/or ManyToManyField fields you would like to change to Select2 autocomplete inputs.By default, the admin uses a select-box interface (<select>) for those fields. Sometimes you don t want to incur the overhead of selecting all the related instances to display in the dropdown.The Select2 input looks similar to the default input but comes with a search feature that loads the options asynchronously. This is faster and more user-friendly if the related model has many instances.You must define search_fields on the related object s ModelAdmin because the autocomplete search uses it.To avoid unauthorized data disclosure, users must have the view or change permission to the related object in order to use autocomplete.Ordering and pagination of the results are controlled by the related ModelAdmin s get_ordering() and get_paginator() methods.In the following example, ChoiceAdmin has an autocomplete field for the ForeignKey to the Question. The results are filtered by the question_text field and ordered by the date_created field:Performance considerations for large datasetsOrdering using ModelAdmin.ordering may cause performance problems as sorting on a large queryset will be slow.Also, if your search fields include fields that aren t indexed by the database, you might encounter poor performance on extremely large tables.For those cases, it s a good idea to write your own ModelAdmin.get_search_results() implementation using a full-text indexed search.You may also want to change the Paginator on very large tables as the default paginator always performs a count() query. For example, you could override the default implementation of the Paginator.count property.By default, Django s admin uses a select-box interface (<select>) for fields that are ForeignKey. Sometimes you don t want to incur the overhead of having to select all the related instances to display in the drop-down.raw_id_fields is a list of fields you would like to change into an Input widget for either a ForeignKey or ManyToManyField:The raw_id_fields Input widget should contain a primary key if the field is a ForeignKey or a comma separated list of values if the field is a ManyToManyField.  The raw_id_fields widget shows a magnifying glass button next to the field which allows users to search for and select a value:By default the admin shows all fields as editable. Any fields in this option (which should be a list or tuple) will display its data as-is and non-editable; they are also excluded from the ModelForm used for creating and editing. Note that when specifying ModelAdmin.fields or ModelAdmin.fieldsets the read-only fields must be present to be shown (they are ignored otherwise).If readonly_fields is used without defining explicit ordering through ModelAdmin.fields or ModelAdmin.fieldsets they will be added last after all editable fields.A read-only field can not only display data from a model s field, it can also display the output of a model s method or a method of the ModelAdmin class itself. This is very similar to the way ModelAdmin.list_display behaves. This provides an easy way to use the admin interface to provide feedback on the status of the objects being edited, for example:Set save_as to enable a  save as new  feature on admin change forms.Normally, objects have three save options:  Save ,  Save and continue editing , and  Save and add another . If save_as is True,  Save and add another  will be replaced by a  Save as new  button that creates a new object (with a new ID) rather than updating the existing object.By default, save_as is set to False.When save_as=True, the default redirect after saving the new object is to the change view for that object. If you set save_as_continue=False, the redirect will be to the changelist view.By default, save_as_continue is set to True.Set save_on_top to add save buttons across the top of your admin change forms.Normally, the save buttons appear only at the bottom of the forms. If you set save_on_top, the buttons will appear both on the top and the bottom.By default, save_on_top is set to False.Set search_fields to enable a search box on the admin change list page. This should be set to a list of field names that will be searched whenever somebody submits a search query in that text box.These fields should be some kind of text field, such as CharField or TextField. You can also perform a related lookup on a ForeignKey or ManyToManyField with the lookup API  follow  notation:For example, if you have a blog entry with an author, the following definition would enable searching blog entries by the email address of the author:When somebody does a search in the admin search box, Django splits the search query into words and returns all objects that contain each of the words, case-insensitive (using the icontains lookup), where each word must be in at least one of search_fields. For example, if search_fields is set to ['first_name', 'last_name'] and a user searches for john lennon, Django will do the equivalent of this SQL WHERE clause:If you don t want to use icontains as the lookup, you can use any lookup by appending it the field. For example, you could use exact by setting search_fields to ['first_name__exact'].Beware that because query terms are split and ANDed as described earlier, searching with exact only works with a single search word since two or more words can t all be an exact match unless all words are the same.The ability to specify a field lookup was added.Some (older) shortcuts for specifying a field lookup are also available. You can prefix a field in search_fields with the following characters and it s equivalent to adding __<lookup> to the field:If you need to customize search you can use ModelAdmin.get_search_results() to provide additional or alternate search behavior.Set show_full_result_count to control whether the full count of objects should be displayed on a filtered admin page (e.g. 99 results (103 total)). If this option is set to False, a text like 99 results (Show all) is displayed instead.The default of show_full_result_count=True generates a query to perform a full count on the table which can be expensive if the table contains a large number of rows.By default, the change list page allows sorting by all model fields (and callables that have the admin_order_field property) specified in list_display.If you want to disable sorting for some columns, set sortable_by to a collection (e.g. list, tuple, or set) of the subset of list_display that you want to be sortable. An empty collection disables sorting for all columns.If you need to specify this list dynamically, implement a get_sortable_by() method instead.Set view_on_site to control whether or not to display the  View on site  link. This link should bring you to a URL where you can display the saved object.This value can be either a boolean flag or a callable. If True (the default), the object s get_absolute_url() method will be used to generate the url.If your model has a get_absolute_url() method but you don t want the  View on site  button to appear, you only need to set view_on_site to False:In case it is a callable, it accepts the model instance as a parameter. For example:The Overriding admin templates section describes how to override or extend the default admin templates.  Use the following options to override the default templates used by the ModelAdmin views:Path to a custom template, used by add_view().Path to a custom template, used by change_view().Path to a custom template, used by changelist_view().Path to a custom template, used by delete_view() for displaying a confirmation page when deleting one or more objects.Path to a custom template, used by the delete_selected action method for displaying a confirmation page when deleting one or more objects. See the actions documentation.Path to a custom template, used by history_view().Path to a custom template, used by response_add(), response_change(), and response_delete().WarningWhen overriding ModelAdmin.save_model() and ModelAdmin.delete_model(), your code must save/delete the object. They aren t meant for veto purposes, rather they allow you to perform extra operations.The save_model method is given the HttpRequest, a model instance, a ModelForm instance, and a boolean value based on whether it is adding or changing the object. Overriding this method allows doing pre- or post-save operations. Call super().save_model() to save the object using Model.save().For example to attach request.user to the object prior to saving:The delete_model method is given the HttpRequest and a model instance. Overriding this method allows doing pre- or post-delete operations. Call super().delete_model() to delete the object using Model.delete().The delete_queryset() method is given the HttpRequest and a QuerySet of objects to be deleted. Override this method to customize the deletion process for the  delete selected objects  action.The save_formset method is given the HttpRequest, the parent ModelForm instance and a boolean value based on whether it is adding or changing the parent object.For example, to attach request.user to each changed formset model instance:See also Saving objects in the formset.The get_ordering method takes a request as parameter and is expected to return a list or tuple for ordering similar to the ordering attribute. For example:The get_search_results method modifies the list of objects displayed into those that match the provided search term. It accepts the request, a queryset that applies the current filters, and the user-provided search term. It returns a tuple containing a queryset modified to implement the search, and a boolean indicating if the results may contain duplicates.The default implementation searches the fields named in ModelAdmin.search_fields.This method may be overridden with your own custom search method. For example, you might wish to search by an integer field, or use an external tool such as Solr or Haystack. You must establish if the queryset changes implemented by your search method may introduce duplicates into the results, and return True in the second element of the return value.For example, to search by name and age, you could use:This implementation is more efficient than search_fields = ('name', '=age') which results in a string comparison for the numeric field, for example ... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4') on PostgreSQL.The save_related method is given the HttpRequest, the parent ModelForm instance, the list of inline formsets and a boolean value based on whether the parent is being added or changed. Here you can do any pre- or post-save operations for objects related to the parent. Note that at this point the parent object and its form have already been saved.The get_autocomplete_fields() method is given the HttpRequest and is expected to return a list or tuple of field names that will be displayed with an autocomplete widget as described above in the ModelAdmin.autocomplete_fields section.The get_readonly_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list or tuple of field names that will be displayed as read-only, as described above in the ModelAdmin.readonly_fields section.The get_prepopulated_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a dictionary, as described above in the ModelAdmin.prepopulated_fields section.The get_list_display method is given the HttpRequest and is expected to return a list or tuple of field names that will be displayed on the changelist view as described above in the ModelAdmin.list_display section.The get_list_display_links method is given the HttpRequest and the list or tuple returned by ModelAdmin.get_list_display(). It is expected to return either None or a list or tuple of field names on the changelist that will be linked to the change view, as described in the ModelAdmin.list_display_links section.The get_exclude method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list of fields, as described in ModelAdmin.exclude.The get_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list of fields, as described above in the ModelAdmin.fields section.The get_fieldsets method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list of two-tuples, in which each two-tuple represents a <fieldset> on the admin form page, as described above in the ModelAdmin.fieldsets section.The get_list_filter method is given the HttpRequest and is expected to return the same kind of sequence type as for the list_filter attribute.The get_list_select_related method is given the HttpRequest and should return a boolean or list as ModelAdmin.list_select_related does.The get_search_fields method is given the HttpRequest and is expected to return the same kind of sequence type as for the search_fields attribute.The get_sortable_by() method is passed the HttpRequest and is expected to return a collection (e.g. list, tuple, or set) of field names that will be sortable in the change list page.Its default implementation returns sortable_by if it s set, otherwise it defers to get_list_display().For example, to prevent one or more columns from being sortable:The get_inline_instances method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list or tuple of InlineModelAdmin objects, as described below in the InlineModelAdmin section. For example, the following would return inlines without the default filtering based on add, change, delete, and view permissions:If you override this method, make sure that the returned inlines are instances of the classes defined in inlines or you might encounter a  Bad Request  error when adding related objects.The get_urls method on a ModelAdmin returns the URLs to be used for that ModelAdmin in the same way as a URLconf.  Therefore you can extend them as documented in URL dispatcher:If you want to use the admin layout, extend from admin/base_site.html:NoteNotice that the custom patterns are included before the regular admin URLs: the admin URL patterns are very permissive and will match nearly anything, so you ll usually want to prepend your custom URLs to the built-in ones.In this example, my_view will be accessed at /admin/myapp/mymodel/my_view/ (assuming the admin URLs are included at /admin/.)However, the self.my_view function registered above suffers from two problems:Since this is usually not what you want, Django provides a convenience wrapper to check permissions and mark the view as non-cacheable. This wrapper is AdminSite.admin_view() (i.e. self.admin_site.admin_view inside a ModelAdmin instance); use it like so:Notice the wrapped view in the fifth line above:This wrapping will protect self.my_view from unauthorized access and will apply the django.views.decorators.cache.never_cache() decorator to make sure it is not cached if the cache middleware is active.If the page is cacheable, but you still want the permission check to be performed, you can pass a cacheable=True argument to AdminSite.admin_view():ModelAdmin views have model_admin attributes. Other AdminSite views have admin_site attributes.Returns a ModelForm class for use in the admin add and change views, see add_view() and change_view().The base implementation uses modelform_factory() to subclass form, modified by attributes such as fields and exclude. So, for example, if you wanted to offer additional fields to superusers, you could swap in a different base form like so:You may also simply return a custom ModelForm class directly.Yields (FormSet, InlineModelAdmin) pairs for use in admin add and change views.For example if you wanted to display a particular inline only in the change view, you could override get_formsets_with_inlines as follows:The formfield_for_foreignkey method on a ModelAdmin allows you to override the default formfield for a foreign keys field. For example, to return a subset of objects for this foreign key field based on the user:This uses the HttpRequest instance to filter the Car foreign key field to only display the cars owned by the User instance.Like the formfield_for_foreignkey method, the formfield_for_manytomany method can be overridden to change the default formfield for a many to many field. For example, if an owner can own multiple cars and cars can belong to multiple owners   a many to many relationship   you could filter the Car foreign key field to only display the cars owned by the User:Like the formfield_for_foreignkey and formfield_for_manytomany methods, the formfield_for_choice_field method can be overridden to change the default formfield for a field that has declared choices. For example, if the choices available to a superuser should be different than those available to regular staff, you could proceed as follows:NoteAny choices attribute set on the formfield will be limited to the form field only. If the corresponding field on the model has choices set, the choices provided to the form must be a valid subset of those choices, otherwise the form submission will fail with a ValidationError when the model itself is validated before saving.Returns the Changelist class to be used for listing. By default, django.contrib.admin.views.main.ChangeList is used. By inheriting this class you can change the behavior of the listing.Returns a ModelForm class for use in the Formset on the changelist page. To use a custom form, for example:NoteIf you define the Meta.model attribute on a ModelForm, you must also define the Meta.fields attribute (or the Meta.exclude attribute). However, ModelAdmin ignores this value, overriding it with the ModelAdmin.list_editable attribute. The easiest solution is to omit the Meta.model attribute, since ModelAdmin will provide the correct model to use.Returns a ModelFormSet class for use on the changelist page if list_editable is used. To use a custom formset, for example:The objects in the changelist page can be filtered with lookups from the URL s query string. This is how list_filter works, for example. The lookups are similar to what s used in QuerySet.filter() (e.g. user__email=user@example.com). Since the lookups in the query string can be manipulated by the user, they must be sanitized to prevent unauthorized data exposure.The lookup_allowed() method is given a lookup path from the query string (e.g. 'user__email') and the corresponding value (e.g. 'user@example.com'), and returns a boolean indicating whether filtering the changelist s QuerySet using the parameters is permitted. If lookup_allowed() returns False, DisallowedModelAdminLookup (subclass of SuspiciousOperation) is raised.By default, lookup_allowed() allows access to a model s local fields, field paths used in list_filter (but not paths from get_list_filter()), and lookups required for limit_choices_to to function correctly in raw_id_fields.Override this method to customize the lookups permitted for your ModelAdmin subclass.Should return True if viewing obj is permitted, False otherwise. If obj is None, should return True or False to indicate whether viewing of objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to view any object of this type).The default implementation returns True if the user has either the  change  or  view  permission.Should return True if adding an object is permitted, False otherwise.Should return True if editing obj is permitted, False otherwise. If obj is None, should return True or False to indicate whether editing of objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to edit any object of this type).Should return True if deleting obj is permitted, False otherwise. If obj is None, should return True or False to indicate whether deleting objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to delete any object of this type).Should return True if displaying the module on the admin index page and accessing the module s index page is permitted, False otherwise. Uses User.has_module_perms() by default. Overriding it does not restrict access to the view, add, change, or delete views, has_view_permission(), has_add_permission(), has_change_permission(), and has_delete_permission() should be used for that.The get_queryset method on a ModelAdmin returns a QuerySet of all model instances that can be edited by the admin site. One use case for overriding this method is to show objects owned by the logged-in user:Sends a message to the user using the django.contrib.messages backend.  See the custom ModelAdmin example.Keyword arguments allow you to change the message level, add extra CSS tags, or fail silently if the contrib.messages framework is not installed. These keyword arguments match those for django.contrib.messages.add_message(), see that function s documentation for more details. One difference is that the level may be passed as a string label in addition to integer/constant.Returns an instance of the paginator to use for this view. By default, instantiates an instance of paginator.Determines the HttpResponse for the add_view() stage.response_add is called after the admin form is submitted and just after the object and all the related instances have been created and saved. You can override it to change the default behavior after the object has been created.Determines the HttpResponse for the change_view() stage.response_change is called after the admin form is submitted and just after the object and all the related instances have been saved. You can override it to change the default behavior after the object has been changed.Determines the HttpResponse for the delete_view() stage.response_delete is called after the object has been deleted. You can override it to change the default behavior after the object has been deleted.obj_display is a string with the name of the deleted object.obj_id is the serialized identifier used to retrieve the object to be deleted.A hook for the initial data on admin change forms. By default, fields are given initial values from GET parameters. For instance, ?name=initial_value will set the name field s initial value to be initial_value.This method should return a dictionary in the form {'fieldname': 'fieldval'}:A hook for customizing the deletion process of the delete_view() and the  delete selected  action.The objs argument is a homogeneous iterable of objects (a QuerySet or a list of model instances) to be deleted, and request is the HttpRequest.This method must return a 4-tuple of (deleted_objects, model_count, perms_needed, protected).deleted_objects is a list of strings representing all the objects that will be deleted. If there are any related objects to be deleted, the list is nested and includes those related objects. The list is formatted in the template using the unordered_list filter.model_count is a dictionary mapping each model s verbose_name_plural to the number of objects that will be deleted.perms_needed is a set of verbose_names of the models that the user doesn t have permission to delete.protected is a list of strings representing of all the protected related objects that can t be deleted. The list is displayed in the template.Django view for the model instance addition page. See note below.Django view for the model instance editing page. See note below.Django view for the model instances change list/actions page. See note below.Django view for the model instance(s) deletion confirmation page. See note below.Django view for the page that shows the modification history for a given model instance.Unlike the hook-type ModelAdmin methods detailed in the previous section, these five methods are in reality designed to be invoked as Django views from the admin application URL dispatching handler to render the pages that deal with model instances CRUD operations. As a result, completely overriding these methods will significantly change the behavior of the admin application.One common reason for overriding these methods is to augment the context data that is provided to the template that renders the view. In the following example, the change view is overridden so that the rendered template is provided some extra mapping data that would not otherwise be available:These views return TemplateResponse instances which allow you to easily customize the response data before rendering. For more details, see the TemplateResponse documentation.There are times where you would like add a bit of CSS and/or JavaScript to the add/change views. This can be accomplished by using a Media inner class on your ModelAdmin:The staticfiles app prepends STATIC_URL (or MEDIA_URL if STATIC_URL is None) to any asset paths. The same rules apply as regular asset definitions on forms.Django admin JavaScript makes use of the jQuery library.To avoid conflicts with user-supplied scripts or libraries, Django s jQuery (version 3.3.1) is namespaced as django.jQuery. If you want to use jQuery in your own admin JavaScript without including a second copy, you can use the django.jQuery object on changelist and add/edit views.jQuery was upgraded from 2.2.3 to 3.3.1.The ModelAdmin class requires jQuery by default, so there is no need to add jQuery to your ModelAdmin s list of media resources unless you have a specific need. For example, if you require the jQuery library to be in the global namespace (for example when using third-party jQuery plugins) or if you need a newer version of jQuery, you will have to include your own copy.Django provides both uncompressed and  minified  versions of jQuery, as jquery.js and jquery.min.js respectively.ModelAdmin and InlineModelAdmin have a media property that returns a list of Media objects which store paths to the JavaScript files for the forms and/or formsets. If DEBUG is True it will return the uncompressed versions of the various JavaScript files, including jquery.js; if not, it will return the  minified  versions.Adding custom validation of data in the admin is quite easy. The automatic admin interface reuses django.forms, and the ModelAdmin class gives you the ability define your own form:MyArticleAdminForm can be defined anywhere as long as you import where needed. Now within your form you can add your own custom validation for any field:It is important you use a ModelForm here otherwise things can break. See the forms documentation on custom validation and, more specifically, the model form validation notes for more information."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#inlinemodeladmin-objects", "para": "The admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models:You can edit the books authored by an author on the author page. You add inlines to a model by specifying them in a ModelAdmin.inlines:Django provides two subclasses of InlineModelAdmin and they are:The difference between these two is merely the template used to render them.InlineModelAdmin shares many of the same features as ModelAdmin, and adds some of its own (the shared features are actually defined in the BaseModelAdmin superclass). The shared features are:The InlineModelAdmin class adds or customizes:The model which the inline is using. This is required.The name of the foreign key on the model. In most cases this will be dealt with automatically, but fk_name must be specified explicitly if there are more than one foreign key to the same parent model.This defaults to BaseInlineFormSet. Using your own formset can give you many possibilities of customization. Inlines are built around model formsets.The value for form defaults to ModelForm. This is what is passed through to inlineformset_factory() when creating the formset for this inline.WarningWhen writing custom validation for InlineModelAdmin forms, be cautious of writing validation that relies on features of the parent model. If the parent model fails to validate, it may be left in an inconsistent state as described in the warning in Validation on a ModelForm.A list or tuple containing extra CSS classes to apply to the fieldset that is rendered for the inlines. Defaults to None. As with classes configured in fieldsets, inlines with a collapse class will be initially collapsed and their header will have a small  show  link.This controls the number of extra forms the formset will display in addition to the initial forms. See the formsets documentation for more information.For users with JavaScript-enabled browsers, an  Add another  link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the extra argument.The dynamic link will not appear if the number of currently displayed forms exceeds max_num, or if the user does not have JavaScript enabled.InlineModelAdmin.get_extra() also allows you to customize the number of extra forms.This controls the maximum number of forms to show in the inline. This doesn t directly correlate to the number of objects, but can if the value is small enough. See Limiting the number of editable objects for more information.InlineModelAdmin.get_max_num() also allows you to customize the maximum number of extra forms.This controls the minimum number of forms to show in the inline. See modelformset_factory() for more information.InlineModelAdmin.get_min_num() also allows you to customize the minimum number of displayed forms.By default, Django s admin uses a select-box interface (<select>) for fields that are ForeignKey. Sometimes you don t want to incur the overhead of having to select all the related instances to display in the drop-down.raw_id_fields is a list of fields you would like to change into an Input widget for either a ForeignKey or ManyToManyField:The template used to render the inline on the page.An override to the verbose_name found in the model s inner Meta class.An override to the verbose_name_plural found in the model s inner Meta class.Specifies whether or not inline objects can be deleted in the inline. Defaults to True.Specifies whether or not inline objects that can be changed in the admin have a link to the change form. Defaults to False.Returns a BaseInlineFormSet class for use in admin add/change views. See the example for ModelAdmin.get_formsets_with_inlines.Returns the number of extra inline forms to use. By default, returns the InlineModelAdmin.extra attribute.Override this method to programmatically determine the number of extra inline forms. For example, this may be based on the model instance (passed as the keyword argument obj):Returns the maximum number of extra inline forms to use. By default, returns the InlineModelAdmin.max_num attribute.Override this method to programmatically determine the maximum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument obj):Returns the minimum number of inline forms to use. By default, returns the InlineModelAdmin.min_num attribute.Override this method to programmatically determine the minimum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument obj).Should return True if adding an inline object is permitted, False otherwise. obj is the parent object being edited or None when adding a new parent.The obj argument was added. During the deprecation period, it may also be None if third-party calls to has_add_permission() don t provide it.Should return True if editing an inline object is permitted, False otherwise. obj is the parent object being edited.Should return True if deleting an inline object is permitted, False otherwise. obj is the parent object being edited.It is sometimes possible to have more than one foreign key to the same model. Take this model for instance:If you wanted to display an inline on the Person admin add/change pages you need to explicitly define the foreign key since it is unable to do so automatically:By default, admin widgets for many-to-many relations will be displayed on whichever model contains the actual reference to the ManyToManyField. Depending on your ModelAdmin definition, each many-to-many field in your model will be represented by a standard HTML <select multiple>, a horizontal or vertical filter, or a raw_id_admin widget. However, it is also possible to replace these widgets with inlines.Suppose we have the following models:If you want to display many-to-many relations using an inline, you can do so by defining an InlineModelAdmin object for the relationship:There are two features worth noting in this example.Firstly - the MembershipInline class references Group.members.through. The through attribute is a reference to the model that manages the many-to-many relation. This model is automatically created by Django when you define a many-to-many field.Secondly, the GroupAdmin must manually exclude the members field. Django displays an admin widget for a many-to-many field on the model that defines the relation (in this case, Group). If you want to use an inline model to represent the many-to-many relationship, you must tell Django s admin to not display this widget - otherwise you will end up with two widgets on your admin page for managing the relation.Note that when using this technique the m2m_changed signals aren t triggered. This is because as far as the admin is concerned, through is just a model with two foreign key fields rather than a many-to-many relation.In all other respects, the InlineModelAdmin is exactly the same as any other. You can customize the appearance using any of the normal ModelAdmin properties.When you specify an intermediary model using the through argument to a ManyToManyField, the admin will not display a widget by default. This is because each instance of that intermediary model requires more information than could be displayed in a single widget, and the layout required for multiple widgets will vary depending on the intermediate model.However, we still want to be able to edit that information inline. Fortunately, this is easy to do with inline admin models. Suppose we have the following models:The first step in displaying this intermediate model in the admin is to define an inline class for the Membership model:This simple example uses the default InlineModelAdmin values for the Membership model, and limits the extra add forms to one. This could be customized using any of the options available to InlineModelAdmin classes.Now create admin views for the Person and Group models:Finally, register your Person and Group models with the admin site:Now your admin site is set up to edit Membership objects inline from either the Person or the Group detail pages.It is possible to use an inline with generically related objects. Let s say you have the following models:If you want to allow editing and creating an Image instance on the Product, add/change views you can use GenericTabularInline or GenericStackedInline (both subclasses of GenericInlineModelAdmin) provided by admin. They implement tabular and stacked visual layouts for the forms representing the inline objects, respectively, just like their non-generic counterparts. They behave just like any other inline. In your admin.py for this example app:See the contenttypes documentation for more specific information."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#overriding-admin-templates", "para": "It is relatively easy to override many of the templates which the admin module uses to generate the various pages of an admin site. You can even override a few of these templates for a specific app, or a specific model.The admin template files are located in the contrib/admin/templates/admin directory.In order to override one or more of them, first create an admin directory in your project s templates directory. This can be any of the directories you specified in the DIRS option of the DjangoTemplates backend in the TEMPLATES setting. If you have customized the 'loaders' option, be sure 'django.template.loaders.filesystem.Loader' appears before 'django.template.loaders.app_directories.Loader' so that your custom templates will be found by the template loading system before those that are included with django.contrib.admin.Within this admin directory, create sub-directories named after your app. Within these app subdirectories create sub-directories named after your models. Note, that the admin app will lowercase the model name when looking for the directory, so make sure you name the directory in all lowercase if you are going to run your app on a case-sensitive filesystem.To override an admin template for a specific app, copy and edit the template from the django/contrib/admin/templates/admin directory, and save it to one of the directories you just created.For example, if we wanted to add a tool to the change list view for all the models in an app named my_app, we would copy contrib/admin/templates/admin/change_list.html to the templates/admin/my_app/ directory of our project, and make any necessary changes.If we wanted to add a tool to the change list view for only a specific model named  Page , we would copy that same file to the templates/admin/my_app/page directory of our project.Because of the modular design of the admin templates, it is usually neither necessary nor advisable to replace an entire template. It is almost always better to override only the section of the template which you need to change.To continue the example above, we want to add a new link next to the History tool for the Page model. After looking at change_form.html we determine that we only need to override the object-tools-items block. Therefore here is our new change_form.html :And that s it! If we placed this file in the templates/admin/my_app directory, our link would appear on the change form for all models within my_app.Not every template in contrib/admin/templates/admin may be overridden per app or per model. The following can:The ability to override the actions.html, change_form_object_tools.html, change_list_object_tools.html, change_list_results.html, date_hierarchy.html, pagination.html, prepopulated_fields_js.html, search_form.html, and submit_line.html templates was added.For those templates that cannot be overridden in this way, you may still override them for your entire project. Just place the new version in your templates/admin directory. This is particularly useful to create custom 404 and 500 pages.NoteSome of the admin templates, such as change_list_results.html are used to render custom inclusion tags. These may be overridden, but in such cases you are probably better off creating your own version of the tag in question and giving it a different name. That way you can use it selectively.If you wish to change the index, login or logout templates, you are better off creating your own AdminSite instance (see below), and changing the AdminSite.index_template , AdminSite.login_template or AdminSite.logout_template properties."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#adminsite-objects", "para": "A Django administrative site is represented by an instance of django.contrib.admin.sites.AdminSite; by default, an instance of this class is created as django.contrib.admin.site and you can register your models and ModelAdmin instances with it.If you want to customize the default admin site, you can override it.When constructing an instance of an AdminSite, you can provide a unique instance name using the name argument to the constructor. This instance name is used to identify the instance, especially when reversing admin URLs. If no instance name is provided, a default instance name of admin will be used. See Customizing the AdminSite class for an example of customizing the AdminSite class.Templates can override or extend base admin templates as described in Overriding admin templates.The text to put at the top of each admin page, as an <h1> (a string). By default, this is  Django administration .The text to put at the end of each admin page s <title> (a string). By default, this is  Django site admin .The URL for the  View site  link at the top of each admin page. By default, site_url is /. Set it to None to remove the link.For sites running on a subpath, the each_context() method checks if the current request has request.META['SCRIPT_NAME'] set and uses that value if site_url isn t set to something other than /.The text to put at the top of the admin index page (a string). By default, this is  Site administration .Path to a custom template that will be used by the admin site main index view.Path to a custom template that will be used by the admin site app index view.The string to use for displaying empty values in the admin site s change list. Defaults to a dash. The value can also be overridden on a per ModelAdmin basis and on a custom field within a ModelAdmin by setting an empty_value_display attribute on the field. See ModelAdmin.empty_value_display for examples.Path to a custom template that will be used by the admin site login view.Subclass of AuthenticationForm that will be used by the admin site login view.Path to a custom template that will be used by the admin site logout view.Path to a custom template that will be used by the admin site password change view.Path to a custom template that will be used by the admin site password change done view.Returns a dictionary of variables to put in the template context for every page in the admin site.Includes the following variables and values by default:site_header: AdminSite.site_headersite_title: AdminSite.site_titlesite_url: AdminSite.site_urlhas_permission: AdminSite.has_permission()available_apps: a list of applications from the application registry available for the current user. Each entry in the list is a dict representing an application with the following keys:Each model is a dict with the following keys:Returns True if the user for the given HttpRequest has permission to view at least one page in the admin site. Defaults to requiring both User.is_active and User.is_staff to be True.Registers the given model class (or iterable of classes) with the given admin_class. admin_class defaults to ModelAdmin (the default admin options). If keyword arguments are given   e.g. list_display   they ll be applied as options to the admin class.Raises ImproperlyConfigured if a model is abstract. and django.contrib.admin.sites.AlreadyRegistered if a model is already registered.The last step in setting up the Django admin is to hook your AdminSite instance into your URLconf. Do this by pointing a given URL at the AdminSite.urls method. It is not necessary to use include().In this example, we register the default AdminSite instance django.contrib.admin.site at the URL /admin/If you d like to set up your own admin site with custom behavior, you re free to subclass AdminSite and override or add anything you like. Then, simply create an instance of your AdminSite subclass (the same way you d instantiate any other Python class) and register your models and ModelAdmin subclasses with it instead of with the default site. Finally, update myproject/urls.py to reference your AdminSite subclass.Note that you may not want autodiscovery of admin modules when using your own AdminSite instance since you will likely be importing all the per-app admin modules in your myproject.admin module. This means you need to put 'django.contrib.admin.apps.SimpleAdminConfig' instead of 'django.contrib.admin' in your INSTALLED_APPS setting.You can override the default django.contrib.admin.site by setting the default_site attribute of a custom AppConfig to the dotted import path of either a AdminSite subclass or a callable that returns a site instance.It s easy to create multiple instances of the admin site on the same Django-powered website. Just create multiple instances of AdminSite and root each one at a different URL.In this example, the URLs /basic-admin/ and /advanced-admin/ feature separate versions of the admin site   using the AdminSite instances myproject.admin.basic_site and myproject.admin.advanced_site, respectively:AdminSite instances take a single argument to their constructor, their name, which can be anything you like. This argument becomes the prefix to the URL names for the purposes of reversing them. This is only necessary if you are using more than one AdminSite.Just like ModelAdmin, AdminSite provides a get_urls() method that can be overridden to define additional views for the site. To add a new view to your admin site, extend the base get_urls() method to include a pattern for your new view.NoteAny view you render that uses the admin templates, or extends the base admin template, should set request.current_app before rendering the template. It should be set to either self.name if your view is on an AdminSite or self.admin_site.name if your view is on a ModelAdmin.You can add a password reset feature to the admin site by adding a few lines to your URLconf. Specifically, add these four patterns:(This assumes you ve added the admin at admin/ and requires that you put the URLs starting with ^admin/ before the line that includes the admin app itself).The presence of the admin_password_reset named URL will cause a  forgotten your password?  link to appear on the default admin log-in page under the password box."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#logentry-objects", "para": "The LogEntry class tracks additions, changes, and deletions of objects done through the admin interface.The date and time of the action.The user (an AUTH_USER_MODEL instance) who performed the action.The ContentType of the modified object.The textual representation of the modified object s primary key.The object`s repr() after the modification.The type of action logged: ADDITION, CHANGE, DELETION.For example, to get a list of all additions done through the admin:The detailed description of the modification. In the case of an edit, for example, the message contains a list of the edited fields. The Django admin site formats this content as a JSON structure, so that get_change_message() can recompose a message translated in the current user language. Custom code might set this as a plain string though. You are advised to use the get_change_message() method to retrieve this value instead of accessing it directly.A shortcut that returns the referenced object.Formats and translates change_message into the current user language. Messages created before Django 1.10 will always be displayed in the language in which they were logged."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#reversing-admin-urls", "para": "When an AdminSite is deployed, the views provided by that site are accessible using Django s URL reversing system.The AdminSite provides the following named URL patterns:Each ModelAdmin instance provides an additional set of named URLs:The UserAdmin provides a named URL:These named URLs are registered with the application namespace admin, and with an instance namespace corresponding to the name of the Site instance.So - if you wanted to get a reference to the Change view for a particular Choice object (from the polls application) in the default admin, you would call:This will find the first registered instance of the admin application (whatever the instance name), and resolve to the view for changing poll.Choice instances in that instance.If you want to find a URL in a specific admin instance, provide the name of that instance as a current_app hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named custom, you would need to call:For more details, see the documentation on reversing namespaced URLs.To allow easier reversing of the admin urls in templates, Django provides an admin_urlname filter which takes an action as argument:The action in the examples above match the last part of the URL names for ModelAdmin instances described above. The opts variable can be any object which has an app_label and model_name attributes and is usually supplied by the admin views for the current model."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#the-staff-member-required-decorator", "para": "This decorator is used on the admin views that require authorization. A view decorated with this function will having the following behavior:Example usage:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/actions/#writing-actions", "para": "The easiest way to explain actions is by example, so let s dive in.A common use case for admin actions is the bulk updating of a model. Imagine a simple news application with an Article model:A common task we might perform with a model like this is to update an article s status from  draft  to  published . We could easily do this in the admin one article at a time, but if we wanted to bulk-publish a group of articles, it d be tedious. So, let s write an action that lets us change an article s status to  published. First, we ll need to write a function that gets called when the action is triggered from the admin. Action functions are just regular functions that take three arguments:Our publish-these-articles function won t need the ModelAdmin or the request object, but we will use the queryset:NoteFor the best performance, we re using the queryset s update method. Other types of actions might need to deal with each object individually; in these cases we d just iterate over the queryset:That s actually all there is to writing an action! However, we ll take one more optional-but-useful step and give the action a  nice  title in the admin. By default, this action would appear in the action list as  Make published    the function name, with underscores replaced by spaces. That s fine, but we can provide a better, more human-friendly name by giving the make_published function a short_description attribute:NoteThis might look familiar; the admin s list_display option uses the same technique to provide human-readable descriptions for callback functions registered there, too.Next, we ll need to inform our ModelAdmin of the action. This works just like any other configuration option. So, the complete admin.py with the action and its registration would look like:That code will give us an admin change list that looks something like this:That s really all there is to it! If you re itching to write your own actions, you now know enough to get started. The rest of this document just covers more advanced techniques.If there are foreseeable error conditions that may occur while running your action, you should gracefully inform the user of the problem. This means handling exceptions and using django.contrib.admin.ModelAdmin.message_user() to display a user friendly description of the problem in the response."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/actions/#advanced-action-techniques", "para": "There s a couple of extra options and possibilities you can exploit for more advanced options.The example above shows the make_published action defined as a simple function. That s perfectly fine, but it s not perfect from a code design point of view: since the action is tightly coupled to the Article object, it makes sense to hook the action to the ArticleAdmin object itself.That s easy enough to do:Notice first that we ve moved make_published into a method and renamed the modeladmin parameter to self, and second that we ve now put the string 'make_published' in actions instead of a direct function reference. This tells the ModelAdmin to look up the action as a method.Defining actions as methods gives the action more straightforward, idiomatic access to the ModelAdmin itself, allowing the action to call any of the methods provided by the admin.For example, we can use self to flash a message to the user informing her that the action was successful:This make the action match what the admin itself does after successfully performing an action:By default, after an action is performed the user is simply redirected back to the original change list page. However, some actions, especially more complex ones, will need to return intermediate pages. For example, the built-in delete action asks for confirmation before deleting the selected objects.To provide an intermediary page, simply return an HttpResponse (or subclass) from your action. For example, you might write a simple export function that uses Django s serialization functions to dump some selected objects as JSON:Generally, something like the above isn t considered a great idea. Most of the time, the best practice will be to return an HttpResponseRedirect and redirect the user to a view you ve written, passing the list of selected objects in the GET query string. This allows you to provide complex interaction logic on the intermediary pages. For example, if you wanted to provide a more complete export function, you d want to let the user choose a format, and possibly a list of fields to include in the export. The best thing to do would be to write a small action that simply redirects to your custom export view:As you can see, the action is the simple part; all the complex logic would belong in your export view. This would need to deal with objects of any type, hence the business with the ContentType.Writing this view is left as an exercise to the reader.Some actions are best if they re made available to any object in the admin site   the export action defined above would be a good candidate. You can make an action globally available using AdminSite.add_action(). For example:This makes the export_selected_objects action globally available as an action named  export_selected_objects . You can explicitly give the action a name   good if you later want to programmatically remove the action   by passing a second argument to AdminSite.add_action():Sometimes you need to disable certain actions   especially those registered site-wide   for particular objects. There s a few ways you can disable actions:If you need to disable a site-wide action you can call AdminSite.disable_action().For example, you can use this method to remove the built-in  delete selected objects  action:Once you ve done the above, that action will no longer be available site-wide.If, however, you need to re-enable a globally-disabled action for one particular model, simply list it explicitly in your ModelAdmin.actions list:If you want no bulk actions available for a given ModelAdmin, simply set ModelAdmin.actions to None:This tells the ModelAdmin to not display or allow any actions, including any site-wide actions.Finally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding ModelAdmin.get_actions().This returns a dictionary of actions allowed. The keys are action names, and the values are (function, name, short_description) tuples.For example, if you only want users whose names begin with  J  to be able to delete objects in bulk:Actions may limit their availability to users with specific permissions by setting an allowed_permissions attribute on the action function:The make_published() action will only be available to users that pass the ModelAdmin.has_change_permission() check.If allowed_permissions has more than one permission, the action will be available as long as the user passes at least one of the checks.Available values for allowed_permissions and the corresponding method checks are:You can specify any other value as long as you implement a corresponding has_<value>_permission(self, request) method on the ModelAdmin.For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/admindocs/#overview", "para": "To activate the admindocs, you will need to do the following:Once those steps are complete, you can start browsing the documentation by going to your admin interface and clicking the  Documentation  link in the upper right of the page."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/admindocs/#documentation-helpers", "para": "The following special markup can be used in your docstrings to easily create hyperlinks to other components:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/admindocs/#model-reference", "para": "The models section of the admindocs page describes each model in the system along with all the fields, properties, and methods available on it. Relationships to other models appear as hyperlinks. Descriptions are pulled from help_text attributes on fields or from docstrings on model methods.Older versions don t display model properties.A model with useful documentation might look like this:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/admindocs/#view-reference", "para": "Each URL in your site has a separate entry in the admindocs page, and clicking on a given URL will show you the corresponding view. Helpful things you can document in your view function docstrings include:For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/admindocs/#template-tags-and-filters-reference", "para": "The tags and filters admindocs sections describe all the tags and filters that come with Django (in fact, the built-in tag reference and built-in filter reference documentation come directly from those pages). Any tags or filters that you create or are added by a third-party app will show up in these sections as well."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/admindocs/#template-reference", "para": "While admindocs does not include a place to document templates by themselves, if you use the :template:`path/to/template.html` syntax in a docstring the resulting page will verify the path of that template with Django s template loaders. This can be a handy way to check if the specified template exists and to show where on the filesystem that template is stored."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/admindocs/#included-bookmarklets", "para": "One bookmarklet is available from the admindocs page:Using this bookmarklet requires that XViewMiddleware is installed and that you are logged into the Django admin as a User with is_staff set to True."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/security/#cross-site-scripting-xss-protection", "para": "XSS attacks allow a user to inject client side scripts into the browsers of other users. This is usually achieved by storing the malicious scripts in the database where it will be retrieved and displayed to other users, or by getting users to click a link which will cause the attacker s JavaScript to be executed by the user s browser. However, XSS attacks can originate from any untrusted source of data, such as cookies or Web services, whenever the data is not sufficiently sanitized before including in a page.Using Django templates protects you against the majority of XSS attacks. However, it is important to understand what protections it provides and its limitations.Django templates escape specific characters which are particularly dangerous to HTML. While this protects users from most malicious input, it is not entirely foolproof. For example, it will not protect the following:If var is set to 'class1 onmouseover=javascript:func()', this can result in unauthorized JavaScript execution, depending on how the browser renders imperfect HTML. (Quoting the attribute value would fix this case.)It is also important to be particularly careful when using is_safe with custom template tags, the safe template tag, mark_safe, and when autoescape is turned off.In addition, if you are using the template system to output something other than HTML, there may be entirely separate characters and words which require escaping.You should also be very careful when storing HTML in the database, especially when that HTML is retrieved and displayed."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/security/#cross-site-request-forgery-csrf-protection", "para": "CSRF attacks allow a malicious user to execute actions using the credentials of another user without that user s knowledge or consent.Django has built-in protection against most types of CSRF attacks, providing you have enabled and used it where appropriate. However, as with any mitigation technique, there are limitations. For example, it is possible to disable the CSRF module globally or for particular views. You should only do this if you know what you are doing. There are other limitations if your site has subdomains that are outside of your control.CSRF protection works by checking for a secret in each POST request. This ensures that a malicious user cannot simply  replay  a form POST to your website and have another logged in user unwittingly submit that form. The malicious user would have to know the secret, which is user specific (using a cookie).When deployed with HTTPS, CsrfViewMiddleware will check that the HTTP referer header is set to a URL on the same origin (including subdomain and port). Because HTTPS provides additional security, it is imperative to ensure connections use HTTPS where it is available by forwarding insecure connection requests and using HSTS for supported browsers.Be very careful with marking views with the csrf_exempt decorator unless it is absolutely necessary."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/security/#sql-injection-protection", "para": "SQL injection is a type of attack where a malicious user is able to execute arbitrary SQL code on a database. This can result in records being deleted or data leakage.Django s querysets are protected from SQL injection since their queries are constructed using query parameterization. A query s SQL code is defined separately from the query s parameters. Since parameters may be user-provided and therefore unsafe, they are escaped by the underlying database driver.Django also gives developers power to write raw queries or execute custom sql. These capabilities should be used sparingly and you should always be careful to properly escape any parameters that the user can control. In addition, you should exercise caution when using extra() and RawSQL."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/security/#clickjacking-protection", "para": "Clickjacking is a type of attack where a malicious site wraps another site in a frame. This attack can result in an unsuspecting user being tricked into performing unintended actions on the target site.Django contains clickjacking protection in the form of the X-Frame-Options middleware which in a supporting browser can prevent a site from being rendered inside a frame. It is possible to disable the protection on a per view basis or to configure the exact header value sent.The middleware is strongly recommended for any site that does not need to have its pages wrapped in a frame by third party sites, or only needs to allow that for a small section of the site."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/security/#ssl-https", "para": "It is always better for security to deploy your site behind HTTPS. Without this, it is possible for malicious network users to sniff authentication credentials or any other information transferred between client and server, and in some cases   active network attackers   to alter data that is sent in either direction.If you want the protection that HTTPS provides, and have enabled it on your server, there are some additional steps you may need:If necessary, set SECURE_PROXY_SSL_HEADER, ensuring that you have understood the warnings there thoroughly. Failure to do this can result in CSRF vulnerabilities, and failure to do it correctly can also be dangerous!Set SECURE_SSL_REDIRECT to True, so that requests over HTTP are redirected to HTTPS.Please note the caveats under SECURE_PROXY_SSL_HEADER. For the case of a reverse proxy, it may be easier or more secure to configure the main Web server to do the redirect to HTTPS.Use  secure  cookies.If a browser connects initially via HTTP, which is the default for most browsers, it is possible for existing cookies to be leaked. For this reason, you should set your SESSION_COOKIE_SECURE and CSRF_COOKIE_SECURE settings to True. This instructs the browser to only send these cookies over HTTPS connections. Note that this will mean that sessions will not work over HTTP, and the CSRF protection will prevent any POST data being accepted over HTTP (which will be fine if you are redirecting all HTTP traffic to HTTPS).Use HTTP Strict Transport Security (HSTS)HSTS is an HTTP header that informs a browser that all future connections to a particular site should always use HTTPS. Combined with redirecting requests over HTTP to HTTPS, this will ensure that connections always enjoy the added security of SSL provided one successful connection has occurred. HSTS may either be configured with SECURE_HSTS_SECONDS, SECURE_HSTS_INCLUDE_SUBDOMAINS, and SECURE_HSTS_PRELOAD, or on the Web server."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/security/#host-header-validation", "para": "Django uses the Host header provided by the client to construct URLs in certain cases. While these values are sanitized to prevent Cross Site Scripting attacks, a fake Host value can be used for Cross-Site Request Forgery, cache poisoning attacks, and poisoning links in emails.Because even seemingly-secure web server configurations are susceptible to fake Host headers, Django validates Host headers against the ALLOWED_HOSTS setting in the django.http.HttpRequest.get_host() method.This validation only applies via get_host(); if your code accesses the Host header directly from request.META you are bypassing this security protection.For more details see the full ALLOWED_HOSTS documentation.WarningPrevious versions of this document recommended configuring your web server to ensure it validates incoming HTTP Host headers. While this is still recommended, in many common web servers a configuration that seems to validate the Host header may not in fact do so. For instance, even if Apache is configured such that your Django site is served from a non-default virtual host with the ServerName set, it is still possible for an HTTP request to match this virtual host and supply a fake Host header. Thus, Django now requires that you set ALLOWED_HOSTS explicitly rather than relying on web server configuration.Additionally, Django requires you to explicitly enable support for the X-Forwarded-Host header (via the USE_X_FORWARDED_HOST setting) if your configuration requires it."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/security/#session-security", "para": "Similar to the CSRF limitations requiring a site to be deployed such that untrusted users don t have access to any subdomains, django.contrib.sessions also has limitations. See the session topic guide section on security for details."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/security/#user-uploaded-content", "para": "NoteConsider serving static files from a cloud service or CDN to avoid some of these issues.If your site accepts file uploads, it is strongly advised that you limit these uploads in your Web server configuration to a reasonable size in order to prevent denial of service (DOS) attacks. In Apache, this can be easily set using the LimitRequestBody directive.If you are serving your own static files, be sure that handlers like Apache s mod_php, which would execute static files as code, are disabled. You don t want users to be able to execute arbitrary code by uploading and requesting a specially crafted file.Django s media upload handling poses some vulnerabilities when that media is served in ways that do not follow security best practices. Specifically, an HTML file can be uploaded as an image if that file contains a valid PNG header followed by malicious HTML. This file will pass verification of the library that Django uses for ImageField image processing (Pillow). When this file is subsequently displayed to a user, it may be displayed as HTML depending on the type and configuration of your web server.No bulletproof technical solution exists at the framework level to safely validate all user uploaded file content, however, there are some other steps you can take to mitigate these attacks:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/security/#additional-security-topics", "para": "While Django provides good security protection out of the box, it is still important to properly deploy your application and take advantage of the security protection of the Web server, operating system and other components."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/security/#issues-prior-to-django-s-security-process", "para": "Some security issues were handled before Django had a formalized security process in use. For these, new releases may not have been issued at the time and CVEs may not have been assigned.Filename validation issue in translation framework. Full descriptionApparent  caching  of authenticated user. Full description"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/security/#issues-under-django-s-security-process", "para": "All other security issues have been handled under versions of Django s security process. These are listed below.Denial-of-service via arbitrarily-large Accept-Language header. Full descriptionXSS via admin login redirect. Full descriptionCSRF via preservation of POST data during admin login. Full descriptionDirectory-traversal in development server media handler. Full descriptionDenial-of-service via pathological regular expression performance. Full descriptionXSS via trusting unsafe cookie value. Full descriptionInformation leakage in administrative interface. Full descriptionDenial-of-service in password-reset mechanism. Full descriptionCSRF via forged HTTP headers. Full descriptionXSS via unsanitized names of uploaded files. Full descriptionDirectory-traversal on Windows via incorrect path-separator handling. Full descriptionSession manipulation when using memory-cache-backed session. Full descriptionDenial-of-service via URLField.verify_exists. Full descriptionInformation leakage/arbitrary request issuance via URLField.verify_exists. Full descriptionHost header cache poisoning. Full descriptionPotential CSRF via Host header. Full descriptionThis notification was an advisory only, so no patches were issued.XSS via failure to validate redirect scheme. Full descriptionDenial-of-service via compressed image files. Full descriptionDenial-of-service via large image files. Full descriptionHost header poisoning. Full descriptionAdditional hardening of Host header handling. Full descriptionAdditional hardening of redirect validation. Full descriptionAdditional hardening of Host header handling. Full descriptionEntity-based attacks against Python XML libraries. Full descriptionInformation leakage via admin history log. Full descriptionDenial-of-service via formset max_num bypass. Full descriptionXSS via admin trusting URLField values. Full descriptionPossible XSS via unvalidated URL redirect schemes. Full descriptionDirectory-traversal via ssi template tag. Full descriptionDenial-of-service via large passwords. Full descriptionUnexpected code execution using reverse(). Full descriptionCaching of anonymous pages could reveal CSRF token. Full descriptionMySQL typecasting causes unexpected query results. Full descriptionCaches may be allowed to store and serve private data. Full descriptionMalformed URLs from user input incorrectly validated. Full descriptionreverse() can generate URLs pointing to other hosts. Full descriptionFile upload denial of service. Full descriptionRemoteUserMiddleware session hijacking. Full descriptionData leakage via querystring manipulation in admin. Full descriptionWSGI header spoofing via underscore/dash conflation. Full descriptionMitigated possible XSS attack via user-supplied redirect URLs. Full descriptionDenial-of-service attack against django.views.static.serve(). Full descriptionDatabase denial-of-service with ModelMultipleChoiceField. Full descriptionXSS attack via properties in ModelAdmin.readonly_fields. Full descriptionDenial-of-service possibility with strip_tags(). Full descriptionMitigated possible XSS attack via user-supplied redirect URLs. Full descriptionFixed session flushing in the cached_db backend. Full descriptionDenial-of-service possibility by filling session store. Full descriptionHeader injection possibility since validators accept newlines in input. Full descriptionDenial-of-service possibility in URL validation. Full descriptionDenial-of-service possibility in logout() view by filling session store. Full descriptionSettings leak possibility in date template filter. Full descriptionUser with  change  but not  add  permission can create objects for ModelAdmin s with save_as=True. Full descriptionMalicious redirect and possible XSS attack via user-supplied redirect URLs containing basic auth. Full descriptionUser enumeration through timing difference on password hasher work factor upgrade. Full descriptionXSS in admin s add/change related popup. Full descriptionCSRF protection bypass on a site with Google Analytics. Full descriptionUser with hardcoded password created when running tests on Oracle. Full descriptionDNS rebinding vulnerability when DEBUG=True. Full descriptionOpen redirect and possible XSS attack via user-supplied numeric redirect URLs. Full descriptionOpen redirect vulnerability in django.views.static.serve(). Full descriptionPossible XSS in traceback section of technical 500 debug page. Full descriptionInformation leakage in AuthenticationForm. Full descriptionDenial-of-service possibility in urlize and urlizetrunc template filters. Full descriptionDenial-of-service possibility in truncatechars_html and truncatewords_html template filters. Full descriptionOpen redirect possibility in CommonMiddleware. Full descriptionPassword hash disclosure to  view only  admin users. Full descriptionContent spoofing possibility in the default 404 page. Full descriptionMemory exhaustion in django.utils.numberformat.format(). Full description"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/clickjacking/#an-example-of-clickjacking", "para": "Suppose an online store has a page where a logged in user can click  Buy Now  to purchase an item. A user has chosen to stay logged into the store all the time for convenience. An attacker site might create an  I Like Ponies  button on one of their own pages, and load the store s page in a transparent iframe such that the  Buy Now  button is invisibly overlaid on the  I Like Ponies  button. If the user visits the attacker s site, clicking  I Like Ponies  will cause an inadvertent click on the  Buy Now  button and an unknowing purchase of the item."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/clickjacking/#preventing-clickjacking", "para": "Modern browsers honor the X-Frame-Options HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe. If the response contains the header with a value of SAMEORIGIN then the browser will only load the resource in a frame if the request originated from the same site. If the header is set to DENY then the browser will block the resource from loading in a frame no matter which site made the request.Django provides a few simple ways to include this header in responses from your site:The X-Frame-Options HTTP header will only be set by the middleware or view decorators if it is not already present in the response."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/clickjacking/#how-to-use-it", "para": "To set the same X-Frame-Options value for all responses in your site, put 'django.middleware.clickjacking.XFrameOptionsMiddleware' to MIDDLEWARE:This middleware is enabled in the settings file generated by startproject.By default, the middleware will set the X-Frame-Options header to SAMEORIGIN for every outgoing HttpResponse. If you want DENY instead, set the X_FRAME_OPTIONS setting:When using the middleware there may be some views where you do not want the X-Frame-Options header set. For those cases, you can use a view decorator that tells the middleware not to set the header:To set the X-Frame-Options header on a per view basis, Django provides these decorators:Note that you can use the decorators in conjunction with the middleware. Use of a decorator overrides the middleware."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/clickjacking/#limitations", "para": "The X-Frame-Options header will only protect against clickjacking in a modern browser. Older browsers will quietly ignore the header and need other clickjacking prevention techniques.A complete list of browsers supporting X-Frame-Options."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#how-to-use-it", "para": "To take advantage of CSRF protection in your views, follow these steps:The CSRF middleware is activated by default in the MIDDLEWARE setting. If you override that setting, remember that 'django.middleware.csrf.CsrfViewMiddleware' should come before any view middleware that assume that CSRF attacks have been dealt with.If you disabled it, which is not recommended, you can use csrf_protect() on particular views you want to protect (see below).In any template that uses a POST form, use the csrf_token tag inside the <form> element if the form is for an internal URL, e.g.:This should not be done for POST forms that target external URLs, since that would cause the CSRF token to be leaked, leading to a vulnerability.In the corresponding view functions, ensure that RequestContext is used to render the response so that {% csrf_token %} will work properly. If you re using the render() function, generic views, or contrib apps, you are covered already since these all use RequestContext.While the above method can be used for AJAX POST requests, it has some inconveniences: you have to remember to pass the CSRF token in as POST data with every POST request. For this reason, there is an alternative method: on each XMLHttpRequest, set a custom X-CSRFToken header (as specified by the CSRF_HEADER_NAME setting) to the value of the CSRF token. This is often easier because many JavaScript frameworks provide hooks that allow headers to be set on every request.First, you must get the CSRF token. How to do that depends on whether or not the CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY settings are enabled.The recommended source for the token is the csrftoken cookie, which will be set if you ve enabled CSRF protection for your views as outlined above.The CSRF token cookie is named csrftoken by default, but you can control the cookie name via the CSRF_COOKIE_NAME setting.Acquiring the token is straightforward:The above code could be simplified by using the JavaScript Cookie library to replace getCookie:NoteThe CSRF token is also present in the DOM, but only if explicitly included using csrf_token in a template. The cookie contains the canonical token; the CsrfViewMiddleware will prefer the cookie to the token in the DOM. Regardless, you re guaranteed to have the cookie if the token is present in the DOM, so you should use the cookie!WarningIf your view is not rendering a template containing the csrf_token template tag, Django might not set the CSRF token cookie. This is common in cases where forms are dynamically added to the page. To address this case, Django provides a view decorator which forces setting of the cookie: ensure_csrf_cookie().If you activate CSRF_USE_SESSIONS or CSRF_COOKIE_HTTPONLY, you must include the CSRF token in your HTML and read the token from the DOM with JavaScript:Finally, you ll have to actually set the header on your AJAX request, while protecting the CSRF token from being sent to other domains using settings.crossDomain in jQuery 1.5.1 and newer:If you re using AngularJS 1.1.3 and newer, it s sufficient to configure the $http provider with the cookie and header names:Django s Jinja2 template backend adds {{ csrf_input }} to the context of all templates which is equivalent to {% csrf_token %} in the Django template language. For example:Rather than adding CsrfViewMiddleware as a blanket protection, you can use the csrf_protect decorator, which has exactly the same functionality, on particular views that need the protection. It must be used both on views that insert the CSRF token in the output, and on those that accept the POST form data. (These are often the same view function, but not always).Use of the decorator by itself is not recommended, since if you forget to use it, you will have a security hole. The  belt and braces  strategy of using both is fine, and will incur minimal overhead.Decorator that provides the protection of CsrfViewMiddleware to a view.Usage:If you are using class-based views, you can refer to Decorating class-based views."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#rejected-requests", "para": "By default, a  403 Forbidden  response is sent to the user if an incoming request fails the checks performed by CsrfViewMiddleware.  This should usually only be seen when there is a genuine Cross Site Request Forgery, or when, due to a programming error, the CSRF token has not been included with a POST form.The error page, however, is not very friendly, so you may want to provide your own view for handling this condition.  To do this, simply set the CSRF_FAILURE_VIEW setting.CSRF failures are logged as warnings to the django.security.csrf logger."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#how-it-works", "para": "The CSRF protection is based on the following things:A CSRF cookie that is based on a random secret value, which other sites will not have access to.This cookie is set by CsrfViewMiddleware. It is sent with every response that has called django.middleware.csrf.get_token() (the function used internally to retrieve the CSRF token), if it wasn t already set on the request.In order to protect against BREACH attacks, the token is not simply the secret; a random salt is prepended to the secret and used to scramble it.For security reasons, the value of the secret is changed each time a user logs in.A hidden form field with the name  csrfmiddlewaretoken  present in all outgoing POST forms. The value of this field is, again, the value of the secret, with a salt which is both added to it and used to scramble it. The salt is regenerated on every call to get_token() so that the form field value is changed in every such response.This part is done by the template tag.For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE, a CSRF cookie must be present, and the  csrfmiddlewaretoken  field must be present and correct. If it isn t, the user will get a 403 error.When validating the  csrfmiddlewaretoken  field value, only the secret, not the full token, is compared with the secret in the cookie value. This allows the use of ever-changing tokens. While each request may use its own token, the secret remains common to all.This check is done by CsrfViewMiddleware.In addition, for HTTPS requests, strict referer checking is done by CsrfViewMiddleware. This means that even if a subdomain can set or modify cookies on your domain, it can t force a user to post to your application since that request won t come from your own exact domain.This also addresses a man-in-the-middle attack that s possible under HTTPS when using a session independent secret, due to the fact that HTTP Set-Cookie headers are (unfortunately) accepted by clients even when they are talking to a site under HTTPS. (Referer checking is not done for HTTP requests because the presence of the Referer header isn t reliable enough under HTTP.)If the CSRF_COOKIE_DOMAIN setting is set, the referer is compared against it. This setting supports subdomains. For example, CSRF_COOKIE_DOMAIN = '.example.com' will allow POST requests from www.example.com and api.example.com. If the setting is not set, then the referer must match the HTTP Host header.Expanding the accepted referers beyond the current host or cookie domain can be done with the CSRF_TRUSTED_ORIGINS setting.This ensures that only forms that have originated from trusted domains can be used to POST data back.It deliberately ignores GET requests (and other requests that are defined as  safe  by RFC 7231). These requests ought never to have any potentially dangerous side effects , and so a CSRF attack with a GET request ought to be harmless. RFC 7231 defines POST, PUT, and DELETE as  unsafe , and all other methods are also assumed to be unsafe, for maximum protection.The CSRF protection cannot protect against man-in-the-middle attacks, so use HTTPS with HTTP Strict Transport Security. It also assumes validation of the HOST header and that there aren t any cross-site scripting vulnerabilities on your site (because XSS vulnerabilities already let an attacker do anything a CSRF vulnerability allows and much worse).Removing the Referer headerTo avoid disclosing the referrer URL to third-party sites, you might want to disable the referer on your site s <a> tags. For example, you might use the <meta name=\"referrer\" content=\"no-referrer\"> tag or include the Referrer-Policy: no-referrer header. Due to the CSRF protection s strict referer checking on HTTPS requests, those techniques cause a CSRF failure on requests with  unsafe  methods. Instead, use alternatives like <a rel=\"noreferrer\" ...>\" for links to third-party sites."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#caching", "para": "If the csrf_token template tag is used by a template (or the get_token function is called some other way), CsrfViewMiddleware will add a cookie and a Vary: Cookie header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (UpdateCacheMiddleware goes before all other middleware).However, if you use cache decorators on individual views, the CSRF middleware will not yet have been able to set the Vary header or the CSRF cookie, and the response will be cached without either one. In this case, on any views that will require a CSRF token to be inserted you should use the django.views.decorators.csrf.csrf_protect() decorator first:If you are using class-based views, you can refer to Decorating class-based views."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#testing", "para": "The CsrfViewMiddleware will usually be a big hindrance to testing view functions, due to the need for the CSRF token which must be sent with every POST request.  For this reason, Django s HTTP client for tests has been modified to set a flag on requests which relaxes the middleware and the csrf_protect decorator so that they no longer rejects requests.  In every other respect (e.g. sending cookies etc.), they behave the same.If, for some reason, you want the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#limitations", "para": "Subdomains within a site will be able to set cookies on the client for the whole domain.  By setting the cookie and using a corresponding token, subdomains will be able to circumvent the CSRF protection.  The only way to avoid this is to ensure that subdomains are controlled by trusted users (or, are at least unable to set cookies).  Note that even without CSRF, there are other vulnerabilities, such as session fixation, that make giving subdomains to untrusted parties a bad idea, and these vulnerabilities cannot easily be fixed with current browsers."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#edge-cases", "para": "Certain views can have unusual requirements that mean they don t fit the normal pattern envisaged here. A number of utilities can be useful in these situations. The scenarios they might be needed in are described in the following section.The examples below assume you are using function-based views. If you are working with class-based views, you can refer to Decorating class-based views.This decorator marks a view as being exempt from the protection ensured by the middleware. Example:Normally the csrf_token template tag will not work if CsrfViewMiddleware.process_view or an equivalent like csrf_protect has not run. The view decorator requires_csrf_token can be used to ensure the template tag does work. This decorator works similarly to csrf_protect, but never rejects an incoming request.Example:This decorator forces a view to send the CSRF cookie.Most views requires CSRF protection, but a few do not.Solution: rather than disabling the middleware and applying csrf_protect to all the views that need it, enable the middleware and use csrf_exempt().There are cases when CsrfViewMiddleware.process_view may not have run before your view is run - 404 and 500 handlers, for example - but you still need the CSRF token in a form.Solution: use requires_csrf_token()There may be some views that are unprotected and have been exempted by csrf_exempt, but still need to include the CSRF token.Solution: use csrf_exempt() followed by requires_csrf_token(). (i.e. requires_csrf_token should be the innermost decorator).A view needs CSRF protection under one set of conditions only, and mustn t have it for the rest of the time.Solution: use csrf_exempt() for the whole view function, and csrf_protect() for the path within it that needs protection. Example:A page makes a POST request via AJAX, and the page does not have an HTML form with a csrf_token that would cause the required CSRF cookie to be sent.Solution: use ensure_csrf_cookie() on the view that sends the page."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#contrib-and-reusable-apps", "para": "Because it is possible for the developer to turn off the CsrfViewMiddleware, all relevant views in contrib apps use the csrf_protect decorator to ensure the security of these applications against CSRF.  It is recommended that the developers of other reusable apps that want the same guarantees also use the csrf_protect decorator on their views."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#settings", "para": "A number of settings can be used to control Django s CSRF behavior:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/csrf/#frequently-asked-questions", "para": "No, this is by design. Without a man-in-the-middle attack, there is no way for an attacker to send a CSRF token cookie to a victim s browser, so a successful attack would need to obtain the victim s browser s cookie via XSS or similar, in which case an attacker usually doesn t need CSRF attacks.Some security audit tools flag this as a problem but as mentioned before, an attacker cannot steal a user s browser s CSRF cookie.  Stealing  or modifying your own token using Firebug, Chrome dev tools, etc. isn t a vulnerability.No, this is by design. Not linking CSRF protection to a session allows using the protection on sites such as a pastebin that allow submissions from anonymous users which don t have a session.If you wish to store the CSRF token in the user s session, use the CSRF_USE_SESSIONS setting.For security reasons, CSRF tokens are rotated each time a user logs in. Any page with a form generated before a login will have an old, invalid CSRF token and need to be reloaded. This might happen if a user uses the back button after a login or if they log in a different browser tab."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/signing/#protecting-the-secret-key", "para": "When you create a new Django project using startproject, the settings.py file is generated automatically and gets a random SECRET_KEY value. This value is the key to securing signed data   it is vital you keep this secure, or attackers could use it to generate their own signed values."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/signing/#using-the-low-level-api", "para": "Django s signing methods live in the django.core.signing module. To sign a value, first instantiate a Signer instance:The signature is appended to the end of the string, following the colon. You can retrieve the original value using the unsign method:If the signature or value have been altered in any way, a django.core.signing.BadSignature exception will be raised:By default, the Signer class uses the SECRET_KEY setting to generate signatures. You can use a different secret by passing it to the Signer constructor:Returns a signer which uses key to generate signatures and sep to separate values. sep cannot be in the URL safe base64 alphabet.  This alphabet contains alphanumeric characters, hyphens, and underscores.If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional salt argument to the Signer class. Using a salt will seed the signing hash function with both the salt and your SECRET_KEY:Using salt in this way puts the different signatures into different namespaces.  A signature that comes from one namespace (a particular salt value) cannot be used to validate the same plaintext string in a different namespace that is using a different salt setting. The result is to prevent an attacker from using a signed string generated in one place in the code as input to another piece of code that is generating (and verifying) signatures using a different salt.Unlike your SECRET_KEY, your salt argument does not need to stay secret.TimestampSigner is a subclass of Signer that appends a signed timestamp to the value. This allows you to confirm that a signed value was created within a specified period of time:Sign value and append current timestamp to it.Checks if value was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object.If you wish to protect a list, tuple or dictionary you can do so using the signing module s dumps and loads functions. These imitate Python s pickle module, but use JSON serialization under the hood. JSON ensures that even if your SECRET_KEY is stolen an attacker will not be able to execute arbitrary commands by exploiting the pickle format:Because of the nature of JSON (there is no native distinction between lists and tuples) if you pass in a tuple, you will get a list from signing.loads(object):Returns URL-safe, sha1 signed base64 compressed JSON string. Serialized object is signed using TimestampSigner.Reverse of dumps(), raises BadSignature if signature fails. Checks max_age (in seconds) if given."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/#overview", "para": "The goal of internationalization and localization is to allow a single Web application to offer its content in languages and formats tailored to the audience.Django has full support for translation of text, formatting of dates, times and numbers, and time zones.Essentially, Django does two things:Obviously, translation depends on the target language, and formatting usually depends on the target country. This information is provided by browsers in the Accept-Language header. However, the time zone isn t readily available."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/#definitions", "para": "The words  internationalization  and  localization  often cause confusion; here s a simplified definition:More details can be found in the W3C Web Internationalization FAQ, the Wikipedia article or the GNU gettext documentation.WarningTranslation and formatting are controlled by USE_I18N and USE_L10N settings respectively. However, both features involve internationalization and localization. The names of the settings are an unfortunate result of Django s history.Here are some other terms that will help us to handle a common language:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#overview", "para": "In order to make a Django project translatable, you have to add a minimal number of hooks to your Python code and templates. These hooks are called translation strings. They tell Django:  This text should be translated into the end user s language, if a translation for this text is available in that language.  It s your responsibility to mark translatable strings; the system can only translate strings it knows about.Django then provides utilities to extract the translation strings into a message file. This file is a convenient way for translators to provide the equivalent of the translation strings in the target language. Once the translators have filled in the message file, it must be compiled. This process relies on the GNU gettext toolset.Once this is done, Django takes care of translating Web apps on the fly in each available language, according to users  language preferences.Django s internationalization hooks are on by default, and that means there s a bit of i18n-related overhead in certain places of the framework. If you don t use internationalization, you should take the two seconds to set USE_I18N = False in your settings file. Then Django will make some optimizations so as not to load the internationalization machinery.NoteThere is also an independent but related USE_L10N setting that controls if Django should implement format localization. See Format localization for more details.NoteMake sure you ve activated translation for your project (the fastest way is to check if MIDDLEWARE includes django.middleware.locale.LocaleMiddleware). If you haven t yet, see How Django discovers language preference."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#internationalization-in-python-code", "para": "Specify a translation string by using the function gettext(). It s convention to import this as a shorter alias, _, to save typing.NoteThe u prefixing of gettext functions was originally to distinguish usage between unicode strings and bytestrings on Python 2. For code that supports only Python 3, they can be used interchangeably. A deprecation for the prefixed functions may happen in a future Django release.NotePython s standard library gettext module installs _() into the global namespace, as an alias for gettext(). In Django, we have chosen not to follow this practice, for a couple of reasons:What functions may be aliased as _?Because of how xgettext (used by makemessages) works, only functions that take a single string argument can be imported as _:In this example, the text \"Welcome to my site.\" is marked as a translation string:Obviously, you could code this without using the alias. This example is identical to the previous one:Translation works on computed values. This example is identical to the previous two:Translation works on variables. Again, here s an identical example:(The caveat with using variables or computed values, as in the previous two examples, is that Django s translation-string-detecting utility, django-admin makemessages, won t be able to find these strings. More on makemessages later.)The strings you pass to _() or gettext() can take placeholders, specified with Python s standard named-string interpolation syntax. Example:This technique lets language-specific translations reorder the placeholder text. For example, an English translation may be \"Today is November 26.\", while a Spanish translation may be \"Hoy es 26 de Noviembre.\"   with the month and the day placeholders swapped.For this reason, you should use named-string interpolation (e.g., %(day)s) instead of positional interpolation (e.g., %s or %d) whenever you have more than a single parameter. If you used positional interpolation, translations wouldn t be able to reorder placeholder text.Since string extraction is done by the xgettext command, only syntaxes supported by gettext are supported by Django. Python f-strings and JavaScript template strings are not yet supported by xgettext.If you would like to give translators hints about a translatable string, you can add a comment prefixed with the Translators keyword on the line preceding the string, e.g.:The comment will then appear in the resulting .po file associated with the translatable construct located below it and should also be displayed by most translation tools.NoteJust for completeness, this is the corresponding fragment of the resulting .po file:This also works in templates. See Comments for translators in templates for more details.Use the function django.utils.translation.gettext_noop() to mark a string as a translation string without translating it. The string is later translated from a variable.Use this if you have constant strings that should be stored in the source language because they are exchanged over systems or users   such as strings in a database   but should be translated at the last possible point in time, such as when the string is presented to the user.Use the function django.utils.translation.ngettext() to specify pluralized messages.ngettext() takes three arguments: the singular translation string, the plural translation string and the number of objects.This function is useful when you need your Django application to be localizable to languages where the number and complexity of plural forms is greater than the two forms used in English ( object  for the singular and  objects  for all the cases where count is different from one, irrespective of its value.)For example:In this example the number of objects is passed to the translation languages as the count variable.Note that pluralization is complicated and works differently in each language. Comparing count to 1 isn t always the correct rule. This code looks sophisticated, but will produce incorrect results for some languages:Don t try to implement your own singular-or-plural logic; it won t be correct. In a case like this, consider something like the following:NoteWhen using ngettext(), make sure you use a single name for every extrapolated variable included in the literal. In the examples above, note how we used the name Python variable in both translation strings. This example, besides being incorrect in some languages as noted above, would fail:You would get an error when running django-admin compilemessages:NotePlural form and po filesDjango does not support custom plural equations in po files. As all translation catalogs are merged, only the plural form for the main Django po file (in django/conf/locale/<lang_code>/LC_MESSAGES/django.po) is considered. Plural forms in all other po files are ignored. Therefore, you should not use different plural equations in your project or application po files.Sometimes words have several meanings, such as \"May\" in English, which refers to a month name and to a verb. To enable translators to translate these words correctly in different contexts, you can use the django.utils.translation.pgettext() function, or the django.utils.translation.npgettext() function if the string needs pluralization. Both take a context string as the first variable.In the resulting .po file, the string will then appear as often as there are different contextual markers for the same string (the context will appear on the msgctxt line), allowing the translator to give a different translation for each of them.For example:or:will appear in the .po file as:Contextual markers are also supported by the trans and blocktrans template tags.Use the lazy versions of translation functions in django.utils.translation (easily recognizable by the lazy suffix in their names) to translate strings lazily   when the value is accessed rather than when they re called.These functions store a lazy reference to the string   not the actual translation. The translation itself will be done when the string is used in a string context, such as in template rendering.This is essential when calls to these functions are located in code paths that are executed at module load time.This is something that can easily happen when defining models, forms and model forms, because Django implements these such that their fields are actually class-level attributes. For that reason, make sure to use lazy translations in the following cases:For example, to translate the help text of the name field in the following model, do the following:You can mark names of ForeignKey, ManyToManyField or OneToOneField relationship as translatable by using their verbose_name options:Just like you would do in verbose_name you should provide a lowercase verbose name text for the relation as Django will automatically titlecase it when required.It is recommended to always provide explicit verbose_name and verbose_name_plural options rather than relying on the fallback English-centric and somewhat na ve determination of verbose names Django performs by looking at the model s class name:For model methods, you can provide translations to Django and the admin site with the short_description attribute:The result of a gettext_lazy() call can be used wherever you would use a string (a str object) in other Django code, but it may not work with arbitrary Python code. For example, the following won t work because the requests library doesn t handle gettext_lazy objects:You can avoid such problems by casting gettext_lazy() objects to text strings before passing them to non-Django code:If you don t like the long gettext_lazy name, you can just alias it as _ (underscore), like so:Using gettext_lazy() and ngettext_lazy() to mark strings in models and utility functions is a common operation. When you re working with these objects elsewhere in your code, you should ensure that you don t accidentally convert them to strings, because they should be converted as late as possible (so that the correct locale is in effect). This necessitates the use of the helper function described next.When using lazy translation for a plural string ([u]n[p]gettext_lazy), you generally don t know the number argument at the time of the string definition. Therefore, you are authorized to pass a key name instead of an integer as the number argument. Then number will be looked up in the dictionary under that key during string interpolation. Here s example:If the string contains exactly one unnamed placeholder, you can interpolate directly with the number argument:Python s str.format() method will not work when either the format_string or any of the arguments to str.format() contains lazy translation objects. Instead, you can use django.utils.text.format_lazy(), which creates a lazy object that runs the str.format() method only when the result is included in a string. For example:In this case, the lazy translations in result will only be converted to strings when result itself is used in a string (usually at template rendering time).For any other case where you would like to delay the translation, but have to pass the translatable string as argument to another function, you can wrap this function inside a lazy call yourself. For example:And then later:The get_language_info() function provides detailed information about languages:The name, name_local, and name_translated attributes of the dictionary contain the name of the language in English, in the language itself, and in your current active language respectively.  The bidi attribute is True only for bi-directional languages.The source of the language information is the django.conf.locale module. Similar access to this information is available for template code. See below."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#internationalization-in-template-code", "para": "Translations in Django templates uses two template tags and a slightly different syntax than in Python code. To give your template access to these tags, put {% load i18n %} toward the top of your template. As with all template tags, this tag needs to be loaded in all templates which use translations, even those templates that extend from other templates which have already loaded the i18n tag.The {% trans %} template tag translates either a constant string (enclosed in single or double quotes) or variable content:If the noop option is present, variable lookup still takes place but the translation is skipped. This is useful when  stubbing out  content that will require translation in the future:Internally, inline translations use an gettext() call.In case a template var (myvar above) is passed to the tag, the tag will first resolve such variable to a string at run-time and then look up that string in the message catalogs.It s not possible to mix a template variable inside a string within {% trans %}. If your translations require strings with variables (placeholders), use {% blocktrans %} instead.If you d like to retrieve a translated string without displaying it, you can use the following syntax:In practice you ll use this to get a string you can use in multiple places in a template or so you can use the output as an argument for other template tags or filters:{% trans %} also supports contextual markers using the context keyword:Contrarily to the trans tag, the blocktrans tag allows you to mark complex sentences consisting of literals and variable content for translation by making use of placeholders:To translate a template expression   say, accessing object attributes or using template filters   you need to bind the expression to a local variable for use within the translation block. Examples:You can use multiple expressions inside a single blocktrans tag:NoteThe previous more verbose format is still supported: {% blocktrans with book|title as book_t and author|title as author_t %}Other block tags (for example {% for %} or {% if %}) are not allowed inside a blocktrans tag.If resolving one of the block arguments fails, blocktrans will fall back to the default language by deactivating the currently active language temporarily with the deactivate_all() function.This tag also provides for pluralization. To use it:An example:A more complex example:When you use both the pluralization feature and bind values to local variables in addition to the counter value, keep in mind that the blocktrans construct is internally converted to an ngettext call. This means the same notes regarding ngettext variables apply.Reverse URL lookups cannot be carried out within the blocktrans and should be retrieved (and stored) beforehand:If you d like to retrieve a translated string without displaying it, you can use the following syntax:In practice you ll use this to get a string you can use in multiple places in a template or so you can use the output as an argument for other template tags or filters.{% blocktrans %} also supports contextual markers using the context keyword:Another feature {% blocktrans %} supports is the trimmed option. This option will remove newline characters from the beginning and the end of the content of the {% blocktrans %} tag, replace any whitespace at the beginning and end of a line and merge all lines into one using a space character to separate them. This is quite useful for indenting the content of a {% blocktrans %} tag without having the indentation characters end up in the corresponding entry in the PO file, which makes the translation process easier.For instance, the following {% blocktrans %} tag:will result in the entry \"First sentence. Second paragraph.\" in the PO file, compared to \"\\n  First sentence.\\n  Second sentence.\\n\", if the trimmed option had not been specified.You can translate string literals passed as arguments to tags and filters by using the familiar _() syntax:In this case, both the tag and the filter will see the translated string, so they don t need to be aware of translations.NoteIn this example, the translation infrastructure will be passed the string \"yes,no\", not the individual strings \"yes\" and \"no\". The translated string will need to contain the comma so that the filter parsing code knows how to split up the arguments. For example, a German translator might translate the string \"yes,no\" as \"ja,nein\" (keeping the comma intact).Just like with Python code, these notes for translators can be specified using comments, either with the comment tag:or with the {#   #} one-line comment constructs:NoteJust for completeness, these are the corresponding fragments of the resulting .po file:If you want to select a language within a template, you can use the language template tag:While the first occurrence of  Welcome to our page  uses the current language, the second will always be in English.These tags also require a {% load i18n %}.{% get_available_languages as LANGUAGES %} returns a list of tuples in which the first element is the language code and the second is the language name (translated into the currently active locale).{% get_current_language as LANGUAGE_CODE %} returns the current user s preferred language as a string. Example: en-us. See How Django discovers language preference.{% get_current_language_bidi as LANGUAGE_BIDI %} returns the current locale s direction. If True, it s a right-to-left language, e.g. Hebrew, Arabic. If False it s a left-to-right language, e.g. English, French, German, etc.If you enable the django.template.context_processors.i18n context processor, then each RequestContext will have access to LANGUAGES, LANGUAGE_CODE, and LANGUAGE_BIDI as defined above.You can also retrieve information about any of the available languages using provided template tags and filters. To get information about a single language, use the {% get_language_info %} tag:You can then access the information:You can also use the {% get_language_info_list %} template tag to retrieve information for a list of languages (e.g. active languages as specified in LANGUAGES). See the section about the set_language redirect view for an example of how to display a language selector using {% get_language_info_list %}.In addition to LANGUAGES style list of tuples, {% get_language_info_list %} supports simple lists of language codes. If you do this in your view:you can iterate over those languages in the template:There are also simple filters available for convenience:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#internationalization-in-javascript-code", "para": "Adding translations to JavaScript poses some problems:Django provides an integrated solution for these problems: It passes the translations into JavaScript, so you can call gettext, etc., from within JavaScript.The main solution to these problems is the following JavaScriptCatalog view, which generates a JavaScript code library with functions that mimic the gettext interface, plus an array of translation strings.A view that produces a JavaScript code library with functions that mimic the gettext interface, plus an array of translation strings.AttributesTranslation domain containing strings to add in the view output. Defaults to 'djangojs'.A list of application names among installed applications. Those apps should contain a locale directory. All those catalogs plus all catalogs found in LOCALE_PATHS (which are always included) are merged into one catalog. Defaults to None, which means that all available translations from all INSTALLED_APPS are provided in the JavaScript output.Example with default values:Example with custom packages:If your root URLconf uses i18n_patterns(), JavaScriptCatalog must also be wrapped by i18n_patterns() for the catalog to be correctly generated.Example with i18n_patterns():The precedence of translations is such that the packages appearing later in the packages argument have higher precedence than the ones appearing at the beginning. This is important in the case of clashing translations for the same literal.If you use more than one JavaScriptCatalog view on a site and some of them define the same strings, the strings in the catalog that was loaded last take precedence.To use the catalog, just pull in the dynamically generated script like this:This uses reverse URL lookup to find the URL of the JavaScript catalog view. When the catalog is loaded, your JavaScript code can use the following methods:The gettext function behaves similarly to the standard gettext interface within your Python code:The ngettext function provides an interface to pluralize words and phrases:The interpolate function supports dynamically populating a format string. The interpolation syntax is borrowed from Python, so the interpolate function supports both positional and named interpolation:Positional interpolation: obj contains a JavaScript Array object whose elements values are then sequentially interpolated in their corresponding fmt placeholders in the same order they appear. For example:Named interpolation: This mode is selected by passing the optional boolean named parameter as true. obj contains a JavaScript object or associative array. For example:You shouldn t go over the top with string interpolation, though: this is still JavaScript, so the code has to make repeated regular-expression substitutions. This isn t as fast as string interpolation in Python, so keep it to those cases where you really need it (for example, in conjunction with ngettext to produce proper pluralizations).The get_format function has access to the configured i18n formatting settings and can retrieve the format string for a given setting name:It has access to the following settings:This is useful for maintaining formatting consistency with the Python-rendered values.This emulates the gettext function but does nothing, returning whatever is passed to it:This is useful for stubbing out portions of the code that will need translation in the future.The pgettext function behaves like the Python variant (pgettext()), providing a contextually translated word:The npgettext function also behaves like the Python variant (npgettext()), providing a pluralized contextually translated word:The pluralidx function works in a similar way to the pluralize template filter, determining if a given count should use a plural form of a word or not:In the simplest case, if no custom pluralization is needed, this returns false for the integer 1 and true for all other numbers.However, pluralization is not this simple in all languages. If the language does not support pluralization, an empty value is provided.Additionally, if there are complex rules around pluralization, the catalog view will render a conditional expression. This will evaluate to either a true (should pluralize) or false (should not pluralize) value.In order to use another client-side library to handle translations, you may want to take advantage of the JSONCatalog view. It s similar to JavaScriptCatalog but returns a JSON response.See the documentation for JavaScriptCatalog to learn about possible values and use of the domain and packages attributes.The response format is as follows:The various JavaScript/JSON i18n views generate the catalog from .mo files on every request. Since its output is constant, at least for a given version of a site, it s a good candidate for caching.Server-side caching will reduce CPU load. It s easily implemented with the cache_page() decorator. To trigger cache invalidation when your translations change, provide a version-dependent key prefix, as shown in the example below, or map the view at a version-dependent URL:Client-side caching will save bandwidth and make your site load faster. If you re using ETags (ConditionalGetMiddleware), you re already covered. Otherwise, you can apply conditional decorators. In the following example, the cache is invalidated whenever you restart your application server:You can even pre-generate the JavaScript catalog as part of your deployment procedure and serve it as a static file. This radical technique is implemented in django-statici18n."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#module-django.conf.urls.i18n", "para": "Django provides two mechanisms to internationalize URL patterns:WarningUsing either one of these features requires that an active language be set for each request; in other words, you need to have django.middleware.locale.LocaleMiddleware in your MIDDLEWARE setting.This function can be used in a root URLconf and Django will automatically prepend the current active language code to all URL patterns defined within i18n_patterns().Setting prefix_default_language to False removes the prefix from the default language (LANGUAGE_CODE). This can be useful when adding translations to existing site so that the current URLs won t change.Example URL patterns:After defining these URL patterns, Django will automatically add the language prefix to the URL patterns that were added by the i18n_patterns function. Example:With prefix_default_language=False and  LANGUAGE_CODE='en', the URLs will be:Warningi18n_patterns() is only allowed in a root URLconf. Using it within an included URLconf will throw an ImproperlyConfigured exception.WarningEnsure that you don t have non-prefixed URL patterns that might collide with an automatically-added language prefix.URL patterns can also be marked translatable using the gettext_lazy() function. Example:After you ve created the translations, the reverse() function will return the URL in the active language. Example:WarningIn most cases, it s best to use translated URLs only within a language code prefixed block of patterns (using i18n_patterns()), to avoid the possibility that a carelessly translated URL causes a collision with a non-translated URL pattern.If localized URLs get reversed in templates they always use the current language. To link to a URL in another language use the language template tag. It enables the given language in the enclosed template section:The language tag expects the language code as the only argument."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#localization-how-to-create-language-files", "para": "Once the string literals of an application have been tagged for later translation, the translation themselves need to be written (or obtained). Here s how that works.The first step is to create a message file for a new language. A message file is a plain-text file, representing a single language, that contains all available translation strings and how they should be represented in the given language. Message files have a .po file extension.Django comes with a tool, django-admin makemessages, that automates the creation and upkeep of these files.Gettext utilitiesThe makemessages command (and compilemessages discussed later) use commands from the GNU gettext toolset: xgettext, msgfmt, msgmerge and msguniq.The minimum version of the gettext utilities supported is 0.15.To create or update a message file, run this command: where de is the locale name for the message file you want to create. For example, pt_BR for Brazilian Portuguese, de_AT for Austrian German or id for Indonesian.The script should be run from one of two places:The script runs over your project source tree or your application source tree and pulls out all strings marked for translation (see How Django discovers translations and be sure LOCALE_PATHS is configured correctly). It creates (or updates) a message file in the directory locale/LANG/LC_MESSAGES. In the de example, the file will be locale/de/LC_MESSAGES/django.po.When you run makemessages from the root directory of your project, the extracted strings will be automatically distributed to the proper message files. That is, a string extracted from a file of an app containing a locale directory will go in a message file under that directory. A string extracted from a file of an app without any locale directory will either go in a message file under the directory listed first in LOCALE_PATHS or will generate an error if LOCALE_PATHS is empty.By default django-admin makemessages examines every file that has the .html, .txt or .py file extension. If you want to override that default, use the --extension or -e option to specify the file extensions to examine:Separate multiple extensions with commas and/or use -e or --extension multiple times:WarningWhen creating message files from JavaScript source code you need to use the special djangojs domain, not -e js.Using Jinja2 templates?makemessages doesn t understand the syntax of Jinja2 templates. To extract strings from a project containing Jinja2 templates, use Message Extracting from Babel instead.Here s an example babel.cfg configuration file:Make sure you list all extensions you re using! Otherwise Babel won t recognize the tags defined by these extensions and will ignore Jinja2 templates containing them entirely.Babel provides similar features to makemessages, can replace it in general, and doesn t depend on gettext. For more information, read its documentation about working with message catalogs.No gettext?If you don t have the gettext utilities installed, makemessages will create empty files. If that s the case, either install the gettext utilities or just copy the English message file (locale/en/LC_MESSAGES/django.po) if available and use it as a starting point; it s just an empty translation file.Working on Windows?If you re using Windows and need to install the GNU gettext utilities so makemessages works, see gettext on Windows for more information.The format of .po files is straightforward. Each .po file contains a small bit of metadata, such as the translation maintainer s contact information, but the bulk of the file is a list of messages   simple mappings between translation strings and the actual translated text for the particular language.For example, if your Django app contained a translation string for the text \"Welcome to my site.\", like so: then django-admin makemessages will have created a .po file containing the following snippet   a message:A quick explanation:Long messages are a special case. There, the first string directly after the msgstr (or msgid) is an empty string. Then the content itself will be written over the next few lines as one string per line. Those strings are directly concatenated. Don t forget trailing spaces within the strings; otherwise, they ll be tacked together without whitespace!Mind your charsetDue to the way the gettext tools work internally and because we want to allow non-ASCII source strings in Django s core and your applications, you must use UTF-8 as the encoding for your PO files (the default when PO files are created).  This means that everybody will be using the same encoding, which is important when Django processes the PO files.To reexamine all source code and templates for new translation strings and update all message files for all languages, run this:After you create your message file   and each time you make changes to it   you ll need to compile it into a more efficient form, for use by gettext. Do this with the django-admin compilemessages utility.This tool runs over all available .po files and creates .mo files, which are binary files optimized for use by gettext. In the same directory from which you ran django-admin makemessages, run django-admin compilemessages like this:That s it. Your translations are ready for use.Working on Windows?If you re using Windows and need to install the GNU gettext utilities so django-admin compilemessages works see gettext on Windows for more information..po files: Encoding and BOM usage.Django only supports .po files encoded in UTF-8 and without any BOM (Byte Order Mark) so if your text editor adds such marks to the beginning of files by default then you will need to reconfigure it.In some cases, such as strings with a percent sign followed by a space and a string conversion type (e.g. _(\"10% interest\")), gettext() incorrectly flags strings with python-format.If you try to compile message files with incorrectly flagged strings, you ll get an error message like number of format specifications in 'msgid' and 'msgstr' does not match or 'msgstr' is not a valid Python format string, unlike 'msgid'.To workaround this, you can escape percent signs by adding a second percent sign:Or you can use no-python-format so that all percent signs are treated as literals:You create and update the message files the same way as the other Django message files   with the django-admin makemessages tool. The only difference is you need to explicitly specify what in gettext parlance is known as a domain in this case the djangojs domain, by providing a -d djangojs parameter, like this:This would create or update the message file for JavaScript for German. After updating message files, just run django-admin compilemessages the same way as you do with normal Django message files.This is only needed for people who either want to extract message IDs or compile message files (.po). Translation work itself just involves editing existing files of this type, but if you want to create your own message files, or want to test or compile a changed message file, download a precompiled binary installer.You may also use gettext binaries you have obtained elsewhere, so long as the xgettext --version command works properly. Do not attempt to use Django translation utilities with a gettext package if the command xgettext --version entered at a Windows command prompt causes a popup window saying  xgettext.exe has generated errors and will be closed by Windows .If you want to pass additional parameters to xgettext, you need to create a custom makemessages command and override its xgettext_options attribute:If you need more flexibility, you could also add a new argument to your custom makemessages command:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#miscellaneous", "para": "As a convenience, Django comes with a view, django.views.i18n.set_language(), that sets a user s language preference and redirects to a given URL or, by default, back to the previous page.Activate this view by adding the following line to your URLconf:(Note that this example makes the view available at /i18n/setlang/.)WarningMake sure that you don t include the above URL within i18n_patterns() - it needs to be language-independent itself to work correctly.The view expects to be called via the POST method, with a language parameter set in request. If session support is enabled, the view saves the language choice in the user s session. It also saves the language choice in a cookie that is named django_language by default. (The name can be changed through the LANGUAGE_COOKIE_NAME setting.)In older versions, the cookie is only set if session support isn t enabled.After setting the language choice, Django looks for a next parameter in the POST or GET data. If that is found and Django considers it to be a safe URL (i.e. it doesn t point to a different host and uses a safe scheme), a redirect to that URL will be performed. Otherwise, Django may fall back to redirecting the user to the URL from the Referer header or, if it is not set, to /, depending on the nature of the request:Here s example HTML template code:In this example, Django looks up the URL of the page to which the user will be redirected in the redirect_to context variable.You may want to set the active language for the current session explicitly. Perhaps a user s language preference is retrieved from another system, for example. You ve already been introduced to django.utils.translation.activate(). That applies to the current thread only. To persist the language for the entire session, also modify LANGUAGE_SESSION_KEY in the session:You would typically want to use both: django.utils.translation.activate() will change the language for this thread, and modifying the session makes this preference persist in future requests.If you are not using sessions, the language will persist in a cookie, whose name is configured in LANGUAGE_COOKIE_NAME. For example:While Django provides a rich set of i18n tools for use in views and templates, it does not restrict the usage to Django-specific code. The Django translation mechanisms can be used to translate arbitrary texts to any language that is supported by Django (as long as an appropriate translation catalog exists, of course). You can load a translation catalog, activate it and translate text to language of your choice, but remember to switch back to original language, as activating a translation catalog is done on per-thread basis and such change will affect code running in the same thread.For example:Calling this function with the value 'de' will give you \"Willkommen\", regardless of LANGUAGE_CODE and language set by middleware.Functions of particular interest are django.utils.translation.get_language() which returns the language used in the current thread, django.utils.translation.activate() which activates a translation catalog for the current thread, and django.utils.translation.check_for_language() which checks if the given language is supported by Django.To help write more concise code, there is also a context manager django.utils.translation.override() that stores the current language on enter and restores it on exit. With it, the above example becomes:A number of settings can be used to adjust language cookie options:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#implementation-notes", "para": "Django s translation machinery uses the standard gettext module that comes with Python. If you know gettext, you might note these specialties in the way Django does translation:Once you ve prepared your translations   or, if you just want to use the translations that come with Django   you ll just need to activate translation for your app.Behind the scenes, Django has a very flexible model of deciding which language should be used   installation-wide, for a particular user, or both.To set an installation-wide language preference, set LANGUAGE_CODE. Django uses this language as the default translation   the final attempt if no better matching translation is found through one of the methods employed by the locale middleware (see below).If all you want is to run Django with your native language all you need to do is set LANGUAGE_CODE and make sure the corresponding message files and their compiled versions (.mo) exist.If you want to let each individual user specify which language they prefer, then you also need to use the LocaleMiddleware. LocaleMiddleware enables language selection based on data from the request. It customizes content for each user.To use LocaleMiddleware, add 'django.middleware.locale.LocaleMiddleware' to your MIDDLEWARE setting. Because middleware order matters, follow these guidelines:For example, your MIDDLEWARE might look like this:(For more on middleware, see the middleware documentation.)LocaleMiddleware tries to determine the user s language preference by following this algorithm:First, it looks for the language prefix in the requested URL.  This is only performed when you are using the i18n_patterns function in your root URLconf. See Internationalization: in URL patterns for more information about the language prefix and how to internationalize URL patterns.Failing that, it looks for the LANGUAGE_SESSION_KEY key in the current user s session.Failing that, it looks for a cookie.The name of the cookie used is set by the LANGUAGE_COOKIE_NAME setting. (The default name is django_language.)Failing that, it looks at the Accept-Language HTTP header. This header is sent by your browser and tells the server which language(s) you prefer, in order by priority. Django tries each language in the header until it finds one with available translations.Failing that, it uses the global LANGUAGE_CODE setting.Notes:In each of these places, the language preference is expected to be in the standard language format, as a string. For example, Brazilian Portuguese is pt-br.If a base language is available but the sublanguage specified is not, Django uses the base language. For example, if a user specifies de-at (Austrian German) but Django only has de available, Django uses de.Only languages listed in the LANGUAGES setting can be selected. If you want to restrict the language selection to a subset of provided languages (because your application doesn t provide all those languages), set LANGUAGES to a list of languages. For example:This example restricts languages that are available for automatic selection to German and English (and any sublanguage, like de-ch or en-us).If you define a custom LANGUAGES setting, as explained in the previous bullet, you can mark the language names as translation strings   but use gettext_lazy() instead of gettext() to avoid a circular import.Here s a sample settings file:Once LocaleMiddleware determines the user s preference, it makes this preference available as request.LANGUAGE_CODE for each HttpRequest. Feel free to read this value in your view code. Here s a simple example:Note that, with static (middleware-less) translation, the language is in settings.LANGUAGE_CODE, while with dynamic (middleware) translation, it s in request.LANGUAGE_CODE.At runtime, Django builds an in-memory unified catalog of literals-translations. To achieve this it looks for translations by following this algorithm regarding the order in which it examines the different file paths to load the compiled message files (.mo) and the precedence of multiple translations for the same literal:See alsoThe translations for literals included in JavaScript assets are looked up following a similar but not identical algorithm. See JavaScriptCatalog for more details.You can also put custom format files in the LOCALE_PATHS directories if you also set FORMAT_MODULE_PATH.In all cases the name of the directory containing the translation is expected to be named using locale name notation. E.g. de, pt_BR, es_AR, etc. Untranslated strings for territorial language variants use the translations of the generic language. For example, untranslated pt_BR strings use pt translations.Fallback to the generic language as described above was added.This way, you can write applications that include their own translations, and you can override base translations in your project. Or, you can just build a big project out of several apps and put all translations into one big common message file specific to the project you are composing. The choice is yours.All message file repositories are structured the same way. They are:To create message files, you use the django-admin makemessages tool. And you use django-admin compilemessages to produce the binary .mo files that are used by gettext.You can also run django-admin compilemessages --settings=path.to.settings to make the compiler process all the directories in your LOCALE_PATHS setting.Django makes the general assumption that the original strings in a translatable project are written in English. You can choose another language, but you must be aware of certain limitations:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/formatting/#overview", "para": "Django s formatting system is capable of displaying dates, times and numbers in templates using the format specified for the current locale. It also handles localized input in forms.When it s enabled, two users accessing the same content may see dates, times and numbers formatted in different ways, depending on the formats for their current locale.The formatting system is disabled by default. To enable it, it s necessary to set USE_L10N = True in your settings file.NoteThe default settings.py file created by django-admin startproject includes USE_L10N = True for convenience.  Note, however, that to enable number formatting with thousand separators it is necessary to set USE_THOUSAND_SEPARATOR = True in your settings file. Alternatively, you could use intcomma to format numbers in your template.NoteThere is also an independent but related USE_I18N setting that controls if Django should activate translation. See Translation for more details."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/formatting/#locale-aware-input-in-forms", "para": "When formatting is enabled, Django can use localized formats when parsing dates, times and numbers in forms. That means it tries different formats for different locales when guessing the format used by the user when inputting data on forms.NoteDjango uses different formats for displaying data to those it uses for parsing data. Most notably, the formats for parsing dates can t use the %a (abbreviated weekday name), %A (full weekday name), %b (abbreviated month name), %B (full month name), or %p (AM/PM).To enable a form field to localize input and output data simply use its localize argument:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/formatting/#controlling-localization-in-templates", "para": "When you have enabled formatting with USE_L10N, Django will try to use a locale specific format whenever it outputs a value in a template.However, it may not always be appropriate to use localized values   for example, if you re outputting JavaScript or XML that is designed to be machine-readable, you will always want unlocalized values. You may also want to use localization in selected templates, rather than using localization everywhere.To allow for fine control over the use of localization, Django provides the l10n template library that contains the following tags and filters.Enables or disables localization of template variables in the contained block.This tag allows a more fine grained control of localization than USE_L10N.To activate or deactivate localization for a template block, use:NoteThe value of USE_L10N isn t respected inside of a {% localize %} block.See localize and unlocalize for template filters that will do the same job on a per-variable basis.Forces localization of a single value.For example:To disable localization on a single value, use unlocalize. To control localization over a large section of a template, use the localize template tag.Forces a single value to be printed without localization.For example:To force localization of a single value, use localize. To control localization over a large section of a template, use the localize template tag."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/formatting/#creating-custom-format-files", "para": "Django provides format definitions for many locales, but sometimes you might want to create your own, because a format files doesn t exist for your locale, or because you want to overwrite some of the values.To use custom formats, specify the path where you ll place format files first. To do that, just set your FORMAT_MODULE_PATH setting to the package where format files will exist, for instance:Files are not placed directly in this directory, but in a directory named as the locale, and must be named formats.py. Be careful not to put sensitive information in these files as values inside can be exposed if you pass the string to django.utils.formats.get_format() (used by the date template filter).To customize the English formats, a structure like this would be needed:where formats.py contains custom format definitions. For example:to use a non-breaking space (Unicode 00A0) as a thousand separator, instead of the default for English, a comma."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/formatting/#limitations-of-the-provided-locale-formats", "para": "Some locales use context-sensitive formats for numbers, which Django s localization system cannot handle automatically.The Swiss number formatting depends on the type of number that is being formatted. For monetary values, a comma is used as the thousand separator and a decimal point for the decimal separator. For all other numbers, a comma is used as decimal separator and a space as thousand separator. The locale format provided by Django uses the generic separators, a comma for decimal and a space for thousand separators."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/timezones/#overview", "para": "When support for time zones is enabled, Django stores datetime information in UTC in the database, uses time-zone-aware datetime objects internally, and translates them to the end user s time zone in templates and forms.This is handy if your users live in more than one time zone and you want to display datetime information according to each user s wall clock.Even if your website is available in only one time zone, it s still good practice to store data in UTC in your database. The main reason is Daylight Saving Time (DST). Many countries have a system of DST, where clocks are moved forward in spring and backward in autumn. If you re working in local time, you re likely to encounter errors twice a year, when the transitions happen. (The pytz documentation discusses these issues in greater detail.) This probably doesn t matter for your blog, but it s a problem if you over-bill or under-bill your customers by one hour, twice a year, every year. The solution to this problem is to use UTC in the code and use local time only when interacting with end users.Time zone support is disabled by default. To enable it, set USE_TZ = True in your settings file. Time zone support uses pytz, which is installed when you install Django.NoteThe default settings.py file created by django-admin startproject includes USE_TZ = True for convenience.NoteThere is also an independent but related USE_L10N setting that controls whether Django should activate format localization. See Format localization for more details.If you re wrestling with a particular problem, start with the time zone FAQ."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/timezones/#concepts", "para": "Python s datetime.datetime objects have a tzinfo attribute that can be used to store time zone information, represented as an instance of a subclass of datetime.tzinfo. When this attribute is set and describes an offset, a datetime object is aware. Otherwise, it s naive.You can use is_aware() and is_naive() to determine whether datetimes are aware or naive.When time zone support is disabled, Django uses naive datetime objects in local time. This is simple and sufficient for many use cases. In this mode, to obtain the current time, you would write:When time zone support is enabled (USE_TZ=True), Django uses time-zone-aware datetime objects. If your code creates datetime objects, they should be aware too. In this mode, the example above becomes:WarningDealing with aware datetime objects isn t always intuitive. For instance, the tzinfo argument of the standard datetime constructor doesn t work reliably for time zones with DST. Using UTC is generally safe; if you re using other time zones, you should review the pytz documentation carefully.NotePython s datetime.time objects also feature a tzinfo attribute, and PostgreSQL has a matching time with time zone type. However, as PostgreSQL s docs put it, this type  exhibits properties which lead to questionable usefulness .Django only supports naive time objects and will raise an exception if you attempt to save an aware time object, as a timezone for a time with no associated date does not make sense.When USE_TZ is True, Django still accepts naive datetime objects, in order to preserve backwards-compatibility. When the database layer receives one, it attempts to make it aware by interpreting it in the default time zone and raises a warning.Unfortunately, during DST transitions, some datetimes don t exist or are ambiguous. In such situations, pytz raises an exception. That s why you should always create aware datetime objects when time zone support is enabled.In practice, this is rarely an issue. Django gives you aware datetime objects in the models and forms, and most often, new datetime objects are created from existing ones through timedelta arithmetic. The only datetime that s often created in application code is the current time, and timezone.now() automatically does the right thing.The default time zone is the time zone defined by the TIME_ZONE setting.The current time zone is the time zone that s used for rendering.You should set the current time zone to the end user s actual time zone with activate(). Otherwise, the default time zone is used.NoteAs explained in the documentation of TIME_ZONE, Django sets environment variables so that its process runs in the default time zone. This happens regardless of the value of USE_TZ and of the current time zone.When USE_TZ is True, this is useful to preserve backwards-compatibility with applications that still rely on local time. However, as explained above, this isn t entirely reliable, and you should always work with aware datetimes in UTC in your own code. For instance, use fromtimestamp() and set the tz parameter to utc.The current time zone is the equivalent of the current locale for translations. However, there s no equivalent of the Accept-Language HTTP header that Django could use to determine the user s time zone automatically. Instead, Django provides time zone selection functions. Use them to build the time zone selection logic that makes sense for you.Most websites that care about time zones just ask users in which time zone they live and store this information in the user s profile. For anonymous users, they use the time zone of their primary audience or UTC. pytz provides helpers, like a list of time zones per country, that you can use to pre-select the most likely choices.Here s an example that stores the current timezone in the session. (It skips error handling entirely for the sake of simplicity.)Add the following middleware to MIDDLEWARE:Create a view that can set the current timezone:Include a form in template.html that will POST to this view:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/timezones/#time-zone-aware-input-in-forms", "para": "When you enable time zone support, Django interprets datetimes entered in forms in the current time zone and returns aware datetime objects in cleaned_data.If the current time zone raises an exception for datetimes that don t exist or are ambiguous because they fall in a DST transition (the timezones provided by pytz do this), such datetimes will be reported as invalid values."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/timezones/#time-zone-aware-output-in-templates", "para": "When you enable time zone support, Django converts aware datetime objects to the current time zone when they re rendered in templates. This behaves very much like format localization.WarningDjango doesn t convert naive datetime objects, because they could be ambiguous, and because your code should never produce naive datetimes when time zone support is enabled. However, you can force conversion with the template filters described below.Conversion to local time isn t always appropriate   you may be generating output for computers rather than for humans. The following filters and tags, provided by the tz template tag library, allow you to control the time zone conversions.Enables or disables conversion of aware datetime objects to the current time zone in the contained block.This tag has exactly the same effects as the USE_TZ setting as far as the template engine is concerned. It allows a more fine grained control of conversion.To activate or deactivate conversion for a template block, use:NoteThe value of USE_TZ isn t respected inside of a {% localtime %} block.Sets or unsets the current time zone in the contained block. When the current time zone is unset, the default time zone applies.You can get the name of the current time zone using the get_current_timezone tag:Alternatively, you can activate the tz() context processor and use the TIME_ZONE context variable.These filters accept both aware and naive datetimes. For conversion purposes, they assume that naive datetimes are in the default time zone. They always return aware datetimes.Forces conversion of a single value to the current time zone.For example:Forces conversion of a single value to UTC.For example:Forces conversion of a single value to an arbitrary timezone.The argument must be an instance of a tzinfo subclass or a time zone name.For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/timezones/#migration-guide", "para": "Here s how to migrate a project that was started before Django supported time zones.The PostgreSQL backend stores datetimes as timestamp with time zone. In practice, this means it converts datetimes from the connection s time zone to UTC on storage, and from UTC to the connection s time zone on retrieval.As a consequence, if you re using PostgreSQL, you can switch between USE_TZ = False and USE_TZ = True freely. The database connection s time zone will be set to TIME_ZONE or UTC respectively, so that Django obtains correct datetimes in all cases. You don t need to perform any data conversions.Other backends store datetimes without time zone information. If you switch from USE_TZ = False to USE_TZ = True, you must convert your data from local time to UTC   which isn t deterministic if your local time has DST.The first step is to add USE_TZ = True to your settings file. At this point, things should mostly work. If you create naive datetime objects in your code, Django makes them aware when necessary.However, these conversions may fail around DST transitions, which means you aren t getting the full benefits of time zone support yet. Also, you re likely to run into a few problems because it s impossible to compare a naive datetime with an aware datetime. Since Django now gives you aware datetimes, you ll get exceptions wherever you compare a datetime that comes from a model or a form with a naive datetime that you ve created in your code.So the second step is to refactor your code wherever you instantiate datetime objects to make them aware. This can be done incrementally. django.utils.timezone defines some handy helpers for compatibility code: now(), is_aware(), is_naive(), make_aware(), and make_naive().Finally, in order to help you locate code that needs upgrading, Django raises a warning when you attempt to save a naive datetime to the database:During development, you can turn such warnings into exceptions and get a traceback by adding the following to your settings file:When serializing an aware datetime, the UTC offset is included, like this:For a naive datetime, it obviously isn t:For models with DateTimeFields, this difference makes it impossible to write a fixture that works both with and without time zone support.Fixtures generated with USE_TZ = False, or before Django 1.4, use the  naive  format. If your project contains such fixtures, after you enable time zone support, you ll see RuntimeWarnings when you load them. To get rid of the warnings, you must convert your fixtures to the  aware  format.You can regenerate fixtures with loaddata then dumpdata. Or, if they re small enough, you can simply edit them to add the UTC offset that matches your TIME_ZONE to each serialized datetime."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/i18n/timezones/#faq", "para": "I don t need multiple time zones. Should I enable time zone support?Yes. When time zone support is enabled, Django uses a more accurate model of local time. This shields you from subtle and unreproducible bugs around Daylight Saving Time (DST) transitions.When you enable time zone support, you ll encounter some errors because you re using naive datetimes where Django expects aware datetimes. Such errors show up when running tests and they re easy to fix. You ll quickly learn how to avoid invalid operations.On the other hand, bugs caused by the lack of time zone support are much harder to prevent, diagnose and fix. Anything that involves scheduled tasks or datetime arithmetic is a candidate for subtle bugs that will bite you only once or twice a year.For these reasons, time zone support is enabled by default in new projects, and you should keep it unless you have a very good reason not to.I ve enabled time zone support. Am I safe?Maybe. You re better protected from DST-related bugs, but you can still shoot yourself in the foot by carelessly turning naive datetimes into aware datetimes, and vice-versa.If your application connects to other systems   for instance, if it queries a Web service   make sure datetimes are properly specified. To transmit datetimes safely, their representation should include the UTC offset, or their values should be in UTC (or both!).Finally, our calendar system contains interesting traps for computers:(To implement this function, you must decide whether 2012-02-29 minus one year is 2011-02-28 or 2011-03-01, which depends on your business requirements.)How do I interact with a database that stores datetimes in local time?Set the TIME_ZONE option to the appropriate time zone for this database in the DATABASES setting.This is useful for connecting to a database that doesn t support time zones and that isn t managed by Django when USE_TZ is True.My application crashes with TypeError: can't compare offset-naive and offset-aware datetimes   what s wrong?Let s reproduce this error by comparing a naive and an aware datetime:If you encounter this error, most likely your code is comparing these two things:Generally, the correct solution is to change your code to use an aware datetime instead.If you re writing a pluggable application that s expected to work independently of the value of USE_TZ, you may find django.utils.timezone.now() useful. This function returns the current date and time as a naive datetime when USE_TZ = False and as an aware datetime when USE_TZ = True. You can add or subtract datetime.timedelta as needed.I see lots of RuntimeWarning: DateTimeField received a naive datetime (YYYY-MM-DD HH:MM:SS) while time zone support is active   is that bad?When time zone support is enabled, the database layer expects to receive only aware datetimes from your code. This warning occurs when it receives a naive datetime. This indicates that you haven t finished porting your code for time zone support. Please refer to the migration guide for tips on this process.In the meantime, for backwards compatibility, the datetime is considered to be in the default time zone, which is generally what you expect.now.date() is yesterday! (or tomorrow)If you ve always used naive datetimes, you probably believe that you can convert a datetime to a date by calling its date() method. You also consider that a date is a lot like a datetime, except that it s less accurate.None of this is true in a time zone aware environment:As this example shows, the same datetime has a different date, depending on the time zone in which it is represented. But the real problem is more fundamental.A datetime represents a point in time. It s absolute: it doesn t depend on anything. On the contrary, a date is a calendaring concept. It s a period of time whose bounds depend on the time zone in which the date is considered. As you can see, these two concepts are fundamentally different, and converting a datetime to a date isn t a deterministic operation.What does this mean in practice?Generally, you should avoid converting a datetime to date. For instance, you can use the date template filter to only show the date part of a datetime. This filter will convert the datetime into the current time zone before formatting it, ensuring the results appear correctly.If you really need to do the conversion yourself, you must ensure the datetime is converted to the appropriate time zone first. Usually, this will be the current timezone:I get an error  Are time zone definitions for your database installed? If you are using MySQL, see the Time zone definitions section of the MySQL notes for instructions on loading time zone definitions.I have a string \"2012-02-21 10:28:45\" and I know it s in the \"Europe/Helsinki\" time zone. How do I turn that into an aware datetime?This is exactly what pytz is for.Note that localize is a pytz extension to the tzinfo API. Also, you may want to catch pytz.InvalidTimeError. The documentation of pytz contains more examples. You should review it before attempting to manipulate aware datetimes.How can I obtain the local time in the current time zone?Well, the first question is, do you really need to?You should only use local time when you re interacting with humans, and the template layer provides filters and tags to convert datetimes to the time zone of your choice.Furthermore, Python knows how to compare aware datetimes, taking into account UTC offsets when necessary. It s much easier (and possibly faster) to write all your model and view code in UTC. So, in most circumstances, the datetime in UTC returned by django.utils.timezone.now() will be sufficient.For the sake of completeness, though, if you really want the local time in the current time zone, here s how you can obtain it:In this example, the current time zone is \"Europe/Paris\".How can I see all available time zones?pytz provides helpers, including a list of current time zones and a list of all available time zones   some of which are only of historical interest."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/performance/#introduction", "para": "Generally one s first concern is to write code that works, whose logic functions as required to produce the expected output. Sometimes, however, this will not be enough to make the code work as efficiently as one would like.In this case, what s needed is something - and in practice, often a collection of things - to improve the code s performance without, or only minimally, affecting its behavior."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/performance/#general-approaches", "para": "It s important to have a clear idea what you mean by  performance . There is not just one metric of it.Improved speed might be the most obvious aim for a program, but sometimes other performance improvements might be sought, such as lower memory consumption or fewer demands on the database or network.Improvements in one area will often bring about improved performance in another, but not always; sometimes one can even be at the expense of another. For example, an improvement in a program s speed might cause it to use more memory. Even worse, it can be self-defeating - if the speed improvement is so memory-hungry that the system starts to run out of memory, you ll have done more harm than good.There are other trade-offs to bear in mind. Your own time is a valuable resource, more precious than CPU time. Some improvements might be too difficult to be worth implementing, or might affect the portability or maintainability of the code. Not all performance improvements are worth the effort.So, you need to know what performance improvements you are aiming for, and you also need to know that you have a good reason for aiming in that direction - and for that you need:It s no good just guessing or assuming where the inefficiencies lie in your code.django-debug-toolbar is a very handy tool that provides insights into what your code is doing and how much time it spends doing it. In particular it can show you all the SQL queries your page is generating, and how long each one has taken.Third-party panels are also available for the toolbar, that can (for example) report on cache performance and template rendering times.There are a number of free services that will analyze and report on the performance of your site s pages from the perspective of a remote HTTP client, in effect simulating the experience of an actual user.These can t report on the internals of your code, but can provide a useful insight into your site s overall performance, including aspects that can t be adequately measured from within Django environment. Examples include:There are also several paid-for services that perform a similar analysis, including some that are Django-aware and can integrate with your codebase to profile its performance far more comprehensively.Some work in optimization involves tackling performance shortcomings, but some of the work can simply be built in to what you d do anyway, as part of the good practices you should adopt even before you start thinking about improving performance.In this respect Python is an excellent language to work with, because solutions that look elegant and feel right usually are the best performing ones. As with most skills, learning what  looks right  takes practice, but one of the most useful guidelines is:Django offers many different ways of approaching things, but just because it s possible to do something in a certain way doesn t mean that it s the most appropriate way to do it. For example, you might find that you could calculate the same thing - the number of items in a collection, perhaps - in a QuerySet, in Python, or in a template.However, it will almost always be faster to do this work at lower rather than higher levels. At higher levels the system has to deal with objects through multiple levels of abstraction and layers of machinery.That is, the database can typically do things faster than Python can, which can do them faster than the template language can:Generally speaking, the most appropriate level for the job is the lowest-level one that it is comfortable to code for.NoteThe example above is merely illustrative.Firstly, in a real-life case you need to consider what is happening before and after your count to work out what s an optimal way of doing it in that particular context. The database optimization documents describes a case where counting in the template would be better.Secondly, there are other options to consider: in a real-life case, {{ my_bicycles.count }}, which invokes the QuerySet count() method directly from the template, might be the most appropriate choice."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/performance/#caching", "para": "Often it is expensive (that is, resource-hungry and slow) to compute a value, so there can be huge benefit in saving the value to a quickly accessible cache, ready for the next time it s required.It s a sufficiently significant and powerful technique that Django includes a comprehensive caching framework, as well as other smaller pieces of caching functionality.Django s caching framework offers very significant opportunities for performance gains, by saving dynamic content so that it doesn t need to be calculated for each request.For convenience, Django offers different levels of cache granularity: you can cache the output of specific views, or only the pieces that are difficult to produce, or even an entire site.Implementing caching should not be regarded as an alternative to improving code that s performing poorly because it has been written badly. It s one of the final steps towards producing well-performing code, not a shortcut.It s common to have to call a class instance s method more than once. If that function is expensive, then doing so can be wasteful.Using the cached_property decorator saves the value returned by a property; the next time the function is called on that instance, it will return the saved value rather than re-computing it. Note that this only works on methods that take self as their only argument and that it changes the method to a property.Certain Django components also have their own caching functionality; these are discussed below in the sections related to those components."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/performance/#understanding-laziness", "para": "Laziness is a strategy complementary to caching. Caching avoids recomputation by saving results; laziness delays computation until it s actually required.Laziness allows us to refer to things before they are instantiated, or even before it s possible to instantiate them. This has numerous uses.For example, lazy translation can be used before the target language is even known, because it doesn t take place until the translated string is actually required, such as in a rendered template.Laziness is also a way to save effort by trying to avoid work in the first place. That is, one aspect of laziness is not doing anything until it has to be done, because it may not turn out to be necessary after all. Laziness can therefore have performance implications, and the more expensive the work concerned, the more there is to gain through laziness.Python provides a number of tools for lazy evaluation, particularly through the generator and generator expression constructs. It s worth reading up on laziness in Python to discover opportunities for making use of lazy patterns in your code.Django is itself quite lazy. A good example of this can be found in the evaluation of QuerySets. QuerySets are lazy. Thus a QuerySet can be created, passed around and combined with other QuerySets, without actually incurring any trips to the database to fetch the items it describes. What gets passed around is the QuerySet object, not the collection of items that - eventually - will be required from the database.On the other hand, certain operations will force the evaluation of a QuerySet. Avoiding the premature evaluation of a QuerySet can save making an expensive and unnecessary trip to the database.Django also offers a keep_lazy() decorator. This allows a function that has been called with a lazy argument to behave lazily itself, only being evaluated when it needs to be. Thus the lazy argument - which could be an expensive one - will not be called upon for evaluation until it s strictly required."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/performance/#databases", "para": "Django s database layer provides various ways to help developers get the best performance from their databases. The database optimization documentation gathers together links to the relevant documentation and adds various tips that outline the steps to take when attempting to optimize your database usage.Enabling Persistent connections can speed up connections to the database accounts for a significant part of the request processing time.This helps a lot on virtualized hosts with limited network performance, for example."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/performance/#http-performance", "para": "Django comes with a few helpful pieces of middleware that can help optimize your site s performance. They include:Adds support for modern browsers to conditionally GET responses based on the ETag and Last-Modified headers. It also calculates and sets an ETag if needed.Compresses responses for all modern browsers, saving bandwidth and transfer time. Note that GZipMiddleware is currently considered a security risk, and is vulnerable to attacks that nullify the protection provided by TLS/SSL. See the warning in GZipMiddleware for more information.Using cached sessions may be a way to increase performance by eliminating the need to load session data from a slower storage source like the database and instead storing frequently used session data in memory.Static files, which by definition are not dynamic, make an excellent target for optimization gains.By taking advantage of web browsers  caching abilities, you can eliminate network hits entirely for a given file after the initial download.ManifestStaticFilesStorage appends a content-dependent tag to the filenames of static files to make it safe for browsers to cache them long-term without missing future changes - when a file changes, so will the tag, so browsers will reload the asset automatically.Several third-party Django tools and packages provide the ability to  minify  HTML, CSS, and JavaScript. They remove unnecessary whitespace, newlines, and comments, and shorten variable names, and thus reduce the size of the documents that your site publishes."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/performance/#template-performance", "para": "Note that:Enabling the cached template loader often improves performance drastically, as it avoids compiling each template every time it needs to be rendered."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/performance/#using-different-versions-of-available-software", "para": "It can sometimes be worth checking whether different and better-performing versions of the software that you re using are available.These techniques are targeted at more advanced users who want to push the boundaries of performance of an already well-optimized Django site.However, they are not magic solutions to performance problems, and they re unlikely to bring better than marginal gains to sites that don t already do the more basic things the right way.NoteIt s worth repeating: reaching for alternatives to software you re already using is never the first answer to performance problems. When you reach this level of optimization, you need a formal benchmarking solution.It s fairly rare for a new release of well-maintained software to be less efficient, but the maintainers can t anticipate every possible use-case - so while being aware that newer versions are likely to perform better, don t simply assume that they always will.This is true of Django itself. Successive releases have offered a number of improvements across the system, but you should still check the real-world performance of your application, because in some cases you may find that changes mean it performs worse rather than better.Newer versions of Python, and also of Python packages, will often perform better too - but measure, rather than assume.NoteUnless you ve encountered an unusual performance problem in a particular version, you ll generally find better features, reliability, and security in a new release and that these benefits are far more significant than any performance you might win or lose.For nearly all cases, Django s built-in template language is perfectly adequate. However, if the bottlenecks in your Django project seem to lie in the template system and you have exhausted other opportunities to remedy this, a third-party alternative may be the answer.Jinja2 can offer performance improvements, particularly when it comes to speed.Alternative template systems vary in the extent to which they share Django s templating language.NoteIf you experience performance issues in templates, the first thing to do is to understand exactly why. Using an alternative template system may prove faster, but the same gains may also be available without going to that trouble - for example, expensive processing and logic in your templates could be done more efficiently in your views.It may be worth checking whether Python software you re using has been provided in a different implementation that can execute the same code faster.However: most performance problems in well-written Django sites aren t at the Python execution level, but rather in inefficient database querying, caching, and templates. If you re relying on poorly-written Python code, your performance problems are unlikely to be solved by having it execute faster.Using an alternative implementation may introduce compatibility, deployment, portability, or maintenance issues. It goes without saying that before adopting a non-standard implementation you should ensure it provides sufficient performance gains for your application to outweigh the potential risks.With these caveats in mind, you should be aware of:PyPy is an implementation of Python in Python itself (the  standard  Python implementation is in C). PyPy can offer substantial performance gains, typically for heavyweight applications.A key aim of the PyPy project is compatibility with existing Python APIs and libraries. Django is compatible, but you will need to check the compatibility of other libraries you rely on.Some Python libraries are also implemented in C, and can be much faster. They aim to offer the same APIs. Note that compatibility issues and behavior differences are not unknown (and not always immediately evident)."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/#overview", "para": "The Django authentication system handles both authentication and authorization. Briefly, authentication verifies a user is who they claim to be, and authorization determines what an authenticated user is allowed to do. Here the term authentication is used to refer to both tasks.The auth system consists of:The authentication system in Django aims to be very generic and doesn t provide some features commonly found in web authentication systems. Solutions for some of these common problems have been implemented in third-party packages:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/#installation", "para": "Authentication support is bundled as a Django contrib module in django.contrib.auth. By default, the required configuration is already included in the settings.py generated by django-admin startproject, these consist of two items listed in your INSTALLED_APPS setting:and these items in your MIDDLEWARE setting:With these settings in place, running the command manage.py migrate creates the necessary database tables for auth related models and permissions for any models defined in your installed apps."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/#usage", "para": "Using Django s default implementationAPI reference for the default implementationCustomizing Users and authenticationPassword management in Django"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/default/#user-objects", "para": "User objects are the core of the authentication system. They typically represent the people interacting with your site and are used to enable things like restricting access, registering user profiles, associating content with creators etc. Only one class of user exists in Django s authentication framework, i.e., 'superusers' or admin 'staff' users are just user objects with special attributes set, not different classes of user objects.The primary attributes of the default user are:See the full API documentation for full reference, the documentation that follows is more task oriented.The most direct way to create users is to use the included create_user() helper function:If you have the Django admin installed, you can also create users interactively.Create superusers using the createsuperuser command:You will be prompted for a password. After you enter one, the user will be created immediately. If you leave off the --username or --email options, it will prompt you for those values.Django does not store raw (clear text) passwords on the user model, but only a hash (see documentation of how passwords are managed for full details). Because of this, do not attempt to manipulate the password attribute of the user directly. This is why a helper function is used when creating a user.To change a user s password, you have several options:manage.py changepassword *username* offers a method of changing a user s password from the command line. It prompts you to change the password of a given user which you must enter twice. If they both match, the new password will be changed immediately. If you do not supply a user, the command will attempt to change the password whose username matches the current system user.You can also change a password programmatically, using set_password():If you have the Django admin installed, you can also change user s passwords on the authentication system s admin pages.Django also provides views and forms that may be used to allow users to change their own passwords.Changing a user s password will log out all their sessions. See Session invalidation on password change for details.Use authenticate() to verify a set of credentials. It takes credentials as keyword arguments, username and password for the default case, checks them against each authentication backend, and returns a User object if the credentials are valid for a backend. If the credentials aren t valid for any backend or if a backend raises PermissionDenied, it returns None. For example:request is an optional HttpRequest which is passed on the authenticate() method of the authentication backends.NoteThis is a low level way to authenticate a set of credentials; for example, it s used by the RemoteUserMiddleware. Unless you are writing your own authentication system, you probably won t use this. Rather if you re looking for a way to login a user, use the LoginView."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/default/#permissions-and-authorization", "para": "Django comes with a simple permissions system. It provides a way to assign permissions to specific users and groups of users.It s used by the Django admin site, but you re welcome to use it in your own code.The Django admin site uses permissions as follows:Permissions can be set not only per type of object, but also per specific object instance. By using the has_view_permission(), has_add_permission(), has_change_permission() and has_delete_permission() methods provided by the ModelAdmin class, it is possible to customize permissions for different object instances of the same type.User objects have two many-to-many fields: groups and user_permissions. User objects can access their related objects in the same way as any other Django model:When django.contrib.auth is listed in your INSTALLED_APPS setting, it will ensure that four default permissions   add, change, delete, and view   are created for each Django model defined in one of your installed applications.These permissions will be created when you run manage.py migrate; the first time you run migrate after adding django.contrib.auth to INSTALLED_APPS, the default permissions will be created for all previously-installed models, as well as for any new models being installed at that time. Afterward, it will create default permissions for new models each time you run manage.py migrate (the function that creates permissions is connected to the post_migrate signal).Assuming you have an application with an app_label foo and a model named Bar, to test for basic permissions you should use:The Permission model is rarely accessed directly.django.contrib.auth.models.Group models are a generic way of categorizing users so you can apply permissions, or some other label, to those users. A user can belong to any number of groups.A user in a group automatically has the permissions granted to that group. For example, if the group Site editors has the permission can_edit_home_page, any user in that group will have that permission.Beyond permissions, groups are a convenient way to categorize users to give them some label, or extended functionality. For example, you could create a group 'Special users', and you could write code that could, say, give them access to a members-only portion of your site, or send them members-only email messages.While custom permissions can be defined within a model s Meta class, you can also create permissions directly. For example, you can create the can_publish permission for a BlogPost model in myapp:The permission can then be assigned to a User via its user_permissions attribute or to a Group via its permissions attribute.Proxy models need their own content typeIf you want to create permissions for a proxy model, pass for_concrete_model=False to ContentTypeManager.get_for_model() to get the appropriate ContentType:In older versions, proxy models use the content type of the concrete model.The ModelBackend caches permissions on the user object after the first time they need to be fetched for a permissions check. This is typically fine for the request-response cycle since permissions aren t typically checked immediately after they are added (in the admin, for example). If you are adding permissions and checking them immediately afterward, in a test or view for example, the easiest solution is to re-fetch the user from the database. For example:Proxy models work exactly the same way as concrete models. Permissions are created using the own content type of the proxy model. Proxy models don t inherit the permissions of the concrete model they subclass:In older versions, permissions for proxy models use the content type of the concrete model rather than content type of the proxy model."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/default/#authentication-in-web-requests", "para": "Django uses sessions and middleware to hook the authentication system into request objects.These provide a request.user  attribute on every request which represents the current user. If the current user has not logged in, this attribute will be set to an instance of AnonymousUser, otherwise it will be an instance of User.You can tell them apart with is_authenticated, like so:If you have an authenticated user you want to attach to the current session - this is done with a login() function.To log a user in, from a view, use login(). It takes an HttpRequest object and a User object. login() saves the user s ID in the session, using Django s session framework.Note that any data set during the anonymous session is retained in the session after a user logs in.This example shows how you might use both authenticate() and login():When a user logs in, the user s ID and the backend that was used for authentication are saved in the user s session. This allows the same authentication backend to fetch the user s details on a future request. The authentication backend to save in the session is selected as follows:In cases 1 and 2, the value of the backend argument or the user.backend attribute should be a dotted import path string (like that found in AUTHENTICATION_BACKENDS), not the actual backend class.To log out a user who has been logged in via django.contrib.auth.login(), use django.contrib.auth.logout() within your view. It takes an HttpRequest object and has no return value. Example:Note that logout() doesn t throw any errors if the user wasn t logged in.When you call logout(), the session data for the current request is completely cleaned out. All existing data is removed. This is to prevent another person from using the same Web browser to log in and have access to the previous user s session data. If you want to put anything into the session that will be available to the user immediately after logging out, do that after calling django.contrib.auth.logout().The simple, raw way to limit access to pages is to check request.user.is_authenticated and either redirect to a login page: or display an error message:As a shortcut, you can use the convenient login_required() decorator:login_required() does the following:By default, the path that the user should be redirected to upon successful authentication is stored in a query string parameter called \"next\". If you would prefer to use a different name for this parameter, login_required() takes an optional redirect_field_name parameter:Note that if you provide a value to redirect_field_name, you will most likely need to customize your login template as well, since the template context variable which stores the redirect path will use the value of redirect_field_name as its key rather than \"next\" (the default).login_required() also takes an optional login_url parameter. Example:Note that if you don t specify the login_url parameter, you ll need to ensure that the settings.LOGIN_URL and your login view are properly associated. For example, using the defaults, add the following lines to your URLconf:The settings.LOGIN_URL also accepts view function names and named URL patterns. This allows you to freely remap your login view within your URLconf without having to update the setting.NoteThe login_required decorator does NOT check the is_active flag on a user, but the default AUTHENTICATION_BACKENDS reject inactive users.See alsoIf you are writing custom views for Django s admin (or need the same authorization check that the built-in views use), you may find the django.contrib.admin.views.decorators.staff_member_required() decorator a useful alternative to login_required().When using class-based views, you can achieve the same behavior as with login_required by using the LoginRequiredMixin. This mixin should be at the leftmost position in the inheritance list.If a view is using this mixin, all requests by non-authenticated users will be redirected to the login page or shown an HTTP 403 Forbidden error, depending on the raise_exception parameter.You can set any of the parameters of AccessMixin to customize the handling of unauthorized users:NoteJust as the login_required decorator, this mixin does NOT check the is_active flag on a user, but the default AUTHENTICATION_BACKENDS reject inactive users.To limit access based on certain permissions or some other test, you d do essentially the same thing as described in the previous section.The simple way is to run your test on request.user in the view directly. For example, this view checks to make sure the user has an email in the desired domain and if not, redirects to the login page:As a shortcut, you can use the convenient user_passes_test decorator which performs a redirect when the callable returns False:user_passes_test() takes a required argument: a callable that takes a User object and returns True if the user is allowed to view the page. Note that user_passes_test() does not automatically check that the User is not anonymous.user_passes_test() takes two optional arguments:For example:When using class-based views, you can use the UserPassesTestMixin to do this.You have to override the test_func() method of the class to provide the test that is performed. Furthermore, you can set any of the parameters of AccessMixin to customize the handling of unauthorized users:You can also override the get_test_func() method to have the mixin use a differently named function for its checks (instead of test_func()).Stacking UserPassesTestMixinDue to the way UserPassesTestMixin is implemented, you cannot stack them in your inheritance list. The following does NOT work:If TestMixin1 would call super() and take that result into account, TestMixin1 wouldn t work standalone anymore.It s a relatively common task to check whether a user has a particular permission. For that reason, Django provides a shortcut for that case: the permission_required() decorator.:Just like the has_perm() method, permission names take the form \"<app label>.<permission codename>\" (i.e. polls.can_vote for a permission on a model in the polls application).The decorator may also take an iterable of permissions, in which case the user must have all of the permissions in order to access the view.Note that permission_required() also takes an optional login_url parameter:As in the login_required() decorator, login_url defaults to settings.LOGIN_URL.If the raise_exception parameter is given, the decorator will raise PermissionDenied, prompting the 403 (HTTP Forbidden) view instead of redirecting to the login page.If you want to use raise_exception but also give your users a chance to login first, you can add the login_required() decorator:This also avoids a redirect loop when LoginView s redirect_authenticated_user=True and the logged-in user doesn t have all of the required permissions.To apply permission checks to class-based views, you can use the PermissionRequiredMixin:This mixin, just like the permission_required decorator, checks whether the user accessing a view has all given permissions. You should specify the permission (or an iterable of permissions) using the permission_required parameter:You can set any of the parameters of AccessMixin to customize the handling of unauthorized users.You may also override these methods:Returns an iterable of permission names used by the mixin. Defaults to the permission_required attribute, converted to a tuple if necessary.Returns a boolean denoting whether the current user has permission to execute the decorated view. By default, this returns the result of calling has_perms() with the list of permissions returned by get_permission_required().To ease the handling of access restrictions in class-based views, the AccessMixin can be used to configure the behavior of a view when access is denied. Authenticated users are denied access with an HTTP 403 Forbidden response. Anonymous users are redirected to the login page or shown an HTTP 403 Forbidden response, depending on the raise_exception attribute.In older versions, authenticated users who lacked permissions were redirected to the login page (which resulted in a loop) instead of receiving an HTTP 403 Forbidden response.Default return value for get_login_url().  Defaults to None in which case get_login_url() falls back to settings.LOGIN_URL.Default return value for get_permission_denied_message(). Defaults to an empty string.Default return value for get_redirect_field_name(). Defaults to \"next\".If this attribute is set to True, a PermissionDenied exception is raised when the conditions are not met.  When False (the default), anonymous users are redirected to the login page.Returns the URL that users who don t pass the test will be redirected to. Returns login_url if set, or settings.LOGIN_URL otherwise.When raise_exception is True, this method can be used to control the error message passed to the error handler for display to the user. Returns the permission_denied_message attribute by default.Returns the name of the query parameter that will contain the URL the user should be redirected to after a successful login. If you set this to None, a query parameter won t be added. Returns the redirect_field_name attribute by default.Depending on the value of raise_exception, the method either raises a PermissionDenied exception or redirects the user to the login_url, optionally including the redirect_field_name if it is set.If your AUTH_USER_MODEL inherits from AbstractBaseUser or implements its own get_session_auth_hash() method, authenticated sessions will include the hash returned by this function. In the AbstractBaseUser case, this is an HMAC of the password field. Django verifies that the hash in the session for each request matches the one that s computed during the request. This allows a user to log out all of their sessions by changing their password.The default password change views included with Django, PasswordChangeView and the user_change_password view in the django.contrib.auth admin, update the session with the new password hash so that a user changing their own password won t log themselves out. If you have a custom password change view and wish to have similar behavior, use the update_session_auth_hash() function.This function takes the current request and the updated user object from which the new session hash will be derived and updates the session hash appropriately. It also rotates the session key so that a stolen session cookie will be invalidated.Example usage:NoteSince get_session_auth_hash() is based on SECRET_KEY, updating your site to use a new secret will invalidate all existing sessions.Django provides several views that you can use for handling login, logout, and password management. These make use of the stock auth forms but you can pass in your own forms as well.Django provides no default template for the authentication views. You should create your own templates for the views you want to use. The template context is documented in each view, see All authentication views.There are different methods to implement these views in your project. The easiest way is to include the provided URLconf in django.contrib.auth.urls in your own URLconf, for example:This will include the following URL patterns:The views provide a URL name for easier reference. See the URL documentation for details on using named URL patterns.If you want more control over your URLs, you can reference a specific view in your URLconf:The views have optional arguments you can use to alter the behavior of the view. For example, if you want to change the template name a view uses, you can provide the template_name argument. A way to do this is to provide keyword arguments in the URLconf, these will be passed on to the view. For example:All views are class-based, which allows you to easily customize them by subclassing.This is a list with all the views django.contrib.auth provides. For implementation details see Using the views.URL name: loginSee the URL documentation for details on using named URL patterns.Attributes:template_name: The name of a template to display for the view used to log the user in. Defaults to registration/login.html.redirect_field_name: The name of a GET field containing the URL to redirect to after login. Defaults to next.authentication_form: A callable (typically just a form class) to use for authentication. Defaults to AuthenticationForm.extra_context: A dictionary of context data that will be added to the default context data passed to the template.redirect_authenticated_user: A boolean that controls whether or not authenticated users accessing the login page will be redirected as if they had just successfully logged in. Defaults to False.WarningIf you enable redirect_authenticated_user, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this  social media fingerprinting  information leakage, host all images and your favicon on a separate domain.Enabling redirect_authenticated_user can also result in a redirect loop when using the permission_required() decorator unless the raise_exception parameter is used.success_url_allowed_hosts: A set of hosts, in addition to request.get_host(), that are safe for redirecting after login. Defaults to an empty set.Here s what LoginView does:It s your responsibility to provide the html for the login template , called registration/login.html by default. This template gets passed four template context variables:If you d prefer not to call the template registration/login.html, you can pass the template_name parameter via the extra arguments to the as_view method in your URLconf. For example, this URLconf line would use myapp/login.html instead:You can also specify the name of the GET field which contains the URL to redirect to after login using redirect_field_name. By default, the field is called next.Here s a sample registration/login.html template you can use as a starting point. It assumes you have a base.html template that defines a content block:If you have customized authentication (see Customizing Authentication) you can use a custom authentication form by setting the authentication_form attribute. This form must accept a request keyword argument in its __init__() method and provide a get_user() method which returns the authenticated user object (this method is only ever called after successful form validation).Logs a user out.URL name: logoutAttributes:Template context:Logs a user out, then redirects to the login page.URL name: No default URL providedOptional arguments:URL name: password_changeAllows a user to change their password.Attributes:Template context:URL name: password_change_doneThe page shown after a user has changed their password.Attributes:URL name: password_resetAllows a user to reset their password by generating a one-time use link that can be used to reset the password, and sending that link to the user s registered email address.If the email address provided does not exist in the system, this view won t send an email, but the user won t receive any error message either. This prevents information leaking to potential attackers. If you want to provide an error message in this case, you can subclass PasswordResetForm and use the form_class attribute.Users flagged with an unusable password (see set_unusable_password() aren t allowed to request a password reset to prevent misuse when using an external authentication source like LDAP. Note that they won t receive any error message since this would expose their account s existence but no mail will be sent either.Attributes:Template context:Email template context:Sample registration/password_reset_email.html (email body template):The same template context is used for subject template. Subject must be single line plain text string.URL name: password_reset_doneThe page shown after a user has been emailed a link to reset their password. This view is called by default if the PasswordResetView doesn t have an explicit success_url URL set.NoteIf the email address provided does not exist in the system, the user is inactive, or has an unusable password, the user will still be redirected to this view but no email will be sent.Attributes:URL name: password_reset_confirmPresents a form for entering a new password.Keyword arguments from the URL:Attributes:Template context:URL name: password_reset_completePresents a view which informs the user that the password has been successfully changed.Attributes:Redirects to the login page, and then back to another URL after a successful login.Required arguments:Optional arguments:If you don t want to use the built-in views, but want the convenience of not having to write forms for this functionality, the authentication system provides several built-in forms located in django.contrib.auth.forms:NoteThe built-in authentication forms make certain assumptions about the user model that they are working with. If you re using a custom user model, it may be necessary to define your own forms for the authentication system. For more information, refer to the documentation about using the built-in authentication forms with custom user models.A form used in the admin interface to change a user s password.Takes the user as the first positional argument.A form for logging a user in.Takes request as its first positional argument, which is stored on the form instance for use by sub-classes.By default, AuthenticationForm rejects users whose is_active flag is set to False. You may override this behavior with a custom policy to determine which users can log in. Do this with a custom form that subclasses AuthenticationForm and overrides the confirm_login_allowed() method. This method should raise a ValidationError if the given user may not log in.For example, to allow all users to log in regardless of  active  status:(In this case, you ll also need to use an authentication backend that allows inactive users, such as AllowAllUsersModelBackend.)Or to allow only some active users to log in:A form for allowing a user to change their password.A form for generating and emailing a one-time use link to reset a user s password.Uses the arguments to send an EmailMultiAlternatives. Can be overridden to customize how the email is sent to the user.By default, save() populates the context with the same variables that PasswordResetView passes to its email context.A form that lets a user change their password without entering the old password.A form used in the admin interface to change a user s information and permissions.A ModelForm for creating a new user.It has three fields: username (from the user model), password1, and password2. It verifies that password1 and password2 match, validates the password using validate_password(), and sets the user s password using set_password().The currently logged-in user and their permissions are made available in the template context when you use RequestContext.TechnicalityTechnically, these variables are only made available in the template context if you use RequestContext and the 'django.contrib.auth.context_processors.auth' context processor is enabled. It is in the default generated settings file. For more, see the RequestContext docs.When rendering a template RequestContext, the currently logged-in user, either a  User instance or an AnonymousUser instance, is stored in the template variable {{ user }}:This template context variable is not available if a RequestContext is not being used.The currently logged-in user s permissions are stored in the template variable {{ perms }}. This is an instance of django.contrib.auth.context_processors.PermWrapper, which is a template-friendly proxy of permissions.Evaluating a single-attribute lookup of {{ perms }} as a boolean is a proxy to User.has_module_perms(). For example, to check if the logged-in user has any permissions in the foo app:Evaluating a two-level-attribute lookup as a boolean is a proxy to User.has_perm(). For example, to check if the logged-in user has the permission foo.can_vote:Here s a more complete example of checking permissions in a template:It is possible to also look permissions up by {% if in %} statements. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/default/#managing-users-in-the-admin", "para": "When you have both django.contrib.admin and django.contrib.auth installed, the admin provides a convenient way to view and manage users, groups, and permissions. Users can be created and deleted like any Django model. Groups can be created, and permissions can be assigned to users or groups. A log of user edits to models made within the admin is also stored and displayed.You should see a link to  Users  in the  Auth  section of the main admin index page. The  Add user  admin page is different than standard admin pages in that it requires you to choose a username and password before allowing you to edit the rest of the user s fields.Also note: if you want a user account to be able to create users using the Django admin site, you ll need to give them permission to add users and change users (i.e., the  Add user  and  Change user  permissions). If an account has permission to add users but not to change them, that account won t be able to add users. Why? Because if you have permission to add users, you have the power to create superusers, which can then, in turn, change other users. So Django requires add and change permissions as a slight security measure.Be thoughtful about how you allow users to manage permissions. If you give a non-superuser the ability to edit users, this is ultimately the same as giving them superuser status because they will be able to elevate permissions of users including themselves!User passwords are not displayed in the admin (nor stored in the database), but the password storage details are displayed. Included in the display of this information is a link to a password change form that allows admins to change user passwords."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/passwords/#how-django-stores-passwords", "para": "Django provides a flexible password storage system and uses PBKDF2 by default.The password attribute of a User object is a string in this format:Those are the components used for storing a User s password, separated by the dollar-sign character and consist of: the hashing algorithm, the number of algorithm iterations (work factor), the random salt, and the resulting password hash.  The algorithm is one of a number of one-way hashing or password storage algorithms Django can use; see below. Iterations describe the number of times the algorithm is run over the hash. Salt is the random seed used and the hash is the result of the one-way function.By default, Django uses the PBKDF2 algorithm with a SHA256 hash, a password stretching mechanism recommended by NIST. This should be sufficient for most users: it s quite secure, requiring massive amounts of computing time to break.However, depending on your requirements, you may choose a different algorithm, or even use a custom algorithm to match your specific security situation. Again, most users shouldn t need to do this   if you re not sure, you probably don t.  If you do, please read on:Django chooses the algorithm to use by consulting the PASSWORD_HASHERS setting. This is a list of hashing algorithm classes that this Django installation supports. The first entry in this list (that is, settings.PASSWORD_HASHERS[0]) will be used to store passwords, and all the other entries are valid hashers that can be used to check existing passwords.  This means that if you want to use a different algorithm, you ll need to modify PASSWORD_HASHERS to list your preferred algorithm first in the list.The default for PASSWORD_HASHERS is:This means that Django will use PBKDF2 to store all passwords but will support checking passwords stored with PBKDF2SHA1, argon2, and bcrypt.The next few sections describe a couple of common ways advanced users may want to modify this setting.Argon2 is the winner of the 2015 Password Hashing Competition, a community organized open competition to select a next generation hashing algorithm. It s designed not to be easier to compute on custom hardware than it is to compute on an ordinary CPU.Argon2 is not the default for Django because it requires a third-party library. The Password Hashing Competition panel, however, recommends immediate use of Argon2 rather than the other algorithms supported by Django.To use Argon2 as your default storage algorithm, do the following:Install the argon2-cffi library.  This can be done by running pip install django[argon2], which is equivalent to pip install argon2-cffi (along with any version requirement from Django s setup.py).Modify PASSWORD_HASHERS to list Argon2PasswordHasher first. That is, in your settings file, you d put:Keep and/or add any entries in this list if you need Django to upgrade passwords.Bcrypt is a popular password storage algorithm that s specifically designed for long-term password storage. It s not the default used by Django since it requires the use of third-party libraries, but since many people may want to use it Django supports bcrypt with minimal effort.To use Bcrypt as your default storage algorithm, do the following:Install the bcrypt library. This can be done by running pip install django[bcrypt], which is equivalent to  pip install bcrypt (along with any version requirement from Django s setup.py).Modify PASSWORD_HASHERS to list BCryptSHA256PasswordHasher first. That is, in your settings file, you d put:Keep and/or add any entries in this list if you need Django to upgrade passwords.That s it   now your Django install will use Bcrypt as the default storage algorithm.The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of hashing. This deliberately slows down attackers, making attacks against hashed passwords harder. However, as computing power increases, the number of iterations needs to be increased. We ve chosen a reasonable default (and will increase it with each release of Django), but you may wish to tune it up or down, depending on your security needs and available processing power. To do so, you ll subclass the appropriate algorithm and override the iterations parameters. For example, to increase the number of iterations used by the default PBKDF2 algorithm:Create a subclass of django.contrib.auth.hashers.PBKDF2PasswordHasher:Save this somewhere in your project. For example, you might put this in a file like myproject/hashers.py.Add your new hasher as the first entry in PASSWORD_HASHERS:That s it   now your Django install will use more iterations when it stores passwords using PBKDF2.Argon2 has three attributes that can be customized:The default values of these attributes are probably fine for you. If you determine that the password hash is too fast or too slow, you can tweak it as follows:memory_cost interpretationThe argon2 command-line utility and some other libraries interpret the memory_cost parameter differently from the value that Django uses. The conversion is given by memory_cost == 2 ** memory_cost_commandline.When users log in, if their passwords are stored with anything other than the preferred algorithm, Django will automatically upgrade the algorithm to the preferred one. This means that old installs of Django will get automatically more secure as users log in, and it also means that you can switch to new (and better) storage algorithms as they get invented.However, Django can only upgrade passwords that use algorithms mentioned in PASSWORD_HASHERS, so as you upgrade to new systems you should make sure never to remove entries from this list. If you do, users using unmentioned algorithms won t be able to upgrade. Hashed passwords will be updated when increasing (or decreasing) the number of PBKDF2 iterations or bcrypt rounds.Be aware that if all the passwords in your database aren t encoded in the default hasher s algorithm, you may be vulnerable to a user enumeration timing attack due to a difference between the duration of a login request for a user with a password encoded in a non-default algorithm and the duration of a login request for a nonexistent user (which runs the default hasher). You may be able to mitigate this by upgrading older password hashes.If you have an existing database with an older, weak hash such as MD5 or SHA1, you might want to upgrade those hashes yourself instead of waiting for the upgrade to happen when a user logs in (which may never happen if a user doesn t return to your site). In this case, you can use a  wrapped  password hasher.For this example, we ll migrate a collection of SHA1 hashes to use PBKDF2(SHA1(password)) and add the corresponding password hasher for checking if a user entered the correct password on login. We assume we re using the built-in User model and that our project has an accounts app. You can modify the pattern to work with any algorithm or with a custom user model.First, we ll add the custom hasher:The data migration might look something like:Be aware that this migration will take on the order of several minutes for several thousand users, depending on the speed of your hardware.Finally, we ll add a PASSWORD_HASHERS setting:Include any other hashers that your site uses in this list.The full list of hashers included in Django is:The corresponding algorithm names are:If you write your own password hasher that contains a work factor such as a number of iterations, you should implement a harden_runtime(self, password, encoded) method to bridge the runtime gap between the work factor supplied in the encoded password and the default work factor of the hasher. This prevents a user enumeration timing attack due to  difference between a login request for a user with a password encoded in an older number of iterations and a nonexistent user (which runs the default hasher s default number of iterations).Taking PBKDF2 as example, if encoded contains 20,000 iterations and the hasher s default iterations is 30,000, the method should run password through another 10,000 iterations of PBKDF2.If your hasher doesn t have a work factor, implement the method as a no-op (pass)."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/passwords/#module-django.contrib.auth.hashers", "para": "The django.contrib.auth.hashers module provides a set of functions to create and validate hashed passwords. You can use them independently from the User model.If you d like to manually authenticate a user by comparing a plain-text password to the hashed password in the database, use the convenience function check_password(). It takes two arguments: the plain-text password to check, and the full value of a user s password field in the database to check against, and returns True if they match, False otherwise.Creates a hashed password in the format used by this application. It takes one mandatory argument: the password in plain-text. Optionally, you can provide a salt and a hashing algorithm to use, if you don t want to use the defaults (first entry of PASSWORD_HASHERS setting). See Included hashers for the algorithm name of each hasher. If the password argument is None, an unusable password is returned (one that will never be accepted by check_password()).Returns False if the password is a result of User.set_unusable_password().In older versions, this also returns False if the password is None or an empty string, or if the password uses a hasher that s not in the PASSWORD_HASHERS setting. That behavior is considered a bug as it prevents users with such passwords from requesting a password reset."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/passwords/#module-django.contrib.auth.password_validation", "para": "Users often choose poor passwords. To help mitigate this problem, Django offers pluggable password validation. You can configure multiple password validators at the same time. A few validators are included in Django, but it s simple to write your own as well.Each password validator must provide a help text to explain the requirements to the user, validate a given password and return an error message if it does not meet the requirements, and optionally receive passwords that have been set. Validators can also have optional settings to fine tune their behavior.Validation is controlled by the AUTH_PASSWORD_VALIDATORS setting. The default for the setting is an empty list, which means no validators are applied. In new projects created with the default startproject template, a simple set of validators is enabled.By default, validators are used in the forms to reset or change passwords and in the createsuperuser and changepassword management commands. Validators aren t applied at the model level, for example in User.objects.create_user() and create_superuser(), because we assume that developers, not users, interact with Django at that level and also because model validation doesn t automatically run as part of creating models.NotePassword validation can prevent the use of many types of weak passwords. However, the fact that a password passes all the validators doesn t guarantee that it is a strong password. There are many factors that can weaken a password that are not detectable by even the most advanced password validators.Password validation is configured in the AUTH_PASSWORD_VALIDATORS setting:This example enables all four included validators:For UserAttributeSimilarityValidator and CommonPasswordValidator, we re simply using the default settings in this example. NumericPasswordValidator has no settings.The help texts and any errors from password validators are always returned in the order they are listed in AUTH_PASSWORD_VALIDATORS.Django includes four validators:Validates whether the password meets a minimum length. The minimum length can be customized with the min_length parameter.Validates whether the password is sufficiently different from certain attributes of the user.The user_attributes parameter should be an iterable of names of user attributes to compare to. If this argument is not provided, the default is used: 'username', 'first_name', 'last_name', 'email'. Attributes that don t exist are ignored.The minimum similarity of a rejected password can be set on a scale of 0 to 1 with the max_similarity parameter. A setting of 0 rejects all passwords, whereas a setting of 1 rejects only passwords that are identical to an attribute s value.Validates whether the password is not a common password. This converts the password to lowercase (to do a case-insensitive comparison) and checks it against a list of 20,000 common password created by Royce Williams.The password_list_path can be set to the path of a custom file of common passwords. This file should contain one lowercase password per line and may be plain text or gzipped.In older versions, a list of 1,000 common passwords is used.Validates whether the password is not entirely numeric.There are a few functions in django.contrib.auth.password_validation that you can call from your own forms or other code to integrate password validation. This can be useful if you use custom forms for password setting, or if you have API calls that allow passwords to be set, for example.Validates a password. If all validators find the password valid, returns None. If one or more validators reject the password, raises a ValidationError with all the error messages from the validators.The user object is optional: if it s not provided, some validators may not be able to perform any validation and will accept any password.Informs all validators that the password has been changed. This can be used by validators such as one that prevents password reuse. This should be called once the password has been successfully changed.For subclasses of AbstractBaseUser, the password field will be marked as  dirty  when calling set_password() which triggers a call to password_changed() after the user is saved.Returns a list of the help texts of all validators. These explain the password requirements to the user.Returns an HTML string with all help texts in an <ul>. This is helpful when adding password validation to forms, as you can pass the output directly to the help_text parameter of a form field.Returns a set of validator objects based on the validator_config parameter. By default, all functions use the validators defined in AUTH_PASSWORD_VALIDATORS, but by calling this function with an alternate set of validators and then passing the result into the password_validators parameter of the other functions, your custom set of validators will be used instead. This is useful when you have a typical set of validators to use for most scenarios, but also have a special situation that requires a custom set. If you always use the same set of validators, there is no need to use this function, as the configuration from AUTH_PASSWORD_VALIDATORS is used by default.The structure of validator_config is identical to the structure of AUTH_PASSWORD_VALIDATORS. The return value of this function can be passed into the password_validators parameter of the functions listed above.Note that where the password is passed to one of these functions, this should always be the clear text password - not a hashed password.If Django s built-in validators are not sufficient, you can write your own password validators. Validators are fairly simple classes. They must implement two methods:Any items in the OPTIONS in AUTH_PASSWORD_VALIDATORS for your validator will be passed to the constructor. All constructor arguments should have a default value.Here s a basic example of a validator, with one optional setting:You can also implement password_changed(password, user=None), which will be called after a successful password change. That can be used to prevent password reuse, for example. However, if you decide to store a user s previous passwords, you should never do so in clear text."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#other-authentication-sources", "para": "There may be times you have the need to hook into another authentication source   that is, another source of usernames and passwords or authentication methods.For example, your company may already have an LDAP setup that stores a username and password for every employee. It d be a hassle for both the network administrator and the users themselves if users had separate accounts in LDAP and the Django-based applications.So, to handle situations like this, the Django authentication system lets you plug in other authentication sources. You can override Django s default database-based scheme, or you can use the default system in tandem with other systems.See the authentication backend reference for information on the authentication backends included with Django.Behind the scenes, Django maintains a list of  authentication backends  that it checks for authentication. When somebody calls django.contrib.auth.authenticate()   as described in How to log a user in   Django tries authenticating across all of its authentication backends. If the first authentication method fails, Django tries the second one, and so on, until all backends have been attempted.The list of authentication backends to use is specified in the AUTHENTICATION_BACKENDS setting. This should be a list of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path.By default, AUTHENTICATION_BACKENDS is set to:That s the basic authentication backend that checks the Django users database and queries the built-in permissions. It does not provide protection against brute force attacks via any rate limiting mechanism. You may either implement your own rate limiting mechanism in a custom auth backend, or use the mechanisms provided by most Web servers.The order of AUTHENTICATION_BACKENDS matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match.If a backend raises a PermissionDenied exception, authentication will immediately fail. Django won t check the backends that follow.NoteOnce a user has authenticated, Django stores which backend was used to authenticate the user in the user s session, and re-uses the same backend for the duration of that session whenever access to the currently authenticated user is needed. This effectively means that authentication sources are cached on a per-session basis, so if you change AUTHENTICATION_BACKENDS, you ll need to clear out session data if you need to force users to re-authenticate using different methods. A simple way to do that is simply to execute Session.objects.all().delete().An authentication backend is a class that implements two required methods: get_user(user_id) and authenticate(request, **credentials), as well as a set of optional permission related authorization methods.The get_user method takes a user_id   which could be a username, database ID or whatever, but has to be the primary key of your user object   and returns a user object or None.The authenticate method takes a request argument and credentials as keyword arguments. Most of the time, it ll just look like this:But it could also authenticate a token, like so:Either way, authenticate() should check the credentials it gets and return a user object that matches those credentials if the credentials are valid. If they re not valid, it should return None.request is an HttpRequest and may be None if it wasn t provided to authenticate() (which passes it on to the backend).The Django admin is tightly coupled to the Django User object. The best way to deal with this is to create a Django User object for each user that exists for your backend (e.g., in your LDAP directory, your external SQL database, etc.) You can either write a script to do this in advance, or your authenticate method can do it the first time a user logs in.Here s an example backend that authenticates against a username and password variable defined in your settings.py file and creates a Django User object the first time a user authenticates:Custom auth backends can provide their own permissions.The user model will delegate permission lookup functions (get_group_permissions(), get_all_permissions(), has_perm(), and has_module_perms()) to any authentication backend that implements these functions.The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants.If a backend raises a PermissionDenied exception in has_perm() or has_module_perms(), the authorization will immediately fail and Django won t check the backends that follow.The simple backend above could implement permissions for the magic admin fairly simply:This gives full permissions to the user granted access in the above example. Notice that in addition to the same arguments given to the associated django.contrib.auth.models.User functions, the backend auth functions all take the user object, which may be an anonymous user, as an argument.A full authorization implementation can be found in the ModelBackend class in django/contrib/auth/backends.py, which is the default backend and queries the auth_permission table most of the time. If you wish to provide custom behavior for only part of the backend API, you can take advantage of Python inheritance and subclass ModelBackend instead of implementing the complete API in a custom backend.An anonymous user is one that is not authenticated i.e. they have provided no valid authentication details. However, that does not necessarily mean they are not authorized to do anything. At the most basic level, most websites authorize anonymous users to browse most of the site, and many allow anonymous posting of comments etc.Django s permission framework does not have a place to store permissions for anonymous users. However, the user object passed to an authentication backend may be an django.contrib.auth.models.AnonymousUser object, allowing the backend to specify custom authorization behavior for anonymous users. This is especially useful for the authors of re-usable apps, who can delegate all questions of authorization to the auth backend, rather than needing settings, for example, to control anonymous access.An inactive user is one that has its is_active field set to False. The ModelBackend and RemoteUserBackend authentication backends prohibits these users from authenticating. If a custom user model doesn t have an is_active field, all users will be allowed to authenticate.You can use AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to authenticate.The support for anonymous users in the permission system allows for a scenario where anonymous users have permissions to do something while inactive authenticated users do not.Do not forget to test for the is_active attribute of the user in your own backend permission methods.Django s permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return False or an empty list (depending on the check performed). An authentication backend will receive the keyword parameters obj and user_obj for each object related authorization method and can return the object level permission as appropriate."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#custom-permissions", "para": "To create custom permissions for a given model object, use the permissions model Meta attribute.This example Task model creates two custom permissions, i.e., actions users can or cannot do with Task instances, specific to your application:The only thing this does is create those extra permissions when you run manage.py migrate (the function that creates permissions is connected to the post_migrate signal). Your code is in charge of checking the value of these permissions when a user is trying to access the functionality provided by the application (changing the status of tasks or closing tasks.) Continuing the above example, the following checks if a user may close tasks:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#extending-the-existing-user-model", "para": "There are two ways to extend the default User model without substituting your own model. If the changes you need are purely behavioral, and don t require any change to what is stored in the database, you can create a proxy model based on User. This allows for any of the features offered by proxy models including default ordering, custom managers, or custom model methods.If you wish to store information related to User, you can use a OneToOneField to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user. For example you might create an Employee model:Assuming an existing Employee Fred Smith who has both a User and Employee model, you can access the related information using Django s standard related model conventions:To add a profile model s fields to the user page in the admin, define an InlineModelAdmin (for this example, we ll use a StackedInline) in your app s admin.py and add it to a UserAdmin class which is registered with the User class:These profile models are not special in any way - they are just Django models that happen to have a one-to-one link with a user model. As such, they aren t auto created when a user is created, but a django.db.models.signals.post_save could be used to create or update related models as appropriate.Using related models results in additional queries or joins to retrieve the related data. Depending on your needs, a custom user model that includes the related fields may be your better option, however, existing relations to the default user model within your project s apps may justify the extra database load."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#substituting-a-custom-user-model", "para": "Some kinds of projects may have authentication requirements for which Django s built-in User model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username.Django allows you to override the default user model by providing a value for the AUTH_USER_MODEL setting that references a custom model:This dotted pair describes the name of the Django app (which must be in your INSTALLED_APPS), and the name of the Django model that you wish to use as your user model.If you re starting a new project, it s highly recommended to set up a custom user model, even if the default User model is sufficient for you. This model behaves identically to the default user model, but you ll be able to customize it in the future if the need arises:Don t forget to point AUTH_USER_MODEL to it. Do this before creating any migrations or running manage.py migrate for the first time.Also, register the model in the app s admin.py:Changing AUTH_USER_MODEL after you ve created database tables is significantly more difficult since it affects foreign keys and many-to-many relationships, for example.This change can t be done automatically and requires manually fixing your schema, moving your data from the old user table, and possibly manually reapplying some migrations. See #25313 for an outline of the steps.Due to limitations of Django s dynamic dependency feature for swappable models, the model referenced by AUTH_USER_MODEL must be created in the first migration of its app (usually called 0001_initial); otherwise, you ll have dependency issues.In addition, you may run into a CircularDependencyError when running your migrations as Django won t be able to automatically break the dependency loop due to the dynamic dependency. If you see this error, you should break the loop by moving the models depended on by your user model into a second migration. (You can try making two normal models that have a ForeignKey to each other and seeing how makemigrations resolves that circular dependency if you want to see how it s usually done.)Reusable apps shouldn t implement a custom user model. A project may use many apps, and two reusable apps that implemented a custom user model couldn t be used together. If you need to store per user information in your app, use a ForeignKey or OneToOneField to settings.AUTH_USER_MODEL as described below.If you reference User directly (for example, by referring to it in a foreign key), your code will not work in projects where the AUTH_USER_MODEL setting has been changed to a different user model.Instead of referring to User directly, you should reference the user model using django.contrib.auth.get_user_model(). This method will return the currently active user model   the custom user model if one is specified, or User otherwise.When you define a foreign key or many-to-many relations to the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example:When connecting to signals sent by the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example:Generally speaking, it s easiest to refer to the user model with the AUTH_USER_MODEL setting in code that s executed at import time, however, it s also possible to call get_user_model() while Django is importing models, so you could use models.ForeignKey(get_user_model(), ...).If your app is tested with multiple user models, using @override_settings(AUTH_USER_MODEL=...) for example, and you cache the result of get_user_model() in a module-level variable, you may need to listen to the  setting_changed signal to clear the cache. For example:Model design considerationsThink carefully before handling information not directly related to authentication in your custom user model.It may be better to store app-specific user information in a model that has a relation with the user model. That allows each app to specify its own user data requirements without risking conflicts with other apps. On the other hand, queries to retrieve this related information will involve a database join, which may have an effect on performance.Django expects your custom user model to meet some minimum requirements.If you use the default authentication backend, then your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute. A non-unique username field is allowed if you use a custom authentication backend that can support it.The easiest way to construct a compliant custom user model is to inherit from AbstractBaseUser. AbstractBaseUser provides the core implementation of a user model, including hashed passwords and tokenized password resets. You must then provide some key implementation details:A string describing the name of the field on the user model that is used as the unique identifier. This will usually be a username of some kind, but it can also be an email address, or any other unique identifier. The field must be unique (i.e., have unique=True set in its definition), unless you use a custom authentication backend that can support non-unique usernames.In the following example, the field identifier is used as the identifying field:A string describing the name of the email field on the User model. This value is returned by get_email_field_name().A list of the field names that will be prompted for when creating a user via the createsuperuser management command. The user will be prompted to supply a value for each of these fields. It must include any field for which blank is False or undefined and may include additional fields you want prompted for when a user is created interactively. REQUIRED_FIELDS has no effect in other parts of Django, like creating a user in the admin.For example, here is the partial definition for a user model that defines two required fields - a date of birth and height:NoteREQUIRED_FIELDS must contain all required fields on your user model, but should not contain the USERNAME_FIELD or password as these fields will always be prompted for.A boolean attribute that indicates whether the user is considered  active .  This attribute is provided as an attribute on AbstractBaseUser defaulting to True. How you choose to implement it will depend on the details of your chosen auth backends. See the documentation of the is_active attribute on the built-in user model for details.Optional. A longer formal identifier for the user such as their full name. If implemented, this appears alongside the username in an object s history in django.contrib.admin.Optional. A short, informal identifier for the user such as their first name. If implemented, this replaces the username in the greeting to the user in the header of django.contrib.admin.Importing AbstractBaseUserAbstractBaseUser and BaseUserManager are importable from django.contrib.auth.base_user so that they can be imported without including django.contrib.auth in INSTALLED_APPS.The following attributes and methods are available on any subclass of AbstractBaseUser:Returns the value of the field nominated by USERNAME_FIELD.Normalizes the username by calling normalize_username(). If you override this method, be sure to call super() to retain the normalization.Returns the name of the email field specified by the EMAIL_FIELD attribute. Defaults to 'email' if EMAIL_FIELD isn t specified.Applies NFKC Unicode normalization to usernames so that visually identical characters with different Unicode code points are considered identical.Read-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance.Read-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute.Sets the user s password to the given raw string, taking care of the password hashing. Doesn t save the AbstractBaseUser object.When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used.Returns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)Marks the user as having no password set.  This isn t the same as having a blank string for a password. check_password() for this user will never return True. Doesn t save the AbstractBaseUser object.You may need this if authentication for your application takes place against an existing external source such as an LDAP directory.Returns False if set_unusable_password() has been called for this user.Returns an HMAC of the password field. Used for Session invalidation on password change.AbstractUser subclasses AbstractBaseUser:Normalizes the email by calling BaseUserManager.normalize_email(). If you override this method, be sure to call super() to retain the normalization.You should also define a custom manager for your user model. If your user model defines username, email, is_staff, is_active, is_superuser, last_login, and date_joined fields the same as Django s default user, you can just install Django s UserManager; however, if your user model defines different fields, you ll need to define a custom manager that extends BaseUserManager providing two additional methods:The prototype of create_user() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_user should be defined as:The prototype of create_superuser() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_superuser should be defined as:Unlike create_user(), create_superuser() must require the caller to provide a password.For a ForeignKey in USERNAME_FIELD or REQUIRED_FIELDS, these methods receive the value of the to_field (the primary_key by default) of an existing instance.BaseUserManager provides the following utility methods:Normalizes email addresses by lowercasing the domain portion of the email address.Retrieves a user instance using the contents of the field nominated by USERNAME_FIELD.Returns a random password with the given length and given string of allowed characters. Note that the default value of allowed_chars doesn t contain letters that can cause user confusion, including:If you re entirely happy with Django s User model and you just want to add some additional profile information, you could simply subclass django.contrib.auth.models.AbstractUser and add your custom profile fields, although we d recommend a separate model as described in the  Model design considerations  note of Specifying a custom user model. AbstractUser provides the full implementation of the default User as an abstract model.Django s built-in forms and views make certain assumptions about the user model that they are working with.The following forms are compatible with any subclass of AbstractBaseUser:The following forms make assumptions about the user model and can be used as-is if those assumptions are met:Finally, the following forms are tied to User and need to be rewritten or extended to work with a custom user model:If your custom user model is a simple subclass of AbstractUser, then you can extend these forms in this manner:If you want your custom user model to also work with the admin, your user model must define some additional attributes and methods. These methods allow the admin to control access of the user to admin content:Returns True if the user is allowed to have access to the admin site.Returns True if the user account is currently active.Returns True if the user has the named permission. If obj is provided, the permission needs to be checked against a specific object instance.Returns True if the user has permission to access models in the given app.You will also need to register your custom user model with the admin. If your custom user model extends django.contrib.auth.models.AbstractUser, you can use Django s existing django.contrib.auth.admin.UserAdmin class. However, if your user model extends AbstractBaseUser, you ll need to define a custom ModelAdmin class. It may be possible to subclass the default django.contrib.auth.admin.UserAdmin; however, you ll need to override any of the definitions that refer to fields on django.contrib.auth.models.AbstractUser that aren t on your custom user class.To make it easy to include Django s permission framework into your own user class, Django provides PermissionsMixin. This is an abstract model you can include in the class hierarchy for your user model, giving you all the methods and database fields necessary to support Django s permission model.PermissionsMixin provides the following methods and attributes:Boolean. Designates that this user has all permissions without explicitly assigning them.Returns a set of permission strings that the user has, through their groups.If obj is passed in, only returns the group permissions for this specific object.Returns a set of permission strings that the user has, both through group and user permissions.If obj is passed in, only returns the permissions for this specific object.Returns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\" (see permissions). If User.is_active and is_superuser are both True, this method always returns True.If obj is passed in, this method won t check for a permission for the model, but for this specific object.Returns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If User.is_active and is_superuser are both True, this method always returns True.If obj is passed in, this method won t check for permissions for the model, but for the specific object.Returns True if the user has any permissions in the given package (the Django app label). If User.is_active and is_superuser are both True, this method always returns True.PermissionsMixin and ModelBackendIf you don t include the PermissionsMixin, you must ensure you don t invoke the permissions methods on ModelBackend. ModelBackend assumes that certain fields are available on your user model. If your user model doesn t provide  those fields, you ll receive database errors when you check permissions.One limitation of custom user models is that installing a custom user model will break any proxy model extending User. Proxy models must be based on a concrete base class; by defining a custom user model, you remove the ability of Django to reliably identify the base class.If your project uses proxy models, you must either modify the proxy to extend the user model that s in use in your project, or merge your proxy s behavior into your User subclass.Here is an example of an admin-compliant custom user app. This user model uses an email address as the username, and has a required date of birth; it provides no permission checking, beyond a simple admin flag on the user account. This model would be compatible with all the built-in auth forms and views, except for the user creation forms. This example illustrates how most of the components work together, but is not intended to be copied directly into projects for production use.This code would all live in a models.py file for a custom authentication app:Then, to register this custom user model with Django s admin, the following code would be required in the app s admin.py file:Finally, specify the custom model as the default user model for your project using the AUTH_USER_MODEL setting in your settings.py:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#user-model", "para": "User objects have the following fields:Required. 150 characters or fewer. Usernames may contain alphanumeric, _, @, +, . and - characters.The max_length should be sufficient for many use cases. If you need a longer length, please use a custom user model. If you use MySQL with the utf8mb4 encoding (recommended for proper Unicode support), specify at most max_length=191 because MySQL can only create unique indexes with 191 characters in that case by default.Usernames and UnicodeDjango originally accepted only ASCII letters and numbers in usernames. Although it wasn t a deliberate choice, Unicode characters have always been accepted when using Python 3. Django 1.10 officially added Unicode support in usernames, keeping the ASCII-only behavior on Python 2, with the option to customize the behavior using User.username_validator.Optional (blank=True). 30 characters or fewer.Optional (blank=True). 150 characters or fewer.Optional (blank=True). Email address.Required. A hash of, and metadata about, the password. (Django doesn t store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the password documentation.Many-to-many relationship to GroupMany-to-many relationship to PermissionBoolean. Designates whether this user can access the admin site.Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to False instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won t break.This doesn t necessarily control whether or not the user can log in. Authentication backends aren t required to check for the is_active flag but the default backend (ModelBackend) and the RemoteUserBackend do. You can use AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to login. In this case, you ll also want to customize the AuthenticationForm used by the LoginView as it rejects inactive users. Be aware that the permission-checking methods such as has_perm() and the authentication in the Django admin all return False for inactive users.Boolean. Designates that this user has all permissions without explicitly assigning them.A datetime of the user s last login.A datetime designating when the account was created. Is set to the current date/time by default when the account is created.Read-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance.Read-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute.Points to a validator instance used to validate usernames. Defaults to validators.UnicodeUsernameValidator.To change the default username validator, you can subclass the User model and set this attribute to a different validator instance. For example, to use ASCII usernames:Returns the username for the user. Since the User model can be swapped out, you should use this method instead of referencing the username attribute directly.Returns the first_name plus the last_name, with a space in between.Returns the first_name.Sets the user s password to the given raw string, taking care of the password hashing. Doesn t save the User object.When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used.Returns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)Marks the user as having no password set.  This isn t the same as having a blank string for a password. check_password() for this user will never return True. Doesn t save the User object.You may need this if authentication for your application takes place against an existing external source such as an LDAP directory.Returns False if set_unusable_password() has been called for this user.In older versions, this also returns False if the password is None or an empty string, or if the password uses a hasher that s not in the PASSWORD_HASHERS setting. That behavior is considered a bug as it prevents users with such passwords from requesting a password reset.Returns a set of permission strings that the user has, through their groups.If obj is passed in, only returns the group permissions for this specific object.Returns a set of permission strings that the user has, both through group and user permissions.If obj is passed in, only returns the permissions for this specific object.Returns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\". (see documentation on permissions). If the user is inactive, this method will always return False.If obj is passed in, this method won t check for a permission for the model, but for this specific object.Returns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If the user is inactive, this method will always return False.If obj is passed in, this method won t check for permissions for the model, but for the specific object.Returns True if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return False.Sends an email to the user. If from_email is None, Django uses the DEFAULT_FROM_EMAIL. Any **kwargs are passed to the underlying send_mail() call.The User model has a custom manager that has the following helper methods (in addition to the methods provided by BaseUserManager):Creates, saves and returns a User.The username and password are set as given. The domain portion of email is automatically converted to lowercase, and the returned User object will have is_active set to True.If no password is provided, set_unusable_password() will be called.The extra_fields keyword arguments are passed through to the User s __init__ method to allow setting arbitrary fields on a custom user model.See Creating users for example usage.Same as create_user(), but sets is_staff and is_superuser to True."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#anonymoususer-object", "para": "django.contrib.auth.models.AnonymousUser is a class that implements the django.contrib.auth.models.User interface, with these differences:In practice, you probably won t need to use AnonymousUser objects on your own, but they re used by Web requests, as explained in the next section."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#permission-model", "para": "Permission objects have the following fields:Required. 255 characters or fewer. Example: 'Can vote'.Required. A reference to the django_content_type database table, which contains a record for each installed model.Required. 100 characters or fewer. Example: 'can_vote'.Permission objects have the standard data-access methods like any other Django model."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#group-model", "para": "Group objects have the following fields:Required. 150 characters or fewer. Any characters are permitted. Example: 'Awesome Users'.The max_length increased from 80 to 150 characters.Many-to-many field to Permission:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#validators", "para": "A field validator allowing only ASCII letters and numbers, in addition to @, ., +, -, and _.A field validator allowing Unicode characters, in addition to @, ., +, -, and _. The default validator for User.username."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#module-django.contrib.auth.signals", "para": "The auth framework uses the following signals that can be used for notification when a user logs in or out.Sent when a user logs in successfully.Arguments sent with this signal:Sent when the logout method is called.Sent when the user failed to login successfully"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#module-django.contrib.auth.backends", "para": "This section details the authentication backends that come with Django. For information on how to use them and how to write your own authentication backends, see the Other authentication sources section of the User authentication guide.The following backends are available in django.contrib.auth.backends:This is the default authentication backend used by Django.  It authenticates using credentials consisting of a user identifier and password.  For Django s default user model, the user identifier is the username, for custom user models it is the field specified by USERNAME_FIELD (see Customizing Users and authentication).It also handles the default permissions model as defined for User and PermissionsMixin.has_perm(), get_all_permissions(), get_user_permissions(), and get_group_permissions() allow an object to be passed as a parameter for object-specific permissions, but this backend does not implement them other than returning an empty set of permissions if obj is not None.Tries to authenticate username with password by calling User.check_password. If no username is provided, it tries to fetch a username from kwargs using the key CustomUser.USERNAME_FIELD. Returns an authenticated user or None.request is an HttpRequest and may be None if it wasn t provided to authenticate() (which passes it on to the backend).Returns the set of permission strings the user_obj has from their own user permissions. Returns an empty set if is_anonymous or is_active is False.Returns the set of permission strings the user_obj has from the permissions of the groups they belong. Returns an empty set if is_anonymous or is_active  is False.Returns the set of permission strings the user_obj has, including both user permissions and group permissions. Returns an empty set if is_anonymous or is_active is False.Uses get_all_permissions() to check if user_obj has the permission string perm. Returns False if the user is not is_active.Returns whether the user_obj has any permissions on the app app_label.Returns whether the user is allowed to authenticate. To match the behavior of AuthenticationForm which prohibits inactive users from logging in, this method returns False for users with is_active=False. Custom user models that don t have an is_active field are allowed.Same as ModelBackend except that it doesn t reject inactive users because user_can_authenticate() always returns True.When using this backend, you ll likely want to customize the AuthenticationForm used by the LoginView by overriding the confirm_login_allowed() method as it rejects inactive users.Use this backend to take advantage of external-to-Django-handled authentication.  It authenticates using usernames passed in request.META['REMOTE_USER'].  See the Authenticating against REMOTE_USER documentation.If you need more control, you can create your own authentication backend that inherits from this class and override these attributes or methods:True or False. Determines whether or not a user object is created if not already in the database  Defaults to True.The username passed as remote_user is considered trusted. This method simply returns the user object with the given username, creating a new user object if create_unknown_user is True.Returns None if create_unknown_user is False and a User object with the given username is not found in the database.request is an HttpRequest and may be None if it wasn t provided to authenticate() (which passes it on to the backend).Performs any cleaning on the username (e.g. stripping LDAP DN information) prior to using it to get or create a user object. Returns the cleaned username.Configures a newly created user.  This method is called immediately after a new user is created, and can be used to perform custom setup actions, such as setting the user s groups based on attributes in an LDAP directory. Returns the user object.request is an HttpRequest and may be None if it wasn t provided to authenticate() (which passes it on to the backend).The request argument was added. Support for method overrides that don t accept it will be removed in Django 3.1.Returns whether the user is allowed to authenticate. This method returns False for users with is_active=False. Custom user models that don t have an is_active field are allowed.Same as RemoteUserBackend except that it doesn t reject inactive users because user_can_authenticate always returns True."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#utility-functions", "para": "Returns the user model instance associated with the given request s session.It checks if the authentication backend stored in the session is present in AUTHENTICATION_BACKENDS. If so, it uses the backend s get_user() method to retrieve the user model instance and then verifies the session by calling the user model s get_session_auth_hash() method.Returns an instance of AnonymousUser if the authentication backend stored in the session is no longer in AUTHENTICATION_BACKENDS, if a user isn t returned by the backend s get_user() method, or if the session auth hash doesn t validate."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/cache/#setting-up-the-cache", "para": "The cache system requires a small amount of setup. Namely, you have to tell it where your cached data should live   whether in a database, on the filesystem or directly in memory. This is an important decision that affects your cache s performance; yes, some cache types are faster than others.Your cache preference goes in the CACHES setting in your settings file. Here s an explanation of all available values for CACHES.The fastest, most efficient type of cache supported natively by Django, Memcached is an entirely memory-based cache server, originally developed to handle high loads at LiveJournal.com and subsequently open-sourced by Danga Interactive. It is used by sites such as Facebook and Wikipedia to reduce database access and dramatically increase site performance.Memcached runs as a daemon and is allotted a specified amount of RAM. All it does is provide a fast interface for adding, retrieving and deleting data in the cache. All data is stored directly in memory, so there s no overhead of database or filesystem usage.After installing Memcached itself, you ll need to install a Memcached binding. There are several Python Memcached bindings available; the two most common are python-memcached and pylibmc.To use Memcached with Django:In this example, Memcached is running on localhost (127.0.0.1) port 11211, using the python-memcached binding:In this example, Memcached is available through a local Unix socket file /tmp/memcached.sock using the python-memcached binding:When using the pylibmc binding, do not include the unix:/ prefix:One excellent feature of Memcached is its ability to share a cache over multiple servers. This means you can run Memcached daemons on multiple machines, and the program will treat the group of machines as a single cache, without the need to duplicate cache values on each machine. To take advantage of this feature, include all server addresses in LOCATION, either as a semicolon or comma delimited string, or as a list.In this example, the cache is shared over Memcached instances running on IP address 172.19.26.240 and 172.19.26.242, both on port 11211:In the following example, the cache is shared over Memcached instances running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port 11212), and 172.19.26.244 (port 11213):A final point about Memcached is that memory-based caching has a disadvantage: because the cached data is stored in memory, the data will be lost if your server crashes. Clearly, memory isn t intended for permanent data storage, so don t rely on memory-based caching as your only data storage. Without a doubt, none of the Django caching backends should be used for permanent storage   they re all intended to be solutions for caching, not storage   but we point this out here because memory-based caching is particularly temporary.Django can store its cached data in your database. This works best if you ve got a fast, well-indexed database server.To use a database table as your cache backend:In this example, the cache table s name is my_cache_table:Before using the database cache, you must create the cache table with this command:This creates a table in your database that is in the proper format that Django s database-cache system expects. The name of the table is taken from LOCATION.If you are using multiple database caches, createcachetable creates one table for each cache.If you are using multiple databases, createcachetable observes the allow_migrate() method of your database routers (see below).Like migrate, createcachetable won t touch an existing table. It will only create missing tables.To print the SQL that would be run, rather than run it, use the createcachetable --dry-run option.If you use database caching with multiple databases, you ll also need to set up routing instructions for your database cache table. For the purposes of routing, the database cache table appears as a model named CacheEntry, in an application named django_cache. This model won t appear in the models cache, but the model details can be used for routing purposes.For example, the following router would direct all cache read operations to cache_replica, and all write operations to cache_primary. The cache table will only be synchronized onto cache_primary:If you don t specify routing directions for the database cache model, the cache backend will use the default database.Of course, if you don t use the database cache backend, you don t need to worry about providing routing instructions for the database cache model.The file-based backend serializes and stores each cache value as a separate file. To use this backend set BACKEND to \"django.core.cache.backends.filebased.FileBasedCache\" and LOCATION to a suitable directory. For example, to store cached data in /var/tmp/django_cache, use this setting:If you re on Windows, put the drive letter at the beginning of the path, like this:The directory path should be absolute   that is, it should start at the root of your filesystem. It doesn t matter whether you put a slash at the end of the setting.Make sure the directory pointed-to by this setting exists and is readable and writable by the system user under which your Web server runs. Continuing the above example, if your server runs as the user apache, make sure the directory /var/tmp/django_cache exists and is readable and writable by the user apache.This is the default cache if another is not specified in your settings file. If you want the speed advantages of in-memory caching but don t have the capability of running Memcached, consider the local-memory cache backend. This cache is per-process (see below) and thread-safe. To use it, set BACKEND to \"django.core.cache.backends.locmem.LocMemCache\". For example:The cache LOCATION is used to identify individual memory stores. If you only have one locmem cache, you can omit the LOCATION; however, if you have more than one local memory cache, you will need to assign a name to at least one of them in order to keep them separate.The cache uses a least-recently-used (LRU) culling strategy.Note that each process will have its own private cache instance, which means no cross-process caching is possible. This obviously also means the local memory cache isn t particularly memory-efficient, so it s probably not a good choice for production environments. It s nice for development.Older versions use a pseudo-random culling strategy rather than LRU.Finally, Django comes with a  dummy  cache that doesn t actually cache   it just implements the cache interface without doing anything.This is useful if you have a production site that uses heavy-duty caching in various places but a development/test environment where you don t want to cache and don t want to have to change your code to special-case the latter. To activate dummy caching, set BACKEND like so:While Django includes support for a number of cache backends out-of-the-box, sometimes you might want to use a customized cache backend. To use an external cache backend with Django, use the Python import path as the BACKEND of the CACHES setting, like so:If you re building your own backend, you can use the standard cache backends as reference implementations. You ll find the code in the django/core/cache/backends/ directory of the Django source.Note: Without a really compelling reason, such as a host that doesn t support them, you should stick to the cache backends included with Django. They ve been well-tested and are easy to use.Each cache backend can be given additional arguments to control caching behavior. These arguments are provided as additional keys in the CACHES setting. Valid arguments are as follows:TIMEOUT: The default timeout, in seconds, to use for the cache. This argument defaults to 300 seconds (5 minutes). You can set TIMEOUT to None so that, by default, cache keys never expire. A value of 0 causes keys to immediately expire (effectively  don t cache ).OPTIONS: Any options that should be passed to the cache backend. The list of valid options will vary with each backend, and cache backends backed by a third-party library will pass their options directly to the underlying cache library.Cache backends that implement their own culling strategy (i.e., the locmem, filesystem and database backends) will honor the following options:MAX_ENTRIES: The maximum number of entries allowed in the cache before old values are deleted. This argument defaults to 300.CULL_FREQUENCY: The fraction of entries that are culled when MAX_ENTRIES is reached. The actual ratio is 1 / CULL_FREQUENCY, so set CULL_FREQUENCY to 2 to cull half the entries when MAX_ENTRIES is reached. This argument should be an integer and defaults to 3.A value of 0 for CULL_FREQUENCY means that the entire cache will be dumped when MAX_ENTRIES is reached. On some backends (database in particular) this makes culling much faster at the expense of more cache misses.Memcached backends pass the contents of OPTIONS as keyword arguments to the client constructors, allowing for more advanced control of client behavior. For example usage, see below.KEY_PREFIX: A string that will be automatically included (prepended by default) to all cache keys used by the Django server.See the cache documentation for more information.VERSION: The default version number for cache keys generated by the Django server.See the cache documentation for more information.KEY_FUNCTION A string containing a dotted path to a function that defines how to compose a prefix, version and key into a final cache key.See the cache documentation for more information.In this example, a filesystem backend is being configured with a timeout of 60 seconds, and a maximum capacity of 1000 items:Here s an example configuration for a python-memcached based backend with an object size limit of 2MB:Here s an example configuration for a pylibmc based backend that enables the binary protocol, SASL authentication, and the ketama behavior mode:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/cache/#the-per-site-cache", "para": "Once the cache is set up, the simplest way to use caching is to cache your entire site. You ll need to add 'django.middleware.cache.UpdateCacheMiddleware' and 'django.middleware.cache.FetchFromCacheMiddleware' to your MIDDLEWARE setting, as in this example:NoteNo, that s not a typo: the  update  middleware must be first in the list, and the  fetch  middleware must be last. The details are a bit obscure, but see Order of MIDDLEWARE below if you d like the full story.Then, add the following required settings to your Django settings file:FetchFromCacheMiddleware caches GET and HEAD responses with status 200, where the request and response headers allow. Responses to requests for the same URL with different query parameters are considered to be unique pages and are cached separately. This middleware expects that a HEAD request is answered with the same response headers as the corresponding GET request; in which case it can return a cached GET response for HEAD request.Additionally, UpdateCacheMiddleware automatically sets a few headers in each HttpResponse:See Middleware for more on middleware.If a view sets its own cache expiry time (i.e. it has a max-age section in its Cache-Control header) then the page will be cached until the expiry time, rather than CACHE_MIDDLEWARE_SECONDS. Using the decorators in django.views.decorators.cache you can easily set a view s expiry time (using the cache_control() decorator) or disable caching for a view (using the never_cache() decorator). See the using other headers section for more on these decorators.If USE_I18N is set to True then the generated cache key will include the name of the active language   see also How Django discovers language preference). This allows you to easily cache multilingual sites without having to create the cache key yourself.Cache keys also include the active language when USE_L10N is set to True and the current time zone when USE_TZ is set to True."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/cache/#the-per-view-cache", "para": "A more granular way to use the caching framework is by caching the output of individual views. django.views.decorators.cache defines a cache_page decorator that will automatically cache the view s response for you. It s easy to use:cache_page takes a single argument: the cache timeout, in seconds. In the above example, the result of the my_view() view will be cached for 15 minutes. (Note that we ve written it as 60 * 15 for the purpose of readability. 60 * 15 will be evaluated to 900   that is, 15 minutes multiplied by 60 seconds per minute.)The per-view cache, like the per-site cache, is keyed off of the URL. If multiple URLs point at the same view, each URL will be cached separately. Continuing the my_view example, if your URLconf looks like this:then requests to /foo/1/ and /foo/23/ will be cached separately, as you may expect. But once a particular URL (e.g., /foo/23/) has been requested, subsequent requests to that URL will use the cache.cache_page can also take an optional keyword argument, cache, which directs the decorator to use a specific cache (from your CACHES setting) when caching view results. By default, the default cache will be used, but you can specify any cache you want:You can also override the cache prefix on a per-view basis. cache_page takes an optional keyword argument, key_prefix, which works in the same way as the CACHE_MIDDLEWARE_KEY_PREFIX setting for the middleware.  It can be used like this:The key_prefix and cache arguments may be specified together. The key_prefix argument and the KEY_PREFIX specified under CACHES will be concatenated.The examples in the previous section have hard-coded the fact that the view is cached, because cache_page alters the my_view function in place. This approach couples your view to the cache system, which is not ideal for several reasons. For instance, you might want to reuse the view functions on another, cache-less site, or you might want to distribute the views to people who might want to use them without being cached. The solution to these problems is to specify the per-view cache in the URLconf rather than next to the view functions themselves.Doing so is easy: simply wrap the view function with cache_page when you refer to it in the URLconf. Here s the old URLconf from earlier:Here s the same thing, with my_view wrapped in cache_page:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/cache/#template-fragment-caching", "para": "If you re after even more control, you can also cache template fragments using the cache template tag. To give your template access to this tag, put {% load cache %} near the top of your template.The {% cache %} template tag caches the contents of the block for a given amount of time. It takes at least two arguments: the cache timeout, in seconds, and the name to give the cache fragment. The fragment is cached forever if timeout is None. The name will be taken as is, do not use a variable. For example:Sometimes you might want to cache multiple copies of a fragment depending on some dynamic data that appears inside the fragment. For example, you might want a separate cached copy of the sidebar used in the previous example for every user of your site. Do this by passing one or more additional arguments, which may be variables with or without filters, to the {% cache %} template tag to uniquely identify the cache fragment:If USE_I18N is set to True the per-site middleware cache will respect the active language. For the cache template tag you could use one of the translation-specific variables available in templates to achieve the same result:The cache timeout can be a template variable, as long as the template variable resolves to an integer value. For example, if the template variable my_timeout is set to the value 600, then the following two examples are equivalent:This feature is useful in avoiding repetition in templates. You can set the timeout in a variable, in one place, and just reuse that value.By default, the cache tag will try to use the cache called  template_fragments . If no such cache exists, it will fall back to using the default cache. You may select an alternate cache backend to use with the using keyword argument, which must be the last argument to the tag.It is considered an error to specify a cache name that is not configured.If you want to obtain the cache key used for a cached fragment, you can use make_template_fragment_key. fragment_name is the same as second argument to the cache template tag; vary_on is a list of all additional arguments passed to the tag. This function can be useful for invalidating or overwriting a cached item, for example:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/cache/#the-low-level-cache-api", "para": "Sometimes, caching an entire rendered page doesn t gain you very much and is, in fact, inconvenient overkill.Perhaps, for instance, your site includes a view whose results depend on several expensive queries, the results of which change at different intervals. In this case, it would not be ideal to use the full-page caching that the per-site or per-view cache strategies offer, because you wouldn t want to cache the entire result (since some of the data changes often), but you d still want to cache the results that rarely change.For cases like this, Django exposes a simple, low-level cache API. You can use this API to store objects in the cache with any level of granularity you like. You can cache any Python object that can be pickled safely: strings, dictionaries, lists of model objects, and so forth. (Most common Python objects can be pickled; refer to the Python documentation for more information about pickling.)You can access the caches configured in the CACHES setting through a dict-like object: django.core.cache.caches. Repeated requests for the same alias in the same thread will return the same object.If the named key does not exist, InvalidCacheBackendError will be raised.To provide thread-safety, a different instance of the cache backend will be returned for each thread.As a shortcut, the default cache is available as django.core.cache.cache:This object is equivalent to caches['default'].The basic interface is:key should be a str, and value can be any picklable Python object.The timeout argument is optional and defaults to the timeout argument of the appropriate backend in the CACHES setting (explained above). It s the number of seconds the value should be stored in the cache. Passing in None for timeout will cache the value forever. A timeout of 0 won t cache the value.If the object doesn t exist in the cache, cache.get() returns None:We advise against storing the literal value None in the cache, because you won t be able to distinguish between your stored None value and a cache miss signified by a return value of None.cache.get() can take a default argument. This specifies which value to return if the object doesn t exist in the cache:To add a key only if it doesn t already exist, use the add() method. It takes the same parameters as set(), but it will not attempt to update the cache if the key specified is already present:If you need to know whether add() stored a value in the cache, you can check the return value. It will return True if the value was stored, False otherwise.If you want to get a key s value or set a value if the key isn t in the cache, there is the get_or_set() method. It takes the same parameters as get() but the default is set as the new cache value for that key, rather than simply returned:You can also pass any callable as a default value:There s also a get_many() interface that only hits the cache once. get_many() returns a dictionary with all the keys you asked for that actually exist in the cache (and haven t expired):To set multiple values more efficiently, use set_many() to pass a dictionary of key-value pairs:Like cache.set(), set_many() takes an optional timeout parameter.On supported backends (memcached), set_many() returns a list of keys that failed to be inserted.You can delete keys explicitly with delete(). This is an easy way of clearing the cache for a particular object:If you want to clear a bunch of keys at once, delete_many() can take a list of keys to be cleared:Finally, if you want to delete all the keys in the cache, use cache.clear().  Be careful with this; clear() will remove everything from the cache, not just the keys set by your application.cache.touch() sets a new expiration for a key. For example, to update a key to expire 10 seconds from now:Like other methods, the timeout argument is optional and defaults to the TIMEOUT option of the appropriate backend in the CACHES setting.touch() returns True if the key was successfully touched, False otherwise.You can also increment or decrement a key that already exists using the incr() or decr() methods, respectively. By default, the existing cache value will be incremented or decremented by 1. Other increment/decrement values can be specified by providing an argument to the increment/decrement call. A ValueError will be raised if you attempt to increment or decrement a nonexistent cache key.:Noteincr()/decr() methods are not guaranteed to be atomic. On those backends that support atomic increment/decrement (most notably, the memcached backend), increment and decrement operations will be atomic. However, if the backend doesn t natively provide an increment/decrement operation, it will be implemented using a two-step retrieve/update.You can close the connection to your cache with close() if implemented by the cache backend.NoteFor caches that don t implement close methods it is a no-op.If you are sharing a cache instance between servers, or between your production and development environments, it s possible for data cached by one server to be used by another server. If the format of cached data is different between servers, this can lead to some very hard to diagnose problems.To prevent this, Django provides the ability to prefix all cache keys used by a server. When a particular cache key is saved or retrieved, Django will automatically prefix the cache key with the value of the KEY_PREFIX cache setting.By ensuring each Django instance has a different KEY_PREFIX, you can ensure that there will be no collisions in cache values.When you change running code that uses cached values, you may need to purge any existing cached values. The easiest way to do this is to flush the entire cache, but this can lead to the loss of cache values that are still valid and useful.Django provides a better way to target individual cache values. Django s cache framework has a system-wide version identifier, specified using the VERSION cache setting. The value of this setting is automatically combined with the cache prefix and the user-provided cache key to obtain the final cache key.By default, any key request will automatically include the site default cache key version. However, the primitive cache functions all include a version argument, so you can specify a particular cache key version to set or get. For example:The version of a specific key can be incremented and decremented using the incr_version() and decr_version() methods. This enables specific keys to be bumped to a new version, leaving other keys unaffected. Continuing our previous example:As described in the previous two sections, the cache key provided by a user is not used verbatim   it is combined with the cache prefix and key version to provide a final cache key. By default, the three parts are joined using colons to produce a final string:If you want to combine the parts in different ways, or apply other processing to the final key (e.g., taking a hash digest of the key parts), you can provide a custom key function.The KEY_FUNCTION cache setting specifies a dotted-path to a function matching the prototype of make_key() above. If provided, this custom key function will be used instead of the default key combining function.Memcached, the most commonly-used production cache backend, does not allow cache keys longer than 250 characters or containing whitespace or control characters, and using such keys will cause an exception. To encourage cache-portable code and minimize unpleasant surprises, the other built-in cache backends issue a warning (django.core.cache.backends.base.CacheKeyWarning) if a key is used that would cause an error on memcached.If you are using a production backend that can accept a wider range of keys (a custom backend, or one of the non-memcached built-in backends), and want to use this wider range without warnings, you can silence CacheKeyWarning with this code in the management module of one of your INSTALLED_APPS:If you want to instead provide custom key validation logic for one of the built-in backends, you can subclass it, override just the validate_key method, and follow the instructions for using a custom cache backend. For instance, to do this for the locmem backend, put this code in a module: and use the dotted Python path to this class in the BACKEND portion of your CACHES setting."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/cache/#downstream-caches", "para": "So far, this document has focused on caching your own data. But another type of caching is relevant to Web development, too: caching performed by  downstream  caches. These are systems that cache pages for users even before the request reaches your website.Here are a few examples of downstream caches:Downstream caching is a nice efficiency boost, but there s a danger to it: Many Web pages  contents differ based on authentication and a host of other variables, and cache systems that blindly save pages based purely on URLs could expose incorrect or sensitive data to subsequent visitors to those pages.For example, say you operate a Web email system, and the contents of the  inbox  page obviously depend on which user is logged in. If an ISP blindly cached your site, then the first user who logged in through that ISP would have their user-specific inbox page cached for subsequent visitors to the site. That s not cool.Fortunately, HTTP provides a solution to this problem. A number of HTTP headers exist to instruct downstream caches to differ their cache contents depending on designated variables, and to tell caching mechanisms not to cache particular pages. We ll look at some of these headers in the sections that follow."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/cache/#using-vary-headers", "para": "The Vary header defines which request headers a cache mechanism should take into account when building its cache key. For example, if the contents of a Web page depend on a user s language preference, the page is said to  vary on language. By default, Django s cache system creates its cache keys using the requested fully-qualified URL   e.g., \"https://www.example.com/stories/2005/?order_by=author\". This means every request to that URL will use the same cached version, regardless of user-agent differences such as cookies or language preferences. However, if this page produces different content based on some difference in request headers   such as a cookie, or a language, or a user-agent   you ll need to use the Vary header to tell caching mechanisms that the page output depends on those things.To do this in Django, use the convenient django.views.decorators.vary.vary_on_headers() view decorator, like so:In this case, a caching mechanism (such as Django s own cache middleware) will cache a separate version of the page for each unique user-agent.The advantage to using the vary_on_headers decorator rather than manually setting the Vary header (using something like response['Vary'] = 'user-agent') is that the decorator adds to the Vary header (which may already exist), rather than setting it from scratch and potentially overriding anything that was already in there.You can pass multiple headers to vary_on_headers():This tells downstream caches to vary on both, which means each combination of user-agent and cookie will get its own cache value. For example, a request with the user-agent Mozilla and the cookie value foo=bar will be considered different from a request with the user-agent Mozilla and the cookie value foo=ham.Because varying on cookie is so common, there s a django.views.decorators.vary.vary_on_cookie() decorator. These two views are equivalent:The headers you pass to vary_on_headers are not case sensitive; \"User-Agent\" is the same thing as \"user-agent\".You can also use a helper function, django.utils.cache.patch_vary_headers(), directly. This function sets, or adds to, the Vary header. For example:patch_vary_headers takes an HttpResponse instance as its first argument and a list/tuple of case-insensitive header names as its second argument.For more on Vary headers, see the official Vary spec."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/cache/#controlling-cache-using-other-headers", "para": "Other problems with caching are the privacy of data and the question of where data should be stored in a cascade of caches.A user usually faces two kinds of caches: their own browser cache (a private cache) and their provider s cache (a public cache). A public cache is used by multiple users and controlled by someone else. This poses problems with sensitive data you don t want, say, your bank account number stored in a public cache. So Web applications need a way to tell caches which data is private and which is public.The solution is to indicate a page s cache should be  private.  To do this in Django, use the cache_control() view decorator. Example:This decorator takes care of sending out the appropriate HTTP header behind the scenes.Note that the cache control settings  private  and  public  are mutually exclusive. The decorator ensures that the  public  directive is removed if  private  should be set (and vice versa). An example use of the two directives would be a blog site that offers both private and public entries. Public entries may be cached on any shared cache. The following code uses patch_cache_control(), the manual way to modify the cache control header (it is internally called by the cache_control() decorator):You can control downstream caches in other ways as well (see RFC 7234 for details on HTTP caching). For example, even if you don t use Django s server-side cache framework, you can still tell clients to cache a view for a certain amount of time with the max-age directive:(If you do use the caching middleware, it already sets the max-age with the value of the CACHE_MIDDLEWARE_SECONDS setting. In that case, the custom max_age from the cache_control() decorator will take precedence, and the header values will be merged correctly.)Any valid Cache-Control response directive is valid in cache_control(). Here are some more examples:The full list of known directives can be found in the IANA registry (note that not all of them apply to responses).If you want to use headers to disable caching altogether, never_cache() is a view decorator that adds headers to ensure the response won t be cached by browsers or other caches. Example:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/cache/#order-of-middleware", "para": "If you use caching middleware, it s important to put each half in the right place within the MIDDLEWARE setting. That s because the cache middleware needs to know which headers by which to vary the cache storage. Middleware always adds something to the Vary response header when it can.UpdateCacheMiddleware runs during the response phase, where middleware is run in reverse order, so an item at the top of the list runs last during the response phase. Thus, you need to make sure that UpdateCacheMiddleware appears before any other middleware that might add something to the Vary header. The following middleware modules do so:FetchFromCacheMiddleware, on the other hand, runs during the request phase, where middleware is applied first-to-last, so an item at the top of the list runs first during the request phase. The FetchFromCacheMiddleware also needs to run after other middleware updates the Vary header, so FetchFromCacheMiddleware must be after any item that does so."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/logging/#a-quick-logging-primer", "para": "Django uses Python s builtin logging module to perform system logging. The usage of this module is discussed in detail in Python s own documentation. However, if you ve never used Python s logging framework (or even if you have), here s a quick primer.A Python logging configuration consists of four parts:A logger is the entry point into the logging system. Each logger is a named bucket to which messages can be written for processing.A logger is configured to have a log level. This log level describes the severity of the messages that the logger will handle. Python defines the following log levels:Each message that is written to the logger is a Log Record. Each log record also has a log level indicating the severity of that specific message. A log record can also contain useful metadata that describes the event that is being logged. This can include details such as a stack trace or an error code.When a message is given to the logger, the log level of the message is compared to the log level of the logger. If the log level of the message meets or exceeds the log level of the logger itself, the message will undergo further processing. If it doesn t, the message will be ignored.Once a logger has determined that a message needs to be processed, it is passed to a Handler.The handler is the engine that determines what happens to each message in a logger. It describes a particular logging behavior, such as writing a message to the screen, to a file, or to a network socket.Like loggers, handlers also have a log level. If the log level of a log record doesn t meet or exceed the level of the handler, the handler will ignore the message.A logger can have multiple handlers, and each handler can have a different log level. In this way, it is possible to provide different forms of notification depending on the importance of a message. For example, you could install one handler that forwards ERROR and CRITICAL messages to a paging service, while a second handler logs all messages (including ERROR and CRITICAL messages) to a file for later analysis.A filter is used to provide additional control over which log records are passed from logger to handler.By default, any log message that meets log level requirements will be handled. However, by installing a filter, you can place additional criteria on the logging process. For example, you could install a filter that only allows ERROR messages from a particular source to be emitted.Filters can also be used to modify the logging record prior to being emitted. For example, you could write a filter that downgrades ERROR log records to WARNING records if a particular set of criteria are met.Filters can be installed on loggers or on handlers; multiple filters can be used in a chain to perform multiple filtering actions.Ultimately, a log record needs to be rendered as text. Formatters describe the exact format of that text. A formatter usually consists of a Python formatting string containing LogRecord attributes; however, you can also write custom formatters to implement specific formatting behavior."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/logging/#using-logging", "para": "Once you have configured your loggers, handlers, filters and formatters, you need to place logging calls into your code. Using the logging framework is very simple. Here s an example:And that s it! Every time the bad_mojo condition is activated, an error log record will be written.The call to logging.getLogger() obtains (creating, if necessary) an instance of a logger. The logger instance is identified by a name. This name is used to identify the logger for configuration purposes.By convention, the logger name is usually __name__, the name of the Python module that contains the logger. This allows you to filter and handle logging calls on a per-module basis. However, if you have some other way of organizing your logging messages, you can provide any dot-separated name to identify your logger:The dotted paths of logger names define a hierarchy. The project.interesting logger is considered to be a parent of the project.interesting.stuff logger; the project logger is a parent of the project.interesting logger.Why is the hierarchy important? Well, because loggers can be set to propagate their logging calls to their parents. In this way, you can define a single set of handlers at the root of a logger tree, and capture all logging calls in the subtree of loggers. A logging handler defined in the project namespace will catch all logging messages issued on the project.interesting and project.interesting.stuff loggers.This propagation can be controlled on a per-logger basis. If you don t want a particular logger to propagate to its parents, you can turn off this behavior.The logger instance contains an entry method for each of the default log levels:There are two other logging calls available:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/logging/#configuring-logging", "para": "Of course, it isn t enough to just put logging calls into your code. You also need to configure the loggers, handlers, filters and formatters to ensure that logging output is output in a useful way.Python s logging library provides several techniques to configure logging, ranging from a programmatic interface to configuration files. By default, Django uses the dictConfig format.In order to configure logging, you use LOGGING to define a dictionary of logging settings. These settings describes the loggers, handlers, filters and formatters that you want in your logging setup, and the log levels and other properties that you want those components to have.By default, the LOGGING setting is merged with Django s default logging configuration using the following scheme.If the disable_existing_loggers key in the LOGGING dictConfig is set to True (which is the default) then all loggers from the default configuration will be disabled. Disabled loggers are not the same as removed; the logger will still exist, but will silently discard anything logged to it, not even propagating entries to a parent logger. Thus you should be very careful using 'disable_existing_loggers': True; it s probably not what you want. Instead, you can set disable_existing_loggers to False and redefine some or all of the default loggers; or you can set LOGGING_CONFIG to None and handle logging config yourself.Logging is configured as part of the general Django setup() function. Therefore, you can be certain that loggers are always ready for use in your project code.The full documentation for dictConfig format is the best source of information about logging configuration dictionaries. However, to give you a taste of what is possible, here are several examples.First, here s a simple configuration which writes all logging from the django logger to a local file:If you use this example, be sure to change the 'filename' path to a location that s writable by the user that s running the Django application.Second, here s an example of how to make the logging system print Django s logging to the console. It may be useful during local development.By default, this config only sends messages of level INFO or higher to the console (same as Django s default logging config, except that the default only displays log records when DEBUG=True). Django does not log many such messages. With this config, however, you can also set the environment variable DJANGO_LOG_LEVEL=DEBUG to see all of Django s debug logging which is very verbose as it includes all database queries:Finally, here s an example of a fairly complex logging setup:This logging configuration does the following things:Identifies the configuration as being in  dictConfig version 1  format. At present, this is the only dictConfig format version.Defines two formatters:simple, that just outputs the log level name (e.g., DEBUG) and the log message.The format string is a normal Python formatting string describing the details that are to be output on each logging line. The full list of detail that can be output can be found in Formatter Objects.verbose, that outputs the log level name, the log message, plus the time, process, thread and module that generate the log message.Defines two filters:Defines two handlers:Configures three loggers:If you don t want to use Python s dictConfig format to configure your logger, you can specify your own configuration scheme.The LOGGING_CONFIG setting defines the callable that will be used to configure Django s loggers. By default, it points at Python s logging.config.dictConfig() function. However, if you want to use a different configuration process, you can use any other callable that takes a single argument. The contents of LOGGING will be provided as the value of that argument when logging is configured.If you don t want to configure logging at all (or you want to manually configure logging using your own approach), you can set LOGGING_CONFIG to None. This will disable the configuration process for Django s default logging. Here s an example that disables Django s logging configuration and then manually configures logging:Setting LOGGING_CONFIG to None only means that the automatic configuration process is disabled, not logging itself. If you disable the configuration process, Django will still make logging calls, falling back to whatever default logging behavior is defined."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/logging/#django-s-logging-extensions", "para": "Django provides a number of utilities to handle the unique requirements of logging in Web server environment.Django provides several built-in loggers.The catch-all logger for messages in the  django hierarchy. No messages are posted using this name but instead using one of the loggers below.Log messages related to the handling of requests. 5XX responses are raised as ERROR messages; 4XX responses are raised as WARNING messages. Requests that are logged to the django.security logger aren t logged to django.request.Messages to this logger have the following extra context:Log messages related to the handling of requests received by the server invoked by the runserver command. HTTP 5XX responses are logged as ERROR messages, 4XX responses are logged as WARNING messages, and everything else is logged as INFO.Messages to this logger have the following extra context:Log messages related to the rendering of templates.Messages relating to the interaction of code with the database. For example, every application-level SQL statement executed by a request is logged at the DEBUG level to this logger.Messages to this logger have the following extra context:For performance reasons, SQL logging is only enabled when settings.DEBUG is set to True, regardless of the logging level or handlers that are installed.This logging does not include framework-level initialization (e.g. SET TIMEZONE) or transaction management queries (e.g. BEGIN, COMMIT, and ROLLBACK). Turn on query logging in your database if you wish to view all database queries.The security loggers will receive messages on any occurrence of SuspiciousOperation and other security-related errors. There is a sub-logger for each subtype of security error, including all SuspiciousOperations. The level of the log event depends on where the exception is handled.  Most occurrences are logged as a warning, while any SuspiciousOperation that reaches the WSGI handler will be logged as an error. For example, when an HTTP Host header is included in a request from a client that does not match ALLOWED_HOSTS, Django will return a 400 response, and an error message will be logged to the django.security.DisallowedHost logger.These log events will reach the django logger by default, which mails error events to admins when DEBUG=False. Requests resulting in a 400 response due to a SuspiciousOperation will not be logged to the django.request logger, but only to the django.security logger.To silence a particular type of SuspiciousOperation, you can override that specific logger following this example:Other django.security loggers not based on SuspiciousOperation are:Logs the SQL queries that are executed during schema changes to the database by the migrations framework. Note that it won t log the queries executed by RunPython. Messages to this logger have params and sql in their extra context (but unlike django.db.backends, not duration). The values have the same meaning as explained in django.db.backends.Django provides one log handler in addition to those provided by the Python logging module.This handler sends an email to the site ADMINS for each log message it receives.If the log record contains a request attribute, the full details of the request will be included in the email. The email subject will include the phrase  internal IP  if the client s IP address is in the INTERNAL_IPS setting; if not, it will include  EXTERNAL IP .If the log record contains stack trace information, that stack trace will be included in the email.The include_html argument of AdminEmailHandler is used to control whether the traceback email includes an HTML attachment containing the full content of the debug Web page that would have been produced if DEBUG were True. To set this value in your configuration, include it in the handler definition for django.utils.log.AdminEmailHandler, like this:Note that this HTML version of the email contains a full traceback, with names and values of local variables at each level of the stack, plus the values of your Django settings. This information is potentially very sensitive, and you may not want to send it over email. Consider using something such as Sentry to get the best of both worlds   the rich information of full tracebacks plus the security of not sending the information over email. You may also explicitly designate certain sensitive information to be filtered out of error reports   learn more on Filtering error reports.By setting the email_backend argument of AdminEmailHandler, the email backend that is being used by the handler can be overridden, like this:By default, an instance of the email backend specified in EMAIL_BACKEND will be used.Sends emails to admin users. To customize this behavior, you can subclass the AdminEmailHandler class and override this method.Django provides some log filters in addition to those provided by the Python logging module.This filter accepts a callback function (which should accept a single argument, the record to be logged), and calls it for each record that passes through the filter. Handling of that record will not proceed if the callback returns False.For instance, to filter out UnreadablePostError (raised when a user cancels an upload) from the admin emails, you would create a filter function:and then add it to your logging config:This filter will only pass on records when settings.DEBUG is False.This filter is used as follows in the default LOGGING configuration to ensure that the AdminEmailHandler only sends error emails to admins when DEBUG is False:This filter is similar to RequireDebugFalse, except that records are passed only when DEBUG is True."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/logging/#django-s-default-logging-configuration", "para": "By default, Django configures the following logging:When DEBUG is True:When DEBUG is False:Independent of the value of DEBUG:All loggers except django.server propagate logging to their parents, up to the root django logger. The console and mail_admins handlers are attached to the root logger to provide the behavior described above.See also Configuring logging to learn how you can complement or replace this default logging configuration."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#quick-example", "para": "In two lines:Mail is sent using the SMTP host and port specified in the EMAIL_HOST and EMAIL_PORT settings. The EMAIL_HOST_USER and EMAIL_HOST_PASSWORD settings, if set, are used to authenticate to the SMTP server, and the EMAIL_USE_TLS and EMAIL_USE_SSL settings control whether a secure connection is used.NoteThe character set of email sent with django.core.mail will be set to the value of your DEFAULT_CHARSET setting."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#send-mail", "para": "The simplest way to send email is using django.core.mail.send_mail().The subject, message, from_email and recipient_list parameters are required.The return value will be the number of successfully delivered messages (which can be 0 or 1 since it can only send one message)."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#send-mass-mail", "para": "django.core.mail.send_mass_mail() is intended to handle mass emailing.datatuple is a tuple in which each element is in this format:fail_silently, auth_user and auth_password have the same functions as in send_mail().Each separate element of datatuple results in a separate email message. As in send_mail(), recipients in the same recipient_list will all see the other addresses in the email messages   To:  field.For example, the following code would send two different messages to two different sets of recipients; however, only one connection to the mail server would be opened:The return value will be the number of successfully delivered messages.The main difference between send_mass_mail() and send_mail() is that send_mail() opens a connection to the mail server each time it s executed, while send_mass_mail() uses a single connection for all of its messages. This makes send_mass_mail() slightly more efficient."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#mail-admins", "para": "django.core.mail.mail_admins() is a shortcut for sending an email to the site admins, as defined in the ADMINS setting.mail_admins() prefixes the subject with the value of the EMAIL_SUBJECT_PREFIX setting, which is \"[Django] \" by default.The  From:  header of the email will be the value of the SERVER_EMAIL setting.This method exists for convenience and readability.If html_message is provided, the resulting email will be a multipart/alternative email with message as the text/plain content type and html_message as the text/html content type."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#mail-managers", "para": "django.core.mail.mail_managers() is just like mail_admins(), except it sends an email to the site managers, as defined in the MANAGERS setting."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#examples", "para": "This sends a single email to john@example.com and jane@example.com, with them both appearing in the  To: :This sends a message to john@example.com and jane@example.com, with them both receiving a separate email:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#preventing-header-injection", "para": "Header injection is a security exploit in which an attacker inserts extra email headers to control the  To:  and  From:  in email messages that your scripts generate.The Django email functions outlined above all protect against header injection by forbidding newlines in header values. If any subject, from_email or recipient_list contains a newline (in either Unix, Windows or Mac style), the email function (e.g. send_mail()) will raise django.core.mail.BadHeaderError (a subclass of ValueError) and, hence, will not send the email. It s your responsibility to validate all data before passing it to the email functions.If a message contains headers at the start of the string, the headers will simply be printed as the first bit of the email message.Here s an example view that takes a subject, message and from_email from the request s POST data, sends that to admin@example.com and redirects to  /contact/thanks/  when it s done:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#the-emailmessage-class", "para": "Django s send_mail() and send_mass_mail() functions are actually thin wrappers that make use of the EmailMessage class.Not all features of the EmailMessage class are available through the send_mail() and related wrapper functions. If you wish to use advanced features, such as BCC ed recipients, file attachments, or multi-part email, you ll need to create EmailMessage instances directly.NoteThis is a design feature. send_mail() and related functions were originally the only interface Django provided. However, the list of parameters they accepted was slowly growing over time. It made sense to move to a more object-oriented design for email messages and retain the original functions only for backwards compatibility.EmailMessage is responsible for creating the email message itself. The email backend is then responsible for sending the email.For convenience, EmailMessage provides a simple send() method for sending a single email. If you need to send multiple messages, the email backend API provides an alternative.The EmailMessage class is initialized with the following parameters (in the given order, if positional arguments are used). All parameters are optional and can be set at any time prior to calling the send() method.For example:The class has the following methods:send(fail_silently=False) sends the message. If a connection was specified when the email was constructed, that connection will be used. Otherwise, an instance of the default backend will be instantiated and used. If the keyword argument fail_silently is True, exceptions raised while sending the message will be quashed. An empty list of recipients will not raise an exception.message() constructs a django.core.mail.SafeMIMEText object (a subclass of Python s MIMEText class) or a django.core.mail.SafeMIMEMultipart object holding the message to be sent. If you ever need to extend the EmailMessage class, you ll probably want to override this method to put the content you want into the MIME object.recipients() returns a list of all the recipients of the message, whether they re recorded in the to, cc or bcc attributes. This is another method you might need to override when subclassing, because the SMTP server needs to be told the full list of recipients when the message is sent. If you add another way to specify recipients in your class, they need to be returned from this method as well.attach() creates a new file attachment and adds it to the message. There are two ways to call attach():You can pass it a single argument that is a MIMEBase instance. This will be inserted directly into the resulting message.Alternatively, you can pass attach() three arguments: filename, content and mimetype. filename is the name of the file attachment as it will appear in the email, content is the data that will be contained inside the attachment and mimetype is the optional MIME type for the attachment. If you omit mimetype, the MIME content type will be guessed from the filename of the attachment.For example:If you specify a mimetype of message/rfc822, it will also accept django.core.mail.EmailMessage and email.message.Message.For a mimetype starting with text/, content is expected to be a string. Binary data will be decoded using UTF-8, and if that fails, the MIME type will be changed to application/octet-stream and the data will be attached unchanged.In addition, message/rfc822 attachments will no longer be base64-encoded in violation of RFC 2046#section-5.2.1, which can cause issues with displaying the attachments in Evolution and Thunderbird.attach_file() creates a new attachment using a file from your filesystem. Call it with the path of the file to attach and, optionally, the MIME type to use for the attachment. If the MIME type is omitted, it will be guessed from the filename. The simplest use would be:For MIME types starting with text/, binary data is handled as in attach().It can be useful to include multiple versions of the content in an email; the classic example is to send both text and HTML versions of a message. With Django s email library, you can do this using the EmailMultiAlternatives class. This subclass of EmailMessage has an attach_alternative() method for including extra versions of the message body in the email. All the other methods (including the class initialization) are inherited directly from EmailMessage.To send a text and HTML combination, you could write:By default, the MIME type of the body parameter in an EmailMessage is \"text/plain\". It is good practice to leave this alone, because it guarantees that any recipient will be able to read the email, regardless of their mail client. However, if you are confident that your recipients can handle an alternative content type, you can use the content_subtype attribute on the EmailMessage class to change the main content type. The major type will always be \"text\", but you can change the subtype. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#email-backends", "para": "The actual sending of an email is handled by the email backend.The email backend class has the following methods:It can also be used as a context manager, which will automatically call open() and close() as needed:The get_connection() function in django.core.mail returns an instance of the email backend that you can use.By default, a call to get_connection() will return an instance of the email backend specified in EMAIL_BACKEND. If you specify the backend argument, an instance of that backend will be instantiated.The fail_silently argument controls how the backend should handle errors. If fail_silently is True, exceptions during the email sending process will be silently ignored.All other arguments are passed directly to the constructor of the email backend.Django ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can write your own email backend.This is the default backend. Email will be sent through a SMTP server.The value for each argument is retrieved from the matching setting if the argument is None:The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings:If unspecified, the default timeout will be the one provided by socket.getdefaulttimeout(), which defaults to None (no timeout).Instead of sending out real emails the console backend just writes the emails that would be sent to the standard output. By default, the console backend writes to stdout. You can use a different stream-like object by providing the stream keyword argument when constructing the connection.To specify this backend, put the following in your settings:This backend is not intended for use in production   it is provided as a convenience that can be used during development.The file backend writes emails to a file. A new file is created for each new session that is opened on this backend. The directory to which the files are written is either taken from the EMAIL_FILE_PATH setting or from the file_path keyword when creating a connection with get_connection().To specify this backend, put the following in your settings:This backend is not intended for use in production   it is provided as a convenience that can be used during development.The 'locmem' backend stores messages in a special attribute of the django.core.mail module. The outbox attribute is created when the first message is sent. It s a list with an EmailMessage instance for each message that would be sent.To specify this backend, put the following in your settings:This backend is not intended for use in production   it is provided as a convenience that can be used during development and testing.As the name suggests the dummy backend does nothing with your messages. To specify this backend, put the following in your settings:This backend is not intended for use in production   it is provided as a convenience that can be used during development.If you need to change how emails are sent you can write your own email backend. The EMAIL_BACKEND setting in your settings file is then the Python import path for your backend class.Custom email backends should subclass BaseEmailBackend that is located in the django.core.mail.backends.base module. A custom email backend must implement the send_messages(email_messages) method. This method receives a list of EmailMessage instances and returns the number of successfully delivered messages. If your backend has any concept of a persistent session or connection, you should also implement the open() and close() methods. Refer to smtp.EmailBackend for a reference implementation.Establishing and closing an SMTP connection (or any other network connection, for that matter) is an expensive process. If you have a lot of emails to send, it makes sense to reuse an SMTP connection, rather than creating and destroying a connection every time you want to send an email.There are two ways you tell an email backend to reuse a connection.Firstly, you can use the send_messages() method. send_messages() takes a list of EmailMessage instances (or subclasses), and sends them all using a single connection.For example, if you have a function called get_notification_email() that returns a list of EmailMessage objects representing some periodic email you wish to send out, you could send these emails using a single call to send_messages:In this example, the call to send_messages() opens a connection on the backend, sends the list of messages, and then closes the connection again.The second approach is to use the open() and close() methods on the email backend to manually control the connection. send_messages() will not manually open or close the connection if it is already open, so if you manually open the connection, you can control when it is closed. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/email/#configuring-email-for-development", "para": "There are times when you do not want Django to send emails at all. For example, while developing a website, you probably don t want to send out thousands of emails   but you may want to validate that emails will be sent to the right people under the right conditions, and that those emails will contain the correct content.The easiest way to configure email for local development is to use the console email backend. This backend redirects all email to stdout, allowing you to inspect the content of mail.The file email backend can also be useful during development   this backend dumps the contents of every SMTP connection to a file that can be inspected at your leisure.Another approach is to use a  dumb  SMTP server that receives the emails locally and displays them to the terminal, but does not actually send anything. Python has a built-in way to accomplish this with a single command:This command will start a simple SMTP server listening on port 1025 of localhost. This server simply prints to standard output all email headers and the email body. You then only need to set the EMAIL_HOST and EMAIL_PORT accordingly. For a more detailed discussion of SMTP server options, see the Python documentation for the smtpd module.For information about unit-testing the sending of emails in your application, see the Email services section of the testing documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/syndication/#the-high-level-framework", "para": "The high-level feed-generating framework is supplied by the Feed class. To create a feed, write a Feed class and point to an instance of it in your URLconf.A Feed class is a Python class that represents a syndication feed. A feed can be simple (e.g., a  site news  feed, or a basic feed displaying the latest entries of a blog) or more complex (e.g., a feed displaying all the blog entries in a particular category, where the category is variable).Feed classes subclass django.contrib.syndication.views.Feed. They can live anywhere in your codebase.Instances of Feed classes are views which can be used in your URLconf.This simple example, taken from a hypothetical police beat news site describes a feed of the latest five news items:To connect a URL to this feed, put an instance of the Feed object in your URLconf. For example:Note:One thing is left to do. In an RSS feed, each <item> has a <title>, <link> and <description>. We need to tell the framework what data to put into those elements.For the contents of <title> and <description>, Django tries calling the methods item_title() and item_description() on the Feed class. They are passed a single parameter, item, which is the object itself. These are optional; by default, the string representation of the object is used for both.If you want to do any special formatting for either the title or description, Django templates can be used instead. Their paths can be specified with the title_template and description_template attributes on the Feed class. The templates are rendered for each item and are passed two template context variables:See a complex example below that uses a description template.There is also a way to pass additional information to title and description templates, if you need to supply more than the two variables mentioned before. You can provide your implementation of get_context_data method in your Feed subclass. For example:And the template:This method will be called once per each item in the list returned by items() with the following keyword arguments:The behavior of get_context_data() mimics that of generic views - you re supposed to call super() to retrieve context data from parent class, add your data and return the modified dictionary.To specify the contents of <link>, you have two options. For each item in items(), Django first tries calling the item_link() method on the Feed class. In a similar way to the title and description, it is passed it a single parameter, item. If that method doesn t exist, Django tries executing a get_absolute_url() method on that object. Both get_absolute_url() and item_link() should return the item s URL as a normal Python string. As with get_absolute_url(), the result of item_link() will be included directly in the URL, so you are responsible for doing all necessary URL quoting and conversion to ASCII inside the method itself.The framework also supports more complex feeds, via arguments.For example, a website could offer an RSS feed of recent crimes for every police beat in a city. It d be silly to create a separate Feed class for each police beat; that would violate the DRY principle and would couple data to programming logic. Instead, the syndication framework lets you access the arguments passed from your URLconf so feeds can output items based on information in the feed s URL.The police beat feeds could be accessible via URLs like this:These can be matched with a URLconf line such as:Like a view, the arguments in the URL are passed to the get_object() method along with the request object.Here s the code for these beat-specific feeds:To generate the feed s <title>, <link> and <description>, Django uses the title(), link() and description() methods. In the previous example, they were simple string class attributes, but this example illustrates that they can be either strings or methods. For each of title, link and description, Django follows this algorithm:Also note that items() also follows the same algorithm   first, it tries items(obj), then items(), then finally an items class attribute (which should be a list).We are using a template for the item descriptions. It can be very simple:However, you are free to add formatting as desired.The ExampleFeed class below gives full documentation on methods and attributes of Feed classes.By default, feeds produced in this framework use RSS 2.0.To change that, add a feed_type attribute to your Feed class, like so:Note that you set feed_type to a class object, not an instance.Currently available feed types are:To specify enclosures, such as those used in creating podcast feeds, use the item_enclosures hook or, alternatively and if you only have a single enclosure per item, the item_enclosure_url, item_enclosure_length, and item_enclosure_mime_type hooks. See the ExampleFeed class below for usage examples.Feeds created by the syndication framework automatically include the appropriate <language> tag (RSS 2.0) or xml:lang attribute (Atom). This comes directly from your LANGUAGE_CODE setting.The link method/attribute can return either an absolute path (e.g. \"/blog/\") or a URL with the fully-qualified domain and protocol (e.g. \"https://www.example.com/blog/\"). If link doesn t return the domain, the syndication framework will insert the domain of the current site, according to your SITE_ID setting.Atom feeds require a <link rel=\"self\"> that defines the feed s current location. The syndication framework populates this automatically, using the domain of the current site according to the SITE_ID setting.Some developers like to make available both Atom and RSS versions of their feeds. That s easy to do with Django: Just create a subclass of your Feed class and set the feed_type to something different. Then update your URLconf to add the extra versions.Here s a full example:NoteIn this example, the RSS feed uses a description while the Atom feed uses a subtitle. That s because Atom feeds don t provide for a feed-level  description,  but they do provide for a  subtitle. If you provide a description in your Feed class, Django will not automatically put that into the subtitle element, because a subtitle and description are not necessarily the same thing. Instead, you should define a subtitle attribute.In the above example, we simply set the Atom feed s subtitle to the RSS feed s description, because it s quite short already.And the accompanying URLconf:This example illustrates all possible attributes and methods for a Feed class:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/syndication/#the-low-level-framework", "para": "Behind the scenes, the high-level RSS framework uses a lower-level framework for generating feeds  XML. This framework lives in a single module: django/utils/feedgenerator.py.You use this framework on your own, for lower-level feed generation. You can also create custom feed generator subclasses for use with the feed_type Feed option.The feedgenerator module contains a base class:and several subclasses:Each of these three classes knows how to render a certain type of feed as XML. They share this interface:Initialize the feed with the given dictionary of metadata, which applies to the entire feed. Required keyword arguments are:There s also a bunch of other optional keywords:Any extra keyword arguments you pass to __init__ will be stored in self.feed for use with custom feed generators.All parameters should be strings, except categories, which should be a sequence of strings. Beware that some control characters are not allowed in XML documents. If your content has some of them, you might encounter a ValueError when producing the feed.Add an item to the feed with the given parameters.Required keyword arguments are:Optional keyword arguments are:Extra keyword arguments will be stored for custom feed generators.All parameters, if given, should be strings, except:For example, to create an Atom 1.0 feed and print it to standard output:If you need to produce a custom feed format, you ve got a couple of options.If the feed format is totally custom, you ll want to subclass SyndicationFeed and completely replace the write() and writeString() methods.However, if the feed format is a spin-off of RSS or Atom (i.e. GeoRSS, Apple s iTunes podcast format, etc.), you ve got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that SyndicationFeed calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class (Atom1Feed or Rss201rev2Feed) and extend these callbacks. They are:WarningIf you override any of these methods, be sure to call the superclass methods since they add the required elements for each feed format.For example, you might start implementing an iTunes RSS feed generator like so:Obviously there s a lot more work to be done for a complete custom feed class, but the above example should demonstrate the basic idea."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/pagination/#example", "para": "Give Paginator a list of objects, plus the number of items you d like to have on each page, and it gives you methods for accessing the items for each page:NoteNote that you can give Paginator a list/tuple, a Django QuerySet, or any other object with a count() or __len__() method. When determining the number of objects contained in the passed object, Paginator will first try calling count(), then fallback to using len() if the passed object has no count() method. This allows objects such as Django s QuerySet to use a more efficient count() method when available."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/pagination/#using-paginator-in-a-view", "para": "Here s a slightly more complex example using Paginator in a view to paginate a queryset. We give both the view and the accompanying template to show how you can display the results. This example assumes you have a Contacts model that has already been imported.The view function looks like this:In the template list.html, you ll want to include navigation between pages along with any interesting information from the objects themselves:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/pagination/#paginator-objects", "para": "The Paginator class has this constructor:A list, tuple, QuerySet, or other sliceable object with a count() or __len__() method. For consistent pagination, QuerySets should be ordered, e.g. with an order_by() clause or with a default ordering on the model.Performance issues paginating large QuerySetsIf you re using a QuerySet with a very large number of items, requesting high page numbers might be slow on some databases, because the resulting LIMIT/OFFSET query needs to count the number of OFFSET records which takes longer as the page number gets higher.Returns a Page object with the given 1-based index, while also handling out of range and invalid page numbers.If the page isn t a number, it returns the first page. If the page number is negative or greater than the number of pages, it returns the last page.It raises an exception (EmptyPage) only if you specify Paginator(..., allow_empty_first_page=False) and the object_list is empty.Returns a Page object with the given 1-based index. Raises InvalidPage if the given page number doesn t exist.The total number of objects, across all pages.NoteWhen determining the number of objects contained in object_list, Paginator will first try calling object_list.count(). If object_list has no count() method, then Paginator will fallback to using len(object_list). This allows objects, such as Django s QuerySet, to use a more efficient count() method when available.The total number of pages.A 1-based range iterator of page numbers, e.g. yielding [1, 2, 3, 4]."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/pagination/#invalidpage-exceptions", "para": "A base class for exceptions raised when a paginator is passed an invalid page number.The Paginator.page() method raises an exception if the requested page is invalid (i.e., not an integer) or contains no objects. Generally, it s enough to catch the InvalidPage exception, but if you d like more granularity, you can catch either of the following exceptions:Raised when page() is given a value that isn t an integer.Raised when page() is given a valid value but no objects exist on that page.Both of the exceptions are subclasses of InvalidPage, so you can handle them both with a simple except InvalidPage."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/pagination/#page-objects", "para": "You usually won t construct Page objects by hand   you ll get them using Paginator.page().A page acts like a sequence of Page.object_list when using len() or iterating it directly.Returns True if there s a next page.Returns True if there s a previous page.Returns True if there s a next or previous page.Returns the next page number. Raises InvalidPage if next page doesn t exist.Returns the previous page number. Raises InvalidPage if previous page doesn t exist.Returns the 1-based index of the first object on the page, relative to all of the objects in the paginator s list. For example, when paginating a list of 5 objects with 2 objects per page, the second page s start_index() would return 3.Returns the 1-based index of the last object on the page, relative to all of the objects in the paginator s list. For example, when paginating a list of 5 objects with 2 objects per page, the second page s end_index() would return 4.The list of objects on this page.The 1-based page number for this page.The associated Paginator object."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/messages/#enabling-messages", "para": "Messages are implemented through a middleware class and corresponding context processor.The default settings.py created by django-admin startproject already contains all the settings required to enable message functionality:'django.contrib.messages' is in INSTALLED_APPS.MIDDLEWARE contains 'django.contrib.sessions.middleware.SessionMiddleware' and 'django.contrib.messages.middleware.MessageMiddleware'.The default storage backend relies on sessions. That s why SessionMiddleware must be enabled and appear before MessageMiddleware in MIDDLEWARE.The 'context_processors' option of the DjangoTemplates backend defined in your TEMPLATES setting contains 'django.contrib.messages.context_processors.messages'.If you don t want to use messages, you can remove 'django.contrib.messages' from your INSTALLED_APPS, the MessageMiddleware line from MIDDLEWARE, and the messages context processor from TEMPLATES."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/messages/#configuring-the-message-engine", "para": "The messages framework can use different backends to store temporary messages.Django provides three built-in storage classes in django.contrib.messages:This class stores all messages inside of the request s session. Therefore it requires Django s contrib.sessions application.This class stores the message data in a cookie (signed with a secret hash to prevent manipulation) to persist notifications across requests. Old messages are dropped if the cookie data size would exceed 2048 bytes.This class first uses CookieStorage, and falls back to using SessionStorage for the messages that could not fit in a single cookie. It also requires Django s contrib.sessions application.This behavior avoids writing to the session whenever possible. It should provide the best performance in the general case.FallbackStorage is the default storage class. If it isn t suitable to your needs, you can select another storage class by setting MESSAGE_STORAGE to its full import path, for example:To write your own storage class, subclass the BaseStorage class in django.contrib.messages.storage.base and implement the _get and _store methods.The messages framework is based on a configurable level architecture similar to that of the Python logging module. Message levels allow you to group messages by type so they can be filtered or displayed differently in views and templates.The built-in levels, which can be imported from django.contrib.messages directly, are:The MESSAGE_LEVEL setting can be used to change the minimum recorded level (or it can be changed per request). Attempts to add messages of a level less than this will be ignored.Message tags are a string representation of the message level plus any extra tags that were added directly in the view (see Adding extra message tags below for more details). Tags are stored in a string and are separated by spaces. Typically, message tags are used as CSS classes to customize message style based on message type. By default, each level has a single tag that s a lowercase version of its own constant:To change the default tags for a message level (either built-in or custom), set the MESSAGE_TAGS setting to a dictionary containing the levels you wish to change. As this extends the default tags, you only need to provide tags for the levels you wish to override:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/messages/#using-messages-in-views-and-templates", "para": "To add a message, call:Some shortcut methods provide a standard way to add messages with commonly used tags (which are usually represented as HTML classes for the message):In your template, use something like:If you re using the context processor, your template should be rendered with a RequestContext. Otherwise, ensure messages is available to the template context.Even if you know there is only just one message, you should still iterate over the messages sequence, because otherwise the message storage will not be cleared for the next request.The context processor also provides a DEFAULT_MESSAGE_LEVELS variable which is a mapping of the message level names to their numeric value:Outside of templates, you can use get_messages():For instance, you can fetch all the messages to return them in a JSONResponseMixin instead of a TemplateResponseMixin.get_messages() will return an instance of the configured storage backend.When you loop over the list of messages in a template, what you get are instances of the Message class. It s quite a simple object, with only a few attributes:Messages levels are nothing more than integers, so you can define your own level constants and use them to create more customized user feedback, e.g.:When creating custom message levels you should be careful to avoid overloading existing levels. The values for the built-in levels are:If you need to identify the custom levels in your HTML or CSS, you need to provide a mapping via the MESSAGE_TAGS setting.NoteIf you are creating a reusable application, it is recommended to use only the built-in message levels and not rely on any custom levels.The minimum recorded level can be set per request via the set_level method:Similarly, the current effective level can be retrieved with get_level:For more information on how the minimum recorded level functions, see Message levels above.For more direct control over message tags, you can optionally provide a string containing extra tags to any of the add methods:Extra tags are added before the default tag for that level and are space separated.If you re writing a reusable app (or other piece of code) and want to include messaging functionality, but don t want to require your users to enable it if they don t want to, you may pass an additional keyword argument fail_silently=True to any of the add_message family of methods. For example:NoteSetting fail_silently=True only hides the MessageFailure that would otherwise occur when the messages framework disabled and one attempts to use one of the add_message family of methods. It does not hide failures that may occur for other reasons.Adds a success message attribute to FormView based classescleaned_data is the cleaned data from the form which is used for string formattingExample views.py:The cleaned data from the form is available for string interpolation using the %(field_name)s syntax. For ModelForms, if you need access to fields from the saved object override the get_success_message() method.Example views.py for ModelForms:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/messages/#expiration-of-messages", "para": "The messages are marked to be cleared when the storage instance is iterated (and cleared when the response is processed).To avoid the messages being cleared, you can set the messages storage to False after iterating:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/messages/#behavior-of-parallel-requests", "para": "Due to the way cookies (and hence sessions) work, the behavior of any backends that make use of cookies or sessions is undefined when the same client makes multiple requests that set or get messages in parallel. For example, if a client initiates a request that creates a message in one window (or tab) and then another that fetches any uniterated messages in another window, before the first window redirects, the message may appear in the second window instead of the first window where it may be expected.In short, when multiple simultaneous requests from the same client are involved, messages are not guaranteed to be delivered to the same window that created them nor, in some cases, at all. Note that this is typically not a problem in most applications and will become a non-issue in HTML5, where each window/tab will have its own browsing context."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/messages/#settings", "para": "A few settings give you control over message behavior:For backends that use cookies, the settings for the cookie are taken from the session cookie settings:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/serialization/#serializing-data", "para": "At the highest level, serializing data is a very simple operation:The arguments to the serialize function are the format to serialize the data to (see Serialization formats) and a QuerySet to serialize. (Actually, the second argument can be any iterator that yields Django model instances, but it ll almost always be a QuerySet).You can also use a serializer object directly:This is useful if you want to serialize data directly to a file-like object (which includes an HttpResponse):NoteCalling get_serializer() with an unknown format will raise a django.core.serializers.SerializerDoesNotExist exception.If you only want a subset of fields to be serialized, you can specify a fields argument to the serializer:In this example, only the name and size attributes of each model will be serialized. The primary key is always serialized as the pk element in the resulting output; it never appears in the fields part.NoteDepending on your model, you may find that it is not possible to deserialize a model that only serializes a subset of its fields. If a serialized object doesn t specify all the fields that are required by a model, the deserializer will not be able to save deserialized instances.If you have a model that is defined using an abstract base class, you don t have to do anything special to serialize that model. Just call the serializer on the object (or objects) that you want to serialize, and the output will be a complete representation of the serialized object.However, if you have a model that uses multi-table inheritance, you also need to serialize all of the base classes for the model. This is because only the fields that are locally defined on the model will be serialized. For example, consider the following models:If you only serialize the Restaurant model:the fields on the serialized output will only contain the serves_hot_dogs attribute. The name attribute of the base class will be ignored.In order to fully serialize your Restaurant instances, you will need to serialize the Place models as well:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/serialization/#deserializing-data", "para": "Deserializing data is also a fairly simple operation:As you can see, the deserialize function takes the same format argument as serialize, a string or stream of data, and returns an iterator.However, here it gets slightly complicated. The objects returned by the deserialize iterator aren t simple Django objects. Instead, they are special DeserializedObject instances that wrap a created   but unsaved   object and any associated relationship data.Calling DeserializedObject.save() saves the object to the database.NoteIf the pk attribute in the serialized data doesn t exist or is null, a new instance will be saved to the database.This ensures that deserializing is a non-destructive operation even if the data in your serialized representation doesn t match what s currently in the database. Usually, working with these DeserializedObject instances looks something like:In other words, the usual use is to examine the deserialized objects to make sure that they are  appropriate  for saving before doing so.  Of course, if you trust your data source you could just save the object and move on.The Django object itself can be inspected as deserialized_object.object. If fields in the serialized data do not exist on a model, a DeserializationError will be raised unless the ignorenonexistent argument is passed in as True:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/serialization/#serialization-formats", "para": "Django supports a number of serialization formats, some of which require you to install third-party Python modules:The basic XML serialization format is quite simple:The whole collection of objects that is either serialized or deserialized is represented by a <django-objects>-tag which contains multiple <object>-elements. Each such object has two attributes:  pk  and  model , the latter being represented by the name of the app ( sessions ) and the lowercase name of the model ( session ) separated by a dot.Each field of the object is serialized as a <field>-element sporting the fields  type  and  name . The text content of the element represents the value that should be stored.Foreign keys and other relational fields are treated a little bit differently:In this example we specify that the auth.Permission object with the PK 27 has a foreign key to the contenttypes.ContentType instance with the PK 9.ManyToMany-relations are exported for the model that binds them. For instance, the auth.User model has such a relation to the auth.Permission model:This example links the given user with the permission models with PKs 46 and 47.Control charactersIf the content to be serialized contains control characters that are not accepted in the XML 1.0 standard, the serialization will fail with a ValueError exception. Read also the W3C s explanation of HTML, XHTML, XML and Control Codes.When staying with the same example data as before it would be serialized as JSON in the following way:The formatting here is a bit simpler than with XML. The whole collection is just represented as an array and the objects are represented by JSON objects with three properties:  pk ,  model  and  fields .  fields  is again an object containing each field s name and value as property and property-value respectively.Foreign keys just have the PK of the linked object as property value. ManyToMany-relations are serialized for the model that defines them and are represented as a list of PKs.Be aware that not all Django output can be passed unmodified to json. For example, if you have some custom type in an object to be serialized, you ll have to write a custom json encoder for it. Something like this will work:You can then pass cls=LazyEncoder to the serializers.serialize() function:Also note that GeoDjango provides a customized GeoJSON serializer.The JSON serializer uses DjangoJSONEncoder for encoding. A subclass of JSONEncoder, it handles these additional types:YAML serialization looks quite similar to JSON. The object list is serialized as a sequence mappings with the keys  pk ,  model  and  fields . Each field is again a mapping with the key being name of the field and the value the value:Referential fields are again just represented by the PK or sequence of PKs."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/serialization/#natural-keys", "para": "The default serialization strategy for foreign keys and many-to-many relations is to serialize the value of the primary key(s) of the objects in the relation. This strategy works well for most objects, but it can cause difficulty in some circumstances.Consider the case of a list of objects that have a foreign key referencing ContentType. If you re going to serialize an object that refers to a content type, then you need to have a way to refer to that content type to begin with. Since ContentType objects are automatically created by Django during the database synchronization process, the primary key of a given content type isn t easy to predict; it will depend on how and when migrate was executed. This is true for all models which automatically generate objects, notably including Permission, Group, and User.WarningYou should never include automatically generated objects in a fixture or other serialized data. By chance, the primary keys in the fixture may match those in the database and loading the fixture will have no effect. In the more likely case that they don t match, the fixture loading will fail with an IntegrityError.There is also the matter of convenience. An integer id isn t always the most convenient way to refer to an object; sometimes, a more natural reference would be helpful.It is for these reasons that Django provides natural keys. A natural key is a tuple of values that can be used to uniquely identify an object instance without using the primary key value.Consider the following two models:Ordinarily, serialized data for Book would use an integer to refer to the author. For example, in JSON, a Book might be serialized as:This isn t a particularly natural way to refer to an author. It requires that you know the primary key value for the author; it also requires that this primary key value is stable and predictable.However, if we add natural key handling to Person, the fixture becomes much more humane. To add natural key handling, you define a default Manager for Person with a get_by_natural_key() method. In the case of a Person, a good natural key might be the pair of first and last name:Now books can use that natural key to refer to Person objects:When you try to load this serialized data, Django will use the get_by_natural_key() method to resolve [\"Douglas\", \"Adams\"] into the primary key of an actual Person object.NoteWhatever fields you use for a natural key must be able to uniquely identify an object. This will usually mean that your model will have a uniqueness clause (either unique=True on a single field, or unique_together over multiple fields) for the field or fields in your natural key. However, uniqueness doesn t need to be enforced at the database level. If you are certain that a set of fields will be effectively unique, you can still use those fields as a natural key.Deserialization of objects with no primary key will always check whether the model s manager has a get_by_natural_key() method and if so, use it to populate the deserialized object s primary key.So how do you get Django to emit a natural key when serializing an object? Firstly, you need to add another method   this time to the model itself:That method should always return a natural key tuple   in this example, (first name, last name). Then, when you call serializers.serialize(), you provide use_natural_foreign_keys=True or use_natural_primary_keys=True arguments:When use_natural_foreign_keys=True is specified, Django will use the natural_key() method to serialize any foreign key reference to objects of the type that defines the method.When use_natural_primary_keys=True is specified, Django will not provide the primary key in the serialized data of this object since it can be calculated during deserialization:This can be useful when you need to load serialized data into an existing database and you cannot guarantee that the serialized primary key value is not already in use, and do not need to ensure that deserialized objects retain the same primary keys.If you are using dumpdata to generate serialized data, use the dumpdata --natural-foreign and dumpdata --natural-primary command line flags to generate natural keys.NoteYou don t need to define both natural_key() and get_by_natural_key(). If you don t want Django to output natural keys during serialization, but you want to retain the ability to load natural keys, then you can opt to not implement the natural_key() method.Conversely, if (for some strange reason) you want Django to output natural keys during serialization, but not be able to load those key values, just don t define the get_by_natural_key() method.Sometimes when you use natural foreign keys you ll need to deserialize data where an object has a foreign key referencing another object that hasn t yet been deserialized. This is called a  forward reference .For instance, suppose you have the following objects in your fixture:In order to handle this situation, you need to pass handle_forward_references=True to serializers.deserialize(). This will set the deferred_fields attribute on the DeserializedObject instances. You ll need to keep track of DeserializedObject instances where this attribute isn t None and later call save_deferred_fields() on them.Typical usage looks like this:For this to work, the ForeignKey on the referencing model must have null=True.It s often possible to avoid explicitly having to handle forward references by taking care with the ordering of objects within a fixture.To help with this, calls to dumpdata that use the dumpdata --natural-foreign option will serialize any model with a natural_key() method before serializing standard primary key objects.However, this may not always be enough. If your natural key refers to another object (by using a foreign key or natural key to another object as part of a natural key), then you need to be able to ensure that the objects on which a natural key depends occur in the serialized data before the natural key requires them.To control this ordering, you can define dependencies on your natural_key() methods. You do this by setting a dependencies attribute on the natural_key() method itself.For example, let s add a natural key to the Book model from the example above:The natural key for a Book is a combination of its name and its author. This means that Person must be serialized before Book. To define this dependency, we add one extra line:This definition ensures that all Person objects are serialized before any Book objects. In turn, any object referencing Book will be serialized after both Person and Book have been serialized."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#enabling-sessions", "para": "Sessions are implemented via a piece of middleware.To enable session functionality, do the following:If you don t want to use sessions, you might as well remove the SessionMiddleware line from MIDDLEWARE and 'django.contrib.sessions' from your INSTALLED_APPS. It ll save you a small bit of overhead."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#configuring-the-session-engine", "para": "By default, Django stores sessions in your database (using the model django.contrib.sessions.models.Session). Though this is convenient, in some setups it s faster to store session data elsewhere, so Django can be configured to store session data on your filesystem or in your cache.If you want to use a database-backed session, you need to add 'django.contrib.sessions' to your INSTALLED_APPS setting.Once you have configured your installation, run manage.py migrate to install the single database table that stores session data.For better performance, you may want to use a cache-based session backend.To store session data using Django s cache system, you ll first need to make sure you ve configured your cache; see the cache documentation for details.WarningYou should only use cache-based sessions if you re using the Memcached cache backend. The local-memory cache backend doesn t retain data long enough to be a good choice, and it ll be faster to use file or database sessions directly instead of sending everything through the file or database cache backends. Additionally, the local-memory cache backend is NOT multi-process safe, therefore probably not a good choice for production environments.If you have multiple caches defined in CACHES, Django will use the default cache. To use another cache, set SESSION_CACHE_ALIAS to the name of that cache.Once your cache is configured, you ve got two choices for how to store data in the cache:Both session stores are quite fast, but the simple cache is faster because it disregards persistence. In most cases, the cached_db backend will be fast enough, but if you need that last bit of performance, and are willing to let session data be expunged from time to time, the cache backend is for you.If you use the cached_db session backend, you also need to follow the configuration instructions for the using database-backed sessions.To use file-based sessions, set the SESSION_ENGINE setting to \"django.contrib.sessions.backends.file\".You might also want to set the SESSION_FILE_PATH setting (which defaults to output from tempfile.gettempdir(), most likely /tmp) to control where Django stores session files. Be sure to check that your Web server has permissions to read and write to this location.To use cookies-based sessions, set the SESSION_ENGINE setting to \"django.contrib.sessions.backends.signed_cookies\". The session data will be stored using Django s tools for cryptographic signing and the SECRET_KEY setting.NoteIt s recommended to leave the SESSION_COOKIE_HTTPONLY setting on True to prevent access to the stored data from JavaScript.WarningIf the SECRET_KEY is not kept secret and you are using the PickleSerializer, this can lead to arbitrary remote code execution.An attacker in possession of the SECRET_KEY can not only generate falsified session data, which your site will trust, but also remotely execute arbitrary code, as the data is serialized using pickle.If you use cookie-based sessions, pay extra care that your secret key is always kept completely secret, for any system which might be remotely accessible.The session data is signed but not encryptedWhen using the cookies backend the session data can be read by the client.A MAC (Message Authentication Code) is used to protect the data against changes by the client, so that the session data will be invalidated when being tampered with. The same invalidation happens if the client storing the cookie (e.g. your user s browser) can t store all of the session cookie and drops data. Even though Django compresses the data, it s still entirely possible to exceed the common limit of 4096 bytes per cookie.No freshness guaranteeNote also that while the MAC can guarantee the authenticity of the data (that it was generated by your site, and not someone else), and the integrity of the data (that it is all there and correct), it cannot guarantee freshness i.e. that you are being sent back the last thing you sent to the client. This means that for some uses of session data, the cookie backend might open you up to replay attacks. Unlike other session backends which keep a server-side record of each session and invalidate it when a user logs out, cookie-based sessions are not invalidated when a user logs out. Thus if an attacker steals a user s cookie, they can use that cookie to login as that user even if the user logs out. Cookies will only be detected as  stale  if they are older than your SESSION_COOKIE_AGE.PerformanceFinally, the size of a cookie can have an impact on the speed of your site."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#using-sessions-in-views", "para": "When SessionMiddleware is activated, each HttpRequest object   the first argument to any Django view function   will have a session attribute, which is a dictionary-like object.You can read it and write to request.session at any point in your view. You can edit it multiple times.This is the base class for all session objects. It has the following standard dictionary methods:Example: fav_color = request.session['fav_color']Example: request.session['fav_color'] = 'blue'Example: del request.session['fav_color']. This raises KeyError if the given key isn t already in the session.Example: 'fav_color' in request.sessionExample: fav_color = request.session.get('fav_color', 'red')Example: fav_color = request.session.pop('fav_color', 'blue')It also has these methods:Deletes the current session data from the session and deletes the session cookie. This is used if you want to ensure that the previous session data can t be accessed again from the user s browser (for example, the django.contrib.auth.logout() function calls it).Sets a test cookie to determine whether the user s browser supports cookies. Due to the way cookies work, you won t be able to test this until the user s next page request. See Setting test cookies below for more information.Returns either True or False, depending on whether the user s browser accepted the test cookie. Due to the way cookies work, you ll have to call set_test_cookie() on a previous, separate page request. See Setting test cookies below for more information.Deletes the test cookie. Use this to clean up after yourself.Sets the expiration time for the session. You can pass a number of different values:Reading a session is not considered activity for expiration purposes. Session expiration is computed from the last time the session was modified.Returns the number of seconds until this session expires. For sessions with no custom expiration (or those set to expire at browser close), this will equal SESSION_COOKIE_AGE.This function accepts two optional keyword arguments:Returns the date this session will expire. For sessions with no custom expiration (or those set to expire at browser close), this will equal the date SESSION_COOKIE_AGE seconds from now.This function accepts the same keyword arguments as get_expiry_age().Returns either True or False, depending on whether the user s session cookie will expire when the user s Web browser is closed.Removes expired sessions from the session store. This class method is called by clearsessions.Creates a new session key while retaining the current session data. django.contrib.auth.login() calls this method to mitigate against session fixation.By default, Django serializes session data using JSON. You can use the SESSION_SERIALIZER setting to customize the session serialization format. Even with the caveats described in Write your own serializer, we highly recommend sticking with JSON serialization especially if you are using the cookie backend.For example, here s an attack scenario if you use pickle to serialize session data. If you re using the signed cookie session backend and SECRET_KEY is known by an attacker (there isn t an inherent vulnerability in Django that would cause it to leak), the attacker could insert a string into their session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily available on the internet. Although the cookie session storage signs the cookie-stored data to prevent tampering, a SECRET_KEY leak immediately escalates to a remote code execution vulnerability.A wrapper around the JSON serializer from django.core.signing. Can only serialize basic data types.In addition, as JSON supports only string keys, note that using non-string keys in request.session won t work as expected:Similarly, data that can t be encoded in JSON, such as non-UTF8 bytes like '\\xd9' (which raises UnicodeDecodeError), can t be stored.See the Write your own serializer section for more details on limitations of JSON serialization.Supports arbitrary Python objects, but, as described above, can lead to a remote code execution vulnerability if SECRET_KEY becomes known by an attacker.Note that unlike PickleSerializer, the JSONSerializer cannot handle arbitrary Python data types. As is often the case, there is a trade-off between convenience and security. If you wish to store more advanced data types including datetime and Decimal in JSON backed sessions, you will need to write a custom serializer (or convert such values to a JSON serializable object before storing them in request.session). While serializing these values is fairly straightforward (DjangoJSONEncoder may be helpful), writing a decoder that can reliably get back the same thing that you put in is more fragile. For example, you run the risk of returning a datetime that was actually a string that just happened to be in the same format chosen for datetimes).Your serializer class must implement two methods, dumps(self, obj) and loads(self, data), to serialize and deserialize the dictionary of session data, respectively.This simplistic view sets a has_commented variable to True after a user posts a comment. It doesn t let a user post a comment more than once:This simplistic view logs in a  member  of the site: And this one logs a member out, according to login() above:The standard django.contrib.auth.logout() function actually does a bit more than this to prevent inadvertent data leakage. It calls the flush() method of request.session. We are using this example as a demonstration of how to work with session objects, not as a full logout() implementation."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#setting-test-cookies", "para": "As a convenience, Django provides an easy way to test whether the user s browser accepts cookies. Just call the set_test_cookie() method of request.session in a view, and call test_cookie_worked() in a subsequent view   not in the same view call.This awkward split between set_test_cookie() and test_cookie_worked() is necessary due to the way cookies work. When you set a cookie, you can t actually tell whether a browser accepted it until the browser s next request.It s good practice to use delete_test_cookie() to clean up after yourself. Do this after you ve verified that the test cookie worked.Here s a typical usage example:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#using-sessions-out-of-views", "para": "NoteThe examples in this section import the SessionStore object directly from the django.contrib.sessions.backends.db backend. In your own code, you should consider importing SessionStore from the session engine designated by SESSION_ENGINE, as below:An API is available to manipulate session data outside of a view:SessionStore.create() is designed to create a new session (i.e. one not loaded from the session store and with session_key=None). save() is designed to save an existing session (i.e. one loaded from the session store). Calling save() on a new session may also work but has a small chance of generating a session_key that collides with an existing one. create() calls save() and loops until an unused session_key is generated.If you re using the django.contrib.sessions.backends.db backend, each session is just a normal Django model. The Session model is defined in django/contrib/sessions/models.py. Because it s a normal model, you can access sessions using the normal Django database API:Note that you ll need to call get_decoded() to get the session dictionary. This is necessary because the dictionary is stored in an encoded format:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#when-sessions-are-saved", "para": "By default, Django only saves to the session database when the session has been modified   that is if any of its dictionary values have been assigned or deleted:In the last case of the above example, we can tell the session object explicitly that it has been modified by setting the modified attribute on the session object:To change this default behavior, set the SESSION_SAVE_EVERY_REQUEST setting to True. When set to True, Django will save the session to the database on every single request.Note that the session cookie is only sent when a session has been created or modified. If SESSION_SAVE_EVERY_REQUEST is True, the session cookie will be sent on every request.Similarly, the expires part of a session cookie is updated each time the session cookie is sent.The session is not saved if the response s status code is 500."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#browser-length-sessions-vs-persistent-sessions", "para": "You can control whether the session framework uses browser-length sessions vs. persistent sessions with the SESSION_EXPIRE_AT_BROWSER_CLOSE setting.By default, SESSION_EXPIRE_AT_BROWSER_CLOSE is set to False, which means session cookies will be stored in users  browsers for as long as SESSION_COOKIE_AGE. Use this if you don t want people to have to log in every time they open a browser.If SESSION_EXPIRE_AT_BROWSER_CLOSE is set to True, Django will use browser-length cookies   cookies that expire as soon as the user closes their browser. Use this if you want people to have to log in every time they open a browser.This setting is a global default and can be overwritten at a per-session level by explicitly calling the set_expiry() method of request.session as described above in using sessions in views.NoteSome browsers (Chrome, for example) provide settings that allow users to continue browsing sessions after closing and re-opening the browser. In some cases, this can interfere with the SESSION_EXPIRE_AT_BROWSER_CLOSE setting and prevent sessions from expiring on browser close. Please be aware of this while testing Django applications which have the SESSION_EXPIRE_AT_BROWSER_CLOSE setting enabled."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#clearing-the-session-store", "para": "As users create new sessions on your website, session data can accumulate in your session store. If you re using the database backend, the django_session database table will grow. If you re using the file backend, your temporary directory will contain an increasing number of files.To understand this problem, consider what happens with the database backend. When a user logs in, Django adds a row to the django_session database table. Django updates this row each time the session data changes. If the user logs out manually, Django deletes the row. But if the user does not log out, the row never gets deleted. A similar process happens with the file backend.Django does not provide automatic purging of expired sessions. Therefore, it s your job to purge expired sessions on a regular basis. Django provides a clean-up management command for this purpose: clearsessions. It s recommended to call this command on a regular basis, for example as a daily cron job.Note that the cache backend isn t vulnerable to this problem, because caches automatically delete stale data. Neither is the cookie backend, because the session data is stored by the users  browsers."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#settings", "para": "A few Django settings give you control over session behavior:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#session-security", "para": "Subdomains within a site are able to set cookies on the client for the whole domain. This makes session fixation possible if cookies are permitted from subdomains not controlled by trusted users.For example, an attacker could log into good.example.com and get a valid session for their account. If the attacker has control over bad.example.com, they can use it to send their session key to you since a subdomain is permitted to set cookies on *.example.com. When you visit good.example.com, you ll be logged in as the attacker and might inadvertently enter your sensitive personal data (e.g. credit card info) into the attackers account.Another possible attack would be if good.example.com sets its SESSION_COOKIE_DOMAIN to \"example.com\" which would cause session cookies from that site to be sent to bad.example.com."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#technical-details", "para": "When working with sessions internally, Django uses a session store object from the corresponding session engine. By convention, the session store object class is named SessionStore and is located in the module designated by SESSION_ENGINE.All SessionStore classes available in Django inherit from SessionBase and implement data manipulation methods, namely:In order to build a custom session engine or to customize an existing one, you may create a new class inheriting from SessionBase or any other existing SessionStore class.Extending most of the session engines is quite straightforward, but doing so with database-backed session engines generally requires some extra effort (see the next section for details)."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#extending-database-backed-session-engines", "para": "Creating a custom database-backed session engine built upon those included in Django (namely db and cached_db) may be done by inheriting AbstractBaseSession and either SessionStore class.AbstractBaseSession and BaseSessionManager are importable from django.contrib.sessions.base_session so that they can be imported without including django.contrib.sessions in INSTALLED_APPS.The abstract base session model.Primary key. The field itself may contain up to 40 characters. The current implementation generates a 32-character string (a random sequence of digits and lowercase ASCII letters).A string containing an encoded and serialized session dictionary.A datetime designating when the session expires.Expired sessions are not available to a user, however, they may still be stored in the database until the clearsessions management command is run.Returns a session store class to be used with this session model.Returns decoded session data.Decoding is performed by the session store class.You can also customize the model manager by subclassing BaseSessionManager:Returns the given session dictionary serialized and encoded as a string.Encoding is performed by the session store class tied to a model class.Saves session data for a provided session key, or deletes the session in case the data is empty.Customization of SessionStore classes is achieved by overriding methods and properties described below:Implements database-backed session store.Override this method to return a custom session model if you need one.Returns a new instance of the session model object, which represents the current session state.Overriding this method provides the ability to modify session model data before it s saved to database.Implements cached database-backed session store.A prefix added to a session key to build a cache key string.The example below shows a custom database-backed session engine that includes an additional database column to store an account ID (thus providing an option to query the database for all active sessions for an account):If you are migrating from the Django s built-in cached_db session store to a custom one based on cached_db, you should override the cache key prefix in order to prevent a namespace clash:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/http/sessions/#session-ids-in-urls", "para": "The Django sessions framework is entirely, and solely, cookie-based. It does not fall back to putting session IDs in URLs as a last resort, as PHP does. This is an intentional design decision. Not only does that behavior make URLs ugly, it makes your site vulnerable to session-ID theft via the  Referer  header."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#overview", "para": "A sitemap is an XML file on your website that tells search-engine indexers how frequently your pages change and how  important  certain pages are in relation to other pages on your site. This information helps search engines index your site.The Django sitemap framework automates the creation of this XML file by letting you express this information in Python code.It works much like Django s syndication framework. To create a sitemap, just write a Sitemap class and point to it in your URLconf."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#installation", "para": "To install the sitemap app, follow these steps:(Note: The sitemap application doesn t install any database tables. The only reason it needs to go into INSTALLED_APPS is so that the Loader() template loader can find the default templates.)"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#initialization", "para": "To activate sitemap generation on your Django site, add this line to your URLconf:This tells Django to build a sitemap when a client accesses /sitemap.xml.The name of the sitemap file is not important, but the location is. Search engines will only index links in your sitemap for the current URL level and below. For instance, if sitemap.xml lives in your root directory, it may reference any URL in your site. However, if your sitemap lives at /content/sitemap.xml, it may only reference URLs that begin with /content/.The sitemap view takes an extra, required argument: {'sitemaps': sitemaps}. sitemaps should be a dictionary that maps a short section label (e.g., blog or news) to its Sitemap class (e.g., BlogSitemap or NewsSitemap). It may also map to an instance of a Sitemap class (e.g., BlogSitemap(some_var))."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#sitemap-classes", "para": "A Sitemap class is a simple Python class that represents a  section  of entries in your sitemap. For example, one Sitemap class could represent all the entries of your Weblog, while another could represent all of the events in your events calendar.In the simplest case, all these sections get lumped together into one sitemap.xml, but it s also possible to use the framework to generate a sitemap index that references individual sitemap files, one per section. (See Creating a sitemap index below.)Sitemap classes must subclass django.contrib.sitemaps.Sitemap. They can live anywhere in your codebase."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#a-simple-example", "para": "Let s assume you have a blog system, with an Entry model, and you want your sitemap to include all the links to your individual blog entries. Here s how your sitemap class might look:Note:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#sitemap-class-reference", "para": "A Sitemap class can define the following methods/attributes:Required. A method that returns a list of objects. The framework doesn t care what type of objects they are; all that matters is that these objects get passed to the location(), lastmod(), changefreq() and priority() methods.Optional. Either a method or attribute.If it s a method, it should return the absolute path for a given object as returned by items().If it s an attribute, its value should be a string representing an absolute path to use for every object returned by items().In both cases,  absolute path  means a URL that doesn t include the protocol or domain. Examples:If location isn t provided, the framework will call the get_absolute_url() method on each object as returned by items().To specify a protocol other than 'http', use protocol.Optional. Either a method or attribute.If it s a method, it should take one argument   an object as returned by items()   and return that object s last-modified date/time as a datetime.If it s an attribute, its value should be a datetime representing the last-modified date/time for every object returned by items().If all items in a sitemap have a lastmod, the sitemap generated by views.sitemap() will have a Last-Modified header equal to the latest lastmod. You can activate the ConditionalGetMiddleware to make Django respond appropriately to requests with an If-Modified-Since header which will prevent sending the sitemap if it hasn t changed.Optional. Either a method or attribute.If it s a method, it should take one argument   an object as returned by items()   and return that object s change frequency as a string.If it s an attribute, its value should be a string representing the change frequency of every object returned by items().Possible values for changefreq, whether you use a method or attribute, are:Optional. Either a method or attribute.If it s a method, it should take one argument   an object as returned by items()   and return that object s priority as either a string or float.If it s an attribute, its value should be either a string or float representing the priority of every object returned by items().Example values for priority: 0.4, 1.0. The default priority of a page is 0.5. See the sitemaps.org documentation for more.Optional.This attribute defines the protocol ('http' or 'https') of the URLs in the sitemap. If it isn t set, the protocol with which the sitemap was requested is used. If the sitemap is built outside the context of a request, the default is 'http'.Optional.This attribute defines the maximum number of URLs included on each page of the sitemap. Its value should not exceed the default value of 50000, which is the upper limit allowed in the Sitemaps protocol.Optional.A boolean attribute that defines if the URLs of this sitemap should be generated using all of your LANGUAGES. The default is False."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#shortcuts", "para": "The sitemap framework provides a convenience class for a common case:The django.contrib.sitemaps.GenericSitemap class allows you to create a sitemap by passing it a dictionary which has to contain at least a queryset entry. This queryset will be used to generate the items of the sitemap. It may also have a date_field entry that specifies a date field for objects retrieved from the queryset. This will be used for the lastmod attribute in the generated sitemap.The priority, changefreq, and protocol keyword arguments allow specifying these attributes for all URLs.Here s an example of a URLconf using GenericSitemap:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#sitemap-for-static-views", "para": "Often you want the search engine crawlers to index views which are neither object detail pages nor flatpages. The solution is to explicitly list URL names for these views in items and call reverse() in the location method of the sitemap. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#creating-a-sitemap-index", "para": "The sitemap framework also has the ability to create a sitemap index that references individual sitemap files, one per each section defined in your sitemaps dictionary. The only differences in usage are:Here s what the relevant URLconf lines would look like for the example above:This will automatically generate a sitemap.xml file that references both sitemap-flatpages.xml and sitemap-blog.xml. The Sitemap classes and the sitemaps dict don t change at all.You should create an index file if one of your sitemaps has more than 50,000 URLs. In this case, Django will automatically paginate the sitemap, and the index will reflect that.If you re not using the vanilla sitemap view   for example, if it s wrapped with a caching decorator   you must name your sitemap view and pass sitemap_url_name to the index view:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#template-customization", "para": "If you wish to use a different template for each sitemap or sitemap index available on your site, you may specify it by passing a template_name parameter to the sitemap and index views via the URLconf:These views return TemplateResponse instances which allow you to easily customize the response data before rendering. For more details, see the TemplateResponse documentation.When customizing the templates for the index() and sitemap() views, you can rely on the following context variables.The variable sitemaps is a list of absolute URLs to each of the sitemaps.The variable urlset is a list of URLs that should appear in the sitemap. Each URL exposes attributes as defined in the Sitemap class:The item attribute has been added for each URL to allow more flexible customization of the templates, such as Google news sitemaps. Assuming Sitemap s items() would return a list of items with publication_data and a tags field something like this would generate a Google News compatible sitemap:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sitemaps/#pinging-google", "para": "You may want to  ping  Google when your sitemap changes, to let it know to reindex your site. The sitemaps framework provides a function to do just that: django.contrib.sitemaps.ping_google().ping_google takes these optional arguments:ping_google() raises the exception django.contrib.sitemaps.SitemapNotFound if it cannot determine your sitemap URL.The sitemap_uses_https argument was added. Older versions of Django always use http for a sitemap s URL.Register with Google first!The ping_google() command only works if you have registered your site with Google Webmaster Tools.One useful way to call ping_google() is from a model s save() method:A more efficient solution, however, would be to call ping_google() from a cron script, or some other scheduled task. The function makes an HTTP request to Google s servers, so you may not want to introduce that network overhead each time you call save().Once the sitemaps application is added to your project, you may also ping Google using the ping_google management command:Use this option if your sitemap uses http rather than https."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#settings", "para": "See staticfiles settings for details on the following settings:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#management-commands", "para": "django.contrib.staticfiles exposes three management commands.Collects the static files into STATIC_ROOT.Duplicate file names are by default resolved in a similar way to how template resolution works: the file that is first found in one of the specified locations will be used. If you re confused, the findstatic command can help show you which files are found.On subsequent collectstatic runs (if STATIC_ROOT isn t empty), files are copied only if they have a modified timestamp greater than the timestamp of the file in STATIC_ROOT. Therefore if you remove an application from INSTALLED_APPS, it s a good idea to use the collectstatic --clear option in order to remove stale static files.Files are searched by using the enabled finders. The default is to look in all locations defined in STATICFILES_DIRS and in the 'static' directory of apps specified by the INSTALLED_APPS setting.The collectstatic management command calls the post_process() method of the STATICFILES_STORAGE after each run and passes a list of paths that have been found by the management command. It also receives all command line options of collectstatic. This is used by the ManifestStaticFilesStorage by default.By default, collected files receive permissions from FILE_UPLOAD_PERMISSIONS and collected directories receive permissions from FILE_UPLOAD_DIRECTORY_PERMISSIONS. If you would like different permissions for these files and/or directories, you can subclass either of the static files storage classes and specify the file_permissions_mode and/or directory_permissions_mode parameters, respectively. For example:Then set the STATICFILES_STORAGE setting to 'path.to.MyStaticFilesStorage'.Some commonly used options are:Do NOT prompt the user for input of any kind.Ignore files, directories, or paths matching this glob-style pattern. Use multiple times to ignore more. When specifying a path, always use forward slashes, even on Windows.Path matching was added.Do everything except modify the filesystem.Clear the existing files before trying to copy or link the original file.Create a symbolic link to each file instead of copying.Don t call the post_process() method of the configured STATICFILES_STORAGE storage backend.Don t ignore the common private glob-style patterns 'CVS', '.*' and '*~'.For a full list of options, refer to the commands own help by running:The default ignored pattern list, ['CVS', '.*', '*~'], can be customized in a more persistent way than providing the --ignore command option at each collectstatic invocation. Provide a custom AppConfig class, override the ignore_patterns attribute of this class and replace 'django.contrib.staticfiles' with that class path in your INSTALLED_APPS setting:Searches for one or more relative paths with the enabled finders.For example:By default, all matching locations are found. To only return the first match for each relative path, use the --first option:This is a debugging aid; it ll show you exactly which static file will be collected for a given path.By setting the --verbosity flag to 0, you can suppress the extra output and just get the path names:On the other hand, by setting the --verbosity flag to 2, you can get all the directories which were searched:Overrides the core runserver command if the staticfiles app is installed and adds automatic serving of static files. File serving doesn t run through MIDDLEWARE.The command adds these options:Use the --nostatic option to disable serving of static files with the staticfiles app entirely. This option is only available if the staticfiles app is in your project s INSTALLED_APPS setting.Example usage:Use the --insecure option to force serving of static files with the staticfiles app even if the DEBUG setting is False. By using this you acknowledge the fact that it s grossly inefficient and probably insecure. This is only intended for local development, should never be used in production and is only available if the staticfiles app is in your project s INSTALLED_APPS setting.--insecure doesn t work with ManifestStaticFilesStorage.Example usage:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#storages", "para": "A subclass of the FileSystemStorage storage backend that uses the STATIC_ROOT setting as the base file system location and the STATIC_URL setting respectively as the base URL.If this method is defined on a storage, it s called by the collectstatic management command after each run and gets passed the local storages and paths of found files as a dictionary, as well as the command line options. It yields tuples of three values: original_path, processed_path, processed. The path values are strings and processed is a boolean indicating whether or not the value was post-processed, or an exception if post-processing failed.The ManifestStaticFilesStorage uses this behind the scenes to replace the paths with their hashed counterparts and update the cache appropriately.A subclass of the StaticFilesStorage storage backend which stores the file names it handles by appending the MD5 hash of the file s content to the filename. For example, the file css/styles.css would also be saved as css/styles.55e7cbb9ba48.css.The purpose of this storage is to keep serving the old files in case some pages still refer to those files, e.g. because they are cached by you or a 3rd party proxy server. Additionally, it s very helpful if you want to apply far future Expires headers to the deployed files to speed up the load time for subsequent page visits.The storage backend automatically replaces the paths found in the saved files matching other saved files with the path of the cached copy (using the post_process() method). The regular expressions used to find those paths (django.contrib.staticfiles.storage.HashedFilesMixin.patterns) by default covers the @import rule and url() statement of Cascading Style Sheets. For example, the 'css/styles.css' file with the contentwould be replaced by calling the url() method of the ManifestStaticFilesStorage storage backend, ultimately saving a 'css/styles.55e7cbb9ba48.css' file with the following content:Since static files might reference other static files that need to have their paths replaced, multiple passes of replacing paths may be needed until the file hashes converge. To prevent an infinite loop due to hashes not converging (for example, if 'foo.css' references 'bar.css' which references 'foo.css') there is a maximum number of passes before post-processing is abandoned. In cases with a large number of references, a higher number of passes might be needed. Increase the maximum number of passes by subclassing ManifestStaticFilesStorage and setting the max_post_process_passes attribute. It defaults to 5.To enable the ManifestStaticFilesStorage you have to make sure the following requirements are met:Since creating the MD5 hash can be a performance burden to your website during runtime, staticfiles will automatically store the mapping with hashed names for all processed files in a file called staticfiles.json. This happens once when you run the collectstatic management command.If a file isn t found in the staticfiles.json manifest at runtime, a ValueError is raised. This behavior can be disabled by subclassing ManifestStaticFilesStorage and setting the manifest_strict attribute to False   nonexistent paths will remain unchanged.Due to the requirement of running collectstatic, this storage typically shouldn t be used when running tests as collectstatic isn t run as part of the normal test setup. During testing, ensure that the STATICFILES_STORAGE setting is set to something else like 'django.contrib.staticfiles.storage.StaticFilesStorage' (the default).The method that is used when creating the hashed name of a file. Needs to return a hash for the given file name and content. By default it calculates a MD5 hash from the content s chunks as mentioned above. Feel free to override this method to use your own hashing algorithm.Deprecated since version 2.2: CachedStaticFilesStorage is deprecated as it has some intractable problems, some of which are outlined below. Use ManifestStaticFilesStorage or a third-party cloud storage instead.CachedStaticFilesStorage is a similar class like the ManifestStaticFilesStorage class but uses Django s caching framework for storing the hashed names of processed files instead of a static manifest file called staticfiles.json. This is mostly useful for situations in which you don t have access to the file system.If you want to override certain options of the cache backend the storage uses, simply specify a custom entry in the CACHES setting named 'staticfiles'. It falls back to using the 'default' cache backend.WarningCachedStaticFilesStorage isn t recommended    in almost all cases ManifestStaticFilesStorage is a better choice. There are several performance penalties when using CachedStaticFilesStorage since a cache miss requires hashing files at runtime. Remote file storage require several round-trips to hash a file on a cache miss, as several file accesses are required to ensure that the file hash is correct in the case of nested file paths.Use this mixin with a custom storage to append the MD5 hash of the file s content to the filename as ManifestStaticFilesStorage does."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#finders-module", "para": "staticfiles finders has a searched_locations attribute which is a list of directory paths in which the finders searched. Example usage:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#other-helpers", "para": "There are a few other helpers outside of the staticfiles app to work with static files:The static files tools are mostly designed to help with getting static files successfully deployed into production. This usually means a separate, dedicated static file server, which is a lot of overhead to mess with when developing locally. Thus, the staticfiles app ships with a quick and dirty helper view that you can use to serve files locally in development.This view function serves static files in development.WarningThis view will only work if DEBUG is True.That s because this view is grossly inefficient and probably insecure. This is only intended for local development, and should never be used in production.NoteTo guess the served files  content types, this view relies on the mimetypes module from the Python standard library, which itself relies on the underlying platform s map files. If you find that this view doesn t return proper content types for certain files, it is most likely that the platform s map files need to be updated. This can be achieved, for example, by installing or updating the mailcap package on a Red Hat distribution, or mime-support on a Debian distribution.This view is automatically enabled by runserver (with a DEBUG setting set to True). To use the view with a different local development server, add the following snippet to the end of your primary URL configuration:Note, the beginning of the pattern (r'^static/') should be your STATIC_URL setting.Since this is a bit finicky, there s also a helper function that ll do this for you:This will return the proper URL pattern for serving static files to your already defined pattern list. Use it like this:This will inspect your STATIC_URL setting and wire up the view to serve static files accordingly. Don t forget to set the STATICFILES_DIRS setting appropriately to let django.contrib.staticfiles know where to look for files in addition to files in app directories.WarningThis helper function will only work if DEBUG is True and your STATIC_URL setting is neither empty nor a full URL such as http://static.example.com/.That s because this view is grossly inefficient and probably insecure. This is only intended for local development, and should never be used in production.This unittest TestCase subclass extends django.test.LiveServerTestCase.Just like its parent, you can use it to write tests that involve running the code under test and consuming it with testing tools through HTTP (e.g. Selenium, PhantomJS, etc.), because of which it s needed that the static assets are also published.But given the fact that it makes use of the django.contrib.staticfiles.views.serve() view described above, it can transparently overlay at test execution-time the assets provided by the staticfiles finders. This means you don t need to run collectstatic before or as a part of your tests setup."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/validators/#writing-validators", "para": "A validator is a callable that takes a value and raises a ValidationError if it doesn t meet some criteria. Validators can be useful for re-using validation logic between different types of fields.For example, here s a validator that only allows even numbers:You can add this to a model field via the field s validators argument:Because values are converted to Python before validators are run, you can even use the same validator with forms:You can also use a class with a __call__() method for more complex or configurable validators. RegexValidator, for example, uses this technique. If a class-based validator is used in the validators model field option, you should make sure it is serializable by the migration framework by adding deconstruct() and __eq__() methods."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/validators/#how-validators-are-run", "para": "See the form validation for more information on how validators are run in forms, and Validating objects for how they re run in models. Note that validators will not be run automatically when you save a model, but if you are using a ModelForm, it will run your validators on any fields that are included in your form. See the ModelForm documentation for information on how model validation interacts with forms."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/validators/#built-in-validators", "para": "The django.core.validators module contains a collection of callable validators for use with model and form fields. They re used internally but are available for use with your own fields, too. They can be used in addition to, or in lieu of custom field.clean() methods.The regular expression pattern to search for within the provided value, or a pre-compiled regular expression. By default, raises a ValidationError with message and code if a match is not found. That standard behavior can be reversed by setting inverse_match to True, in which case the ValidationError is raised when a match is found. By default, matches any string (including an empty string).The error message used by ValidationError if validation fails. Defaults to \"Enter a valid value\".The error code used by ValidationError if validation fails. Defaults to \"invalid\".The match mode for regex. Defaults to False.The flags used when compiling the regular expression string regex. If regex is a pre-compiled regular expression, and flags is overridden, TypeError is raised. Defaults to 0.The error message used by ValidationError if validation fails. Defaults to \"Enter a valid email address\".The error code used by ValidationError if validation fails. Defaults to \"invalid\".Whitelist of email domains to allow. By default, a regular expression (the domain_regex attribute) is used to validate whatever appears after the @ sign. However, if that string appears in the whitelist, this validation is bypassed. If not provided, the default whitelist is ['localhost']. Other domains that don t contain a dot won t pass validation, so you d need to whitelist them as necessary.A RegexValidator that ensures a value looks like a URL, and raises an error code of 'invalid' if it doesn t.Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 addresses (RFC 2732) and unicode domains are both supported.In addition to the optional arguments of its parent RegexValidator class, URLValidator accepts an extra optional attribute:URL/URI scheme list to validate against. If not provided, the default list is ['http', 'https', 'ftp', 'ftps']. As a reference, the IANA website provides a full list of valid URI schemes.An EmailValidator instance without any customizations.A RegexValidator instance that ensures a value consists of only letters, numbers, underscores or hyphens.A RegexValidator instance that ensures a value consists of only Unicode letters, numbers, underscores, or hyphens.A RegexValidator instance that ensures a value looks like an IPv4 address.Uses django.utils.ipv6 to check the validity of an IPv6 address.Uses both validate_ipv4_address and validate_ipv6_address to ensure a value is either a valid IPv4 or IPv6 address.A RegexValidator instance that ensures a value is a comma-separated list of integers.Returns a RegexValidator instance that ensures a string consists of integers separated by sep. It allows negative integers when allow_negative is True.Raises a ValidationError with a code of 'max_value' if value is greater than limit_value, which may be a callable.limit_value can now be a callable.Raises a ValidationError with a code of 'min_value' if value is less than limit_value, which may be a callable.limit_value can now be a callable.Raises a ValidationError with a code of 'max_length' if the length of value is greater than limit_value, which may be a callable.limit_value can now be a callable.Raises a ValidationError with a code of 'min_length' if the length of value is less than limit_value, which may be a callable.limit_value can now be a callable.Raises ValidationError with the following codes:Raises a ValidationError with a code of 'invalid_extension' if the extension of value.name (value is a File) isn t found in allowed_extensions. The extension is compared case-insensitively with allowed_extensions.WarningDon t rely on validation of the file extension to determine a file s type. Files can be renamed to have any extension no matter what data they contain.Uses Pillow to ensure that value.name (value is a File) has a valid image extension.Raises a ValidationError if str(value) contains one or more nulls characters ('\\x00').The error message used by ValidationError if validation fails. Defaults to \"Null characters are not allowed.\".The error code used by ValidationError if validation fails. Defaults to \"null_characters_not_allowed\"."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/conditional-view-processing/#the-condition-decorator", "para": "Sometimes (in fact, quite often) you can create functions to rapidly compute the ETag value or the last-modified time for a resource, without needing to do all the computations needed to construct the full view. Django can then use these functions to provide an  early bailout  option for the view processing. Telling the client that the content has not been modified since the last request, perhaps.These two functions are passed as parameters to the django.views.decorators.http.condition decorator. This decorator uses the two functions (you only need to supply one, if you can t compute both quantities easily and quickly) to work out if the headers in the HTTP request match those on the resource. If they don t match, a new copy of the resource must be computed and your normal view is called.The condition decorator s signature looks like this:The two functions, to compute the ETag and the last modified time, will be passed the incoming request object and the same parameters, in the same order, as the view function they are helping to wrap. The function passed last_modified_func should return a standard datetime value specifying the last time the resource was modified, or None if the resource doesn t exist. The function passed to the etag decorator should return a string representing the ETag for the resource, or None if it doesn t exist.The decorator sets the ETag and Last-Modified headers on the response if they are not already set by the view and if the request s method is safe (GET or HEAD).Using this feature usefully is probably best explained with an example. Suppose you have this pair of models, representing a simple blog system:If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest published date for every entry associated with that blog. One way to do this would be:You can then use this function to provide early detection of an unchanged page for your front page view:Be careful with the order of decoratorsWhen condition() returns a conditional response, any decorators below it will be skipped and won t apply to the response. Therefore, any decorators that need to apply to both the regular view response and a conditional response must be above condition(). In particular, vary_on_cookie(), vary_on_headers(), and cache_control() should come first because RFC 7232 requires that the headers they set be present on 304 responses."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/conditional-view-processing/#shortcuts-for-only-computing-one-value", "para": "As a general rule, if you can provide functions to compute both the ETag and the last modified time, you should do so. You don t know which headers any given HTTP client will send you, so be prepared to handle both. However, sometimes only one value is easy to compute and Django provides decorators that handle only ETag or only last-modified computations.The django.views.decorators.http.etag and django.views.decorators.http.last_modified decorators are passed the same type of functions as the condition decorator. Their signatures are:We could write the earlier example, which only uses a last-modified function, using one of these decorators: or:It might look nicer to some people to try and chain the etag and last_modified decorators if you want to test both preconditions. However, this would lead to incorrect behavior.The first decorator doesn t know anything about the second and might answer that the response is not modified even if the second decorators would determine otherwise. The condition decorator uses both callback functions simultaneously to work out the right action to take."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/conditional-view-processing/#using-the-decorators-with-other-http-methods", "para": "The condition decorator is useful for more than only GET and HEAD requests (HEAD requests are the same as GET in this situation). It can also be used to provide checking for POST, PUT and DELETE requests. In these situations, the idea isn t to return a  not modified  response, but to tell the client that the resource they are trying to change has been altered in the meantime.For example, consider the following exchange between the client and server:The important thing this example shows is that the same functions can be used to compute the ETag and last modification values in all situations. In fact, you should use the same functions, so that the same values are returned every time.Validator headers with non-safe request methodsThe condition decorator only sets validator headers (ETag and Last-Modified) for safe HTTP methods, i.e. GET and HEAD. If you wish to return them in other cases, set them in your view. See RFC 7231#section-4.3.4 to learn about the distinction between setting a validator header in response to requests made with PUT versus POST."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/conditional-view-processing/#comparison-with-middleware-conditional-processing", "para": "Django provides simple and straightforward conditional GET handling via django.middleware.http.ConditionalGetMiddleware. While being easy to use and suitable for many situations, the middleware has limitations for advanced usage:You should choose the most appropriate tool for your particular problem here. If you have a way to compute ETags and modification times quickly and if some view takes a while to generate the content, you should consider using the condition decorator described in this document. If everything already runs fairly quickly, stick to using the middleware and the amount of network traffic sent back to the clients will still be reduced if the view hasn t changed."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/contenttypes/#overview", "para": "At the heart of the contenttypes application is the ContentType model, which lives at django.contrib.contenttypes.models.ContentType. Instances of ContentType represent and store information about the models installed in your project, and new instances of ContentType are automatically created whenever new models are installed.Instances of ContentType have methods for returning the model classes they represent and for querying objects from those models. ContentType also has a custom manager that adds methods for working with ContentType and for obtaining instances of ContentType for a particular model.Relations between your models and ContentType can also be used to enable  generic  relationships between an instance of one of your models and instances of any model you have installed."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/contenttypes/#installing-the-contenttypes-framework", "para": "The contenttypes framework is included in the default INSTALLED_APPS list created by django-admin startproject, but if you ve removed it or if you manually set up your INSTALLED_APPS list, you can enable it by adding 'django.contrib.contenttypes' to your INSTALLED_APPS setting.It s generally a good idea to have the contenttypes framework installed; several of Django s other bundled applications require it:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/contenttypes/#the-contenttype-model", "para": "Each instance of ContentType has two fields which, taken together, uniquely describe an installed model:The name of the application the model is part of. This is taken from the app_label attribute of the model, and includes only the last part of the application s Python import path; django.contrib.contenttypes, for example, becomes an app_label of contenttypes.The name of the model class.Additionally, the following property is available:The human-readable name of the content type. This is taken from the verbose_name attribute of the model.Let s look at an example to see how this works. If you already have the contenttypes application installed, and then add the sites application to your INSTALLED_APPS setting and run manage.py migrate to install it, the model django.contrib.sites.models.Site will be installed into your database. Along with it a new instance of ContentType will be created with the following values:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/contenttypes/#methods-on-contenttype-instances", "para": "Each ContentType instance has methods that allow you to get from a ContentType instance to the model it represents, or to retrieve objects from that model:Takes a set of valid lookup arguments for the model the ContentType represents, and does a get() lookup on that model, returning the corresponding object.Returns the model class represented by this ContentType instance.For example, we could look up the ContentType for the User model:And then use it to query for a particular User, or to get access to the User model class:Together, get_object_for_this_type() and model_class() enable two extremely important use cases:Several of Django s bundled applications make use of the latter technique. For example, the permissions system in Django s authentication framework uses a Permission model with a foreign key to ContentType; this lets Permission represent concepts like  can add blog entry  or  can delete news story .ContentType also has a custom manager, ContentTypeManager, which adds the following methods:Clears an internal cache used by ContentType to keep track of models for which it has created ContentType instances. You probably won t ever need to call this method yourself; Django will call it automatically when it s needed.Lookup a ContentType by ID. Since this method uses the same shared cache as get_for_model(), it s preferred to use this method over the usual ContentType.objects.get(pk=id)Takes either a model class or an instance of a model, and returns the ContentType instance representing that model. for_concrete_model=False allows fetching the ContentType of a proxy model.Takes a variadic number of model classes, and returns a dictionary mapping the model classes to the ContentType instances representing them. for_concrete_models=False allows fetching the ContentType of proxy models.Returns the ContentType instance uniquely identified by the given application label and model name. The primary purpose of this method is to allow ContentType objects to be referenced via a natural key during deserialization.The get_for_model() method is especially useful when you know you need to work with a ContentType but don t want to go to the trouble of obtaining the model s metadata to perform a manual lookup:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/contenttypes/#generic-relations", "para": "Adding a foreign key from one of your own models to ContentType allows your model to effectively tie itself to another model class, as in the example of the Permission model above. But it s possible to go one step further and use ContentType to enable truly generic (sometimes called  polymorphic ) relationships between models.A simple example is a tagging system, which might look like this:A normal ForeignKey can only  point to  one other model, which means that if the TaggedItem model used a ForeignKey it would have to choose one and only one model to store tags for. The contenttypes application provides a special field type (GenericForeignKey) which works around this and allows the relationship to be with any model:There are three parts to setting up a GenericForeignKey:If False, the field will be able to reference proxy models. Default is True. This mirrors the for_concrete_model argument to get_for_model().Primary key type compatibilityThe  object_id  field doesn t have to be the same type as the primary key fields on the related models, but their primary key values must be coercible to the same type as the  object_id  field by its get_db_prep_value() method.For example, if you want to allow generic relations to models with either IntegerField or CharField primary key fields, you can use CharField for the  object_id  field on your model since integers can be coerced to strings by get_db_prep_value().For maximum flexibility you can use a TextField which doesn t have a maximum length defined, however this may incur significant performance penalties depending on your database backend.There is no one-size-fits-all solution for which field type is best. You should evaluate the models you expect to be pointing to and determine which solution will be most effective for your use case.Serializing references to ContentType objectsIf you re serializing data (for example, when generating fixtures) from a model that implements generic relations, you should probably be using a natural key to uniquely identify related ContentType objects. See natural keys and dumpdata --natural-foreign for more information.This will enable an API similar to the one used for a normal ForeignKey; each TaggedItem will have a content_object field that returns the object it s related to, and you can also assign to that field or use it when creating a TaggedItem:If the related object is deleted, the content_type and object_id fields remain set to their original values and the GenericForeignKey returns None:Due to the way GenericForeignKey is implemented, you cannot use such fields directly with filters (filter() and exclude(), for example) via the database API. Because a GenericForeignKey isn t a normal field object, these examples will not work:Likewise, GenericForeignKeys does not appear in ModelForms.The relation on the related object back to this object doesn t exist by default. Setting related_query_name creates a relation from the related object back to this one. This allows querying and filtering from the related object.If you know which models you ll be using most often, you can also add a  reverse  generic relationship to enable an additional API. For example:Bookmark instances will each have a tags attribute, which can be used to retrieve their associated TaggedItems:Defining GenericRelation with related_query_name set allows querying from the related object:This enables filtering, ordering, and other query operations on Bookmark from TaggedItem:Of course, if you don t add the related_query_name, you can do the same types of lookups manually:Just as GenericForeignKey accepts the names of the content-type and object-ID fields as arguments, so too does GenericRelation; if the model which has the generic foreign key is using non-default names for those fields, you must pass the names of the fields when setting up a GenericRelation to it. For example, if the TaggedItem model referred to above used fields named content_type_fk and object_primary_key to create its generic foreign key, then a GenericRelation back to it would need to be defined like so:Note also, that if you delete an object that has a GenericRelation, any objects which have a GenericForeignKey pointing at it will be deleted as well. In the example above, this means that if a Bookmark object were deleted, any TaggedItem objects pointing at it would be deleted at the same time.Unlike ForeignKey, GenericForeignKey does not accept an on_delete argument to customize this behavior; if desired, you can avoid the cascade-deletion simply by not using GenericRelation, and alternate behavior can be provided via the pre_delete signal.Django s database aggregation API works with a GenericRelation. For example, you can find out how many tags all the bookmarks have:The django.contrib.contenttypes.forms module provides:Returns a GenericInlineFormSet using modelformset_factory().You must provide ct_field and fk_field if they are different from the defaults, content_type and object_id respectively. Other parameters are similar to those documented in modelformset_factory() and inlineformset_factory().The for_concrete_model argument corresponds to the for_concrete_model argument on GenericForeignKey.The django.contrib.contenttypes.admin module provides GenericTabularInline and GenericStackedInline (subclasses of GenericInlineModelAdmin)These classes and functions enable the use of generic relations in forms and the admin. See the model formset and admin documentation for more information.The GenericInlineModelAdmin class inherits all properties from an InlineModelAdmin class. However, it adds a couple of its own for working with the generic relation:The name of the ContentType foreign key field on the model. Defaults to content_type.The name of the integer field that represents the ID of the related object. Defaults to object_id.Subclasses of GenericInlineModelAdmin with stacked and tabular layouts, respectively."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/flatpages/#installation", "para": "To install the flatpages app, follow these steps:Install the sites framework by adding 'django.contrib.sites' to your INSTALLED_APPS setting, if it s not already in there.Also make sure you ve correctly set SITE_ID to the ID of the site the settings file represents. This will usually be 1 (i.e. SITE_ID = 1, but if you re using the sites framework to manage multiple sites, it could be the ID of a different site.Add 'django.contrib.flatpages' to your INSTALLED_APPS setting.Then either:Add an entry in your URLconf. For example:or:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/flatpages/#how-it-works", "para": "manage.py migrate creates two tables in your database: django_flatpage and django_flatpage_sites. django_flatpage is a simple lookup table that simply maps a URL to a title and bunch of text content. django_flatpage_sites associates a flatpage with a site.There are several ways to include the flat pages in your URLconf. You can dedicate a particular path to flat pages:You can also set it up as a  catchall  pattern. In this case, it is important to place the pattern at the end of the other urlpatterns:WarningIf you set APPEND_SLASH to False, you must remove the slash in the catchall pattern or flatpages without a trailing slash will not be matched.Another common setup is to use flat pages for a limited set of known pages and to hard code the urls, so you can reference them with the url template tag:The FlatpageFallbackMiddleware can do all of the work.Each time any Django application raises a 404 error, this middleware checks the flatpages database for the requested URL as a last resort. Specifically, it checks for a flatpage with the given URL with a site ID that corresponds to the SITE_ID setting.If it finds a match, it follows this algorithm:The middleware will only add a trailing slash and redirect (by looking at the APPEND_SLASH setting) if the resulting URL refers to a valid flatpage. Redirects are permanent (301 status code).If it doesn t find a match, the request continues to be processed as usual.The middleware only gets activated for 404s   not for 500s or responses of any other status code.Flatpages will not apply view middlewareBecause the FlatpageFallbackMiddleware is applied only after URL resolution has failed and produced a 404, the response it returns will not apply any view middleware methods. Only requests which are successfully routed to a view via normal URL resolution apply view middleware.Note that the order of MIDDLEWARE matters. Generally, you can put FlatpageFallbackMiddleware at the end of the list. This means it will run first when processing the response, and ensures that any other response-processing middleware see the real flatpage response rather than the 404.For more on middleware, read the middleware docs.Ensure that your 404 template worksNote that the FlatpageFallbackMiddleware only steps in once another view has successfully produced a 404 response. If another view or middleware class attempts to produce a 404 but ends up raising an exception instead, the response will become an HTTP 500 ( Internal Server Error ) and the FlatpageFallbackMiddleware will not attempt to serve a flat page."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/flatpages/#how-to-add-change-and-delete-flatpages", "para": "If you ve activated the automatic Django admin interface, you should see a  Flatpages  section on the admin index page. Edit flatpages as you edit any other object in the system.The FlatPage model has an enable_comments field that isn t used by contrib.flatpages, but that could be useful for your project or third-party apps. It doesn t appear in the admin interface, but you can add it by registering a custom ModelAdmin for FlatPage:Flatpages are represented by a standard Django model, which lives in django/contrib/flatpages/models.py. You can access flatpage objects via the Django database API.Check for duplicate flatpage URLs.If you add or modify flatpages via your own code, you will likely want to check for duplicate flatpage URLs within the same site. The flatpage form used in the admin performs this validation check, and can be imported from django.contrib.flatpages.forms.FlatpageForm and used in your own views."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/flatpages/#flatpage-templates", "para": "By default, flatpages are rendered via the template flatpages/default.html, but you can override that for a particular flatpage: in the admin, a collapsed fieldset titled  Advanced options  (clicking will expand it) contains a field for specifying a template name. If you re creating a flat page via the Python API you can simply set the template name as the field template_name on the FlatPage object.Creating the flatpages/default.html template is your responsibility; in your template directory, just create a flatpages directory containing a file default.html.Flatpage templates are passed a single context variable, flatpage, which is the flatpage object.Here s a sample flatpages/default.html template:Since you re already entering raw HTML into the admin page for a flatpage, both flatpage.title and flatpage.content are marked as not requiring automatic HTML escaping in the template."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/flatpages/#django.contrib.flatpages.models.FlatPage", "para": "The flatpages app provides a template tag that allows you to iterate over all of the available flatpages on the current site.Like all custom template tags, you ll need to load its custom tag library before you can use it. After loading the library, you can retrieve all current flatpages via the get_flatpages tag:By default, the get_flatpages template tag will only show flatpages that are marked registration_required = False. If you want to display registration-protected flatpages, you need to specify an authenticated user using a for clause.For example:If you provide an anonymous user, get_flatpages will behave the same as if you hadn t provided a user   i.e., it will only show you public flatpages.An optional argument, starts_with, can be applied to limit the returned pages to those beginning with a particular base URL. This argument may be passed as a string, or as a variable to be resolved from the context.For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/flatpages/../sitemaps/#module-django.contrib.sitemaps", "para": "The sitemaps.FlatPageSitemap class looks at all publicly visible flatpages defined for the current SITE_ID (see the sites documentation) and creates an entry in the sitemap. These entries include only the location attribute   not lastmod, changefreq or priority.Here s an example of a URLconf using FlatPageSitemap:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/redirects/#installation", "para": "To install the redirects app, follow these steps:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/redirects/#how-it-works", "para": "manage.py migrate creates a django_redirect table in your database. This is a simple lookup table with site_id, old_path and new_path fields.The RedirectFallbackMiddleware does all of the work. Each time any Django application raises a 404 error, this middleware checks the redirects database for the requested URL as a last resort. Specifically, it checks for a redirect with the given old_path with a site ID that corresponds to the SITE_ID setting.The middleware only gets activated for 404s   not for 500s or responses of any other status code.Note that the order of MIDDLEWARE matters. Generally, you can put RedirectFallbackMiddleware at the end of the list, because it s a last resort.For more on middleware, read the middleware docs."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/redirects/#how-to-add-change-and-delete-redirects", "para": "If you ve activated the automatic Django admin interface, you should see a  Redirects  section on the admin index page. Edit redirects as you edit any other object in the system.Redirects are represented by a standard Django model, which lives in django/contrib/redirects/models.py. You can access redirect objects via the Django database API."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/redirects/#middleware", "para": "You can change the HttpResponse classes used by the middleware by creating a subclass of RedirectFallbackMiddleware and overriding response_gone_class and/or response_redirect_class.The HttpResponse class used when a Redirect is not found for the requested path or has a blank new_path value.Defaults to HttpResponseGone.The HttpResponse class that handles the redirect.Defaults to HttpResponsePermanentRedirect."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/signals/#listening-to-signals", "para": "To receive a signal, register a receiver function using the Signal.connect() method. The receiver function is called when the signal is sent.Let s see how this works by registering a signal that gets called after each HTTP request is finished. We ll be connecting to the request_finished signal.First, we need to define a receiver function. A receiver can be any Python function or method:Notice that the function takes a sender argument, along with wildcard keyword arguments (**kwargs); all signal handlers must take these arguments.We ll look at senders a bit later, but right now look at the **kwargs argument. All signals send keyword arguments, and may change those keyword arguments at any time. In the case of request_finished, it s documented as sending no arguments, which means we might be tempted to write our signal handling as my_callback(sender).This would be wrong   in fact, Django will throw an error if you do so. That s because at any point arguments could get added to the signal and your receiver must be able to handle those new arguments.There are two ways you can connect a receiver to a signal. You can take the manual connect route:Alternatively, you can use a receiver() decorator:Here s how you connect with the decorator:Now, our my_callback function will be called each time a request finishes.Where should this code live?Strictly speaking, signal handling and registration code can live anywhere you like, although it s recommended to avoid the application s root module and its models module to minimize side-effects of importing code.In practice, signal handlers are usually defined in a signals submodule of the application they relate to. Signal receivers are connected in the ready() method of your application configuration class. If you re using the receiver() decorator, simply import the signals submodule inside ready().NoteThe ready() method may be executed more than once during testing, so you may want to guard your signals from duplication, especially if you re planning to send them within tests.Some signals get sent many times, but you ll only be interested in receiving a certain subset of those signals. For example, consider the django.db.models.signals.pre_save signal sent before a model gets saved. Most of the time, you don t need to know when any model gets saved   just when one specific model is saved.In these cases, you can register to receive signals sent only by particular senders. In the case of django.db.models.signals.pre_save, the sender will be the model class being saved, so you can indicate that you only want signals sent by some model:The my_handler function will only be called when an instance of MyModel is saved.Different signals use different objects as their senders; you ll need to consult the built-in signal documentation for details of each particular signal.In some circumstances, the code connecting receivers to signals may run multiple times. This can cause your receiver function to be registered more than once, and thus called multiple times for a single signal event.If this behavior is problematic (such as when using signals to send an email whenever a model is saved), pass a unique identifier as the dispatch_uid argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique dispatch_uid value:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/signals/#defining-and-sending-signals", "para": "Your applications can take advantage of the signal infrastructure and provide its own signals.All signals are django.dispatch.Signal instances. The providing_args is a list of the names of arguments the signal will provide to listeners. This is purely documentational, however, as there is nothing that checks that the signal actually provides these arguments to its listeners.For example:This declares a pizza_done signal that will provide receivers with toppings and size arguments.Remember that you re allowed to change this list of arguments at any time, so getting the API right on the first try isn t necessary.There are two ways to send signals in Django.To send a signal, call either Signal.send() (all built-in signals use this) or Signal.send_robust(). You must provide the sender argument (which is a class most of the time) and may provide as many other keyword arguments as you like.For example, here s how sending our pizza_done signal might look:Both send() and send_robust() return a list of tuple pairs [(receiver, response), ... ], representing the list of called receiver functions and their response values.send() differs from send_robust() in how exceptions raised by receiver functions are handled. send() does not catch any exceptions raised by receivers; it simply allows errors to propagate. Thus not all receivers may be notified of a signal in the face of an error.send_robust() catches all errors derived from Python s Exception class, and ensures all receivers are notified of the signal. If an error occurs, the error instance is returned in the tuple pair for the receiver that raised the error.The tracebacks are present on the __traceback__ attribute of the errors returned when calling send_robust()."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/signals/#disconnecting-signals", "para": "To disconnect a receiver from a signal, call Signal.disconnect(). The arguments are as described in Signal.connect(). The method returns True if a receiver was disconnected and False if not.The receiver argument indicates the registered receiver to disconnect. It may be None if dispatch_uid is used to identify the receiver."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/checks/#writing-your-own-checks", "para": "The framework is flexible and allows you to write functions that perform any other kind of check you may require. The following is an example stub check function:The check function must accept an app_configs argument; this argument is the list of applications that should be inspected. If None, the check must be run on all installed apps in the project. The **kwargs argument is required for future expansion.The function must return a list of messages. If no problems are found as a result of the check, the check function must return an empty list.The warnings and errors raised by the check method must be instances of CheckMessage. An instance of CheckMessage encapsulates a single reportable error or warning. It also provides context and hints applicable to the message, and a unique identifier that is used for filtering purposes.The concept is very similar to messages from the message framework or the logging framework. Messages are tagged with a level indicating the severity of the message.There are also shortcuts to make creating messages with common levels easier. When using these classes you can omit the level argument because it is implied by the class name.Lastly, your check function must be registered explicitly with system check registry. Checks should be registered in a file that s loaded when your application is loaded; for example, in the AppConfig.ready() method.You can pass as many tags to register as you want in order to label your check. Tagging checks is useful since it allows you to run only a certain group of checks. For example, to register a compatibility check, you would make the following call:You can register  deployment checks  that are only relevant to a production settings file like this:These checks will only be run if the check --deploy option is used.You can also use register as a function rather than a decorator by passing a callable object (usually a function) as the first argument to register.The code below is equivalent to the code above:In some cases, you won t need to register your check function   you can piggyback on an existing registration.Fields, models, model managers, and database backends all implement a check() method that is already registered with the check framework. If you want to add extra checks, you can extend the implementation on the base class, perform any extra checks you need, and append any messages to those generated by the base class. It s recommended that you delegate each check to separate methods.Consider an example where you are implementing a custom field named RangedIntegerField. This field adds min and max arguments to the constructor of IntegerField. You may want to add a check to ensure that users provide a min value that is less than or equal to the max value. The following code snippet shows how you can implement this check:If you wanted to add checks to a model manager, you would take the same approach on your subclass of Manager.If you want to add a check to a model class, the approach is almost the same: the only difference is that the check is a classmethod, not an instance method:Messages are comparable. That allows you to easily write tests:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#example-usage", "para": "Why would you use sites? It s best explained through examples.The Django-powered sites LJWorld.com and Lawrence.com are operated by the same news organization   the Lawrence Journal-World newspaper in Lawrence, Kansas. LJWorld.com focuses on news, while Lawrence.com focuses on local entertainment. But sometimes editors want to publish an article on both sites.The naive way of solving the problem would be to require site producers to publish the same story twice: once for LJWorld.com and again for Lawrence.com. But that s inefficient for site producers, and it s redundant to store multiple copies of the same story in the database.The better solution is simple: Both sites use the same article database, and an article is associated with one or more sites. In Django model terminology, that s represented by a ManyToManyField in the Article model:This accomplishes several things quite nicely:It lets the site producers edit all content   on both sites   in a single interface (the Django admin).It means the same story doesn t have to be published twice in the database; it only has a single record in the database.It lets the site developers use the same Django view code for both sites. The view code that displays a given story just checks to make sure the requested story is on the current site. It looks something like this:Similarly, you can associate a model to the Site model in a many-to-one relationship, using ForeignKey.For example, if an article is only allowed on a single site, you d use a model like this:This has the same benefits as described in the last section.You can use the sites framework in your Django views to do particular things based on the site in which the view is being called. For example:Of course, it s ugly to hard-code the site IDs like that. This sort of hard-coding is best for hackish fixes that you need done quickly. The cleaner way of accomplishing the same thing is to check the current site s domain:This has also the advantage of checking if the sites framework is installed, and return a RequestSite instance if it is not.If you don t have access to the request object, you can use the get_current() method of the Site model s manager. You should then ensure that your settings file does contain the SITE_ID setting. This example is equivalent to the previous one:LJWorld.com and Lawrence.com both have email alert functionality, which lets readers sign up to get notifications when news happens. It s pretty basic: A reader signs up on a Web form and immediately gets an email saying,  Thanks for your subscription. It d be inefficient and redundant to implement this sign up processing code twice, so the sites use the same code behind the scenes. But the  thank you for signing up  notice needs to be different for each site. By using Site objects, we can abstract the  thank you  notice to use the values of the current site s name and domain.Here s an example of what the form-handling view looks like:On Lawrence.com, this email has the subject line  Thanks for subscribing to lawrence.com alerts.  On LJWorld.com, the email has the subject  Thanks for subscribing to LJWorld.com alerts.  Same goes for the email s message body.Note that an even more flexible (but more heavyweight) way of doing this would be to use Django s template system. Assuming Lawrence.com and LJWorld.com have different template directories (DIRS), you could simply farm out to the template system like so:In this case, you d have to create subject.txt and message.txt template files for both the LJWorld.com and Lawrence.com template directories. That gives you more flexibility, but it s also more complex.It s a good idea to exploit the Site objects as much as possible, to remove unneeded complexity and redundancy.Django s get_absolute_url() convention is nice for getting your objects  URL without the domain name, but in some cases you might want to display the full URL   with http:// and the domain and everything   for an object. To do this, you can use the sites framework. A simple example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#enabling-the-sites-framework", "para": "To enable the sites framework, follow these steps:Add 'django.contrib.sites' to your INSTALLED_APPS setting.Define a SITE_ID setting:Run migrate.django.contrib.sites registers a post_migrate signal handler which creates a default site named example.com with the domain example.com. This site will also be created after Django creates the test database. To set the correct name and domain for your project, you can use a data migration.In order to serve different sites in production, you d create a separate settings file with each SITE_ID (perhaps importing from a common settings file to avoid duplicating shared settings) and then specify the appropriate DJANGO_SETTINGS_MODULE for each site."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#caching-the-current-site-object", "para": "As the current site is stored in the database, each call to Site.objects.get_current() could result in a database query. But Django is a little cleverer than that: on the first request, the current site is cached, and any subsequent call returns the cached data instead of hitting the database.If for any reason you want to force a database query, you can tell Django to clear the cache using Site.objects.clear_cache():"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#the-currentsitemanager", "para": "If Site plays a key role in your application, consider using the helpful CurrentSiteManager in your model(s). It s a model manager that automatically filters its queries to include only objects associated with the current Site.Mandatory SITE_IDThe CurrentSiteManager is only usable when the SITE_ID setting is defined in your settings.Use CurrentSiteManager by adding it to your model explicitly. For example:With this model, Photo.objects.all() will return all Photo objects in the database, but Photo.on_site.all() will return only the Photo objects associated with the current site, according to the SITE_ID setting.Put another way, these two statements are equivalent:How did CurrentSiteManager know which field of Photo was the Site? By default, CurrentSiteManager looks for a either a ForeignKey called site or a ManyToManyField called sites to filter on. If you use a field named something other than site or sites to identify which Site objects your object is related to, then you need to explicitly pass the custom field name as a parameter to CurrentSiteManager on your model. The following model, which has a field called publish_on, demonstrates this:If you attempt to use CurrentSiteManager and pass a field name that doesn t exist, Django will raise a ValueError.Finally, note that you ll probably want to keep a normal (non-site-specific) Manager on your model, even if you use CurrentSiteManager. As explained in the manager documentation, if you define a manager manually, then Django won t create the automatic objects = models.Manager() manager for you. Also note that certain parts of Django   namely, the Django admin site and generic views   use whichever manager is defined first in the model, so if you want your admin site to have access to all objects (not just site-specific ones), put objects = models.Manager() in your model, before you define CurrentSiteManager."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#site-middleware", "para": "If you often use this pattern:there is simple way to avoid repetitions. Add django.contrib.sites.middleware.CurrentSiteMiddleware to MIDDLEWARE. The middleware sets the site attribute on every request object, so you can use request.site to get the current site."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#how-django-uses-the-sites-framework", "para": "Although it s not required that you use the sites framework, it s strongly encouraged, because Django takes advantage of it in a few places. Even if your Django installation is powering only a single site, you should take the two seconds to create the site object with your domain and name, and point to its ID in your SITE_ID setting.Here s how Django uses the sites framework:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#requestsite-objects", "para": "Some django.contrib applications take advantage of the sites framework but are architected in a way that doesn t require the sites framework to be installed in your database. (Some people don t want to, or just aren t able to install the extra database table that the sites framework requires.) For those cases, the framework provides a django.contrib.sites.requests.RequestSite class, which can be used as a fallback when the database-backed sites framework is not available.A class that shares the primary interface of Site (i.e., it has domain and name attributes) but gets its data from a Django HttpRequest object rather than from a database.Sets the name and domain attributes to the value of get_host().A RequestSite object has a similar interface to a normal Site object, except its __init__() method takes an HttpRequest object. It s able to deduce the domain and name by looking at the request s domain. It has save() and delete() methods to match the interface of Site, but the methods raise NotImplementedError."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#get-current-site-shortcut", "para": "Finally, to avoid repetitive fallback code, the framework provides a django.contrib.sites.shortcuts.get_current_site() function.A function that checks if django.contrib.sites is installed and returns either the current Site object or a RequestSite object based on the request. It looks up the current site based on request.get_host() if the SITE_ID setting is not defined.Both a domain and a port may be returned by request.get_host() when the Host header has a port explicitly specified, e.g. example.com:80. In such cases, if the lookup fails because the host does not match a record in the database, the port is stripped and the lookup is retried with the domain part only. This does not apply to RequestSite which will always use the unmodified host."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/unicode/#creating-the-database", "para": "Make sure your database is configured to be able to store arbitrary string data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you use a more restrictive encoding   for example, latin1 (iso8859-1)   you won t be able to store certain characters in the database, and information will be lost.All of Django s database backends automatically convert strings into the appropriate encoding for talking to the database. They also automatically convert strings retrieved from the database into strings. You don t even need to tell Django what encoding your database uses: that is handled transparently.For more, see the section  The database API  below."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/unicode/#general-string-handling", "para": "Whenever you use strings with Django   e.g., in database lookups, template rendering or anywhere else   you have two choices for encoding those strings. You can use normal strings or bytestrings (starting with a  b ).WarningA bytestring does not carry any information with it about its encoding. For that reason, we have to make an assumption, and Django assumes that all bytestrings are in UTF-8.If you pass a string to Django that has been encoded in some other format, things will go wrong in interesting ways. Usually, Django will raise a UnicodeDecodeError at some point.If your code only uses ASCII data, it s safe to use your normal strings, passing them around at will, because ASCII is a subset of UTF-8.Don t be fooled into thinking that if your DEFAULT_CHARSET setting is set to something other than 'utf-8' you can use that other encoding in your bytestrings! DEFAULT_CHARSET only applies to the strings generated as the result of template rendering (and email). Django will always assume UTF-8 encoding for internal bytestrings. The reason for this is that the DEFAULT_CHARSET setting is not actually under your control (if you are the application developer). It s under the control of the person installing and using your application   and if that person chooses a different setting, your code must still continue to work. Ergo, it cannot rely on that setting.In most cases when Django is dealing with strings, it will convert them to strings before doing anything else. So, as a general rule, if you pass in a bytestring, be prepared to receive a string back in the result.Aside from strings and bytestrings, there s a third type of string-like object you may encounter when using Django. The framework s internationalization features introduce the concept of a  lazy translation    a string that has been marked as translated but whose actual translation result isn t determined until the object is used in a string. This feature is useful in cases where the translation locale is unknown until the string is used, even though the string might have originally been created when the code was first imported.Normally, you won t have to worry about lazy translations. Just be aware that if you examine an object and it claims to be a django.utils.functional.__proxy__ object, it is a lazy translation. Calling str() with the lazy translation as the argument will generate a string in the current locale.For more details about lazy translation objects, refer to the internationalization documentation.Because some string operations come up again and again, Django ships with a few useful functions that should make working with string and bytestring objects a bit easier.The django.utils.encoding module contains a few functions that are handy for converting back and forth between strings and bytestrings.Normally, you ll only need to use force_text(). Call it as early as possible on any input data that might be either a string or a bytestring, and from then on, you can treat the result as always being a string.Web frameworks have to deal with URLs (which are a type of IRI). One requirement of URLs is that they are encoded using only ASCII characters. However, in an international environment, you might need to construct a URL from an IRI   very loosely speaking, a URI that can contain Unicode characters. Use these functions for quoting and converting an IRI to a URI:These two groups of functions have slightly different purposes, and it s important to keep them straight. Normally, you would use quote() on the individual portions of the IRI or URI path so that any reserved characters such as  &  or  %  are correctly encoded. Then, you apply iri_to_uri() to the full IRI and it converts any non-ASCII characters to the correct encoded values.NoteTechnically, it isn t correct to say that iri_to_uri() implements the full algorithm in the IRI specification. It doesn t (yet) perform the international domain name encoding portion of the algorithm.The iri_to_uri() function will not change ASCII characters that are otherwise permitted in a URL. So, for example, the character  %  is not further encoded when passed to iri_to_uri(). This means you can pass a full URL to this function and it will not mess up the query string or anything like that.An example might clarify things here:If you look carefully, you can see that the portion that was generated by quote() in the second example was not double-quoted when passed to iri_to_uri(). This is a very important and useful feature. It means that you can construct your IRI without worrying about whether it contains non-ASCII characters and then, right at the end, call iri_to_uri() on the result.Similarly, Django provides django.utils.encoding.uri_to_iri() which implements the conversion from URI to IRI as per RFC 3987#section-3.2.An example to demonstrate:In the first example, the UTF-8 characters are unquoted. In the second, the percent-encodings remain unchanged because they lie outside the valid UTF-8 range or represent a reserved character.Both iri_to_uri() and uri_to_iri() functions are idempotent, which means the following is always true:So you can safely call it multiple times on the same URI/IRI without risking double-quoting problems."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/unicode/#models", "para": "Because all strings are returned from the database as str objects, model fields that are character based (CharField, TextField, URLField, etc.) will contain Unicode values when Django retrieves data from the database. This is always the case, even if the data could fit into an ASCII bytestring.You can pass in bytestrings when creating a model or populating a field, and Django will convert it to strings when it needs to.URLs can only contain ASCII characters. If you re constructing a URL from pieces of data that might be non-ASCII, be careful to encode the results in a way that is suitable for a URL. The reverse() function handles this for you automatically.If you re constructing a URL manually (i.e., not using the reverse() function), you ll need to take care of the encoding yourself. In this case, use the iri_to_uri() and quote() functions that were documented above. For example:This function returns a correctly encoded URL even if self.location is something like  Jack visited Paris & Orl ans . (In fact, the iri_to_uri() call isn t strictly necessary in the above example, because all the non-ASCII characters would have been removed in quoting in the first line.)"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/unicode/#templates", "para": "Use strings when creating templates manually:But the common case is to read templates from the filesystem. If your template files are not stored with a UTF-8 encoding, adjust the TEMPLATES setting. The built-in django backend provides the 'file_charset' option to change the encoding used to read files from disk.The DEFAULT_CHARSET setting controls the encoding of rendered templates. This is set to UTF-8 by default.A couple of tips to remember when writing your own template tags and filters:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/unicode/#files", "para": "If you intend to allow users to upload files, you must ensure that the environment used to run Django is configured to work with non-ASCII file names. If your environment isn t configured correctly, you ll encounter UnicodeEncodeError exceptions when saving files with file names that contain non-ASCII characters.Filesystem support for UTF-8 file names varies and might depend on the environment. Check your current configuration in an interactive Python shell by running:This should output  UTF-8 .The LANG environment variable is responsible for setting the expected encoding on Unix platforms. Consult the documentation for your operating system and application server for the appropriate syntax and location to set this variable.In your development environment, you might need to add a setting to your ~.bashrc analogous to::"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/unicode/#form-submission", "para": "HTML form submission is a tricky area. There s no guarantee that the submission will include encoding information, which means the framework might have to guess at the encoding of submitted data.Django adopts a  lazy  approach to decoding form data. The data in an HttpRequest object is only decoded when you access it. In fact, most of the data is not decoded at all. Only the HttpRequest.GET and HttpRequest.POST data structures have any decoding applied to them. Those two fields will return their members as Unicode data. All other attributes and methods of HttpRequest return data exactly as it was submitted by the client.By default, the DEFAULT_CHARSET setting is used as the assumed encoding for form data. If you need to change this for a particular form, you can set the encoding attribute on an HttpRequest instance. For example:You can even change the encoding after having accessed request.GET or request.POST, and all subsequent accesses will use the new encoding.Most developers won t need to worry about changing form encoding, but this is a useful feature for applications that talk to legacy systems whose encoding you cannot control.Django does not decode the data of file uploads, because that data is normally treated as collections of bytes, rather than strings. Any automatic decoding there would alter the meaning of the stream of bytes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/release-process/#official-releases", "para": "Since version 1.0, Django s release numbering works as follows:In git, each Django release will have a tag indicating its version number, signed with the Django release key. Additionally, each release series has its own branch, called stable/A.B.x, and bugfix/security releases will be issued from those branches.For more information about how the Django project issues new releases for security purposes, please see our security policies.Patch releases (A.B.C, A.B.C+1, etc.) will be issued as needed, to fix bugs and/or security issues.These releases will be 100% compatible with the associated feature release, unless this is impossible for security reasons or to prevent data loss. So the answer to  should I upgrade to the latest patch release?  will always be  yes. Certain feature releases will be designated as long-term support (LTS) releases. These releases will get security and data loss fixes applied for a guaranteed period of time, typically three years.See the download page for the releases that have been designated for long-term support."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/release-process/#release-cadence", "para": "Starting with Django 2.0, version numbers will use a loose form of semantic versioning such that each version following an LTS will bump to the next  dot zero  version. For example: 2.0, 2.1, 2.2 (LTS), 3.0, 3.1, 3.2 (LTS), etc.SemVer makes it easier to see at a glance how compatible releases are with each other. It also helps to anticipate when compatibility shims will be removed. It s not a pure form of SemVer as each feature release will continue to have a few documented backwards incompatibilities where a deprecation path isn t possible or not worth the cost. Also, deprecations started in an LTS release (X.2) will be dropped in a non-dot-zero release (Y.1) to accommodate our policy of keeping deprecation shims for at least two feature releases. Read on to the next section for an example."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/release-process/#deprecation-policy", "para": "A feature release may deprecate certain features from previous releases. If a feature is deprecated in feature release A.x, it will continue to work in all A.x versions (for all versions of x) but raise warnings. Deprecated features will be removed in the B.0 release, or B.1 for features deprecated in the last A.x feature release to ensure deprecations are done over at least 2 feature releases.So, for example, if we decided to start the deprecation of a function in Django 4.2:The warnings are silent by default. You can turn on display of these warnings with the python -Wd option.A more generic example:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/release-process/#supported-versions", "para": "At any moment in time, Django s developer team will support a set of releases to varying levels. See the supported versions section of the download page for the current state of support for each version.The current development master will get new features and bug fixes requiring non-trivial refactoring.Patches applied to the master branch must also be applied to the last feature release branch, to be released in the next patch release of that feature series, when they fix critical problems:The rule of thumb is that fixes will be backported to the last feature release for bugs that would have prevented a release in the first place (release blockers).Security fixes and data loss bugs will be applied to the current master, the last two feature release branches, and any other supported long-term support release branches.Documentation fixes generally will be more freely backported to the last release branch. That s because it s highly advantageous to have the docs for the last release be up-to-date and correct, and the risk of introducing regressions is much less of a concern.As a concrete example, consider a moment in time halfway between the release of Django 5.1 and 5.2. At this point in time:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/release-process/#release-process", "para": "Django uses a time-based release schedule, with feature releases every eight months or so.After each feature release, the release manager will announce a timeline for the next feature release.Each release cycle consists of three parts:The first phase of the release process will include figuring out what major features to include in the next version. This should include a good deal of preliminary work on those features   working code trumps grand design.Major features for an upcoming release will be added to the wiki roadmap page, e.g. https://code.djangoproject.com/wiki/Version1.11Roadmap.The second part of the release schedule is the  heads-down  working period. Using the roadmap produced at the end of phase one, we ll all work very hard to get everything on it done.At the end of phase two, any unfinished features will be postponed until the next release.Phase two will culminate with an alpha release. At this point, the stable/A.B.x branch will be forked from master.The last part of a release cycle is spent fixing bugs   no new features will be accepted during this time. We ll try to release a beta release one month after the alpha and a release candidate one month after the beta.The release candidate marks the string freeze, and it happens at least two weeks before the final release. After this point, new translatable strings must not be added.During this phase, committers will be more and more conservative with backports, to avoid introducing regressions. After the release candidate, only release blockers and documentation fixes should be backported.In parallel to this phase, master can receive new features, to be released in the A.B+1 cycle.After a feature release (e.g. A.B), the previous release will go into bugfix mode.The branch for the previous feature release (e.g. stable/A.B-1.x) will include bugfixes. Critical bugs fixed on master must also be fixed on the bugfix branch; this means that commits need to cleanly separate bug fixes from feature additions. The developer who commits a fix to master will be responsible for also applying the fix to the current bugfix branch."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/organization/#principles", "para": "The Django Project is managed by a team of volunteers pursuing three goals:The Django Project isn t a legal entity. The Django Software Foundation, a non-profit organization, handles financial and legal matters related to the Django Project. Other than that, the Django Software Foundation lets the Django Project manage the development of the Django framework, its ecosystem and its community.The Django core team makes the decisions, nominates its new members, and elects its technical board. While it holds decision power in theory, it aims at using it as rarely as possible in practice. Rough consensus should be the norm and formal voting an exception."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/organization/#core-team", "para": "The core team is the group of trusted volunteers who manage the Django Project. They assume many roles required to achieve the project s goals, especially those that require a high level of trust. They make the decisions that shape the future of the project.Core team members are expected to act as role models for the community and custodians of the project, on behalf of the community and all those who rely on Django.They will intervene, where necessary, in online discussions or at official Django events on the rare occasions that a situation arises that requires intervention.They have authority over the Django Project infrastructure, including the Django Project website itself, the Django GitHub organization and repositories, the Trac bug tracker, the mailing lists, IRC channels, etc.Core team members may participate in formal votes, typically to nominate new team members and to elect the technical board.Some contributions don t require commit access. Depending on the reasons why a contributor joins the team, they may or may not have commit permissions to the Django code repository.However, should the need arise, any team member may ask for commit access by writing to the core team s mailing list. Access will be granted unless the person withdraws their request or the technical board vetoes the proposal.Core team members who have commit access are referred to as  committers  or  core developers .Other permissions, such as access to the servers, are granted to those who need them through the same process.Django team members demonstrate:As the project matures, contributions go way beyond code. Here s an incomplete list of areas where contributions may be considered for joining the core team, in no particular order:Very few areas are reserved to core team members:Core team membership acknowledges sustained and valuable efforts that align well with the philosophy and the goals of the Django Project.It is granted by a four fifths majority of votes cast in a core team vote and no veto by the technical board.Core team members are always looking for promising contributors, teaching them how the project is managed, and submitting their names to the core team s vote when they re ready. If you would like to join the core team, you can contact a core team member privately or ask for guidance on the Django Core Mentorship mailing-list.There s no time limit on core team membership. However, in order to provide the general public with a reasonable idea of how many people maintain Django, core team members who have stopped contributing are encouraged to declare themselves as  past team members . Those who haven t made any non-trivial contribution in two years may be asked to move themselves to this category, and moved there if they don t respond. Past team members lose their privileges such as voting rights and commit access."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/organization/#technical-board", "para": "The technical board is a group of experienced and active committers who steer technical choices. Their main concern is to maintain the quality and stability of the Django Web Framework.The technical board holds two prerogatives:In both cases, the technical board is a last resort. In these matters, it fulfills a similar function to the former Benevolent Dictators For Life.When the board wants to exercise one of these prerogatives, it must hold a private, simple majority vote on the resolution. The quorum is the full committee   each member must cast a vote or abstain explicitly. Then the board communicates the result, and if possible the reasons, on the appropriate mailing-list. There s no appeal for such decisions.In addition, at its discretion, the technical board may act in an advisory capacity on non-technical decisions.The technical board is an elected group of five committers. They re expected to be experienced but there s no formal seniority requirement.A new board is elected after each feature release of Django. The election process is managed by a returns officer nominated by the outgoing technical board. The election process works as follows:Candidates advertise their application for the technical board to the team.They must be committers already. There s no term limit for technical board members.Each team member can vote for zero to five people among the candidates. Candidates are ranked by the total number of votes they received.In case of a tie, the person who joined the core team earlier wins.Both the application and the voting period last between one and two weeks, at the outgoing board s discretion."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/organization/#changing-the-organization", "para": "Changes to this document require a four fifths majority of votes cast in a core team vote and no veto by the technical board."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/git/#high-level-overview", "para": "The Django source code repository uses Git to track changes to the code over time, so you ll need a copy of the Git client (a program called git) on your computer, and you ll want to familiarize yourself with the basics of how Git works.Git s website offers downloads for various operating systems. The site also contains vast amounts of documentation.The Django Git repository is located online at github.com/django/django. It contains the full source code for all Django releases, which you can browse online.The Git repository includes several branches:The Git repository also contains tags. These are the exact revisions from which packaged Django releases were produced, since version 1.0.The source code for the Djangoproject.com website can be found at github.com/django/djangoproject.com."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/git/#the-master-branch", "para": "If you d like to try out the in-development code for the next release of Django, or if you d like to contribute to Django by fixing bugs or developing new features, you ll want to get the code from the master branch.Note that this will get all of Django: in addition to the top-level django module containing Python code, you ll also get a copy of Django s documentation, test suite, packaging scripts and other miscellaneous bits. Django s code will be present in your clone as a directory named django.To try out the in-development code with your own applications, simply place the directory containing your clone on your Python import path. Then import statements which look for Django will find the django module within your clone.If you re going to be working on Django s code (say, to fix a bug or develop a new feature), you can probably stop reading here and move over to the documentation for contributing to Django, which covers things like the preferred coding style and how to generate and submit a patch."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/git/#other-branches", "para": "Django uses branches to prepare for releases of Django.In the past when Django was hosted on Subversion, branches were also used for feature development. Now Django is hosted on Git and feature development is done on contributor s forks, but the Subversion feature branches remain in Git for historical reference.These branches can be found in the repository as stable/A.B.x branches and will be created right after the first alpha is tagged.For example, immediately after Django 1.5 alpha 1 was tagged, the branch stable/1.5.x was created and all further work on preparing the code for the final 1.5 release was done there.These branches also provide bugfix and security support as described in Supported versions.For example, after the release of Django 1.5, the branch stable/1.5.x receives only fixes for security and critical stability bugs, which are eventually released as Django 1.5.1 and so on, stable/1.4.x receives only security and data loss fixes, and stable/1.3.x no longer receives any updates.Historical informationThis policy for handling stable/A.B.x branches was adopted starting with the Django 1.5 release cycle.Previously, these branches weren t created until right after the releases and the stabilization work occurred on the main repository branch. Thus, no new feature development work for the next release of Django could be committed until the final release happened.For example, shortly after the release of Django 1.3 the branch stable/1.3.x was created. Official support for that release has expired, and so it no longer receives direct maintenance from the Django project. However, that and all other similarly named branches continue to exist, and interested community members have occasionally used them to provide unofficial support for old Django releases.Historical informationSince Django moved to Git in 2012, anyone can clone the repository and create their own branches, alleviating the need for official branches in the source code repository.The following section is mostly useful if you re exploring the repository s history, for example if you re trying to understand how some features were designed.Feature-development branches tend by their nature to be temporary. Some produce successful features which are merged back into Django s master to become part of an official release, but others do not; in either case, there comes a time when the branch is no longer being actively worked on by any developer. At this point the branch is considered closed.Unfortunately, Django used to be maintained with the Subversion revision control system, that has no standard way of indicating this. As a workaround, branches of Django which are closed and no longer maintained were moved into attic.For reference, the following are branches whose code eventually became part of Django itself, and so are no longer separately maintained:When Django moved from Subversion to Git, the information about branch merges wasn t preserved in the source code repository. This means that the master branch of Django doesn t contain merge commits for the above branches.However, this information is available as a grafts file. You can restore it by putting the following lines in .git/info/grafts in your local clone:Additionally, the following branches are closed, but their code was never merged into Django and the features they aimed to implement were never finished:All of the above-mentioned branches now reside in attic.Finally, the repository contains soc2009/xxx and soc2010/xxx feature branches, used for the 2009 and 2010 Google Summer of Code projects."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/git/#id1", "para": "Each Django release is tagged and signed by the releaser.The tags can be found on GitHub s tags page."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/security/#reporting-security-issues", "para": "Short version: please report security issues by emailing security@djangoproject.com.Most normal bugs in Django are reported to our public Trac instance, but due to the sensitive nature of security issues, we ask that they not be publicly reported in this fashion.Instead, if you believe you ve found something in Django which has security implications, please send a description of the issue via email to security@djangoproject.com. Mail sent to that address reaches the security team.Once you ve submitted an issue via email, you should receive an acknowledgment from a member of the security team within 48 hours, and depending on the action to be taken, you may receive further followup emails.Sending encrypted reportsIf you want to send an encrypted email (optional), the public key ID for security@djangoproject.com is 0xfcb84b8d1d17f80b, and this public key is available from most commonly-used keyservers."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/security/#supported-versions", "para": "At any given time, the Django team provides official security support for several versions of Django:When new releases are issued for security reasons, the accompanying notice will include a list of affected versions. This list is comprised solely of supported versions of Django: older versions may also be affected, but we do not investigate to determine that, and will not issue patches or new releases for those versions."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/security/#how-django-discloses-security-issues", "para": "Our process for taking a security issue from private discussion to public disclosure involves multiple steps.Approximately one week before public disclosure, we send two notifications:First, we notify django-announce of the date and approximate time of the upcoming security release, as well as the severity of the issues. This is to aid organizations that need to ensure they have staff available to handle triaging our announcement and upgrade Django as needed. Severity levels are:High:Moderate:Low:Second, we notify a list of people and organizations, primarily composed of operating-system vendors and other distributors of Django. This email is signed with the PGP key of someone from Django s release team and consists of:On the day of disclosure, we will take the following steps:If a reported issue is believed to be particularly time-sensitive   due to a known exploit in the wild, for example   the time between advance notification and public disclosure may be shortened considerably.Additionally, if we have reason to believe that an issue reported to us affects other frameworks or tools in the Python/web ecosystem, we may privately contact and discuss those issues with the appropriate maintainers, and coordinate our own disclosure and resolution with theirs.The Django team also maintains an archive of security issues disclosed in Django."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/security/#who-receives-advance-notification", "para": "The full list of people and organizations who receive advance notification of security issues is not and will not be made public.We also aim to keep this list as small as effectively possible, in order to better manage the flow of confidential information prior to disclosure. As such, our notification list is not simply a list of users of Django, and merely being a user of Django is not sufficient reason to be placed on the notification list.In broad terms, recipients of security notifications fall into three groups:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/security/#requesting-notifications", "para": "If you believe that you, or an organization you are authorized to represent, fall into one of the groups listed above, you can ask to be added to Django s notification list by emailing security@djangoproject.com. Please use the subject line  Security notification request .Your request must include the following information:Once submitted, your request will be considered by the Django development team; you will receive a reply notifying you of the result of your request within 30 days.Please also bear in mind that for any individual or organization, receiving security notifications is a privilege granted at the sole discretion of the Django development team, and that this privilege can be revoked at any time, with or without explanation."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/design-philosophies/#overall", "para": "A fundamental goal of Django s stack is loose coupling and tight cohesion. The various layers of the framework shouldn t  know  about each other unless absolutely necessary.For example, the template system knows nothing about Web requests, the database layer knows nothing about data display and the view system doesn t care which template system a programmer uses.Although Django comes with a full stack for convenience, the pieces of the stack are independent of another wherever possible.Django apps should use as little code as possible; they should lack boilerplate. Django should take full advantage of Python s dynamic capabilities, such as introspection.The point of a Web framework in the 21st century is to make the tedious aspects of Web development fast. Django should allow for incredibly quick Web development.Every distinct concept and/or piece of data should live in one, and only one, place. Redundancy is bad. Normalization is good.The framework, within reason, should deduce as much as possible from as little as possible.See alsoThe discussion of DRY on the Portland Pattern RepositoryThis is a core Python principle listed in PEP 20, and it means Django shouldn t do too much  magic.  Magic shouldn t happen unless there s a really good reason for it. Magic is worth using only if it creates a huge convenience unattainable in other ways, and it isn t implemented in a way that confuses developers who are trying to learn how to use the feature.The framework should be consistent at all levels. Consistency applies to everything from low-level (the Python coding style used) to high-level (the  experience  of using Django)."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/design-philosophies/#models", "para": "Fields shouldn t assume certain behaviors based solely on the name of the field. This requires too much knowledge of the system and is prone to errors. Instead, behaviors should be based on keyword arguments and, in some cases, on the type of the field.Models should encapsulate every aspect of an  object,  following Martin Fowler s Active Record design pattern.This is why both the data represented by a model and information about it (its human-readable name, options like default ordering, etc.) are defined in the model class; all the information needed to understand a given model should be stored in the model."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/design-philosophies/#database-api", "para": "The core goals of the database API are:It should execute SQL statements as few times as possible, and it should optimize statements internally.This is why developers need to call save() explicitly, rather than the framework saving things behind the scenes silently.This is also why the select_related() QuerySet method exists. It s an optional performance booster for the common case of selecting  every related object. The database API should allow rich, expressive statements in as little syntax as possible. It should not rely on importing other modules or helper objects.Joins should be performed automatically, behind the scenes, when necessary.Every object should be able to access every related object, systemwide. This access should work both ways.The database API should realize it s a shortcut but not necessarily an end-all-be-all. The framework should make it easy to write custom SQL   entire statements, or just custom WHERE clauses as custom parameters to API calls."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/design-philosophies/#url-design", "para": "URLs in a Django app should not be coupled to the underlying Python code. Tying URLs to Python function names is a Bad And Ugly Thing.Along these lines, the Django URL system should allow URLs for the same app to be different in different contexts. For example, one site may put stories at /stories/, while another may use /news/.URLs should be as flexible as possible. Any conceivable URL design should be allowed.The framework should make it just as easy (or even easier) for a developer to design pretty URLs than ugly ones.File extensions in Web-page URLs should be avoided.Vignette-style commas in URLs deserve severe punishment.Technically, foo.com/bar and foo.com/bar/ are two different URLs, and search-engine robots (and some Web traffic-analyzing tools) would treat them as separate pages. Django should make an effort to  normalize  URLs so that search-engine robots don t get confused.This is the reasoning behind the APPEND_SLASH setting."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/design-philosophies/#template-system", "para": "We see a template system as a tool that controls presentation and presentation-related logic   and that s it. The template system shouldn t support functionality that goes beyond this basic goal.The majority of dynamic websites use some sort of common sitewide design   a common header, footer, navigation bar, etc. The Django template system should make it easy to store those elements in a single place, eliminating duplicate code.This is the philosophy behind template inheritance.The template system shouldn t be designed so that it only outputs HTML. It should be equally good at generating other text-based formats, or just plain text.Using an XML engine to parse templates introduces a whole new world of human error in editing templates   and incurs an unacceptable level of overhead in template processing.The template system shouldn t be designed so that templates necessarily are displayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe of a limitation and wouldn t allow the syntax to be as nice as it is. Django expects template authors are comfortable editing HTML directly.The template system shouldn t do magic things with whitespace. If a template includes whitespace, the system should treat the whitespace as it treats text   just display it. Any whitespace that s not in a template tag should be displayed.The goal is not to invent a programming language. The goal is to offer just enough programming-esque functionality, such as branching and looping, that is essential for making presentation-related decisions. The Django Template Language (DTL) aims to avoid advanced logic.The Django template system recognizes that templates are most often written by designers, not programmers, and therefore should not assume Python knowledge.The template system, out of the box, should forbid the inclusion of malicious code   such as commands that delete database records.This is another reason the template system doesn t allow arbitrary Python code.The template system should recognize that advanced template authors may want to extend its technology.This is the philosophy behind custom template tags and filters."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/design-philosophies/#views", "para": "Writing a view should be as simple as writing a Python function. Developers shouldn t have to instantiate a class when a function will do.Views should have access to a request object   an object that stores metadata about the current request. The object should be passed directly to a view function, rather than the view function having to access the request data from a global variable. This makes it light, clean and easy to test views by passing in  fake  request objects.A view shouldn t care about which template system the developer uses   or even whether a template system is used at all.GET and POST are distinct; developers should explicitly use one or the other. The framework should make it easy to distinguish between GET and POST data."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/design-philosophies/#cache-framework", "para": "The core goals of Django s cache framework are:A cache should be as fast as possible.  Hence, all framework code surrounding the cache backend should be kept to the absolute minimum, especially for get() operations.The cache API should provide a consistent interface across the different cache backends.The cache API should be extensible at the application level based on the developer s needs (for example, see Cache key transformation)."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#getting-the-raw-documentation", "para": "Though Django s documentation is intended to be read as HTML at https://docs.djangoproject.com/, we edit it as a collection of text files for maximum flexibility. These files live in the top-level docs/ directory of a Django release.If you d like to start contributing to our docs, get the development version of Django from the source code repository (see Installing the development version). The development version has the latest-and-greatest documentation, just as it has latest-and-greatest code. We also backport documentation fixes and improvements, at the discretion of the committer, to the last release branch. That s because it s highly advantageous to have the docs for the last release be up-to-date and correct (see Differences between versions)."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#getting-started-with-sphinx", "para": "Django s documentation uses the Sphinx documentation system, which in turn is based on docutils. The basic idea is that lightly-formatted plain-text documentation is transformed into HTML, PDF, and any other output format.To build the documentation locally, install Sphinx:Then from the docs directory, build the HTML:To get started contributing, you ll want to read the reStructuredText reference.Your locally-built documentation will be themed differently than the documentation at docs.djangoproject.com. This is OK! If your changes look good on your local machine, they ll look good on the website."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#how-the-documentation-is-organized", "para": "The documentation is organized into several categories:Tutorials take the reader by the hand through a series of steps to create something.The important thing in a tutorial is to help the reader achieve something useful, preferably as early as possible, in order to give them confidence.Explain the nature of the problem we re solving, so that the reader understands what we re trying to achieve. Don t feel that you need to begin with explanations of how things work - what matters is what the reader does, not what you explain. It can be helpful to refer back to what you ve done and explain afterwards.Topic guides aim to explain a concept or subject at a fairly high level.Link to reference material rather than repeat it. Use examples and don t be reluctant to explain things that seem very basic to you - it might be the explanation someone else needs.Providing background context helps a newcomer connect the topic to things that they already know.Reference guides contain technical reference for APIs. They describe the functioning of Django s internal machinery and instruct in its use.Keep reference material tightly focused on the subject. Assume that the reader already understands the basic concepts involved but needs to know or be reminded of how Django does it.Reference guides aren t the place for general explanation. If you find yourself explaining basic concepts, you may want to move that material to a topic guide.How-to guides are recipes that take the reader through steps in key subjects.What matters most in a how-to guide is what a user wants to achieve. A how-to should always be result-oriented rather than focused on internal details of how Django implements whatever is being discussed.These guides are more advanced than tutorials and assume some knowledge about how Django works. Assume that the reader has followed the tutorials and don t hesitate to refer the reader back to the appropriate tutorial rather than repeat the same material."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#writing-style", "para": "When using pronouns in reference to a hypothetical person, such as  a user with a session cookie , gender neutral pronouns (they/their/them) should be used. Instead of:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#commonly-used-terms", "para": "Here are some style guidelines on commonly used terms throughout the documentation:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#django-specific-terminology", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#guidelines-for-restructuredtext-files", "para": "These guidelines regulate the format of our reST (reStructuredText) documentation:In section titles, capitalize only initial words and proper nouns.Wrap the documentation at 80 characters wide, unless a code example is significantly less readable when split over two lines, or for another good reason.The main thing to keep in mind as you write and edit docs is that the more semantic markup you can add the better. So:Isn t nearly as helpful as:This is because Sphinx will generate proper links for the latter, which greatly helps readers.You can prefix the target with a ~ (that s a tilde) to get just the  last bit  of that path. So :mod:`~django.contrib.auth` will just display a link with the title  auth .Use intersphinx to reference Python s and Sphinx  documentation.Add .. code-block:: <lang> to literal blocks so that they get highlighted. Prefer relying on automatic highlighting simply using :: (two colons). This has the benefit that if the code contains some invalid syntax, it won t be highlighted. Adding .. code-block:: python, for example, will force highlighting despite invalid syntax.Use these heading styles:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#django-specific-markup", "para": "Besides Sphinx s built-in markup, Django s docs define some extra description units:Settings:To link to a setting, use :setting:`INSTALLED_APPS`.Template tags:To link, use :ttag:`regroup`.Template filters:To link, use :tfilter:`linebreaksbr`.Field lookups (i.e. Foo.objects.filter(bar__exact=whatever)):To link, use :lookup:`exact`.django-admin commands:To link, use :djadmin:`migrate`.django-admin command-line options:To link, use :option:`command_name --traceback` (or omit command_name for the options shared by all commands like --verbosity).Links to Trac tickets (typically reserved for patch release notes):Django s documentation uses a custom console directive for documenting command-line examples involving django-admin.py, manage.py, python, etc.). In the HTML documentation, it renders a two-tab UI, with one tab showing a Unix-style command prompt and a second tab showing a Windows prompt.For example, you can replace this fragment:with this one:Notice two things:The example above will render a code example block with two tabs. The first one will show:(No changes from what .. code-block:: console would have rendered).The second one will show:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#documenting-new-features", "para": "Our policy for new features is:Our preferred way for marking new features is by prefacing the features  documentation with:  .. versionadded:: X.Y , followed by a mandatory blank line and an optional description (indented).General improvements, or other changes to the APIs that should be emphasized should use the  .. versionchanged:: X.Y  directive (with the same format as the versionadded mentioned above.These versionadded and versionchanged blocks should be  self-contained.  In other words, since we only keep these annotations around for two releases, it s nice to be able to remove the annotation and its contents without having to reflow, reindent, or edit the surrounding text. For example, instead of putting the entire description of a new or changed feature in a block, do something like this:Put the changed annotation notes at the bottom of a section, not the top.Also, avoid referring to a specific version of Django outside a versionadded or versionchanged block. Even inside a block, it s often redundant to do so as these annotations render as  New in Django A.B:  and  Changed in Django A.B , respectively.If a function, attribute, etc. is added, it s also okay to use a versionadded annotation like this:We can simply remove the .. versionadded:: A.B annotation without any indentation changes when the time comes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#minimizing-images", "para": "Optimize image compression where possible. For PNG files, use OptiPNG and AdvanceCOMP s advpng:This is based on OptiPNG version 0.7.5. Older versions may complain about the --strip all option being lossy."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#an-example", "para": "For a quick example of how it all fits together, consider this hypothetical example:First, the ref/settings.txt document could have an overall layout like this:Next, the topics/settings.txt document could contain something like this:We use the Sphinx doc cross reference element when we want to link to another document as a whole and the ref element when we want to link to an arbitrary location in a document.Next, notice how the settings are annotated:This marks up the following header as the  canonical  target for the setting ADMINS. This means any time I talk about ADMINS, I can reference it using :setting:`ADMINS`.That s basically how everything fits together."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#spelling-check", "para": "Before you commit your docs, it s a good idea to run the spelling checker. You ll need to install a couple packages first:Then from the docs directory, run make spelling. Wrong words (if any) along with the file and line number where they occur will be saved to _build/spelling/output.txt.If you encounter false-positives (error output that actually is correct), do one of the following:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#translating-documentation", "para": "See Localizing the Django documentation if you d like to help translate the documentation into another language."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-documentation/#django-admin-man-page", "para": "Sphinx can generate a manual page for the django-admin command. This is configured in docs/conf.py. Unlike other documentation output, this man page should be included in the Django repository and the releases as docs/man/django-admin.1. There isn t a need to update this file when updating the documentation, as it s updated once as part of the release process.To generate an updated version of the man page, run make man in the docs directory. The new man page will be written in docs/_build/man/django-admin.1."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/distributions/#for-distributors", "para": "If you d like to package Django for distribution, we d be happy to help out! Please join the django-developers mailing list and introduce yourself.We also encourage all distributors to subscribe to the django-announce mailing list, which is a (very) low-traffic list for announcing new releases of Django and important bugfixes."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/api-stability/#what-stable-means", "para": "In this context, stable means:All the public APIs (everything in this documentation) will not be moved or renamed without providing backwards-compatible aliases.If new features are added to these APIs   which is quite possible   they will not break or change the meaning of existing methods. In other words,  stable  does not (necessarily) mean  complete. If, for some reason, an API declared stable must be removed or replaced, it will be declared deprecated but will remain in the API for at least two feature releases. Warnings will be issued when the deprecated method is called.See Official releases for more details on how Django s version numbering scheme works, and how features will be deprecated.We ll only break backwards compatibility of these APIs if a bug or security hole makes it completely unavoidable."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/api-stability/#stable-apis", "para": "In general, everything covered in the documentation   with the exception of anything in the internals area is considered stable."}, {"link": "https://docs.djangoproject.com/en/2.2/misc/api-stability/#exceptions", "para": "There are a few exceptions to this stability and backwards-compatibility promise.If we become aware of a security problem   hopefully by someone following our security reporting policy   we ll do everything necessary to fix it. This might mean breaking backwards compatibility; security trumps the compatibility guarantee.Certain APIs are explicitly marked as  internal  in a couple of ways:"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/#final-releases", "para": "Below are release notes through Django 2.2 and its patch releases. Newer versions of the documentation contain the release notes for any later releases."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/#security-releases", "para": "Whenever a security issue is disclosed via Django s security policies, appropriate release notes are now added to all affected release series.Additionally, an archive of disclosed security issues is maintained."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-3-1", "para": "See the Django 2.2 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-3-0", "para": "See the Django 2.0 release notes for more details on these changes.See the Django 2.1 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-2-1", "para": "See the Django 1.11 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-2-0", "para": "See the Django 1.9 release notes for more details on these changes.See the Django 1.10 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-1-10", "para": "See the Django 1.8 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-1-9", "para": "See the Django 1.7 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-1-8", "para": "See the Django 1.6 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-1-7", "para": "See the Django 1.5 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-1-6", "para": "See the Django 1.4 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-1-5", "para": "See the Django 1.3 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-1-4", "para": "See the Django 1.2 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/deprecation/#deprecation-removed-in-1-3", "para": "See the Django 1.1 release notes for more details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#why-does-this-project-exist", "para": "Django grew from a very practical need: World Online, a newspaper Web operation, is responsible for building intensive Web applications on journalism deadlines. In the fast-paced newsroom, World Online often has only a matter of hours to take a complicated Web application from concept to public launch.At the same time, the World Online Web developers have consistently been perfectionists when it comes to following best practices of Web development.In fall 2003, the World Online developers (Adrian Holovaty and Simon Willison) ditched PHP and began using Python to develop its websites. As they built intensive, richly interactive sites such as Lawrence.com, they began to extract a generic Web development framework that let them build Web applications more and more quickly. They tweaked this framework constantly, adding improvements over two years.In summer 2005, World Online decided to open-source the resulting software, Django. Django would not be possible without a whole host of open-source projects   Apache, Python, and PostgreSQL to name a few   and we re thrilled to be able to give something back to the open-source community."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#what-does-django-mean-and-how-do-you-pronounce-it", "para": "Django is named after Django Reinhardt, a jazz manouche guitarist from the 1930s to early 1950s. To this day, he s considered one of the best guitarists of all time.Listen to his music. You ll like it.Django is pronounced JANG-oh. Rhymes with FANG-oh. The  D  is silent.We ve also recorded an audio clip of the pronunciation."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#is-django-stable", "para": "Yes, it s quite stable. Companies like Disqus, Instagram, Pinterest, and Mozilla have been using Django for many years. Sites built on Django have weathered traffic spikes of over 50 thousand hits per second."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#does-django-scale", "para": "Yes. Compared to development time, hardware is cheap, and so Django is designed to take advantage of as much hardware as you can throw at it.Django uses a  shared-nothing  architecture, which means you can add hardware at any level   database servers, caching servers or Web/application servers.The framework cleanly separates components such as its database layer and application layer. And it ships with a simple-yet-powerful cache framework."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#who-s-behind-this", "para": "Django was originally developed at World Online, the Web department of a newspaper in Lawrence, Kansas, USA. Django s now run by an international team of volunteers."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#how-is-django-licensed", "para": "Django is distributed under the 3-clause BSD license. This is an open source license granting broad permissions to modify and redistribute Django."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#why-does-django-include-python-s-license-file", "para": "Django includes code from the Python standard library. Python is distributed under a permissive open source license. A copy of the Python license is included with Django for compliance with Python s terms."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#which-sites-use-django", "para": "DjangoSites.org features a constantly growing list of Django-powered sites."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names", "para": "Well, the standard names are debatable.In our interpretation of MVC, the  view  describes the data that gets presented to the user. It s not necessarily how the data looks, but which data is presented. The view describes which data you see, not how you see it. It s a subtle distinction.So, in our case, a  view  is the Python callback function for a particular URL, because that callback function describes which data is presented.Furthermore, it s sensible to separate content from presentation   which is where templates come in. In Django, a  view  describes which data is presented, but a view normally delegates to a template, which describes how the data is presented.Where does the  controller  fit in, then? In Django s case, it s probably the framework itself: the machinery that sends a request to the appropriate view, according to the Django URL configuration.If you re hungry for acronyms, you might say that Django is a  MTV  framework   that is,  model ,  template , and  view.  That breakdown makes much more sense.At the end of the day, of course, it comes down to getting stuff done. And, regardless of how things are named, Django gets stuff done in a way that s most logical to us."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#framework-x-does-feature-y-why-doesn-t-django", "para": "We re well aware that there are other awesome Web frameworks out there, and we re not averse to borrowing ideas where appropriate. However, Django was developed precisely because we were unhappy with the status quo, so please be aware that  because <Framework X> does it  is not going to be sufficient reason to add a given feature to Django."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#why-did-you-write-all-of-django-from-scratch-instead-of-using-other-python-libraries", "para": "When Django was originally written, Adrian and Simon spent quite a bit of time exploring the various Python Web frameworks available.In our opinion, none of them were completely up to snuff.We re picky. You might even call us perfectionists. (With deadlines.)Over time, we stumbled across open-source libraries that did things we d already implemented. It was reassuring to see other people solving similar problems in similar ways, but it was too late to integrate outside code: We d already written, tested and implemented our own framework bits in several production settings   and our own code met our needs delightfully.In most cases, however, we found that existing frameworks/tools inevitably had some sort of fundamental, fatal flaw that made us squeamish. No tool fit our philosophies 100%.Like we said: We re picky.We ve documented our philosophies on the design philosophies page."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#is-django-a-content-management-system-cms", "para": "No, Django is not a CMS, or any sort of  turnkey product  in and of itself. It s a Web framework; it s a programming tool that lets you build websites.For example, it doesn t make much sense to compare Django to something like Drupal, because Django is something you use to create things like Drupal.Of course, Django s automatic admin site is fantastic and timesaving   but the admin site is one module of Django the framework. Furthermore, although Django has special conveniences for building  CMS-y  apps, that doesn t mean it s not just as appropriate for building  non-CMS-y  apps (whatever that means!)."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#how-can-i-download-the-django-documentation-to-read-it-offline", "para": "The Django docs are available in the docs directory of each Django tarball release. These docs are in reST (reStructuredText) format, and each text file corresponds to a Web page on the official Django site.Because the documentation is stored in revision control, you can browse documentation changes just like you can browse code changes.Technically, the docs on Django s site are generated from the latest development versions of those reST documents, so the docs on the Django site may offer more information than the docs that come with the latest Django release."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/general/#how-do-i-cite-django", "para": "It s difficult to give an official citation format, for two reasons: citation formats can vary wildly between publications, and citation standards for software are still a matter of some debate.For example, APA style,  would dictate something like:However, the only true guide is what your publisher will accept, so get a copy of those guidelines and fill in the gaps as best you can.If your referencing style guide requires a publisher name, use  Django Software Foundation .If you need a publishing location, use  Lawrence, Kansas .If you need a web address, use https://djangoproject.com.If you need a name, just use  Django , without any tagline.If you need a publication date, use the year of release of the version you re referencing (e.g., 2013 for v1.5)"}, {"link": "https://docs.djangoproject.com/en/2.2/faq/install/#how-do-i-get-started", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/faq/install/#what-are-django-s-prerequisites", "para": "Django requires Python. See the table in the next question for the versions of Python that work with each version of Django. Other Python libraries may be required for some uses, but you ll receive an error about it as they re needed.For a development environment   if you just want to experiment with Django   you don t need to have a separate Web server installed; Django comes with its own lightweight development server. For a production environment, Django follows the WSGI spec, PEP 3333, which means it can run on a variety of server platforms. See Deploying Django for some popular alternatives.If you want to use Django with a database, which is probably the case, you ll also need a database engine. PostgreSQL is recommended, because we re PostgreSQL fans, and MySQL, SQLite, and Oracle are also supported."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/install/#what-python-version-can-i-use-with-django", "para": "For each version of Python, only the latest micro release (A.B.C) is officially supported. You can find the latest micro version for each series on the Python download page.Typically, we will support a Python version up to and including the first Django LTS release whose security support ends after security support for that version of Python ends. For example, Python 3.3 security support ends September 2017 and Django 1.8 LTS security support ends April 2018. Therefore Django 1.8 is the last version to support Python 3.3."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/install/#what-python-version-should-i-use-with-django", "para": "Python 3 is recommended. Django 1.11 is the last version to support Python 2.7. Support for Python 2.7 and Django 1.11 ends in 2020.Since newer versions of Python are often faster, have more features, and are better supported, the latest version of Python 3 is recommended.You don t lose anything in Django by using an older release, but you don t take advantage of the improvements and optimizations in newer Python releases. Third-party applications for use with Django are, of course, free to set their own version requirements."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/install/#should-i-use-the-stable-version-or-development-version", "para": "Generally, if you re using code in production, you should be using a stable release. The Django project publishes a full stable release every nine months or so, with bugfix updates in between. These stable releases contain the API that is covered by our backwards compatibility guarantees; if you write code against stable releases, you shouldn t have any problems upgrading when the next official version is released."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/usage/#why-do-i-get-an-error-about-importing-django-settings-module", "para": "Make sure that:"}, {"link": "https://docs.djangoproject.com/en/2.2/faq/usage/#i-can-t-stand-your-template-language-do-i-have-to-use-it", "para": "We happen to think our template engine is the best thing since chunky bacon, but we recognize that choosing a template language runs close to religion. There s nothing about Django that requires using the template language, so if you re attached to Jinja2, Mako, or whatever, feel free to use those."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/usage/#do-i-have-to-use-your-model-database-layer", "para": "Nope. Just like the template system, the model/database layer is decoupled from the rest of the framework.The one exception is: If you use a different database library, you won t get to use Django s automatically-generated admin site. That app is coupled to the Django database layer."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/usage/#how-do-i-use-image-and-file-fields", "para": "Using a FileField or an ImageField in a model takes a few steps:"}, {"link": "https://docs.djangoproject.com/en/2.2/faq/usage/#how-do-i-make-a-variable-available-to-all-my-templates", "para": "Sometimes your templates just all need the same thing. A common example would be dynamically-generated menus. At first glance, it seems logical to simply add a common dictionary to the template context.The correct solution is to use a RequestContext. Details on how to do this are here: Using RequestContext."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/help/#how-do-i-do-x-why-doesn-t-y-work-where-can-i-go-to-get-help", "para": "If this FAQ doesn t contain an answer to your question, you might want to try the django-users mailing list. Feel free to ask any question related to installing, using, or debugging Django.If you prefer IRC, the #django IRC channel on the Freenode IRC network is an active community of helpful individuals who may be able to solve your problem."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/help/#why-hasn-t-my-message-appeared-on-django-users", "para": "django-users has a lot of subscribers. This is good for the community, as it means many people are available to contribute answers to questions. Unfortunately, it also means that django-users is an attractive target for spammers.In order to combat the spam problem, when you join the django-users mailing list, we manually moderate the first message you send to the list. This means that spammers get caught, but it also means that your first question to the list might take a little longer to get answered. We apologize for any inconvenience that this policy may cause."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/help/#nobody-on-django-users-answered-my-question-what-should-i-do", "para": "Try making your question more specific, or provide a better example of your problem.As with most open-source mailing lists, the folks on django-users are volunteers. If nobody has answered your question, it may be because nobody knows the answer, it may be because nobody can understand the question, or it may be that everybody that can help is busy. One thing you might try is to ask the question on IRC   visit the #django IRC channel on the Freenode IRC network.You might notice we have a second mailing list, called django-developers   but please don t email support questions to this mailing list. This list is for discussion of the development of Django itself. Asking a tech support question there is considered quite impolite."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/help/#i-think-i-ve-found-a-bug-what-should-i-do", "para": "Detailed instructions on how to handle a potential bug can be found in our Guide to contributing to Django."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/help/#i-think-i-ve-found-a-security-problem-what-should-i-do", "para": "If you think you ve found a security problem with Django, please send a message to security@djangoproject.com. This is a private list only open to long-time, highly trusted Django developers, and its archives are not publicly readable.Due to the sensitive nature of security issues, we ask that if you think you have found a security problem, please don t send a message to one of the public mailing lists. Django has a policy for handling security issues; while a defect is outstanding, we would like to minimize any damage that could be inflicted through public knowledge of that defect."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/models/#how-can-i-see-the-raw-sql-queries-django-is-running", "para": "Make sure your Django DEBUG setting is set to True. Then, just do this:connection.queries is only available if DEBUG is True. It s a list of dictionaries in order of query execution. Each dictionary has the following:connection.queries includes all SQL statements   INSERTs, UPDATES, SELECTs, etc. Each time your app hits the database, the query will be recorded.If you are using multiple databases, you can use the same interface on each member of the connections dictionary:If you need to clear the query list manually at any point in your functions, just call reset_queries(), like this:"}, {"link": "https://docs.djangoproject.com/en/2.2/faq/models/#can-i-use-django-with-a-pre-existing-database", "para": "Yes. See Integrating with a legacy database."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/models/#if-i-make-changes-to-a-model-how-do-i-update-the-database", "para": "Take a look at Django s support for schema migrations.If you don t mind clearing data, your project s manage.py utility has a flush option to reset the database to the state it was in immediately after migrate was executed."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/models/#do-django-models-support-multiple-column-primary-keys", "para": "No. Only single-column primary keys are supported.But this isn t an issue in practice, because there s nothing stopping you from adding other constraints (using the unique_together model option or creating the constraint directly in your database), and enforcing the uniqueness at that level. Single-column primary keys are needed for things such as the admin interface to work; e.g., you need a simple way of being able to specify an object to edit or delete."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/models/#does-django-support-nosql-databases", "para": "NoSQL databases are not officially supported by Django itself. There are, however, a number of side project and forks which allow NoSQL functionality in Django, like Django non-rel.You can also take a look on the wiki page which discusses some alternatives."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/models/#how-do-i-add-database-specific-options-to-my-create-table-statements-such-as-specifying-myisam-as-the-table-type", "para": "We try to avoid adding special cases in the Django code to accommodate all the database-specific options such as table type, etc. If you d like to use any of these options, create a migration with a RunSQL operation that contains ALTER TABLE statements that do what you want to do.For example, if you re using MySQL and want your tables to use the MyISAM table type, use the following SQL:"}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#i-can-t-log-in-when-i-enter-a-valid-username-and-password-it-just-brings-up-the-login-page-again-with-no-error-messages", "para": "The login cookie isn t being set correctly, because the domain of the cookie sent out by Django doesn t match the domain in your browser. Try setting the SESSION_COOKIE_DOMAIN setting to match your domain. For example, if you re going to  https://www.example.com/admin/  in your browser, set SESSION_COOKIE_DOMAIN = 'www.example.com'."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#i-can-t-log-in-when-i-enter-a-valid-username-and-password-it-brings-up-the-login-page-again-with-a-please-enter-a-correct-username-and-password-error", "para": "If you re sure your username and password are correct, make sure your user account has is_active and is_staff set to True. The admin site only allows access to users with those two fields both set to True."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#how-do-i-automatically-set-a-field-s-value-to-the-user-who-last-edited-the-object-in-the-admin", "para": "The ModelAdmin class provides customization hooks that allow you to transform an object as it saved, using details from the request. By extracting the current user from the request, and customizing the save_model() hook, you can update an object to reflect the user that edited it. See the documentation on ModelAdmin methods for an example."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#how-do-i-limit-admin-access-so-that-objects-can-only-be-edited-by-the-users-who-created-them", "para": "The ModelAdmin class also provides customization hooks that allow you to control the visibility and editability of objects in the admin. Using the same trick of extracting the user from the request, the get_queryset() and has_change_permission() can be used to control the visibility and editability of objects in the admin."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#my-admin-site-css-and-images-showed-up-fine-using-the-development-server-but-they-re-not-displaying-when-using-mod-wsgi", "para": "See serving the admin files in the  How to use Django with mod_wsgi  documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#my-list-filter-contains-a-manytomanyfield-but-the-filter-doesn-t-display", "para": "Django won t bother displaying the filter for a ManyToManyField if there are fewer than two related objects.For example, if your list_filter includes sites, and there s only one site in your database, it won t display a  Site  filter. In that case, filtering by site would be meaningless."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#some-objects-aren-t-appearing-in-the-admin", "para": "Inconsistent row counts may be caused by missing foreign key values or a foreign key field incorrectly set to null=False. If you have a record with a ForeignKey pointing to a nonexistent object and that foreign key is included is list_display, the record will not be shown in the admin changelist because the Django model is declaring an integrity constraint that is not implemented at the database level."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#how-can-i-customize-the-functionality-of-the-admin-interface", "para": "You ve got several options. If you want to piggyback on top of an add/change form that Django automatically generates, you can attach arbitrary JavaScript modules to the page via the model s class Admin js parameter. That parameter is a list of URLs, as strings, pointing to JavaScript modules that will be included within the admin form via a <script> tag.If you want more flexibility than simply tweaking the auto-generated forms, feel free to write custom views for the admin. The admin is powered by Django itself, and you can write custom views that hook into the authentication system, check permissions and do whatever else they need to do.If you want to customize the look-and-feel of the admin interface, read the next question."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#the-dynamically-generated-admin-site-is-ugly-how-can-i-change-it", "para": "We like it, but if you don t agree, you can modify the admin site s presentation by editing the CSS stylesheet and/or associated image files. The site is built using semantic HTML and plenty of CSS hooks, so any changes you d like to make should be possible by editing the stylesheet."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/admin/#what-browsers-are-supported-for-using-the-admin", "para": "The admin provides a fully-functional experience to YUI s A-grade browsers, with the notable exception of IE6, which is not supported.There may be minor stylistic differences between supported browsers for example, some browsers may not support rounded corners. These are considered acceptable variations in rendering."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/contributing/#how-can-i-get-started-contributing-code-to-django", "para": "Thanks for asking! We ve written an entire document devoted to this question. It s titled Contributing to Django."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/contributing/#i-submitted-a-bug-fix-in-the-ticket-system-several-weeks-ago-why-are-you-ignoring-my-patch", "para": "Don t worry: We re not ignoring you!It s important to understand there is a difference between  a ticket is being ignored  and  a ticket has not been attended to yet.  Django s ticket system contains hundreds of open tickets, of various degrees of impact on end-user functionality, and Django s developers have to review and prioritize.On top of that: the people who work on Django are all volunteers. As a result, the amount of time that we have to work on the framework is limited and will vary from week to week depending on our spare time. If we re busy, we may not be able to spend as much time on Django as we might want.The best way to make sure tickets do not get hung up on the way to checkin is to make it dead easy, even for someone who may not be intimately familiar with that area of the code, to understand the problem and verify the fix:If your patch stands no chance of inclusion in Django, we won t ignore it   we ll just close the ticket. So if your ticket is still open, it doesn t mean we re ignoring you; it just means we haven t had time to look at it yet."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/contributing/#when-and-how-might-i-remind-the-team-of-a-patch-i-care-about", "para": "A polite, well-timed message to the mailing list is one way to get attention. To determine the right time, you need to keep an eye on the schedule. If you post your message right before a release deadline, you re not likely to get the sort of attention you require.Gentle IRC reminders can also work   again, strategically timed if possible. During a bug sprint would be a very good time, for example.Another way to get traction is to pull several related tickets together. When the someone sits down to review a bug in an area they haven t touched for a while, it can take a few minutes to remember all the fine details of how that area of code works. If you collect several minor bug fixes together into a similarly themed group, you make an attractive target, as the cost of coming up to speed on an area of code can be spread over multiple tickets.Please refrain from emailing anyone personally or repeatedly raising the same issue over and over. This sort of behavior will not gain you any additional attention   certainly not the attention that you need in order to get your issue addressed."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/contributing/#but-i-ve-reminded-you-several-times-and-you-keep-ignoring-my-patch", "para": "Seriously - we re not ignoring you. If your patch stands no chance of inclusion in Django, we ll close the ticket. For all the other tickets, we need to prioritize our efforts, which means that some tickets will be addressed before others.One of the criteria that is used to prioritize bug fixes is the number of people that will likely be affected by a given bug. Bugs that have the potential to affect many people will generally get priority over those that are edge cases.Another reason that bugs might be ignored for while is if the bug is a symptom of a larger problem. While we can spend time writing, testing and applying lots of little patches, sometimes the right solution is to rebuild. If a rebuild or refactor of a particular component has been proposed or is underway, you may find that bugs affecting that component will not get as much attention. Again, this is just a matter of prioritizing scarce resources. By concentrating on the rebuild, we can close all the little bugs at once, and hopefully prevent other little bugs from appearing in the future.Whatever the reason, please keep in mind that while you may hit a particular bug regularly, it doesn t necessarily follow that every single Django user will hit the same bug. Different users use Django in different ways, stressing different parts of the code under different conditions. When we evaluate the relative priorities, we are generally trying to consider the needs of the entire community, not just the severity for one particular user. This doesn t mean that we think your problem is unimportant   just that in the limited time we have available, we will always err on the side of making 10 people happy rather than making 1 person happy."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/troubleshooting/#problems-running-django-admin", "para": "django-admin should be on your system path if you installed Django via python setup.py. If it s not on your path, you can find it in site-packages/django/bin, where site-packages is a directory within your Python installation. Consider symlinking to django-admin from some place on your path, such as /usr/local/bin.If django-admin doesn t work but django-admin.py does, you re probably using a version of Django that doesn t match the version of this documentation. django-admin is new in Django 1.7.If you re using macOS, you may see the message  permission denied  when you try to run django-admin. This is because, on Unix-based systems like macOS, a file must be marked as  executable  before it can be run as a program. To do this, open Terminal.app and navigate (using the cd command) to the directory where django-admin is installed, then run the command sudo chmod +x django-admin."}, {"link": "https://docs.djangoproject.com/en/2.2/faq/troubleshooting/#miscellaneous", "para": "This class of errors happen when a bytestring containing non-ASCII sequences is transformed into a Unicode string and the specified encoding is incorrect. The output generally looks like this:The resolution mostly depends on the context, however here are two common pitfalls producing this error:Related resources:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/commands/#inspectdb", "para": "When django.contrib.gis is in your INSTALLED_APPS, the inspectdb management command is overridden with one from GeoDjango. The overridden command is spatially-aware, and places geometry fields in the auto-generated model definition, where appropriate."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/commands/#ogrinspect", "para": "The ogrinspect management command will inspect the given OGR-compatible DataSource (e.g., a shapefile) and will output a GeoDjango model with the given model name.  There s a detailed example of using ogrinspect in the tutorial.Use a comma separated list of OGR field names to add the blank=True keyword option to the field definition.  Set with true to apply to all applicable fields.Use a comma separated list of OGR float fields to generate DecimalField instead of the default FloatField. Set to true to apply to all OGR float fields.Specifies the model attribute name to use for the geometry field. Defaults to 'geom'.The key for specifying which layer in the OGR DataSource source to use. Defaults to 0 (the first layer). May be an integer or a string identifier for the Layer. When inspecting databases, layer is generally the table name you want to inspect.Automatically generate a mapping dictionary for use with LayerMapping.When generating the geometry field, treat it as a geometry collection. For example, if this setting is enabled then a MultiPolygonField will be placed in the generated model rather than PolygonField.Generates a __str__() method on the model that returns the given field name.Suppresses the from django.contrib.gis.db import models import statement.Use a comma separated list of OGR field names to add the null=True keyword option to the field definition.  Set with true to apply to all applicable fields.The SRID to use for the geometry field.  If not set, ogrinspect attempts to automatically determine of the SRID of the data source."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/measure/#example", "para": "Distance objects may be instantiated using a keyword argument indicating the context of the units.  In the example below, two different distance objects are instantiated in units of kilometers (km) and miles (mi):Conversions are easy, just access the preferred unit attribute to get a converted distance quantity:Moreover, arithmetic operations may be performed between the distance objects:Two Distance objects multiplied together will yield an Area object, which uses squared units of measure:To determine what the attribute abbreviation of a unit is, the unit_attname class method may be used:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/measure/#supported-units", "para": "NoteArea attributes are the same as Distance attributes, except they are prefixed with sq_ (area units are square in nature). For example, Area(sq_m=2) creates an Area object representing two square meters."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/measure/#measurement-api", "para": "To initialize a distance object, pass in a keyword corresponding to the desired unit attribute name set with desired value. For example, the following creates a distance object representing 5 miles:Returns the distance value in units corresponding to the given unit attribute. For example:Returns the distance unit attribute name for the given full unit name. For example:Alias for Distance class.To initialize an area object, pass in a keyword corresponding to the desired unit attribute name set with desired value. For example, the following creates an area object representing 5 square miles:Returns the area value in units corresponding to the given unit attribute. For example:Returns the area unit attribute name for the given full unit name. For example:Alias for Area class.Footnotes"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/gdal/#overview", "para": "The GDAL/OGR tools described here are designed to help you read in your geospatial data, in order for most of them to be useful you have to have some data to work with.  If you re starting out and don t yet have any data of your own to use, GeoDjango tests contain a number of simple data sets that you can use for testing. You can download them here:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/gdal/#vector-data-source-objects", "para": "DataSource is a wrapper for the OGR data source object that supports reading data from a variety of OGR-supported geospatial file formats and data sources using a simple, consistent interface.  Each data source is represented by a DataSource object which contains one or more layers of data.  Each layer, represented by a Layer object, contains some number of geographic features (Feature), information about the type of features contained in that layer (e.g. points, polygons, etc.), as well as the names and types of any additional fields (Field) of data that may be associated with each feature in that layer.The constructor for DataSource only requires one parameter: the path of the file you want to read. However, OGR also supports a variety of more complex data sources, including databases, that may be accessed by passing a special name string instead of a path. For more information, see the OGR Vector Formats documentation. The name property of a DataSource instance gives the OGR name of the underlying data source that it is using.The optional encoding parameter allows you to specify a non-standard encoding of the strings in the source. This is typically useful when you obtain DjangoUnicodeDecodeError exceptions while reading field values.Once you ve created your DataSource, you can find out how many layers of data it contains by accessing the layer_count property, or (equivalently) by using the len() function. For information on accessing the layers of data themselves, see the next section:Returns the number of layers in the data source.Returns the name of the data source.Layer is a wrapper for a layer of data in a DataSource object. You never create a Layer object directly. Instead, you retrieve them from a DataSource object, which is essentially a standard Python container of Layer objects. For example, you can access a specific layer by its index (e.g. ds[0] to access the first layer), or you can iterate over all the layers in the container in a for loop. The Layer itself acts as a container for geometric features.Typically, all the features in a given layer have the same geometry type. The geom_type property of a layer is an OGRGeomType that identifies the feature type. We can use it to print out some basic information about each layer in a DataSource:The example output is from the cities data source, loaded above, which evidently contains one layer, called \"cities\", which contains three point features. For simplicity, the examples below assume that you ve stored that layer in the variable layer:Returns the name of this layer in the data source.Returns the number of features in the layer. Same as len(layer):Returns the geometry type of the layer, as an OGRGeomType object:Returns the number of fields in the layer, i.e the number of fields of data associated with each feature in the layer:Returns a list of the names of each of the fields in this layer:Returns a list of the data types of each of the fields in this layer. These are subclasses of Field, discussed below:Returns a list of the maximum field widths for each of the fields in this layer:Returns a list of the numeric precisions for each of the fields in this layer. This is meaningless (and set to zero) for non-numeric fields:Returns the spatial extent of this layer, as an Envelope object:Property that returns the SpatialReference associated with this layer:If the Layer has no spatial reference information associated with it, None is returned.Property that may be used to retrieve or set a spatial filter for this layer. A spatial filter can only be set with an OGRGeometry instance, a 4-tuple extent, or None. When set with something other than None, only features that intersect the filter will be returned when iterating over the layer:A method that returns a list of the values of a given field for each feature in the layer:A method that returns a list containing the geometry of each feature in the layer. If the optional argument geos is set to True then the geometries are converted to GEOSGeometry objects. Otherwise, they are returned as OGRGeometry objects:Returns a boolean indicating whether this layer supports the given capability (a string).  Examples of valid capability strings include: 'RandomRead', 'SequentialWrite', 'RandomWrite', 'FastSpatialFilter', 'FastFeatureCount', 'FastGetExtent', 'CreateField', 'Transactions', 'DeleteFeature', and 'FastSetNextByIndex'.Feature wraps an OGR feature. You never create a Feature object directly. Instead, you retrieve them from a Layer object. Each feature consists of a geometry and a set of fields containing additional properties. The geometry of a field is accessible via its geom property, which returns an OGRGeometry object. A Feature behaves like a standard Python container for its fields, which it returns as Field objects: you can access a field directly by its index or name, or you can iterate over a feature s fields, e.g. in a for loop.Returns the geometry for this feature, as an OGRGeometry object:A method that returns the value of the given field (specified by name) for this feature, not a Field wrapper object:Returns the type of geometry for this feature, as an OGRGeomType object. This will be the same for all features in a given layer and is equivalent to the Layer.geom_type property of the Layer object the feature came from.Returns the number of fields of data associated with the feature. This will be the same for all features in a given layer and is equivalent to the Layer.num_fields property of the Layer object the feature came from.Returns a list of the names of the fields of data associated with the feature. This will be the same for all features in a given layer and is equivalent to the Layer.fields property of the Layer object the feature came from.Returns the feature identifier within the layer:Returns the name of the Layer that the feature came from. This will be the same for all features in a given layer:A method that returns the index of the given field name. This will be the same for all features in a given layer:Returns the name of this field:Returns the OGR type of this field, as an integer. The FIELD_CLASSES dictionary maps these values onto subclasses of Field:Returns a string with the name of the data type of this field:Returns the value of this field. The Field class itself returns the value as a string, but each subclass returns the value in the most appropriate form:Returns the width of this field:Returns the numeric precision of this field. This is meaningless (and set to zero) for non-numeric fields:Returns the value of the field as a double (float):Returns the value of the field as an integer:Returns the value of the field as a string:Returns the value of the field as a tuple of date and time components:The Driver class is used internally to wrap an OGR DataSource driver.Returns the number of OGR vector drivers currently registered."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/gdal/#ogr-geometries", "para": "OGRGeometry objects share similar functionality with GEOSGeometry objects and are thin wrappers around OGR s internal geometry representation. Thus, they allow for more efficient access to data when using DataSource. Unlike its GEOS counterpart, OGRGeometry supports spatial reference systems and coordinate transformation:This object is a wrapper for the OGR Geometry class. These objects are instantiated directly from the given geom_input parameter, which may be a string containing WKT, HEX, GeoJSON, a buffer containing WKB data, or an OGRGeomType object. These objects are also returned from the Feature.geom attribute, when reading vector data from Layer (which is in turn a part of a DataSource).Constructs an OGRGeometry from the given GML string.Constructs a Polygon from the given bounding-box (a 4-tuple).Returns the number of points in a LineString, the number of rings in a Polygon, or the number of geometries in a GeometryCollection. Not applicable to other geometry types.Iterates over the points in a LineString, the rings in a Polygon, or the geometries in a GeometryCollection. Not applicable to other geometry types.Returns the point at the specified index for a LineString, the interior ring at the specified index for a Polygon, or the geometry at the specified index in a GeometryCollection. Not applicable to other geometry types.Returns the number of coordinated dimensions of the geometry, i.e. 0 for points, 1 for lines, and so forth:Returns or sets the coordinate dimension of this geometry. For example, the value would be 2 for two-dimensional geometries.Returns the number of elements in this geometry:Returns the number of points used to describe this geometry:Alias for point_count.Alias for point_count.Returns the type of this geometry, as an OGRGeomType object.Returns the name of the type of this geometry:Returns the area of this geometry, or 0 for geometries that do not contain an area:Returns the envelope of this geometry, as an Envelope object.Returns the envelope of this geometry as a 4-tuple, instead of as an Envelope object:This property controls the spatial reference for this geometry, or None if no spatial reference system has been assigned to it. If assigned, accessing this property returns a SpatialReference object.  It may be set with another SpatialReference object, or any input that SpatialReference accepts. Example:Returns or sets the spatial reference identifier corresponding to SpatialReference of this geometry.  Returns None if there is no spatial reference information associated with this geometry, or if an SRID cannot be determined.Returns a GEOSGeometry object corresponding to this geometry.Returns a string representation of this geometry in GML format:Returns a string representation of this geometry in HEX WKB format:Returns a string representation of this geometry in JSON format:Returns a string representation of this geometry in KML format.Returns the size of the WKB buffer needed to hold a WKB representation of this geometry:Returns a buffer containing a WKB representation of this geometry.Returns a string representation of this geometry in WKT format.Returns the EWKT representation of this geometry.Returns a new OGRGeometry clone of this geometry object.If there are any rings within this geometry that have not been closed, this routine will do so by adding the starting point to the end:Transforms this geometry to a different spatial reference system. May take a CoordTransform object, a SpatialReference object, or any other input accepted by SpatialReference (including spatial reference WKT and PROJ.4 strings, or an integer SRID).By default nothing is returned and the geometry is transformed in-place. However, if the clone keyword is set to True then a transformed clone of this geometry is returned instead.Returns True if this geometry intersects the other, otherwise returns False.Returns True if this geometry is equivalent to the other, otherwise returns False.Returns True if this geometry is spatially disjoint to (i.e. does not intersect) the other, otherwise returns False.Returns True if this geometry touches the other, otherwise returns False.Returns True if this geometry crosses the other, otherwise returns False.Returns True if this geometry is contained within the other, otherwise returns False.Returns True if this geometry contains the other, otherwise returns False.Returns True if this geometry overlaps the other, otherwise returns False.The boundary of this geometry, as a new OGRGeometry object.The smallest convex polygon that contains this geometry, as a new OGRGeometry object.Returns the region consisting of the difference of this geometry and the other, as a new OGRGeometry object.Returns the region consisting of the intersection of this geometry and the other, as a new OGRGeometry object.Returns the region consisting of the symmetric difference of this geometry and the other, as a new OGRGeometry object.Returns the region consisting of the union of this geometry and the other, as a new OGRGeometry object.Returns the coordinates of a point geometry as a tuple, the coordinates of a line geometry as a tuple of tuples, and so forth:An alias for tuple.Returns the X coordinate of this point:Returns the Y coordinate of this point:Returns the Z coordinate of this point, or None if the point does not have a Z coordinate:Returns a list of X coordinates in this line:Returns a list of Y coordinates in this line:Returns a list of Z coordinates in this line, or None if the line does not have Z coordinates:Returns the shell or exterior ring of this polygon, as a LinearRing geometry.An alias for shell.Returns a Point representing the centroid of this polygon.Adds a geometry to this geometry collection. Not applicable to other geometry types.This class allows for the representation of an OGR geometry type in any of several ways:Returns a short-hand string form of the OGR Geometry type:Returns the number corresponding to the OGR geometry type:Returns the Django field type (a subclass of GeometryField) to use for storing this OGR type, or None if there is no appropriate Django type:Represents an OGR Envelope structure that contains the minimum and maximum X, Y coordinates for a rectangle bounding box. The naming of the variables is compatible with the OGR Envelope C structure.The value of the minimum X coordinate.The value of the maximum X coordinate.The value of the minimum Y coordinate.The value of the maximum Y coordinate.The upper-right coordinate, as a tuple.The lower-left coordinate, as a tuple.A tuple representing the envelope.A string representing this envelope as a polygon in WKT format."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/gdal/#coordinate-system-objects", "para": "Spatial reference objects are initialized on the given srs_input, which may be one of the following:Example:Returns the value of the given string attribute node, None if the node doesn t exist. Can also take a tuple as a parameter, (target, child), where child is the index of the attribute in the WKT. For example:The attribute value for the given target node (e.g. 'PROJCS'). The index keyword specifies an index of the child node to return.Returns the authority name for the given string target node.Returns the authority code for the given string target node.Returns a clone of this spatial reference object.This method inspects the WKT of this SpatialReference and will add EPSG authority nodes where an EPSG identifier is applicable.Morphs this SpatialReference from ESRI s format to EPSGMorphs this SpatialReference to ESRI s format.Checks to see if the given spatial reference is valid, if not an exception will be raised.Import spatial reference from EPSG code.Import spatial reference from PROJ.4 string.Import spatial reference from WKT.Import spatial reference from XML.Returns the name of this Spatial Reference.Returns the SRID of top-level authority, or None if undefined.Returns the name of the linear units.Returns the value of the linear units.Returns the name of the angular units. Returns the value of the angular units.Returns a 2-tuple of the units value and the units name and will automatically determines whether to return the linear or angular units.Returns a tuple of the ellipsoid parameters for this spatial reference: (semimajor axis, semiminor axis, and inverse flattening).Returns the semi major axis of the ellipsoid for this spatial reference.Returns the semi minor axis of the ellipsoid for this spatial reference.Returns the inverse flattening of the ellipsoid for this spatial reference.Returns True if this spatial reference is geographic (root node is GEOGCS).Returns True if this spatial reference is local (root node is LOCAL_CS).Returns True if this spatial reference is a projected coordinate system (root node is PROJCS).Returns the WKT representation of this spatial reference.Returns the  pretty  representation of the WKT.Returns the PROJ.4 representation for this spatial reference.Alias for SpatialReference.proj.Returns the XML representation of this spatial reference.Represents a coordinate system transform. It is initialized with two SpatialReference, representing the source and target coordinate systems, respectively. These objects should be used when performing the same coordinate transformation repeatedly on different geometries:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/gdal/#raster-data-objects", "para": "GDALRaster is a wrapper for the GDAL raster source object that supports reading data from a variety of GDAL-supported geospatial file formats and data sources using a simple, consistent interface.  Each data source is represented by a GDALRaster object which contains one or more layers of data named bands.  Each band, represented by a GDALBand object, contains georeferenced image data. For example, an RGB image is represented as three bands: one for red, one for green, and one for blue.NoteFor raster data there is no difference between a raster instance and its data source. Unlike for the Geometry objects, GDALRaster objects are always a data source. Temporary rasters can be instantiated in memory using the corresponding driver, but they will be of the same class as file-based raster sources.The constructor for GDALRaster accepts two parameters. The first parameter defines the raster source, and the second parameter defines if a raster should be opened in write mode. For newly-created rasters, the second parameter is ignored and the new raster is always created in write mode.The first parameter can take three forms: a string representing a file path, a dictionary with values defining a new raster, or a bytes object representing a raster file.If the input is a file path, the raster is opened from there. If the input is raw data in a dictionary, the parameters width, height, and srid are required. If the input is a bytes object, it will be opened using a GDAL virtual filesystem.For a detailed description of how to create rasters using dictionary input, see Creating rasters from data. For a detailed description of how to create rasters in the virtual filesystem, see Using GDAL s Virtual Filesystem.The following example shows how rasters can be created from different input sources (using the sample data from the GeoDjango tests; see also the Sample Data section).The name of the source which is equivalent to the input file path or the name provided upon instantiation.The name of the GDAL driver used to handle the input file. For GDALRasters created from a file, the driver type is detected automatically. The creation of rasters from scratch is a in-memory raster by default ('MEM'), but can be altered as needed. For instance, use GTiff for a GeoTiff file. For a list of file types, see also the GDAL Raster Formats list.An in-memory raster is created through the following example:A file based GeoTiff raster is created through the following example:The width of the source in pixels (X-axis).The height of the source in pixels (Y-axis).The spatial reference system of the raster, as a SpatialReference instance. The SRS can be changed by setting it to an other SpatialReference or providing any input that is accepted by the SpatialReference constructor.The Spatial Reference System Identifier (SRID) of the raster. This property is a shortcut to getting or setting the SRID through the srs attribute.The affine transformation matrix used to georeference the source, as a tuple of six coefficients which map pixel/line coordinates into georeferenced space using the following relationship:The same values can be retrieved by accessing the origin (indices 0 and 3), scale (indices 1 and 5) and skew (indices 2 and 4) properties.The default is [0.0, 1.0, 0.0, 0.0, 0.0, -1.0].Coordinates of the top left origin of the raster in the spatial reference system of the source, as a point object with x and y members.Pixel width and height used for georeferencing the raster, as a as a point object with x and y  members. See geotransform for more information.Skew coefficients used to georeference the raster, as a point object with x and y  members. In case of north up images, these coefficients are both 0.Extent (boundary values) of the raster source, as a 4-tuple (xmin, ymin, xmax, ymax) in the spatial reference system of the source.List of all bands of the source, as GDALBand instances.Returns a warped version of this raster.The warping parameters can be specified through the ds_input argument. The use of ds_input is analogous to the corresponding argument of the class constructor. It is a dictionary with the characteristics of the target raster. Allowed dictionary key values are width, height, SRID, origin, scale, skew, datatype, driver, and name (filename).By default, the warp functions keeps most parameters equal to the values of the original source raster, so only parameters that should be changed need to be specified. Note that this includes the driver, so for file-based rasters the warp function will create a new raster on disk.The only parameter that is set differently from the source raster is the name. The default value of the raster name is the name of the source raster appended with '_copy' + source_driver_name. For file-based rasters it is recommended to provide the file path of the target raster.The resampling algorithm used for warping can be specified with the resampling argument. The default is NearestNeighbor, and the other allowed values are Bilinear, Cubic, CubicSpline, Lanczos, Average, and Mode.The max_error argument can be used to specify the maximum error measured in input pixels that is allowed in approximating the transformation. The default is 0.0 for exact calculations.For users familiar with GDAL, this function has a similar functionality to the gdalwarp command-line utility.For example, the warp function can be used for aggregating a raster to the double of its original pixel scale:Returns a transformed version of this raster with the specified SRID.This function transforms the current raster into a new spatial reference system that can be specified with an srid. It calculates the bounds and scale of the current raster in the new spatial reference system and warps the raster using the warp function.By default, the driver of the source raster is used and the name of the raster is the original name appended with '_copy' + source_driver_name. A different driver or name can be specified with the driver and name arguments.The default resampling algorithm is NearestNeighbour but can be changed using the resampling argument. The default maximum allowed error for resampling is 0.0 and can be changed using the max_error argument. Consult the warp documentation for detail on those arguments.Returns a string with a summary of the raster. This is equivalent to the gdalinfo command line utility.The metadata of this raster, represented as a nested dictionary. The first-level key is the metadata domain. The second-level contains the metadata item names and values from each domain.To set or update a metadata item, pass the corresponding metadata item to the method using the nested structure described above. Only keys that are in the specified dictionary are updated; the rest of the metadata remains unchanged.To remove a metadata item, use None as the metadata value.A bytes representation of this raster. Returns None for rasters that are not stored in GDAL s virtual filesystem.A boolean indicating if this raster is stored in GDAL s virtual filesystem.GDALBand instances are not created explicitly, but rather obtained from a GDALRaster object, through its bands attribute. The GDALBands contain the actual pixel values of the raster.The name or description of the band, if any.The width of the band in pixels (X-axis).The height of the band in pixels (Y-axis).The total number of pixels in this band. Is equal to width * height.Compute statistics on the pixel values of this band. The return value is a tuple with the following structure: (minimum, maximum, mean, standard deviation).If the approximate argument is set to True, the statistics may be computed based on overviews or a subset of image tiles.If the refresh argument is set to True, the statistics will be computed from the data directly, and the cache will be updated with the result.If a persistent cache value is found, that value is returned. For raster formats using Persistent Auxiliary Metadata (PAM) services, the statistics might be cached in an auxiliary file. In some cases this metadata might be out of sync with the pixel values or cause values from a previous call to be returned which don t reflect the value of the approximate argument. In such cases, use the refresh argument to get updated values and store them in the cache.For empty bands (where all pixel values are  no data ), all statistics are returned as None.The statistics can also be retrieved directly by accessing the min, max, mean, and std properties.The minimum pixel value of the band (excluding the  no data  value).The maximum pixel value of the band (excluding the  no data  value).The mean of all pixel values of the band (excluding the  no data  value).The standard deviation of all pixel values of the band (excluding the  no data  value).The  no data  value for a band is generally a special marker value used to mark pixels that are not valid data. Such pixels should generally not be displayed, nor contribute to analysis operations.To delete an existing  no data  value, set this property to None (requires GDAL   2.1).The data type contained in the band, as an integer constant between 0 (Unknown) and 11. If as_string is True, the data type is returned as a string with the following possible values: GDT_Unknown, GDT_Byte, GDT_UInt16, GDT_Int16, GDT_UInt32, GDT_Int32, GDT_Float32, GDT_Float64, GDT_CInt16, GDT_CInt32, GDT_CFloat32, and GDT_CFloat64.The color interpretation for the band, as an integer between 0and 16. If as_string is True, the data type is returned as a string with the following possible values: GCI_Undefined, GCI_GrayIndex, GCI_PaletteIndex, GCI_RedBand, GCI_GreenBand, GCI_BlueBand, GCI_AlphaBand, GCI_HueBand, GCI_SaturationBand, GCI_LightnessBand, GCI_CyanBand, GCI_MagentaBand, GCI_YellowBand, GCI_BlackBand, GCI_YCbCr_YBand, GCI_YCbCr_CbBand, and GCI_YCbCr_CrBand. GCI_YCbCr_CrBand also represents GCI_Max because both correspond to the integer 16, but only GCI_YCbCr_CrBand is returned as a string.The accessor to the pixel values of the GDALBand. Returns the complete data array if no parameters are provided. A subset of the pixel array can be requested by specifying an offset and block size as tuples.If NumPy is available, the data is returned as NumPy array. For performance reasons, it is highly recommended to use NumPy.Data is written to the GDALBand if the data parameter is provided. The input can be of one of the following types - packed string, buffer, list, array, and NumPy array. The number of items in the input should normally correspond to the total number of pixels in the band, or to the number of pixels for a specific block of pixel values if the offset and size parameters are provided.If the number of items in the input is different from the target pixel block, the shape parameter must be specified. The shape is a tuple that specifies the width and height of the input data in pixels. The data is then replicated to update the pixel values of the selected block. This is useful to fill an entire band with a single value, for instance.For example:The metadata of this band. The functionality is identical to GDALRaster.metadata.This section describes how to create rasters from scratch using the ds_input parameter.A new raster is created when a dict is passed to the GDALRaster constructor. The dictionary contains defining parameters of the new raster, such as the origin, size, or spatial reference system. The dictionary can also contain pixel data and information about the format of the new raster. The resulting raster can therefore be file-based or memory-based, depending on the driver specified.There s no standard for describing raster data in a dictionary or JSON flavor. The definition of the dictionary input to the GDALRaster class is therefore specific to Django. It s inspired by the geojson format, but the geojson standard is currently limited to vector formats.Examples of using the different keys when creating rasters can be found in the documentation of the corresponding attributes and methods of the GDALRaster and GDALBand classes.Only a few keys are required in the ds_input dictionary to create a raster: width, height, and srid. All other parameters have default values (see the table below). The list of keys that can be passed in the ds_input dictionary is closely related but not identical to the GDALRaster properties. Many of the parameters are mapped directly to those properties; the others are described below.The following table describes all keys that can be set in the ds_input dictionary.String representing the name of the raster. When creating a file-based raster, this parameter must be the file path for the new raster. If the name starts with /vsimem/, the raster is created in GDAL s virtual filesystem.Integer representing the data type for all the bands. Defaults to 6 (Float32). All bands of a new raster are required to have the same datatype. The value mapping is:Integer representing the number of bands of the raster. A raster can be created without passing band data upon creation. If the number of bands isn t specified, it s automatically calculated from the length of the bands input. The number of bands can t be changed after creation.A list of band_input dictionaries with band input data. The resulting band indices are the same as in the list provided. The definition of the band input dictionary is given below. If band data isn t provided, the raster bands values are instantiated as an array of zeros and the  no data  value is set to None.A dictionary with raster creation options. The key-value pairs of the input dictionary are passed to the driver on creation of the raster.The available options are driver-specific and are described in the documentation of each driver.The values in the dictionary are not case-sensitive and are automatically converted to the correct string format upon creation.The following example uses some of the options available for the GTiff driver. The result is a compressed signed byte raster with an internal tiling scheme. The internal tiles have a block size of 23 by 23:The bands key in the ds_input dictionary is a list of band_input dictionaries. Each band_input dictionary can contain pixel values and the  no data  value to be set on the bands of the new raster. The data array can have the full size of the new raster or be smaller. For arrays that are smaller than the full raster, the size, shape, and offset keys  control the pixel values. The corresponding keys are passed to the data() method. Their functionality is the same as setting the band data with that method. The following table describes the keys that can be used.GDAL has an internal memory-based filesystem, which allows treating blocks of memory as files. It can be used to read and write GDALRaster objects to and from binary file buffers.This is useful in web contexts where rasters might be obtained as a buffer from a remote storage or returned from a view without being written to disk.GDALRaster objects are created in the virtual filesystem when a bytes object is provided as input, or when the file path starts with /vsimem/.Input provided as bytes has to be a full binary representation of a file. For instance:To create a new virtual file-based raster from scratch, use the ds_input dictionary representation and provide a name argument that starts with /vsimem/ (for detail of the dictionary representation, see Creating rasters from data). For virtual file-based rasters, the vsi_buffer attribute returns the bytes representation of the raster.Here s how to create a raster and return it as a file in an HttpResponse:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/gdal/#settings", "para": "A string specifying the location of the GDAL library.  Typically, this setting is only used if the GDAL library is in a non-standard location (e.g., /home/john/lib/libgdal.so)."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/gdal/#exceptions", "para": "The base GDAL exception, indicating a GDAL-related error.An exception raised when an error occurs when constructing or using a spatial reference system object."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.cache", "para": "This module contains helper functions for controlling HTTP caching. It does so by managing the Vary header of responses. It includes functions to patch the header of response objects directly and decorators that change functions to do that header-patching themselves.For information on the Vary header, see RFC 7231#section-7.1.4.Essentially, the Vary HTTP header defines which headers a cache should take into account when building its cache key. Requests with the same path but different header content for headers named in Vary need to get different cache keys to prevent delivery of wrong content.For example, internationalization middleware would need to distinguish caches by the Accept-language header.This function patches the Cache-Control header by adding all keyword arguments to it. The transformation is as follows:Returns the max-age from the response Cache-Control header as an integer (or None if it wasn t found or wasn t an integer).Adds some useful headers to the given HttpResponse object:Each header is only added if it isn t already set.cache_timeout is in seconds. The CACHE_MIDDLEWARE_SECONDS setting is used by default.Adds a Cache-Control: max-age=0, no-cache, no-store, must-revalidate header to a response to indicate that a page should never be cached.Adds (or updates) the Vary header in the given HttpResponse object. newheaders is a list of header names that should be in Vary. Existing headers in Vary aren t removed.Returns a cache key based on the request path. It can be used in the request phase because it pulls the list of headers to take into account from the global path registry and uses those to build a cache key to check against.If there is no headerlist stored, the page needs to be rebuilt, so this function returns None.Learns what headers to take into account for some request path from the response object. It stores those headers in a global path registry so that later access to that path will know what headers to take into account without building the response object itself. The headers are named in the Vary header of the response, but we want to prevent response generation.The list of headers to use for cache key generation is stored in the same cache as the pages themselves. If the cache ages some data out of the cache, this just means that we have to build the response once to get at the Vary header and so at the list of headers to use for the cache key."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.dateparse", "para": "The functions defined in this module share the following properties:Parses a string and returns a datetime.date.Parses a string and returns a datetime.time.UTC offsets aren t supported; if value describes one, the result is None.Parses a string and returns a datetime.datetime.UTC offsets are supported; if value describes one, the result s tzinfo attribute is a datetime.timezone instance.In older versions, the tzinfo attribute is a FixedOffset instance.Parses a string and returns a datetime.timedelta.Expects data in the format \"DD HH:MM:SS.uuuuuu\" or as specified by ISO 8601 (e.g. P4DT1H15M20S which is equivalent to 4 1:15:20) or PostgreSQL s day-time interval format (e.g. 3 days 04:05:06)."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.decorators", "para": "Converts a function decorator into a method decorator. It can be used to decorate methods or classes; in the latter case, name is the name of the method to be decorated and is required.decorator may also be a list or tuple of functions. They are wrapped in reverse order so that the call order is the order in which the functions appear in the list/tuple.See decorating class based views for example usage.Given a middleware class, returns a view decorator. This lets you use middleware functionality on a per-view basis. The middleware is created with no params passed.It assumes middleware that s compatible with the old style of Django 1.9 and earlier (having methods like process_request(), process_exception(), and process_response()).Like decorator_from_middleware, but returns a function that accepts the arguments to be passed to the middleware_class. For example, the cache_page() decorator is created from the CacheMiddleware like this:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.encoding", "para": "A decorator that defines __unicode__ and __str__ methods under Python 2. Under Python 3 it does nothing.To support Python 2 and 3 with a single code base, define a __str__ method returning text (use six.text_type() if you re doing some casting) and apply this decorator to the class.Returns a str object representing arbitrary object s. Treats bytestrings using the encoding codec.If strings_only is True, don t convert (some) non-string-like objects.Determine if the object instance is of a protected type.Objects of protected types are preserved as-is when passed to force_text(strings_only=True).Similar to smart_text, except that lazy instances are resolved to strings, rather than kept as lazy objects.If strings_only is True, don t convert (some) non-string-like objects.Returns a bytestring version of arbitrary object s, encoded as specified in encoding.If strings_only is True, don t convert (some) non-string-like objects.Similar to smart_bytes, except that lazy instances are resolved to bytestrings, rather than kept as lazy objects.If strings_only is True, don t convert (some) non-string-like objects.Alias of smart_text(). This function returns a str or a lazy string.For instance, this is suitable for writing to sys.stdout.Alias of smart_bytes() on Python 2 (in older versions of Django that support it).Alias of force_text(). This function always returns a str.Alias of force_bytes() on Python 2 (in older versions of Django that support it).Convert an Internationalized Resource Identifier (IRI) portion to a URI portion that is suitable for inclusion in a URL.This is the algorithm from section 3.1 of RFC 3987#section-3.1, slightly simplified since the input is assumed to be a string rather than an arbitrary byte stream.Takes an IRI (string or UTF-8 bytes) and returns a string containing the encoded result.Converts a Uniform Resource Identifier into an Internationalized Resource Identifier.This is an algorithm from section 3.2 of RFC 3987#section-3.2.Takes a URI in ASCII bytes and returns a string containing the encoded result.Convert a file system path to a URI portion that is suitable for inclusion in a URL. The path is assumed to be either UTF-8 bytes or string.This method will encode certain characters that would normally be recognized as special characters for URIs.  Note that this method does not encode the   character, as it is a valid character within URIs. See encodeURIComponent() JavaScript function for more details.Returns an ASCII string containing the encoded result.Escapes the unsafe characters from the path portion of a Uniform Resource Identifier (URI)."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.feedgenerator", "para": "Sample usage:For simplifying the selection of a generator use feedgenerator.DefaultFeed which is currently Rss201rev2FeedFor definitions of the different versions of RSS, see: https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rssCreates a TagURI.See https://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-atom-idBase class for all syndication feeds. Subclasses should provide write().Initialize the feed with the given dictionary of metadata, which applies to the entire feed.Any extra keyword arguments you pass to __init__ will be stored in self.feed.All parameters should be strings, except categories, which should be a sequence of strings.Adds an item to the feed. All args are expected to be strings except pubdate and updateddate, which are datetime.datetime objects, and enclosures, which is a list of Enclosure instances.Return extra attributes to place on the root (i.e. feed/channel) element. Called from write().Add elements in the root (i.e. feed/channel) element. Called from write().Return extra attributes to place on each item (i.e. item/entry) element.Add elements on each item (i.e. item/entry) element.Outputs the feed in the given encoding to outfile, which is a file-like object. Subclasses should override this.Returns the feed in the given encoding as a string.Returns the latest pubdate or updateddate for all items in the feed. If no items have either of these attributes this returns the current UTC date/time.Represents an RSS enclosureSpec: https://cyber.harvard.edu/rss/rss.htmlSpec: http://backend.userland.com/rss091Spec: https://tools.ietf.org/html/rfc4287"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.functional", "para": "The @cached_property decorator caches the result of a method with a single self argument as a property. The cached result will persist as long as the instance does, so if the instance is passed around and the function subsequently invoked, the cached result will be returned.Consider a typical case, where a view might need to call a model s method to perform some computation, before placing the model instance into the context, where the template might invoke the method once more:And in the template you would have:Here, friends() will be called twice. Since the instance person in the view and the template are the same, decorating the friends() method with @cached_property can avoid that:Note that as the method is now a property, in Python code it will need to be accessed appropriately:The cached value can be treated like an ordinary attribute of the instance:Because of the way the descriptor protocol works, using del (or delattr) on a cached_property that hasn t been accessed raises AttributeError.As well as offering potential performance advantages, @cached_property can ensure that an attribute s value does not change unexpectedly over the life of an instance. This could occur with a method whose computation is based on datetime.now(), or simply if a change were saved to the database by some other process in the brief interval between subsequent invocations of a method on the same instance.You can make cached properties of methods. For example, if you had an expensive get_friends() method and wanted to allow calling it without retrieving the cached value, you could write:You only need the name argument for Python < 3.6 support.Older versions of Django require the name argument for all versions of Python.While person.get_friends() will recompute the friends on each call, the value of the cached property will persist until you delete it as described above:WarningOn Python < 3.6, cached_property doesn t work properly with a mangled name unless it s passed a name of the form _Class__attribute:Django offers many utility functions (particularly in django.utils) that take a string as their first argument and do something to that string. These functions are used by template filters as well as directly in other code.If you write your own similar functions and deal with translations, you ll face the problem of what to do when the first argument is a lazy translation object. You don t want to convert it to a string immediately, because you might be using this function outside of a view (and hence the current thread s locale setting will not be correct).For cases like this, use the django.utils.functional.keep_lazy() decorator. It modifies the function so that if it s called with a lazy translation as one of its arguments, the function evaluation is delayed until it needs to be converted to a string.For example:The keep_lazy() decorator takes a number of extra arguments (*args) specifying the type(s) that the original function can return. A common use case is to have functions that return text. For these, you can just pass the str type to keep_lazy (or even simpler, use the keep_lazy_text() decorator described in the next section).Using this decorator means you can write your function and assume that the input is a proper string, then add support for lazy translation objects at the end.A shortcut for keep_lazy(str)(func).If you have a function that returns text and you want to be able to take lazy arguments while delaying their evaluation, simply use this decorator:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.html", "para": "Usually you should build up HTML using Django s templates to make use of its autoescape mechanism, using the utilities in django.utils.safestring where appropriate. This module provides some additional low level utilities for escaping HTML.Returns the given text with ampersands, quotes and angle brackets encoded for use in HTML. The input is first coerced to a string and the output has mark_safe() applied.Similar to escape(), except that it doesn t operate on pre-escaped strings, so it will not double escape.This is similar to str.format(), except that it is appropriate for building up HTML fragments. All args and kwargs are passed through conditional_escape() before being passed to str.format().For the case of building up small HTML fragments, this function is to be preferred over string interpolation using % or str.format() directly, because it applies escaping to all arguments - just like the template system applies escaping by default.So, instead of writing:You should instead use:This has the advantage that you don t need to apply escape() to each argument and risk a bug and an XSS vulnerability if you forget one.Note that although this function uses str.format() to do the interpolation, some of the formatting options provided by str.format() (e.g. number formatting) will not work, since all arguments are passed through conditional_escape() which (ultimately) calls force_text() on the values.A wrapper of format_html(), for the common case of a group of arguments that need to be formatted using the same format string, and then joined using sep. sep is also passed through conditional_escape().args_generator should be an iterator that returns the sequence of args that will be passed to format_html(). For example:Tries to remove anything that looks like an HTML tag from the string, that is anything contained within <>.Absolutely NO guarantee is provided about the resulting string being HTML safe. So NEVER mark safe the result of a strip_tag call without escaping it first, for example with escape().For example:If value is \"<b>Joel</b> <button>is</button> a <span>slug</span>\" the return value will be \"Joel is a slug\".If you are looking for a more robust solution, take a look at the bleach Python library.The __html__() method on a class helps non-Django templates detect classes whose output doesn t require HTML escaping.This decorator defines the __html__() method on the decorated class by wrapping __str__() in mark_safe(). Ensure the __str__() method does indeed return text that doesn t require HTML escaping."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.http", "para": "A version of Python s urllib.parse.urlencode() function that can operate on MultiValueDict and non-string values.Deprecated since version 2.1: Use http_date() instead, which follows the latest RFC.Formats the time to ensure compatibility with Netscape s cookie standard.Accepts a floating point number expressed in seconds since the epoch in UTC such as that outputted by time.time(). If set to None, defaults to the current time.Outputs a string in the format Wdy, DD-Mon-YYYY HH:MM:SS GMT.Formats the time to match the RFC 1123 date format as specified by HTTP RFC 7231#section-7.1.1.1.Accepts a floating point number expressed in seconds since the epoch in UTC such as that outputted by time.time(). If set to None, defaults to the current time.Outputs a string in the format Wdy, DD Mon YYYY HH:MM:SS GMT.Converts a base 36 string to an integer.Converts a positive integer to a base 36 string.Encodes a bytestring to a base64 string for use in URLs, stripping any trailing equal signs.In older versions, it returns a bytestring instead of a string.Decodes a base64 encoded string, adding back any trailing equal signs that might have been stripped.In older versions, s may be a bytestring."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.module_loading", "para": "Functions for working with Python modules.Imports a dotted module path and returns the attribute/class designated by the last name in the path. Raises ImportError if the import failed. For example:is equivalent to:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.safestring", "para": "Functions and classes for working with  safe strings : strings that can be displayed safely without further escaping in HTML. Marking something as a  safe string  means that the producer of the string has already turned characters that should not be interpreted by the HTML engine (e.g.  < ) into the appropriate entities.A str subclass that has been specifically marked as  safe  (requires no further escaping) for HTML output purposes. Alias of SafeText.A str subclass that has been specifically marked as  safe  for HTML output purposes.Explicitly mark a string as safe for (HTML) output purposes. The returned object can be used everywhere a string is appropriate.Can be called multiple times on a single string.Can also be used as a decorator.For building up fragments of HTML, you should normally be using django.utils.html.format_html() instead.String marked safe will become unsafe again if modified. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.text", "para": "A version of str.format() for when format_string, args, and/or kwargs contain lazy objects. The first argument is the string to be formatted. For example:This example allows translators to translate part of the URL. If  person  is translated to  persona , the regular expression will match persona/(?P<pk>\\d+)/$, e.g. persona/5/.Converts a string to a URL slug by:For example:If you want to allow Unicode characters, pass allow_unicode=True. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.timezone", "para": "tzinfo instance that represents UTC.A tzinfo subclass modeling a fixed offset from UTC. offset is an integer number of minutes east of UTC.Deprecated since version 2.2: Use datetime.timezone instead.Returns a tzinfo instance that represents a time zone with a fixed offset from UTC.offset is a datetime.timedelta or an integer number of minutes. Use positive values for time zones east of UTC and negative values for west of UTC.Returns a tzinfo instance that represents the default time zone.Returns the name of the default time zone.Returns a tzinfo instance that represents the current time zone.Returns the name of the current time zone.Sets the current time zone. The timezone argument must be an instance of a tzinfo subclass or a time zone name.Unsets the current time zone.This is a Python context manager that sets the current time zone on entry with activate(), and restores the previously active time zone on exit. If the timezone argument is None, the current time zone is unset on entry with deactivate() instead.override is also usable as a function decorator.Converts an aware datetime to a different time zone, by default the current time zone.When value is omitted, it defaults to now().This function doesn t work on naive datetimes; use make_aware() instead.Uses localtime() to convert an aware datetime to a date() in a different time zone, by default the current time zone.When value is omitted, it defaults to now().This function doesn t work on naive datetimes.Returns a datetime that represents the current point in time. Exactly what s returned depends on the value of USE_TZ:Returns True if value is aware, False if it is naive. This function assumes that value is a datetime.Returns True if value is naive, False if it is aware. This function assumes that value is a datetime.Returns an aware datetime that represents the same point in time as value in timezone, value being a naive datetime. If timezone is set to None, it defaults to the current time zone.The pytz.AmbiguousTimeError exception is raised if you try to make value aware during a DST transition where the same time occurs twice (when reverting from DST). Setting is_dst to True or False will avoid the exception by choosing if the time is pre-transition or post-transition respectively.The pytz.NonExistentTimeError exception is raised if you try to make value aware during a DST transition such that the time never occurred (when entering into DST). Setting is_dst to True or False will avoid the exception by moving the hour backwards or forwards by 1 respectively. For example, is_dst=True would change a nonexistent time of 2:30 to 1:30 and is_dst=False would change the time to 3:30.Returns a naive datetime that represents in timezone  the same point in time as value, value being an aware datetime. If timezone is set to None, it defaults to the current time zone."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/utils/#module-django.utils.translation", "para": "For a complete discussion on the usage of the following see the translation documentation.The u prefix on the functions below comes from a difference in Python 2 between unicode and bytestrings. If your code doesn t support Python 2, use the functions without the u.Translates message and returns it as a string.Translates message given the context and returns it as a string.For more information, see Contextual markers.Same as the non-lazy versions above, but using lazy execution.See lazy translations documentation.Marks strings for translation but doesn t translate them now. This can be used to store strings in global variables that should stay in the base language (because they might be used externally) and will be translated later.Translates singular and plural and returns the appropriate string based on number.Translates singular and plural and returns the appropriate string based on number and the context.Same as the non-lazy versions above, but using lazy execution.See lazy translations documentation.Fetches the translation object for a given language and activates it as the current translation object for the current thread.Deactivates the currently active translation object so that further _ calls will resolve against the default translation object, again.Makes the active translation object a NullTranslations() instance. This is useful when we want delayed translations to appear as the original string for some reason.A Python context manager that uses django.utils.translation.activate() to fetch the translation object for a given language, activates it as the translation object for the current thread and reactivates the previous active language on exit. Optionally, it can simply deactivate the temporary translation on exit with django.utils.translation.deactivate() if the deactivate argument is True. If you pass None as the language argument, a NullTranslations() instance is activated within the context.override is also usable as a function decorator.Checks whether there is a global language file for the given language code (e.g.  fr ,  pt_BR ). This is used to decide whether a user-provided language is available.Returns the currently selected language code. Returns None if translations are temporarily deactivated (by deactivate_all() or when None is passed to override()).Returns selected language s BiDi layout:Analyzes the request to find what language the user wants the system to show. Only languages listed in settings.LANGUAGES are taken into account. If the user requests a sublanguage where we have a main language, we send out the main language.If check_path is True, the function first checks the requested URL for whether its path begins with a language code listed in the LANGUAGES setting.Returns lang_code if it s in the LANGUAGES setting, possibly selecting a more generic variant. For example, 'es' is returned if lang_code is 'es-ar' and 'es' is in LANGUAGES but 'es-ar' isn t.If strict is False (the default), a country-specific variant may be returned when neither the language code nor its generic variant is found. For example, if only 'es-co' is in LANGUAGES, that s returned for lang_codes like 'es' and 'es-ar'. Those matches aren t returned if strict=True.Raises LookupError if nothing is found.Turns a language name (en-us) into a locale name (en_US).Turns a Django template into something that is understood by xgettext. It does so by translating the Django translation tags into standard gettext function invocations.Session key under which the active language for the current session is stored."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-date-based/#yearmixin", "para": "A mixin that can be used to retrieve and provide parsing information for a year component of a date.Methods and AttributesThe strftime() format to use when parsing the year. By default, this is '%Y'.Optional The value for the year, as a string. By default, set to None, which means the year will be determined using other means.Returns the strftime() format to use when parsing the year. Returns year_format by default.Returns the year for which this view will display data, as a string. Tries the following sources, in order:Raises a 404 if no valid year specification can be found.Returns a date object containing the first day of the year after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.Returns a date object containing the first day of the year before the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-date-based/#monthmixin", "para": "A mixin that can be used to retrieve and provide parsing information for a month component of a date.Methods and AttributesThe strftime() format to use when parsing the month. By default, this is '%b'.Optional The value for the month, as a string. By default, set to None, which means the month will be determined using other means.Returns the strftime() format to use when parsing the month. Returns month_format by default.Returns the month for which this view will display data, as a string. Tries the following sources, in order:Raises a 404 if no valid month specification can be found.Returns a date object containing the first day of the month after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.Returns a date object containing the first day of the month before the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-date-based/#daymixin", "para": "A mixin that can be used to retrieve and provide parsing information for a day component of a date.Methods and AttributesThe strftime() format to use when parsing the day. By default, this is '%d'.Optional The value for the day, as a string. By default, set to None, which means the day will be determined using other means.Returns the strftime() format to use when parsing the day. Returns day_format by default.Returns the day for which this view will display data, as a string. Tries the following sources, in order:Raises a 404 if no valid day specification can be found.Returns a date object containing the next valid day after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.Returns a date object containing the previous valid day. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-date-based/#weekmixin", "para": "A mixin that can be used to retrieve and provide parsing information for a week component of a date.Methods and AttributesThe strftime() format to use when parsing the week. By default, this is '%U', which means the week starts on Sunday. Set it to '%W' if your week starts on Monday.Optional The value for the week, as a string. By default, set to None, which means the week will be determined using other means.Returns the strftime() format to use when parsing the week. Returns week_format by default.Returns the week for which this view will display data, as a string. Tries the following sources, in order:Raises a 404 if no valid week specification can be found.Returns a date object containing the first day of the week after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.Returns a date object containing the first day of the week before the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-date-based/#datemixin", "para": "A mixin class providing common behavior for all date-based views.Methods and AttributesThe name of the DateField or DateTimeField in the QuerySet s model that the date-based archive should use to determine the list of objects to display on the page.When time zone support is enabled and date_field is a DateTimeField, dates are assumed to be in the current time zone. Otherwise, the queryset could include objects from the previous or the next day in the end user s time zone.WarningIn this situation, if you have implemented per-user time zone selection, the same URL may show a different set of objects, depending on the end user s time zone. To avoid this, you should use a DateField as the date_field attribute.A boolean specifying whether to include  future  objects on this page, where  future  means objects in which the field specified in date_field is greater than the current date/time. By default, this is False.Returns the name of the field that contains the date data that this view will operate on. Returns date_field by default.Determine whether to include  future  objects on this page, where  future  means objects in which the field specified in date_field is greater than the current date/time. Returns allow_future by default."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-date-based/#basedatelistview", "para": "A base class that provides common behavior for all date-based views. There won t normally be a reason to instantiate BaseDateListView; instantiate one of the subclasses instead.While this view (and its subclasses) are executing, self.object_list will contain the list of objects that the view is operating upon, and self.date_list will contain the list of dates for which data is available.MixinsMethods and AttributesA boolean specifying whether to display the page if no objects are available. If this is True and no objects are available, the view will display an empty page instead of raising a 404.This is identical to django.views.generic.list.MultipleObjectMixin.allow_empty, except for the default value, which is False.Optional A string defining the aggregation period for date_list. It must be one of 'year' (default), 'month', or 'day'.Returns a 3-tuple containing (date_list, object_list, extra_context).date_list is the list of dates for which data is available. object_list is the list of objects. extra_context is a dictionary of context data that will be added to any context data provided by the MultipleObjectMixin.Returns a queryset, filtered using the query arguments defined by lookup. Enforces any restrictions on the queryset, such as allow_empty and allow_future.Returns the aggregation period for date_list. Returns date_list_period by default.Returns the list of dates of type date_type for which queryset contains entries. For example, get_date_list(qs, 'year') will return the list of years for which qs has entries. If date_type isn t provided, the result of get_date_list_period() is used. date_type and ordering are simply passed to QuerySet.dates()."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-multiple-object/#multipleobjectmixin", "para": "A mixin that can be used to display a list of objects.If paginate_by is specified, Django will paginate the results returned by this. You can specify the page number in the URL in one of two ways:Use the page parameter in the URLconf. For example, this is what your URLconf might look like:Pass the page number via the page query-string parameter. For example, a URL would look like this:These values and lists are 1-based, not 0-based, so the first page would be represented as page 1.For more on pagination, read the pagination documentation.As a special case, you are also permitted to use last as a value for page:This allows you to access the final page of results without first having to determine how many pages there are.Note that page must be either a valid page number or the value last; any other value for page will result in a 404 error.ExtendsMethods and AttributesA boolean specifying whether to display the page if no objects are available. If this is False and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is True.The model that this view will display data for. Specifying model = Foo is effectively the same as specifying queryset = Foo.objects.all(), where objects stands for Foo s default manager.A QuerySet that represents the objects. If provided, the value of queryset supersedes the value provided for model.Warningqueryset is a class attribute with a mutable value so care must be taken when using it directly. Before using it, either call its all() method or retrieve it with get_queryset() which takes care of the cloning behind the scenes.A string or list of strings specifying the ordering to apply to the queryset. Valid values are the same as those for order_by().An integer specifying how many objects should be displayed per page. If this is given, the view will paginate objects with paginate_by objects per page. The view will expect either a page query string parameter (via request.GET) or a page variable specified in the URLconf.An integer specifying the number of  overflow  objects the last page can contain. This extends the paginate_by limit on the last page by up to paginate_orphans, in order to keep the last page from having a very small number of objects.A string specifying the name to use for the page parameter. The view will expect this parameter to be available either as a query string parameter (via request.GET) or as a kwarg variable specified in the URLconf. Defaults to page.The paginator class to be used for pagination. By default, django.core.paginator.Paginator is used. If the custom paginator class doesn t have the same constructor interface as django.core.paginator.Paginator, you will also need to provide an implementation for get_paginator().Designates the name of the variable to use in the context.Get the list of items for this view. This must be an iterable and may be a queryset (in which queryset-specific behavior will be enabled).Returns a string (or iterable of strings) that defines the ordering that will be applied to the queryset.Returns ordering by default.Returns a 4-tuple containing (paginator, page, object_list, is_paginated).Constructed by paginating queryset into pages of size page_size. If the request contains a page argument, either as a captured URL argument or as a GET argument, object_list will correspond to the objects from that page.Returns the number of items to paginate by, or None for no pagination. By default this simply returns the value of paginate_by.Returns an instance of the paginator to use for this view. By default, instantiates an instance of paginator_class.An integer specifying the number of  overflow  objects the last page can contain. By default this simply returns the value of paginate_orphans.Return a boolean specifying whether to display the page if no objects are available. If this method returns False and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is True.Return the context variable name that will be used to contain the list of data that this view is manipulating. If object_list is a queryset of Django objects and context_object_name is not set, the context name will be the model_name of the model that the queryset is composed from, with postfix '_list' appended. For example, the model Article would have a context object named article_list.Returns context data for displaying the list of objects.Context"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-multiple-object/#multipleobjecttemplateresponsemixin", "para": "A mixin class that performs template-based response rendering for views that operate upon a list of object instances. Requires that the view it is mixed with provides self.object_list, the list of object instances that the view is operating on. self.object_list may be, but is not required to be, a QuerySet.ExtendsMethods and AttributesThe suffix to append to the auto-generated candidate template name. Default suffix is _list.Returns a list of candidate template names. Returns the following list:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#reverse", "para": "If you need to use something similar to the url template tag in your code, Django provides the following function:viewname can be a URL pattern name or the callable view object. For example, given the following url:you can use any of the following to reverse the URL:If the URL accepts arguments, you may pass them in args. For example:You can also pass kwargs instead of args. For example:args and kwargs cannot be passed to reverse() at the same time.If no match can be made, reverse() raises a NoReverseMatch exception.The reverse() function can reverse a large variety of regular expression patterns for URLs, but not every possible one. The main restriction at the moment is that the pattern cannot contain alternative choices using the vertical bar (\"|\") character. You can quite happily use such patterns for matching against incoming URLs and sending them off to views, but you cannot reverse such patterns.The current_app argument allows you to provide a hint to the resolver indicating the application to which the currently executing view belongs. This current_app argument is used as a hint to resolve application namespaces into URLs on specific application instances, according to the namespaced URL resolution strategy.The urlconf argument is the URLconf module containing the URL patterns to use for reversing. By default, the root URLconf for the current thread is used.NoteThe string returned by reverse() is already urlquoted. For example:Applying further encoding (such as urllib.parse.quote()) to the output of reverse() may produce undesirable results."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#reverse-lazy", "para": "A lazily evaluated version of reverse().It is useful for when you need to use a URL reversal before your project s URLConf is loaded. Some common cases where this function is necessary are:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#resolve", "para": "The resolve() function can be used for resolving URL paths to the corresponding view functions. It has the following signature:path is the URL path you want to resolve. As with reverse(), you don t need to worry about the urlconf parameter. The function returns a ResolverMatch object that allows you to access various metadata about the resolved URL.If the URL does not resolve, the function raises a Resolver404 exception (a subclass of Http404) .The view function that would be used to serve the URLThe arguments that would be passed to the view function, as parsed from the URL.The keyword arguments that would be passed to the view function, as parsed from the URL.The name of the URL pattern that matches the URL.The route of the matching URL pattern.For example, if path('users/<id>/', ...) is the matching pattern, route will contain 'users/<id>/'.The application namespace for the URL pattern that matches the URL.The list of individual namespace components in the full application namespace for the URL pattern that matches the URL. For example, if the app_name is 'foo:bar', then app_names will be ['foo', 'bar'].The instance namespace for the URL pattern that matches the URL.The list of individual namespace components in the full instance namespace for the URL pattern that matches the URL. i.e., if the namespace is foo:bar, then namespaces will be ['foo', 'bar'].The name of the view that matches the URL, including the namespace if there is one.A ResolverMatch object can then be interrogated to provide information about the URL pattern that matches a URL:A ResolverMatch object can also be assigned to a triple:One possible use of resolve() would be to test whether a view would raise a Http404 error before redirecting to it:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#get-script-prefix", "para": "Normally, you should always use reverse() to define URLs within your application. However, if your application constructs part of the URL hierarchy itself, you may occasionally need to generate URLs. In that case, you need to be able to find the base URL of the Django project within its Web server (normally, reverse() takes care of this for you). In that case, you can call get_script_prefix(), which will return the script prefix portion of the URL for your Django project. If your Django project is at the root of its web server, this is always \"/\"."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-date-based/#archiveindexview", "para": "A top-level index page showing the  latest  objects, by date. Objects with a date in the future are not included unless you set allow_future to True.Ancestors (MRO)ContextIn addition to the context provided by django.views.generic.list.MultipleObjectMixin (via django.views.generic.dates.BaseDateListView), the template s context will be:NotesExample myapp/urls.py:Example myapp/article_archive.html:This will output all articles."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-date-based/#yeararchiveview", "para": "A yearly archive page showing all available months in a given year. Objects with a date in the future are not displayed unless you set allow_future to True.Ancestors (MRO)A boolean specifying whether to retrieve the full list of objects for this year and pass those to the template. If True, the list of objects will be made available to the context. If False, the None queryset will be used as the object list. By default, this is False.Determine if an object list will be returned as part of the context. Returns make_object_list by default.ContextIn addition to the context provided by django.views.generic.list.MultipleObjectMixin (via django.views.generic.dates.BaseDateListView), the template s context will be:NotesExample myapp/views.py:Example myapp/urls.py:Example myapp/article_archive_year.html:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-date-based/#montharchiveview", "para": "A monthly archive page showing all objects in a given month. Objects with a date in the future are not displayed unless you set allow_future to True.Ancestors (MRO)ContextIn addition to the context provided by MultipleObjectMixin (via BaseDateListView), the template s context will be:NotesExample myapp/views.py:Example myapp/urls.py:Example myapp/article_archive_month.html:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-date-based/#weekarchiveview", "para": "A weekly archive page showing all objects in a given week. Objects with a date in the future are not displayed unless you set allow_future to True.Ancestors (MRO)ContextIn addition to the context provided by MultipleObjectMixin (via BaseDateListView), the template s context will be:NotesExample myapp/views.py:Example myapp/urls.py:Example myapp/article_archive_week.html:In this example, you are outputting the week number. Keep in mind that week numbers computed by the date template filter with the 'W' format character are not always the same as those computed by strftime() and strptime() with the '%W' format string. For year 2015, for example, week numbers output by date are higher by one compared to those output by strftime(). There isn t an equivalent for the '%U' strftime() format string in date. Therefore, you should avoid using date to generate URLs for WeekArchiveView."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-date-based/#dayarchiveview", "para": "A day archive page showing all objects in a given day. Days in the future throw a 404 error, regardless of whether any objects exist for future days, unless you set allow_future to True.Ancestors (MRO)ContextIn addition to the context provided by MultipleObjectMixin (via BaseDateListView), the template s context will be:NotesExample myapp/views.py:Example myapp/urls.py:Example myapp/article_archive_day.html:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-date-based/#todayarchiveview", "para": "A day archive page showing all objects for today. This is exactly the same as django.views.generic.dates.DayArchiveView, except today s date is used instead of the year/month/day arguments.Ancestors (MRO)NotesExample myapp/views.py:Example myapp/urls.py:Where is the example template for TodayArchiveView?This view uses by default the same template as the DayArchiveView, which is in the previous example. If you need a different template, set the template_name attribute to be the name of the new template."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-date-based/#datedetailview", "para": "A page representing an individual object. If the object has a date value in the future, the view will throw a 404 error by default, unless you set allow_future to True.Ancestors (MRO)ContextNotesExample myapp/urls.py:Example myapp/article_detail.html:NoteAll of the generic views listed above have matching Base views that only differ in that they do not include the MultipleObjectTemplateResponseMixin (for the archive views) or SingleObjectTemplateResponseMixin (for the DateDetailView):"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#area", "para": "Availability: MySQL, Oracle, PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns the area of the field as an Area measure.MySQL and SpatiaLite without LWGEOM don t support area calculations on geographic SRSes."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#asgeojson", "para": "Availability: MySQL (  5.7.5), PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns a GeoJSON representation of the geometry. Note that the result is not a complete GeoJSON structure but only the geometry key content of a GeoJSON structure. See also GeoJSON Serializer.Example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#asgml", "para": "Availability: Oracle, PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns a Geographic Markup Language (GML) representation of the geometry.Example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#askml", "para": "Availability: PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns a Keyhole Markup Language (KML) representation of the geometry.Example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#assvg", "para": "Availability: PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns a Scalable Vector Graphics (SVG) representation of the geometry."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#azimuth", "para": "Availability: PostGIS, SpatiaLite (LWGEOM)Returns the azimuth in radians of the segment defined by the given point geometries, or None if the two points are coincident. The azimuth is angle referenced from north and is positive clockwise: north = 0; east =  /2; south =  ; west = 3 /2."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#boundingcircle", "para": "Availability: PostGIS, OracleAccepts a single geographic field or expression and returns the smallest circle polygon that can fully contain the geometry.The num_seg parameter is used only on PostGIS."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#centroid", "para": "Availability: MySQL, PostGIS, Oracle, SpatiaLiteAccepts a single geographic field or expression and returns the centroid value of the geometry."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#difference", "para": "Availability: MySQL, PostGIS, Oracle, SpatiaLiteAccepts two geographic fields or expressions and returns the geometric difference, that is the part of geometry A that does not intersect with geometry B."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#distance", "para": "Availability: MySQL, PostGIS, Oracle, SpatiaLiteAccepts two geographic fields or expressions and returns the distance between them, as a Distance object. On MySQL, a raw float value is returned when the coordinates are geodetic.On backends that support distance calculation on geodetic coordinates, the proper backend function is automatically chosen depending on the SRID value of the geometries (e.g. ST_DistanceSphere on PostGIS).When distances are calculated with geodetic (angular) coordinates, as is the case with the default WGS84 (4326) SRID, you can set the spheroid keyword argument to decide if the calculation should be based on a simple sphere (less accurate, less resource-intensive) or on a spheroid (more accurate, more resource-intensive).In the following example, the distance from the city of Hobart to every other PointField in the AustraliaCity queryset is calculated:NoteBecause the distance attribute is a Distance object, you can easily express the value in the units of your choice. For example, city.distance.mi is the distance value in miles and city.distance.km is the distance value in kilometers. See Measurement Objects for usage details and the list of Supported units."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#envelope", "para": "Availability: MySQL, Oracle, PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns the geometry representing the bounding box of the geometry.Oracle support was added."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#forcepolygoncw", "para": "Availability: PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns a modified version of the polygon/multipolygon in which all exterior rings are oriented clockwise and all interior rings are oriented counterclockwise. Non-polygonal geometries are returned unchanged."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#forcerhr", "para": "Deprecated since version 2.1: Use ForcePolygonCW instead.Availability: PostGISAccepts a single geographic field or expression and returns a modified version of the polygon/multipolygon in which all of the vertices follow the right-hand rule."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#geohash", "para": "Availability: MySQL (  5.7.5), PostGIS, SpatiaLite (LWGEOM)Accepts a single geographic field or expression and returns a GeoHash representation of the geometry.The precision keyword argument controls the number of characters in the result."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#intersection", "para": "Availability: MySQL, PostGIS, Oracle, SpatiaLiteAccepts two geographic fields or expressions and returns the geometric intersection between them."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#isvalid", "para": "Availability: MySQL (  5.7.5), PostGIS, Oracle, SpatiaLite (LWGEOM)Accepts a geographic field or expression and tests if the value is well formed. Returns True if its value is a valid geometry and False otherwise."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#length", "para": "Availability: MySQL, Oracle, PostGIS, SpatiaLiteAccepts a single geographic linestring or multilinestring field or expression and returns its length as a Distance measure.On PostGIS and SpatiaLite, when the coordinates are geodetic (angular), you can specify if the calculation should be based on a simple sphere (less accurate, less resource-intensive) or on a spheroid (more accurate, more resource-intensive) with the spheroid keyword argument.MySQL doesn t support length calculations on geographic SRSes."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#linelocatepoint", "para": "Availability: PostGIS, SpatiaLiteReturns a float between 0 and 1 representing the location of the closest point on linestring to the given point, as a fraction of the 2D line length."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#makevalid", "para": "Availability: PostGIS, SpatiaLite (LWGEOM)Accepts a geographic field or expression and attempts to convert the value into a valid geometry without losing any of the input vertices. Geometries that are already valid are returned without changes. Simple polygons might become a multipolygon and the result might be of lower dimension than the input."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#memsize", "para": "Availability: PostGISAccepts a single geographic field or expression and returns the memory size (number of bytes) that the geometry field takes."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#numgeometries", "para": "Availability: MySQL, PostGIS, Oracle, SpatiaLiteAccepts a single geographic field or expression and returns the number of geometries if the geometry field is a collection (e.g., a GEOMETRYCOLLECTION or MULTI* field). Returns 1 for single geometries.On MySQL, returns None for single geometries."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#numpoints", "para": "Availability: MySQL, PostGIS, Oracle, SpatiaLiteAccepts a single geographic field or expression and returns the number of points in a geometry.On MySQL, returns None for any non-LINESTRING geometry."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#perimeter", "para": "Availability: PostGIS, Oracle, SpatiaLiteAccepts a single geographic field or expression and returns the perimeter of the geometry field as a Distance object."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#pointonsurface", "para": "Availability: PostGIS, Oracle, SpatiaLiteAccepts a single geographic field or expression and returns a Point geometry guaranteed to lie on the surface of the field; otherwise returns None."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#reverse", "para": "Availability: PostGIS, Oracle, SpatiaLiteAccepts a single geographic field or expression and returns a geometry with reversed coordinates."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#scale", "para": "Availability: PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns a geometry with scaled coordinates by multiplying them with the x, y, and optionally z parameters."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#snaptogrid", "para": "Availability: PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns a geometry with all points snapped to the given grid.  How the geometry is snapped to the grid depends on how many numeric (either float, integer, or long) arguments are given."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#symdifference", "para": "Availability: MySQL, PostGIS, Oracle, SpatiaLiteAccepts two geographic fields or expressions and returns the geometric symmetric difference (union without the intersection) between the given parameters."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#transform", "para": "Availability: PostGIS, Oracle, SpatiaLiteAccepts a geographic field or expression and a SRID integer code, and returns the transformed geometry to the spatial reference system specified by the srid parameter.NoteWhat spatial reference system an integer SRID corresponds to may depend on the spatial database used.  In other words, the SRID numbers used for Oracle are not necessarily the same as those used by PostGIS."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#translate", "para": "Availability: PostGIS, SpatiaLiteAccepts a single geographic field or expression and returns a geometry with its coordinates offset by the x, y, and optionally z numeric parameters."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/functions/#union", "para": "Availability: MySQL, PostGIS, Oracle, SpatiaLiteAccepts two geographic fields or expressions and returns the union of both geometries."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/#background", "para": "GEOS stands for Geometry Engine - Open Source, and is a C++ library, ported from the  Java Topology Suite.  GEOS implements the OpenGIS Simple Features for SQL spatial predicate functions and spatial operators. GEOS, now an OSGeo project, was initially developed and maintained by Refractions Research of Victoria, Canada.GeoDjango implements a high-level Python wrapper for the GEOS library, its features include:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/#tutorial", "para": "This section contains a brief introduction and tutorial to using GEOSGeometry objects.GEOSGeometry objects may be created in a few ways.  The first is to simply instantiate the object on some spatial input   the following are examples of creating the same geometry from WKT, HEX, WKB, and GeoJSON:Another option is to use the constructor for the specific geometry type that you wish to create.  For example, a Point object may be created by passing in the X and Y coordinates into its constructor:All these constructors take the keyword argument srid. For example:Finally, there is the fromfile() factory method which returns a GEOSGeometry object from a file:My logs are filled with GEOS-related errorsYou find many TypeError or AttributeError exceptions filling your Web server s log files. This generally means that you are creating GEOS objects at the top level of some of your Python modules. Then, due to a race condition in the garbage collector, your module is garbage collected before the GEOS object. To prevent this, create GEOSGeometry objects inside the local scope of your functions/methods.GEOSGeometry objects are  Pythonic , in other words components may be accessed, modified, and iterated over using standard Python conventions. For example, you can iterate over the coordinates in a Point:With any geometry object, the GEOSGeometry.coords property may be used to get the geometry coordinates as a Python tuple:You can get/set geometry components using standard Python indexing techniques.  However, what is returned depends on the geometry type of the object.  For example, indexing on a LineString returns a coordinate tuple:Whereas indexing on a Polygon will return the ring (a LinearRing object) corresponding to the index:In addition, coordinates/components of the geometry may added or modified, just like a Python list:Geometries support set-like operators:Equality operator doesn t check spatial equalityThe GEOSGeometry equality operator uses equals_exact(), not equals(), i.e. it requires the compared geometries to have the same coordinates in the same positions with the same SRIDs:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/#geometry-objects", "para": "This is the base class for all GEOS geometry objects.  It initializes on the given geo_input argument, and then assumes the proper geometry subclass (e.g., GEOSGeometry('POINT(1 1)') will create a Point object).The srid parameter, if given, is set as the SRID of the created geometry if geo_input doesn t have an SRID. If different SRIDs are provided through the geo_input and srid parameters, ValueError is raised:The following input formats, along with their corresponding Python types, are accepted:For the GeoJSON format, the SRID is set based on the crs member. If crs isn t provided, the SRID defaults to 4326.Constructs a GEOSGeometry from the given GML string.Returns the coordinates of the geometry as a tuple.Returns the dimension of the geometry:Returns whether or not the set of points in the geometry is empty.Returns a string corresponding to the type of geometry.  For example:Returns the GEOS geometry type identification number.  The following table shows the value for each geometry type:Returns the number of coordinates in the geometry.Returns the number of geometries in this geometry.  In other words, will return 1 on anything but geometry collections.Returns a boolean indicating whether the geometry is three-dimensional.Returns a boolean indicating whether the geometry is a LinearRing.Returns a boolean indicating whether the geometry is  simple . A geometry is simple if and only if it does not intersect itself (except at boundary points).  For example, a LineString object is not simple if it intersects itself. Thus, LinearRing and Polygon objects are always simple because they do cannot intersect themselves, by definition.Returns a boolean indicating whether the geometry is valid.Returns a string describing the reason why a geometry is invalid.Property that may be used to retrieve or set the SRID associated with the geometry.  For example:The properties in this section export the GEOSGeometry object into a different.  This output may be in the form of a string, buffer, or even another object.Returns the  extended  Well-Known Text of the geometry.  This representation is specific to PostGIS and is a superset of the OGC WKT standard. [1] Essentially the SRID is prepended to the WKT representation, for example SRID=4326;POINT(5 23).NoteThe output from this property does not include the 3dm, 3dz, and 4d information that PostGIS supports in its EWKT representations.Returns the WKB of this Geometry in hexadecimal form.  Please note that the SRID value is not included in this representation because it is not a part of the OGC specification (use the GEOSGeometry.hexewkb property instead).Returns the EWKB of this Geometry in hexadecimal form.  This is an extension of the WKB specification that includes the SRID value that are a part of this geometry.Returns the GeoJSON representation of the geometry. Note that the result is not a complete GeoJSON structure but only the geometry key content of a GeoJSON structure. See also GeoJSON Serializer.Alias for GEOSGeometry.json.Returns a KML (Keyhole Markup Language) representation of the geometry.  This should only be used for geometries with an SRID of 4326 (WGS84), but this restriction is not enforced.Returns an OGRGeometry object corresponding to the GEOS geometry.Returns the WKB (Well-Known Binary) representation of this Geometry as a Python buffer.  SRID value is not included, use the GEOSGeometry.ewkb property instead.Return the EWKB representation of this Geometry as a Python buffer. This is an extension of the WKB specification that includes any SRID value that are a part of this geometry.Returns the Well-Known Text of the geometry (an OGC standard).All of the following spatial predicate methods take another GEOSGeometry instance (other) as a parameter, and return a boolean.Returns True if other.within(this) returns True.Returns True if this geometry covers the specified geometry.The covers predicate has the following equivalent definitions:If either geometry is empty, returns False.This predicate is similar to GEOSGeometry.contains(), but is more inclusive (i.e. returns True for more cases). In particular, unlike contains() it does not distinguish between points in the boundary and in the interior of geometries. For most situations, covers() should be preferred to contains(). As an added benefit, covers() is more amenable to optimization and hence should outperform contains().Returns True if the DE-9IM intersection matrix for the two Geometries is T*T****** (for a point and a curve,a point and an area or a line and an area) 0******** (for two curves).Returns True if the DE-9IM intersection matrix for the two geometries is FF*FF****.Returns True if the DE-9IM intersection matrix for the two geometries is T*F**FFF*.Returns true if the two geometries are exactly equal, up to a specified tolerance.  The tolerance value should be a floating point number representing the error tolerance in the comparison, e.g., poly1.equals_exact(poly2, 0.001) will compare equality to within one thousandth of a unit.Returns True if GEOSGeometry.disjoint() is False.Returns true if the DE-9IM intersection matrix for the two geometries is T*T***T** (for two points or two surfaces) 1*T***T** (for two curves).Returns True if the elements in the DE-9IM intersection matrix for this geometry and the other matches the given pattern   a string of nine characters from the alphabet: {T, F, *, 0}.Returns True if the DE-9IM intersection matrix for the two geometries is FT*******, F**T***** or F***T****.Returns True if the DE-9IM intersection matrix for the two geometries is T*F**F***.Returns a GEOSGeometry that represents all points whose distance from this geometry is less than or equal to the given width. The optional quadsegs keyword sets the number of segments used to approximate a quarter circle (defaults is 8).Same as buffer(), but allows customizing the style of the buffer.Returns a GEOSGeometry representing the points making up this geometry that do not make up other.Given a distance (float), returns the point (or closest point) within the geometry (LineString or MultiLineString) at that distance. The normalized version takes the distance as a float between 0 (origin) and 1 (endpoint).Reverse of GEOSGeometry.project().Returns a GEOSGeometry representing the points shared by this geometry and other.Returns the distance (float) from the origin of the geometry (LineString or MultiLineString) to the point projected on the geometry (that is to a point of the line the closest to the given point). The normalized version returns the distance as a float between 0 (origin) and 1 (endpoint).Reverse of GEOSGeometry.interpolate().Returns the DE-9IM intersection matrix (a string) representing the topological relationship between this geometry and the other.Returns a new GEOSGeometry, simplified to the specified tolerance using the Douglas-Peucker algorithm. A higher tolerance value implies fewer points in the output. If no tolerance is provided, it defaults to 0.By default, this function does not preserve topology. For example, Polygon objects can be split, be collapsed into lines, or disappear. Polygon holes can be created or disappear, and lines may cross. By specifying preserve_topology=True, the result will have the same dimension and number of components as the input; this is significantly slower, however.Returns a GEOSGeometry combining the points in this geometry not in other, and the points in other not in this geometry.Returns a GEOSGeometry representing all the points in this geometry and the other.Returns the boundary as a newly allocated Geometry object.Returns a Point object representing the geometric center of the geometry.  The point is not guaranteed to be on the interior of the geometry.Returns the smallest Polygon that contains all the points in the geometry.Returns a Polygon that represents the bounding envelope of this geometry. Note that it can also return a Point if the input geometry is a point.Computes and returns a Point guaranteed to be on the interior of this geometry.Computes the union of all the elements of this geometry.The result obeys the following contract:This property returns the area of the Geometry.This property returns the extent of this geometry as a 4-tuple, consisting of (xmin, ymin, xmax, ymax).This method returns a GEOSGeometry that is a clone of the original.Returns the distance between the closest points on this geometry and the given geom (another GEOSGeometry object).NoteGEOS distance calculations are  linear   in other words, GEOS does not perform a spherical calculation even if the SRID specifies a geographic coordinate system.Returns the length of this geometry (e.g., 0 for a Point, the length of a LineString, or the circumference of a Polygon).Returns a GEOS PreparedGeometry for the contents of this geometry. PreparedGeometry objects are optimized for the contains, intersects, covers, crosses, disjoint, overlaps, touches and within operations. Refer to the Prepared Geometries documentation for more information.Returns a SpatialReference object corresponding to the SRID of the geometry or None.Transforms the geometry according to the given coordinate transformation parameter (ct), which may be an integer SRID, spatial reference WKT string, a PROJ.4 string, a SpatialReference object, or a CoordTransform object. By default, the geometry is transformed in-place and nothing is returned. However if the clone keyword is set, then the geometry is not modified and a transformed clone of the geometry is returned instead.NoteRaises GEOSException if GDAL is not available or if the geometry s SRID is None or less than 0. It doesn t impose any constraints on the geometry s SRID if called with a CoordTransform object.Converts this geometry to canonical form:Point objects are instantiated using arguments that represent the component coordinates of the point or with a single sequence coordinates. For example, the following are equivalent:Empty Point objects may be instantiated by passing no arguments or an empty sequence. The following are equivalent:LineString objects are instantiated using arguments that are either a sequence of coordinates or Point objects. For example, the following are equivalent:In addition, LineString objects may also be created by passing in a single sequence of coordinate or Point objects:Empty LineString objects may be instantiated by passing no arguments or an empty sequence. The following are equivalent:Returns whether or not this LineString is closed.LinearRing objects are constructed in the exact same way as LineString objects, however the coordinates must be closed, in other words, the first coordinates must be the same as the last coordinates. For example:Notice that (0, 0) is the first and last coordinate   if they were not equal, an error would be raised.Polygon objects may be instantiated by passing in parameters that represent the rings of the polygon.  The parameters must either be LinearRing instances, or a sequence that may be used to construct a LinearRing:Returns a polygon object from the given bounding-box, a 4-tuple comprising (xmin, ymin, xmax, ymax).Returns the number of interior rings in this geometry.Comparing PolygonsNote that it is possible to compare Polygon objects directly with < or >, but as the comparison is made through Polygon s LineString, it does not mean much (but is consistent and quick). You can always force the comparison with the area property:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/#geometry-collections", "para": "MultiPoint objects may be instantiated by passing in Point objects as arguments, or a single sequence of Point objects:MultiLineString objects may be instantiated by passing in LineString objects as arguments, or a single sequence of LineString objects:Returns a LineString representing the line merge of all the components in this MultiLineString.Returns True if and only if all elements are closed. Requires GEOS 3.5.MultiPolygon objects may be instantiated by passing Polygon objects as arguments, or a single sequence of Polygon objects:GeometryCollection objects may be instantiated by passing in other GEOSGeometry as arguments, or a single sequence of GEOSGeometry objects:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/#prepared-geometries", "para": "In order to obtain a prepared geometry, just access the GEOSGeometry.prepared property.  Once you have a PreparedGeometry instance its spatial predicate methods, listed below, may be used with other GEOSGeometry objects.  An operation with a prepared geometry can be orders of magnitude faster   the more complex the geometry that is prepared, the larger the speedup in the operation.  For more information, please consult the GEOS wiki page on prepared geometries.For example:All methods on PreparedGeometry take an other argument, which must be a GEOSGeometry instance."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/#geometry-factories", "para": "Example:a GEOSGeometry corresponding to the spatial data in the stringfromstr(string, srid) is equivalent to GEOSGeometry(string, srid).Example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/#i-o-objects", "para": "The reader I/O classes simply return a GEOSGeometry instance from the WKB and/or WKT input given to their read(geom) method.Example:Example:All writer objects have a write(geom) method that returns either the WKB or WKT of the given geometry.  In addition, WKBWriter objects also have properties that may be used to change the byte order, and or include the SRID value (in other words, EWKB).WKBWriter provides the most control over its output.  By default it returns OGC-compliant WKB when its write method is called.  However, it has properties that allow for the creation of EWKB, a superset of the WKB standard that includes additional information. See the WKBWriter.outdim documentation for more details about the dim argument.Returns the WKB of the given geometry as a Python buffer object. Example:Returns WKB of the geometry in hexadecimal.  Example:This property may be set to change the byte-order of the geometry representation.Example:This property may be set to change the output dimension of the geometry representation.  In other words, if you have a 3D geometry then set to 3 so that the Z value is included in the WKB.Example:Set this property with a boolean to indicate whether the SRID of the geometry should be included with the WKB representation.  Example:This class allows outputting the WKT representation of a geometry. See the WKBWriter.outdim, trim, and precision attributes for details about the constructor arguments.Returns the WKT of the given geometry. Example:See WKBWriter.outdim.This property is used to enable or disable trimming of unnecessary decimals.This property controls the rounding precision of coordinates; if set to None rounding is disabled.Footnotes"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/#settings", "para": "A string specifying the location of the GEOS C library.  Typically, this setting is only used if the GEOS C library is in a non-standard location (e.g., /home/bob/lib/libgeos_c.so).NoteThe setting must be the full path to the C shared library; in other words you want to use libgeos_c.so, not libgeos.so."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/#exceptions", "para": "The base GEOS exception, indicates a GEOS-related error."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/aggregates/#general-purpose-aggregation-functions", "para": "Returns a list of values, including nulls, concatenated into an array.An optional boolean argument that determines if array values will be distinct. Defaults to False.An optional string of a field name (with an optional \"-\" prefix which indicates descending order) or an expression (or a tuple or list of strings and/or expressions) that specifies the ordering of the elements in the result list.Examples:Returns an int of the bitwise AND of all non-null input values, or None if all values are null.Returns an int of the bitwise OR of all non-null input values, or None if all values are null.Returns True, if all input values are true, None if all values are null or if there are no values, otherwise False .Returns True if at least one input value is true, None if all values are null or if there are no values, otherwise False.Returns the input values as a JSON array. Requires PostgreSQL   9.5.Returns the input values concatenated into a string, separated by the delimiter string.Required argument. Needs to be a string.An optional boolean argument that determines if concatenated values will be distinct. Defaults to False.An optional string of a field name (with an optional \"-\" prefix which indicates descending order) or an expression (or a tuple or list of strings and/or expressions) that specifies the ordering of the elements in the result string.Examples are the same as for ArrayAgg.ordering."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/aggregates/#aggregate-functions-for-statistics", "para": "The arguments y and x for all these functions can be the name of a field or an expression returning a numeric data. Both are required.Returns the correlation coefficient as a float, or None if there aren t any matching rows.Returns the population covariance as a float, or None if there aren t any matching rows.Has one optional argument:By default CovarPop returns the general population covariance. However, if sample=True, the return value will be the sample population covariance.Returns the average of the independent variable (sum(x)/N) as a float, or None if there aren t any matching rows.Returns the average of the dependent variable (sum(y)/N) as a float, or None if there aren t any matching rows.Returns an int of the number of input rows in which both expressions are not null.Returns the y-intercept of the least-squares-fit linear equation determined by the (x, y) pairs as a float, or None if there aren t any matching rows.Returns the square of the correlation coefficient as a float, or None if there aren t any matching rows.Returns the slope of the least-squares-fit linear equation determined by the (x, y) pairs as a float, or None if there aren t any matching rows.Returns sum(x^2) - sum(x)^2/N ( sum of squares  of the independent variable) as a float, or None if there aren t any matching rows.Returns sum(x*y) - sum(x) * sum(y)/N ( sum of products  of independent times dependent variable) as a float, or None if there aren t any matching rows.Returns sum(y^2) - sum(y)^2/N ( sum of squares  of the dependent variable)  as a float, or None if there aren t any matching rows."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/aggregates/#usage-examples", "para": "We will use this example table:Here s some examples of some of the general-purpose aggregation functions:The next example shows the usage of statistical aggregate functions. The underlying math will be not described (you can read about this, for example, at wikipedia):"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/fields/#indexing-these-fields", "para": "Index and Field.db_index both create a B-tree index, which isn t particularly helpful when querying complex data types. Indexes such as GinIndex and GistIndex are better suited, though the index choice is dependent on the queries that you re using. Generally, GiST may be a good choice for the range fields and HStoreField, and GIN may be helpful for ArrayField and JSONField."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/fields/#arrayfield", "para": "A field for storing lists of data. Most field types can be used, you simply pass another field instance as the base_field. You may also specify a size. ArrayField can be nested to store multi-dimensional arrays.If you give the field a default, ensure it s a callable such as list (for an empty default) or a callable that returns a list (such as a function). Incorrectly using default=[] creates a mutable default that is shared between all instances of ArrayField.This is a required argument.Specifies the underlying data type and behavior for the array. It should be an instance of a subclass of Field. For example, it could be an IntegerField or a CharField. Most field types are permitted, with the exception of those handling relational data (ForeignKey, OneToOneField and ManyToManyField).It is possible to nest array fields - you can specify an instance of ArrayField as the base_field. For example:Transformation of values between the database and the model, validation of data and configuration, and serialization are all delegated to the underlying base field.This is an optional argument.If passed, the array will have a maximum size as specified. This will be passed to the database, although PostgreSQL at present does not enforce the restriction.NoteWhen nesting ArrayField, whether you use the size parameter or not, PostgreSQL requires that the arrays are rectangular:If irregular shapes are required, then the underlying field should be made nullable and the values padded with None.There are a number of custom lookups and transforms for ArrayField. We will use the following example model:The contains lookup is overridden on ArrayField. The returned objects will be those where the values passed are a subset of the data. It uses the SQL operator @>. For example:This is the inverse of the contains lookup - the objects returned will be those where the data is a subset of the values passed. It uses the SQL operator <@. For example:Returns objects where the data shares any results with the values passed. Uses the SQL operator &&. For example:Returns the length of the array. The lookups available afterwards are those available for IntegerField. For example:Index transforms index into the array. Any non-negative integer can be used. There are no errors if it exceeds the size of the array. The lookups available after the transform are those from the base_field. For example:NotePostgreSQL uses 1-based indexing for array fields when writing raw SQL. However these indexes and those used in slices use 0-based indexing to be consistent with Python.Slice transforms take a slice of the array. Any two non-negative integers can be used, separated by a single underscore. The lookups available after the transform do not change. For example:NotePostgreSQL uses 1-based indexing for array fields when writing raw SQL. However these slices and those used in indexes use 0-based indexing to be consistent with Python.Multidimensional arrays with indexes and slicesPostgreSQL has some rather esoteric behavior when using indexes and slices on multidimensional arrays. It will always work to use indexes to reach down to the final underlying data, but most other slices behave strangely at the database level and cannot be supported in a logical, consistent fashion by Django."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/fields/#citext-fields", "para": "A mixin to create case-insensitive text fields backed by the citext type. Read about the performance considerations prior to using it.To use citext, use the CITextExtension operation to setup the citext extension in PostgreSQL before the first CreateModel migration operation.If you re using an ArrayField of CIText fields, you must add 'django.contrib.postgres' in your INSTALLED_APPS, otherwise field values will appear as strings like '{thoughts,django}'.Several fields that use the mixin are provided:These fields subclass CharField, EmailField, and TextField, respectively.max_length won t be enforced in the database since citext behaves similar to PostgreSQL s text type."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/fields/#hstorefield", "para": "A field for storing key-value pairs. The Python data type used is a dict. Keys must be strings, and values may be either strings or nulls (None in Python).To use this field, you ll need to:You ll see an error like can't adapt type 'dict' if you skip the first step, or type \"hstore\" does not exist if you skip the second.NoteOn occasions it may be useful to require or restrict the keys which are valid for a given field. This can be done using the KeysValidator.In addition to the ability to query by key, there are a number of custom lookups available for HStoreField.We will use the following example model:To query based on a given key, you simply use that key as the lookup name:You can chain other lookups after key lookups:If the key you wish to query by clashes with the name of another lookup, you need to use the hstorefield.contains lookup instead.WarningSince any string could be a key in a hstore value, any lookup other than those listed below will be interpreted as a key lookup. No errors are raised. Be extra careful for typing mistakes, and always check your queries work as you intend.The contains lookup is overridden on HStoreField. The returned objects are those where the given dict of key-value pairs are all contained in the field. It uses the SQL operator @>. For example:This is the inverse of the contains lookup - the objects returned will be those where the key-value pairs on the object are a subset of those in the value passed. It uses the SQL operator <@. For example:Returns objects where the given key is in the data. Uses the SQL operator ?. For example:Returns objects where any of the given keys are in the data. Uses the SQL operator ?|. For example:Returns objects where all of the given keys are in the data. Uses the SQL operator ?&. For example:Returns objects where the array of keys is the given value. Note that the order is not guaranteed to be reliable, so this transform is mainly useful for using in conjunction with lookups on ArrayField. Uses the SQL function akeys(). For example:Returns objects where the array of values is the given value. Note that the order is not guaranteed to be reliable, so this transform is mainly useful for using in conjunction with lookups on ArrayField. Uses the SQL function avalues(). For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/fields/#jsonfield", "para": "A field for storing JSON encoded data. In Python the data is represented in its Python native format: dictionaries, lists, strings, numbers, booleans and None.An optional JSON-encoding class to serialize data types not supported by the standard JSON serializer (datetime, uuid, etc.). For example, you can use the DjangoJSONEncoder class or any other json.JSONEncoder subclass.When the value is retrieved from the database, it will be in the format chosen by the custom encoder (most often a string), so you ll need to take extra steps to convert the value back to the initial data type (Model.from_db() and Field.from_db_value() are two possible hooks for that purpose). Your deserialization may need to account for the fact that you can t be certain of the input type. For example, you run the risk of returning a datetime that was actually a string that just happened to be in the same format chosen for datetimes.If you give the field a default, ensure it s a callable such as dict (for an empty default) or a callable that returns a dict (such as a function). Incorrectly using default={} creates a mutable default that is shared between all instances of JSONField.NotePostgreSQL has two native JSON based data types: json and jsonb. The main difference between them is how they are stored and how they can be queried. PostgreSQL s json field is stored as the original string representation of the JSON and must be decoded on the fly when queried based on keys. The jsonb field is stored based on the actual structure of the JSON which allows indexing. The trade-off is a small additional cost on writing to the jsonb field. JSONField uses jsonb.We will use the following example model:To query based on a given dictionary key, simply use that key as the lookup name:Multiple keys can be chained together to form a path lookup:If the key is an integer, it will be interpreted as an index lookup in an array:If the key you wish to query by clashes with the name of another lookup, use the jsonfield.contains lookup instead.If only one key or index is used, the SQL operator -> is used. If multiple operators are used then the #> operator is used.To query for null in JSON data, use None as a value:To query for missing keys, use the isnull lookup:In older versions, using None as a  lookup value matches objects that don t have the key rather than objects that have the key with a None value.WarningSince any string could be a key in a JSON object, any lookup other than those listed below will be interpreted as a key lookup. No errors are raised. Be extra careful for typing mistakes, and always check your queries work as you intend.JSONField shares lookups relating to containment and keys with HStoreField."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/fields/#range-fields", "para": "There are five range field types, corresponding to the built-in range types in PostgreSQL. These fields are used to store a range of values; for example the start and end timestamps of an event, or the range of ages an activity is suitable for.All of the range fields translate to psycopg2 Range objects in Python, but also accept tuples as input if no bounds information is necessary. The default is lower bound included, upper bound excluded; that is, [).Stores a range of integers. Based on an IntegerField. Represented by an int4range in the database and a NumericRange in Python.Regardless of the bounds specified when saving the data, PostgreSQL always returns a range in a canonical form that includes the lower bound and excludes the upper bound; that is [).Stores a range of large integers. Based on a BigIntegerField. Represented by an int8range in the database and a NumericRange in Python.Regardless of the bounds specified when saving the data, PostgreSQL always returns a range in a canonical form that includes the lower bound and excludes the upper bound; that is [).Stores a range of floating point values. Based on a DecimalField. Represented by a numrange in the database and a NumericRange in Python.Stores a range of floating point values. Based on a FloatField. Represented by a numrange in the database and a NumericRange in Python.Deprecated since version 2.2: Use DecimalRangeField instead.Stores a range of timestamps. Based on a DateTimeField. Represented by a tstzrange in the database and a DateTimeTZRange in Python.Stores a range of dates. Based on a DateField. Represented by a daterange in the database and a DateRange in Python.Regardless of the bounds specified when saving the data, PostgreSQL always returns a range in a canonical form that includes the lower bound and excludes the upper bound; that is [).There are a number of custom lookups and transforms for range fields. They are available on all the above fields, but we will use the following example model:We will also use the following example objects:and NumericRange:As with other PostgreSQL fields, there are three standard containment operators: contains, contained_by and overlap, using the SQL operators @>, <@, and && respectively.The contained_by lookup is also available on the non-range field types: IntegerField, BigIntegerField, FloatField, DateField, and DateTimeField. For example:Range fields support the standard lookups: lt, gt, lte and gte. These are not particularly helpful - they compare the lower bounds first and then the upper bounds only if necessary. This is also the strategy used to order by a range field. It is better to use the specific range comparison operators.The returned ranges are strictly less than the passed range. In other words, all the points in the returned range are less than all those in the passed range.The returned ranges are strictly greater than the passed range. In other words, the all the points in the returned range are greater than all those in the passed range.The returned ranges do not contain any points less than the passed range, that is the lower bound of the returned range is at least the lower bound of the passed range.The returned ranges do not contain any points greater than the passed range, that is the upper bound of the returned range is at most the upper bound of the passed range.The returned ranges share a bound with the passed range.There are three transforms available for use in queries. You can extract the lower or upper bound, or query based on emptiness.Returned objects have the given lower bound. Can be chained to valid lookups for the base field.Returned objects have the given upper bound. Can be chained to valid lookups for the base field.Returned objects are empty ranges. Can be chained to valid lookups for a BooleanField.PostgreSQL allows the definition of custom range types. Django s model and form field implementations use base classes below, and psycopg2 provides a register_range() to allow use of custom range types.Base class for model range fields.The model field class to use.The psycopg2 range type to use.The form field class to use. Should be a subclass of django.contrib.postgres.forms.BaseRangeField.Base class for form range fields.The form field to use.The psycopg2 range type to use."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/base/#view", "para": "The master class-based base view. All other class-based views inherit from this base class. It isn t strictly a generic view and thus can also be imported from django.views.Method FlowchartExample views.py:Example urls.py:AttributesThe list of HTTP method names that this view will accept.Default:MethodsReturns a callable view that takes a request and returns a response:The returned view has view_class and view_initkwargs attributes.When the view is called during the request/response cycle, the setup() method assigns the HttpRequest to the view s request attribute, and any positional and/or keyword arguments captured from the URL pattern to the args and kwargs attributes, respectively. Then dispatch() is called.Initializes view instance attributes: self.request, self.args, and self.kwargs prior to dispatch().Overriding this method allows mixins to setup instance attributes for reuse in child classes. When overriding this method, you must call super().The view part of the view   the method that accepts a request argument plus arguments, and returns a HTTP response.The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a GET will be delegated to get(), a POST to post(), and so on.By default, a HEAD request will be delegated to get(). If you need to handle HEAD requests in a different way than GET, you can override the head() method. See Supporting other HTTP methods for an example.If the view was called with a HTTP method it doesn t support, this method is called instead.The default implementation returns HttpResponseNotAllowed with a list of allowed methods in plain text.Handles responding to requests for the OPTIONS HTTP verb. Returns a response with the Allow header containing a list of the view s allowed HTTP method names."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/base/#templateview", "para": "Renders a given template, with the context containing parameters captured in the URL.Ancestors (MRO)This view inherits methods and attributes from the following views:Method FlowchartExample views.py:Example urls.py:Context"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/base/#redirectview", "para": "Redirects to a given URL.The given URL may contain dictionary-style string formatting, which will be interpolated against the parameters captured in the URL. Because keyword interpolation is always done (even if no arguments are passed in), any \"%\" characters in the URL must be written as \"%%\" so that Python will convert them to a single percent sign on output.If the given URL is None, Django will return an HttpResponseGone (410).Ancestors (MRO)This view inherits methods and attributes from the following view:Method FlowchartExample views.py:Example urls.py:AttributesThe URL to redirect to, as a string. Or None to raise a 410 (Gone) HTTP error.The name of the URL pattern to redirect to. Reversing will be done using the same args and kwargs as are passed in for this view.Whether the redirect should be permanent. The only difference here is the HTTP status code returned. If True, then the redirect will use status code 301. If False, then the redirect will use status code 302. By default, permanent is False.Whether to pass along the GET query string to the new location. If True, then the query string is appended to the URL. If False, then the query string is discarded. By default, query_string is False.MethodsConstructs the target URL for redirection.The default implementation uses url as a starting string and performs expansion of % named parameters in that string using the named groups captured in the URL.If url is not set, get_redirect_url() tries to reverse the pattern_name using what was captured in the URL (both named and unnamed groups are used).If requested by query_string, it will also append the query string to the generated URL. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/forms/#fields", "para": "A simple field which maps to an array. It is represented by an HTML <input>.This is a required argument.It specifies the underlying form field for the array. This is not used to render any HTML, but it is used to process the submitted data and validate it. For example:This is an optional argument which defaults to a comma: ,. This value is used to split the submitted data. It allows you to chain SimpleArrayField for multidimensional data:NoteThe field does not support escaping of the delimiter, so be careful in cases where the delimiter is a valid character in the underlying field. The delimiter does not need to be only one character.This is an optional argument which validates that the array does not exceed the stated length.This is an optional argument which validates that the array reaches at least the stated length.User friendly formsSimpleArrayField is not particularly user friendly in most cases, however it is a useful way to format data from a client-side widget for submission to the server.This field handles arrays by reproducing the underlying field a fixed number of times.This is a required argument. It specifies the form field to be repeated.This is the fixed number of times the underlying field will be used.By default, this is set to False. When False, each value from the repeated fields is stored. When set to True, any trailing values which are blank will be stripped from the result. If the underlying field has required=True, but remove_trailing_nulls is True, then null values are only allowed at the end, and will be stripped.Some examples:A field which accepts JSON encoded data for an HStoreField. It casts all values (except nulls) to strings. It is represented by an HTML <textarea>.User friendly formsHStoreField is not particularly user friendly in most cases, however it is a useful way to format data from a client-side widget for submission to the server.NoteOn occasions it may be useful to require or restrict the keys which are valid for a given field. This can be done using the KeysValidator.A field which accepts JSON encoded data for a JSONField. It is represented by an HTML <textarea>.User friendly formsJSONField is not particularly user friendly in most cases, however it is a useful way to format data from a client-side widget for submission to the server.This group of fields all share similar functionality for accepting range data. They are based on MultiValueField. They treat one omitted value as an unbounded range. They also validate that the lower bound is not greater than the upper bound. All of these fields use RangeWidget.Based on IntegerField and translates its input into NumericRange. Default for IntegerRangeField and BigIntegerRangeField.Based on DecimalField and translates its input into NumericRange. Default for DecimalRangeField.Based on FloatField and translates its input into NumericRange. Default for FloatRangeField.Deprecated since version 2.2: Use DecimalRangeField instead.Based on DateTimeField and translates its input into DateTimeTZRange. Default for DateTimeRangeField.Based on DateField and translates its input into DateRange. Default for DateRangeField."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/forms/#widgets", "para": "Widget used by all of the range fields. Based on MultiWidget.RangeWidget has one required argument:A RangeWidget comprises a 2-tuple of base_widget.Takes a single  compressed  value of a field, for example a DateRangeField, and returns a tuple representing and lower and upper bound."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/forms-api/#field-arguments", "para": "In addition to the regular form field arguments, GeoDjango form fields take the following optional arguments.This is the SRID code that the field value should be transformed to. For example, if the map widget SRID is different from the SRID more generally used by your application or database, the field will automatically convert input values into that SRID.You generally shouldn t have to set or change that attribute which should be setup depending on the field class. It matches the OpenGIS standard geometry name."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/forms-api/#form-field-classes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/forms-api/#module-django.contrib.gis.forms.widgets", "para": "GeoDjango form widgets allow you to display and edit geographic data on a visual map. Note that none of the currently available widgets supports 3D geometries, hence geometry fields will fallback using a simple Textarea widget for such data.GeoDjango widgets are template-based, so their attributes are mostly different from other Django widget attributes.The OpenGIS geometry type, generally set by the form field.Height and width of the widget map (default is 400x600).SRID code used by the map (default is 4326).Boolean value specifying if a textarea input showing the serialized representation of the current geometry is visible, mainly for debugging purposes (default is False).Indicates if the widget supports edition of 3D data (default is False).The template used to render the map widget.You can pass widget attributes in the same manner that for any other Django widget. For example:BaseGeometryWidgetThis is an abstract base widget containing the logic needed by subclasses. You cannot directly use this widget for a geometry field. Note that the rendering of GeoDjango widgets is based on a template, identified by the template_name class attribute.OpenLayersWidgetThis is the default widget used by all GeoDjango form fields. template_name is gis/openlayers.html.OpenLayersWidget and OSMWidget use the openlayers.js file hosted on the cdnjs.cloudflare.com content-delivery network. You can subclass these widgets in order to specify your own version of the OpenLayers.js file tailored to your needs in the js property of the inner Media class (see Assets as a static definition).OSMWidgetThis widget uses an OpenStreetMap base layer to display geographic objects on. Attributes are:gis/openlayers-osm.htmlThe default center latitude and longitude are 47 and 5, respectively, which is a location in eastern France.The default map zoom is 12.The OpenLayersWidget note about JavaScript file hosting above also applies here. See also this FAQ answer about https access to map tiles."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geoquerysets/#spatial-lookups", "para": "The spatial lookups in this section are available for GeometryField and RasterField.For an introduction, see the spatial lookups introduction.  For an overview of what lookups are compatible with a particular spatial backend, refer to the spatial lookup compatibility table.All examples in the reference below are given for geometry fields and inputs, but the lookups can be used the same way with rasters on both sides. Whenever a lookup doesn t support raster input, the input is automatically converted to a geometry where necessary using the ST_Polygon function. See also the introduction to raster lookups.The database operators used by the lookups can be divided into three categories:The examples below show the SQL equivalent for the lookups in the different types of raster support. The same pattern applies to all spatial lookups.Spatial lookups with rasters are only supported for PostGIS backends (denominated as PGRaster in this section).Availability: PostGIS, MySQL, SpatiaLite, PGRaster (Native)Tests if the geometry or raster field s bounding box completely contains the lookup geometry s bounding box.Example:Availability: PostGIS, MySQL, SpatiaLite, PGRaster (Native)Tests if the geometry field s bounding box overlaps the lookup geometry s bounding box.Example:Availability: PostGIS, MySQL, SpatiaLite, PGRaster (Native)Tests if the geometry field s bounding box is completely contained by the lookup geometry s bounding box.Example:Availability: PostGIS, Oracle, MySQL, SpatiaLite, PGRaster (Bilateral)Tests if the geometry field spatially contains the lookup geometry.Example:Availability: PostGIS, PGRaster (Bilateral)Returns true if the lookup geometry intersects the interior of the geometry field, but not the boundary (or exterior).Example:Availability: PostGIS, Oracle, PGRaster (Bilateral), SpatiaLiteTests if no point in the geometry field is outside the lookup geometry. [3]Example:SpatiaLite support was added.Availability: PostGIS, Oracle, PGRaster (Bilateral), SpatiaLiteTests if no point in the lookup geometry is outside the geometry field. [3]Example:SpatiaLite support was added.Availability: PostGIS, SpatiaLite, PGRaster (Conversion)Tests if the geometry field spatially crosses the lookup geometry.Example:Availability: PostGIS, Oracle, MySQL, SpatiaLite, PGRaster (Bilateral)Tests if the geometry field is spatially disjoint from the lookup geometry.Example:Availability: PostGIS, Oracle, MySQL, SpatiaLite, PGRaster (Conversion)Tests if the geometry field is spatially equal to the lookup geometry.Example:Availability: PostGIS, Oracle, MySQL, SpatiaLite, PGRaster (Bilateral)Tests if the geometry field is  equal  to the lookup geometry. On Oracle and SpatiaLite it tests spatial equality, while on MySQL and PostGIS it tests equality of bounding boxes.Example:Availability: PostGIS, Oracle, MySQL, SpatiaLite, PGRaster (Bilateral)Tests if the geometry field spatially intersects the lookup geometry.Example:Availability: MySQL (  5.7.5), PostGIS, Oracle, SpatiaLiteTests if the geometry is valid.Example:Availability: PostGIS, Oracle, MySQL, SpatiaLite, PGRaster (Bilateral)Tests if the geometry field spatially overlaps the lookup geometry.Availability: PostGIS, Oracle, SpatiaLite, PGRaster (Conversion)Tests if the geometry field is spatially related to the lookup geometry by the values given in the given pattern.  This lookup requires a tuple parameter, (geom, pattern); the form of pattern will depend on the spatial backend:On these spatial backends the intersection pattern is a string comprising nine characters, which  define intersections between  the interior, boundary, and exterior of the geometry field and the lookup geometry. The intersection pattern matrix may only use the following characters: 1, 2, T, F, or *.  This lookup type allows users to  fine tune  a specific geometric relationship consistent with the DE-9IM model. [1]Geometry example:PostGIS SQL equivalent:SpatiaLite SQL equivalent:Raster example:PostGIS SQL equivalent:Here the relation pattern is comprised of at least one of the nine relation strings: TOUCH, OVERLAPBDYDISJOINT, OVERLAPBDYINTERSECT, EQUAL, INSIDE, COVEREDBY, CONTAINS, COVERS, ON, and ANYINTERACT.   Multiple strings may be combined with the logical Boolean operator OR, for example, 'inside+touch'. [2]  The relation strings are case-insensitive.Example:Oracle SQL equivalent:Availability: PostGIS, Oracle, MySQL, SpatiaLiteTests if the geometry field spatially touches the lookup geometry.Example:Availability: PostGIS, Oracle, MySQL, SpatiaLite, PGRaster (Bilateral)Tests if the geometry field is spatially within the lookup geometry.Example:Availability: PostGIS, PGRaster (Conversion)Tests if the geometry field s bounding box is strictly to the left of the lookup geometry s bounding box.Example:PostGIS equivalent:Availability: PostGIS, PGRaster (Conversion)Tests if the geometry field s bounding box is strictly to the right of the lookup geometry s bounding box.Example:PostGIS equivalent:Availability: PostGIS, PGRaster (Bilateral)Tests if the geometry field s bounding box overlaps or is to the left of the lookup geometry s bounding box.Example:PostGIS equivalent:Availability: PostGIS, PGRaster (Bilateral)Tests if the geometry field s bounding box overlaps or is to the right of the lookup geometry s bounding box.Example:PostGIS equivalent:Availability: PostGIS, PGRaster (Conversion)Tests if the geometry field s bounding box overlaps or is above the lookup geometry s bounding box.Example:PostGIS equivalent:Availability: PostGIS, PGRaster (Conversion)Tests if the geometry field s bounding box overlaps or is below the lookup geometry s bounding box.Example:PostGIS equivalent:Availability: PostGIS, PGRaster (Conversion)Tests if the geometry field s bounding box is strictly above the lookup geometry s bounding box.Example:PostGIS equivalent:Availability: PostGIS, PGRaster (Conversion)Tests if the geometry field s bounding box is strictly below the lookup geometry s bounding box.Example:PostGIS equivalent:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geoquerysets/#distance-lookups", "para": "Availability: PostGIS, Oracle, MySQL, SpatiaLite, PGRaster (Native)For an overview on performing distance queries, please refer to the distance queries introduction.Distance lookups take the following form:The value passed into a distance lookup is a tuple; the first two values are mandatory, and are the geometry to calculate distances to, and a distance value (either a number in units of the field, a Distance object, or a query expression <ref/models/expressions>). To pass a band index to the lookup, use a 3-tuple where the second entry is the band index.On every distance lookup except dwithin, an optional element, 'spheroid', may be included to use the more accurate spheroid distance calculation functions on fields with a geodetic coordinate system.On PostgreSQL, the 'spheroid' option uses ST_DistanceSpheroid instead of ST_DistanceSphere. The simpler ST_Distance function is used with projected coordinate systems. Rasters are converted to geometries for spheroid based lookups.Returns models where the distance to the geometry field from the lookup geometry is greater than the given distance value.Example:Returns models where the distance to the geometry field from the lookup geometry is greater than or equal to the given distance value.Example:Returns models where the distance to the geometry field from the lookup geometry is less than the given distance value.Example:Returns models where the distance to the geometry field from the lookup geometry is less than or equal to the given distance value.Example:Returns models where the distance to the geometry field from the lookup geometry are within the given distance from one another. Note that you can only provide Distance objects if the targeted geometries are in a projected system. For geographic geometries, you should use units of the geometry field (e.g. degrees for WGS84) .Example:Django provides some GIS-specific aggregate functions. For details on how to use these aggregate functions, see the topic guide on aggregation.Example:Availability: PostGIS, SpatiaLiteReturns a GEOMETRYCOLLECTION or a MULTI geometry object from the geometry column. This is analogous to a simplified version of the Union aggregate, except it can be several orders of magnitude faster than performing a union because it simply rolls up geometries into a collection or multi object, not caring about dissolving boundaries.Availability: PostGIS, Oracle, SpatiaLiteReturns the extent of all geo_field in the QuerySet as a four-tuple, comprising the lower left coordinate and the upper right coordinate.Example:Availability: PostGISReturns the 3D extent of all geo_field in the QuerySet as a six-tuple, comprising the lower left coordinate and upper right coordinate (each with x, y, and z coordinates).Example:Availability: PostGIS, SpatiaLiteReturns a LineString constructed from the point field geometries in the QuerySet. Currently, ordering the queryset has no effect.Example:Availability: PostGIS, Oracle, SpatiaLiteThis method returns a GEOSGeometry object comprising the union of every geometry in the queryset. Please note that use of Union is processor intensive and may take a significant amount of time on large querysets.NoteIf the computation time for using this method is too expensive, consider using Collect instead.Example:Footnotes"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/indexes/#brinindex", "para": "Creates a BRIN index.Set the autosummarize parameter to True to enable automatic summarization to be performed by autovacuum.The pages_per_range argument takes a positive integer.The autosummarize parameter was added."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/indexes/#btreeindex", "para": "Creates a B-Tree index.Provide an integer value from 10 to 100 to the fillfactor parameter to tune how packed the index pages will be. PostgreSQL s default is 90."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/indexes/#ginindex", "para": "Creates a gin index.To use this index on data types not in the built-in operator classes, you need to activate the btree_gin extension on PostgreSQL. You can install it using the BtreeGinExtension migration operation.Set the fastupdate parameter to False to disable the GIN Fast Update Technique that s enabled by default in PostgreSQL.Provide an integer number of bytes to the gin_pending_list_limit parameter to tune the maximum size of the GIN pending list which is used when fastupdate is enabled. This parameter requires PostgreSQL   9.5."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/indexes/#gistindex", "para": "Creates a GiST index. These indexes are automatically created on spatial fields with spatial_index=True. They re also useful on other types, such as HStoreField or the range fields.To use this index on data types not in the built-in gist operator classes, you need to activate the btree_gist extension on PostgreSQL. You can install it using the BtreeGistExtension migration operation.Set the buffering parameter to True or False to manually enable or disable buffering build of the index.Provide an integer value from 10 to 100 to the fillfactor parameter to tune how packed the index pages will be. PostgreSQL s default is 90."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/indexes/#hashindex", "para": "Creates a hash index.Provide an integer value from 10 to 100 to the fillfactor parameter to tune how packed the index pages will be. PostgreSQL s default is 90.Use this index only on PostgreSQL 10 and laterHash indexes have been available in PostgreSQL for a long time, but they suffer from a number of data integrity issues in older versions."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/indexes/#spgistindex", "para": "Creates an SP-GiST index.Provide an integer value from 10 to 100 to the fillfactor parameter to tune how packed the index pages will be. PostgreSQL s default is 90."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/operations/#creating-extension-using-migrations", "para": "You can create a PostgreSQL extension in your database using a migration file. This example creates an hstore extension, but the same principles apply for other extensions.Set up the hstore extension in PostgreSQL before the first CreateModel or AddField operation that involves HStoreField by adding a migration with the HStoreExtension operation. For example:Creating the extension requires a database user with superuser privileges. If the Django database user doesn t have superuser privileges, you ll have to create the extension outside of Django migrations with a user that has the appropriate privileges. In that case, connect to your Django database and run the query CREATE EXTENSION IF NOT EXISTS hstore;."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/operations/#createextension", "para": "An Operation subclass which installs PostgreSQL extensions.This is a required argument. The name of the extension to be installed."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/operations/#btreeginextension", "para": "Install the btree_gin extension."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/operations/#btreegistextension", "para": "Install the btree_gist extension."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/operations/#citextextension", "para": "Installs the citext extension."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/operations/#cryptoextension", "para": "Installs the pgcrypto extension."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/operations/#hstoreextension", "para": "Installs the hstore extension and also sets up the connection to interpret hstore data for possible use in subsequent migrations."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/operations/#trigramextension", "para": "Installs the pg_trgm extension."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/operations/#unaccentextension", "para": "Installs the unaccent extension."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/uploads/#uploaded-files", "para": "During file uploads, the actual file data is stored in request.FILES. Each entry in this dictionary is an UploadedFile object (or a subclass)   a simple wrapper around an uploaded file. You ll usually use one of these methods to access the uploaded content:Read the entire uploaded data from the file. Be careful with this method: if the uploaded file is huge it can overwhelm your system if you try to read it into memory. You ll probably want to use chunks() instead; see below.Returns True if the uploaded file is big enough to require reading in multiple chunks. By default this will be any file larger than 2.5 megabytes, but that s configurable; see below.A generator returning chunks of the file. If multiple_chunks() is True, you should use this method in a loop instead of read().In practice, it s often easiest simply to use chunks() all the time. Looping over chunks() instead of using read() ensures that large files don t overwhelm your system s memory.Here are some useful attributes of UploadedFile:The name of the uploaded file (e.g. my_file.txt).The size, in bytes, of the uploaded file.The content-type header uploaded with the file (e.g. text/plain or application/pdf). Like any data supplied by the user, you shouldn t trust that the uploaded file is actually this type. You ll still need to validate that the file contains the content that the content-type header claims    trust but verify. A dictionary containing extra parameters passed to the content-type header. This is typically provided by services, such as Google App Engine, that intercept and handle file uploads on your behalf. As a result your handler may not receive the uploaded file content, but instead a URL or other pointer to the file. (see RFC 2388 section 5.3).For text/* content-types, the character set (i.e. utf8) supplied by the browser. Again,  trust but verify  is the best policy here.NoteLike regular Python files, you can read the file line-by-line simply by iterating over the uploaded file:Lines are split using universal newlines. The following are recognized as ending a line: the Unix end-of-line convention '\\n', the Windows convention '\\r\\n', and the old Macintosh convention '\\r'.Subclasses of UploadedFile include:A file uploaded to a temporary location (i.e. stream-to-disk). This class is used by the TemporaryFileUploadHandler. In addition to the methods from UploadedFile, it has one additional method:Returns the full path to the temporary uploaded file.A file uploaded into memory (i.e. stream-to-memory). This class is used by the MemoryFileUploadHandler."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/uploads/#module-django.core.files.uploadhandler", "para": "Together the MemoryFileUploadHandler and TemporaryFileUploadHandler provide Django s default file upload behavior of reading small files into memory and large ones onto disk. They are located in django.core.files.uploadhandler.File upload handler to stream uploads into memory (used for small files).Upload handler that streams data into a temporary file using TemporaryUploadedFile."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/files/uploads/#writing-custom-upload-handlers", "para": "All file upload handlers should be subclasses of django.core.files.uploadhandler.FileUploadHandler. You can define upload handlers wherever you wish.Custom file upload handlers must define the following methods:Receives a  chunk  of data from the file upload.raw_data is a bytestring containing the uploaded data.start is the position in the file where this raw_data chunk begins.The data you return will get fed into the subsequent upload handlers  receive_data_chunk methods. In this way, one handler can be a  filter  for other handlers.Return None from receive_data_chunk to short-circuit remaining upload handlers from getting this chunk. This is useful if you re storing the uploaded data yourself and don t want future handlers to store a copy of the data.If you raise a StopUpload or a SkipFile exception, the upload will abort or the file will be completely skipped.Called when a file has finished uploading.The handler should return an UploadedFile object that will be stored in request.FILES. Handlers may also return None to indicate that the UploadedFile object should come from subsequent upload handlers.Custom upload handlers may also define any of the following optional methods or attributes:Size, in bytes, of the  chunks  Django should store into memory and feed into the handler. That is, this attribute controls the size of chunks fed into FileUploadHandler.receive_data_chunk.For maximum performance the chunk sizes should be divisible by 4 and should not exceed 2 GB (231 bytes) in size. When there are multiple chunk sizes provided by multiple handlers, Django will use the smallest chunk size defined by any handler.The default is 64*210 bytes, or 64 KB.Callback signaling that a new file upload is starting. This is called before any data has been fed to any upload handlers.field_name is a string name of the file <input> field.file_name is the filename provided by the browser.content_type is the MIME type provided by the browser   E.g. 'image/jpeg'.content_length is the length of the image given by the browser. Sometimes this won t be provided and will be None.charset is the character set (i.e. utf8) given by the browser. Like content_length, this sometimes won t be provided.content_type_extra is extra information about the file from the content-type header. See UploadedFile.content_type_extra.This method may raise a StopFutureHandlers exception to prevent future handlers from handling this file.Callback signaling that the entire upload (all files) has completed.Allows the handler to completely override the parsing of the raw HTTP input.input_data is a file-like object that supports read()-ing.META is the same object as request.META.content_length is the length of the data in input_data. Don t read more than content_length bytes from input_data.boundary is the MIME boundary for this request.encoding is the encoding of the request.Return None if you want upload handling to continue, or a tuple of (POST, FILES) if you want to return the new data structures suitable for the request directly."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/constraints/#checkconstraint", "para": "Creates a check constraint in the database.A Q object that specifies the check you want the constraint to enforce.For example, CheckConstraint(check=Q(age__gte=18), name='age_gte_18') ensures the age field is never less than 18.The name of the constraint."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/constraints/#uniqueconstraint", "para": "Creates a unique constraint in the database.A list of field names that specifies the unique set of columns you want the constraint to enforce.For example, UniqueConstraint(fields=['room', 'date'], name='unique_booking') ensures each room can only be booked once for each date.The name of the constraint.A Q object that specifies the condition you want the constraint to enforce.For example, UniqueConstraint(fields=['user'], condition=Q(status='DRAFT') ensures that each user only has one draft.These conditions have the same database restrictions as Index.condition."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/checks/#api-reference", "para": "The warnings and errors raised by system checks must be instances of CheckMessage. An instance encapsulates a single reportable error or warning. It also provides context and hints applicable to the message, and a unique identifier that is used for filtering purposes.Constructor arguments are:There are subclasses to make creating messages with common levels easier. When using them you can omit the level argument because it is implied by the class name."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/checks/#builtin-tags", "para": "Django s system checks are organized using the following tags:Some checks may be registered with multiple tags."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/checks/#core-system-checks", "para": "Compatibility checks warn of potential problems that might occur after upgrading Django.The following checks verify that your CACHES setting is correctly configured:If you re using MySQL, the following checks will be performed:The security checks do not make your site secure. They do not audit code, do intrusion detection, or do anything particularly complex. Rather, they help perform an automated, low-hanging-fruit checklist. They help you remember the simple things that improve your site s security.Some of these checks may not be appropriate for your particular deployment configuration. For instance, if you do your HTTP to HTTPS redirection in a load balancer, it d be irritating to be constantly warned about not having enabled SECURE_SSL_REDIRECT. Use SILENCED_SYSTEM_CHECKS to silence unneeded checks.The following checks are run if you use the check --deploy option:The following checks verify that your TEMPLATES setting is correctly configured:The following checks are performed on your translation configuration:The following checks are performed on your URL configuration:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/checks/#contrib-app-checks", "para": "Admin checks are all performed as part of the admin tag.The following checks are performed on any ModelAdmin (or subclass) that is registered with the admin site:The following checks are performed on any ModelAdmin that is registered with the admin site:The following checks are performed on any InlineModelAdmin that is registered as an inline on a ModelAdmin.The following checks are performed on any GenericInlineModelAdmin that is registered as an inline on a ModelAdmin.The following checks are performed on the default AdminSite:The following checks are performed when a model contains a GenericForeignKey or GenericRelation:The following checks are performed on django.contrib.postgres model fields:The following checks are performed on any model using a CurrentSiteManager:The following checks verify that django.contrib.staticfiles is correctly configured:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geoip2/#example", "para": "Here is an example of its usage:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geoip2/#api-reference", "para": "The GeoIP object does not require any parameters to use the default settings. However, at the very least the GEOIP_PATH setting should be set with the path of the location of your GeoIP datasets. The following initialization keywords may be used to customize any of the defaults."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geoip2/#methods", "para": "This classmethod instantiates the GeoIP object from the given database path and given cache setting.All the following querying routines may take either a string IP address or a fully qualified domain name (FQDN). For example, both '205.186.163.125' and 'djangoproject.com' would be valid query parameters.Returns a dictionary of city information for the given query. Some of the values in the dictionary may be undefined (None).Returns a dictionary with the country code and country for the given query.Returns the country code corresponding to the query.Returns the country name corresponding to the query.Returns a coordinate tuple of (longitude, latitude).Returns a coordinate tuple of (longitude, latitude).Returns a coordinate tuple of (latitude, longitude),Returns a Point object corresponding to the query."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geoip2/#settings", "para": "A string specifying the directory where the GeoIP data files are located. This setting is required unless manually specified with path keyword when initializing the GeoIP2 object.The basename to use for the GeoIP country data file. Defaults to 'GeoLite2-Country.mmdb'.The basename to use for the GeoIP city data file. Defaults to 'GeoLite2-City.mmdb'."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geoip2/#exceptions", "para": "The exception raised when an error occurs in a call to the underlying geoip2 library.Footnotes"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-simple/#contextmixin", "para": "AttributesA dictionary to include in the context. This is a convenient way of specifying some simple context in as_view(). Example usage:MethodsReturns a dictionary representing the template context. The keyword arguments provided will make up the returned context. Example usage:The template context of all class-based generic views include a view variable that points to the View instance.Use alters_data where appropriateNote that having the view instance in the template context may expose potentially hazardous methods to template authors.  To prevent methods like this from being called in the template, set alters_data=True on those methods.  For more information, read the documentation on rendering a template context."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-simple/#templateresponsemixin", "para": "Provides a mechanism to construct a TemplateResponse, given suitable context. The template to use is configurable and can be further customized by subclasses.AttributesThe full name of a template to use as defined by a string. Not defining a template_name will raise a django.core.exceptions.ImproperlyConfigured exception.The NAME of a template engine to use for loading the template. template_engine is passed as the using keyword argument to response_class. Default is None, which tells Django to search for the template in all configured engines.The response class to be returned by render_to_response method. Default is TemplateResponse. The template and context of TemplateResponse instances can be altered later (e.g. in template response middleware).If you need custom template loading or custom context object instantiation, create a TemplateResponse subclass and assign it to response_class.The content type to use for the response. content_type is passed as a keyword argument to response_class. Default is None   meaning that Django uses DEFAULT_CONTENT_TYPE.MethodsReturns a self.response_class instance.If any keyword arguments are provided, they will be passed to the constructor of the response class.Calls get_template_names() to obtain the list of template names that will be searched looking for an existent template.Returns a list of template names to search for when rendering the template. The first template that is found will be used.If template_name is specified, the default implementation will return a list containing template_name (if it is specified)."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-single-object/#singleobjectmixin", "para": "Provides a mechanism for looking up an object associated with the current HTTP request.Methods and AttributesThe model that this view will display data for. Specifying model = Foo is effectively the same as specifying queryset = Foo.objects.all(), where objects stands for Foo s default manager.A QuerySet that represents the objects. If provided, the value of queryset supersedes the value provided for model.Warningqueryset is a class attribute with a mutable value so care must be taken when using it directly. Before using it, either call its all() method or retrieve it with get_queryset() which takes care of the cloning behind the scenes.The name of the field on the model that contains the slug. By default, slug_field is 'slug'.The name of the URLConf keyword argument that contains the slug. By default, slug_url_kwarg is 'slug'.The name of the URLConf keyword argument that contains the primary key. By default, pk_url_kwarg is 'pk'.Designates the name of the variable to use in the context.If True, causes get_object() to perform its lookup using both the primary key and the slug. Defaults to False.This attribute can help mitigate insecure direct object reference attacks. When applications allow access to individual objects by a sequential primary key, an attacker could brute-force guess all URLs; thereby obtaining a list of all objects in the application. If users with access to individual objects should be prevented from obtaining this list, setting query_pk_and_slug to True will help prevent the guessing of URLs as each URL will require two correct, non-sequential arguments. Simply using a unique slug may serve the same purpose, but this scheme allows you to have non-unique slugs.Returns the single object that this view will display. If queryset is provided, that queryset will be used as the source of objects; otherwise, get_queryset() will be used. get_object() looks for a pk_url_kwarg argument in the arguments to the view; if this argument is found, this method performs a primary-key based lookup using that value. If this argument is not found, it looks for a slug_url_kwarg argument, and performs a slug lookup using the slug_field.When query_pk_and_slug is True, get_object() will perform its lookup using both the primary key and the slug.Returns the queryset that will be used to retrieve the object that this view will display. By default, get_queryset() returns the value of the queryset attribute if it is set, otherwise it constructs a QuerySet by calling the all() method on the model attribute s default manager.Return the context variable name that will be used to contain the data that this view is manipulating. If context_object_name is not set, the context name will be constructed from the model_name of the model that the queryset is composed from. For example, the model Article would have context object named 'article'.Returns context data for displaying the object.The base implementation of this method requires that the self.object attribute be set by the view (even if None). Be sure to do this if you are using this mixin without one of the built-in views that does so.It returns a dictionary with these contents:Context variables override values from template context processorsAny variables from get_context_data() take precedence over context variables from context processors. For example, if your view sets the model attribute to User, the default context object name of user would override the user variable from the django.contrib.auth.context_processors.auth() context processor. Use get_context_object_name() to avoid a clash.Returns the name of a slug field to be used to look up by slug. By default this simply returns the value of slug_field."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-single-object/#singleobjecttemplateresponsemixin", "para": "A mixin class that performs template-based response rendering for views that operate upon a single object instance. Requires that the view it is mixed with provides self.object, the object instance that the view is operating on. self.object will usually be, but is not required to be, an instance of a Django model. It may be None if the view is in the process of constructing a new instance.ExtendsMethods and AttributesThe field on the current object instance that can be used to determine the name of a candidate template. If either template_name_field itself or the value of the template_name_field on the current object instance is None, the object will not be used for a candidate template name.The suffix to append to the auto-generated candidate template name. Default suffix is _detail.Returns a list of candidate template names. Returns the following list:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/admin/#geomodeladmin", "para": "The default center longitude.The default center latitude.The default zoom level to use.  Defaults to 4.Sequence of URLs to any extra JavaScript to include.Override the template used to generate the JavaScript slippy map. Default is 'gis/admin/openlayers.html'.Width of the map, in pixels.  Defaults to 600.Height of the map, in pixels.  Defaults to 400.Link to the URL of the OpenLayers JavaScript.  Defaults to 'https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.13.1/OpenLayers.js'.Defaults to True.  When set to False, disables editing of existing geometry fields in the admin.NoteThis is different from adding the geometry field to readonly_fields, which will only display the WKT of the geometry. Setting modifiable=False, actually displays the geometry in a map, but disables the ability to edit its vertices."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/admin/#osmgeoadmin", "para": "A subclass of GeoModelAdmin that uses a Spherical Mercator projection with OpenStreetMap street data tiles. See the OSMGeoAdmin introduction in the tutorial for a usage example."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-editing/#formmixin", "para": "A mixin class that provides facilities for creating and displaying forms.MixinsMethods and AttributesA dictionary containing initial data for the form.The form class to instantiate.The URL to redirect to when the form is successfully processed.The prefix for the generated form.Retrieve initial data for the form. By default, returns a copy of initial.Retrieve the form class to instantiate. By default form_class.Instantiate an instance of form_class using get_form_kwargs(). If form_class isn t provided get_form_class() will be used.Build the keyword arguments required to instantiate the form.The initial argument is set to get_initial(). If the request is a POST or PUT, the request data (request.POST and request.FILES) will also be provided.Determine the prefix for the generated form. Returns prefix by default.Determine the URL to redirect to when the form is successfully validated. Returns success_url by default.Redirects to get_success_url().Renders a response, providing the invalid form as context.Calls get_form() and adds the result to the context data with the name  form ."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-editing/#modelformmixin", "para": "A form mixin that works on ModelForms, rather than a standalone form.Since this is a subclass of SingleObjectMixin, instances of this mixin have access to the model and queryset attributes, describing the type of object that the ModelForm is manipulating.If you specify both the fields and form_class attributes, an ImproperlyConfigured exception will be raised.MixinsMethods and AttributesA model class. Can be explicitly provided, otherwise will be determined by examining self.object or queryset.A list of names of fields. This is interpreted the same way as the Meta.fields attribute of ModelForm.This is a required attribute if you are generating the form class automatically (e.g. using model). Omitting this attribute will result in an ImproperlyConfigured exception.The URL to redirect to when the form is successfully processed.success_url may contain dictionary string formatting, which will be interpolated against the object s field attributes. For example, you could use success_url=\"/polls/{slug}/\" to redirect to a URL composed out of the slug field on a model.Retrieve the form class to instantiate. If form_class is provided, that class will be used. Otherwise, a ModelForm will be instantiated using the model associated with the queryset, or with the model, depending on which attribute is provided.Add the current instance (self.object) to the standard get_form_kwargs().Determine the URL to redirect to when the form is successfully validated. Returns django.views.generic.edit.ModelFormMixin.success_url if it is provided; otherwise, attempts to use the get_absolute_url() of the object.Saves the form instance, sets the current object for the view, and redirects to get_success_url().Renders a response, providing the invalid form as context."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-editing/#processformview", "para": "A mixin that provides basic HTTP GET and POST workflow.NoteThis is named  ProcessFormView  and inherits directly from django.views.generic.base.View, but breaks if used independently, so it is more of a mixin.ExtendsMethods and AttributesRenders a response using a context created with get_context_data().Constructs a form, checks the form for validity, and handles it accordingly.The PUT action is also handled and just passes all parameters through to post()."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-editing/#deletionmixin", "para": "Enables handling of the DELETE http action.Methods and AttributesThe url to redirect to when the nominated object has been successfully deleted.success_url may contain dictionary string formatting, which will be interpolated against the object s field attributes. For example, you could use success_url=\"/parent/{parent_id}/\" to redirect to a URL composed out of the parent_id field on a model.Retrieves the target object and calls its delete() method, then redirects to the success URL.Returns the url to redirect to when the nominated object has been successfully deleted. Returns success_url by default."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/model-api/#spatial-field-types", "para": "Spatial fields consist of a series of geometry field types and one raster field type. Each of the geometry field types correspond to the OpenGIS Simple Features specification [1]. There is no such standard for raster data.The base class for geometry fields.Stores a Point.Stores a LineString.Stores a Polygon.Stores a MultiPoint.Stores a MultiLineString.Stores a MultiPolygon.Stores a GeometryCollection.Stores a GDALRaster.RasterField is currently only implemented for the PostGIS backend."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/model-api/#spatial-field-options", "para": "In addition to the regular Field options available for Django model fields, spatial fields have the following additional options. All are optional.Sets the SRID [2] (Spatial Reference System Identity) of the geometry field to the given value. Defaults to 4326 (also known as WGS84, units are in degrees of longitude and latitude).Choosing an appropriate SRID for your model is an important decision that the developer should consider carefully.  The SRID is an integer specifier that corresponds to the projection system that will be used to interpret the data in the spatial database. [3]  Projection systems give the context to the coordinates that specify a location.  Although the details of geodesy are beyond the scope of this documentation, the general problem is that the earth is spherical and representations of the earth (e.g., paper maps, Web maps) are not.Most people are familiar with using latitude and longitude to reference a location on the earth s surface.  However, latitude and longitude are angles, not distances. In other words, while the shortest path between two points on a flat surface is a straight line, the shortest path between two points on a curved surface (such as the earth) is an arc of a great circle. [4]  Thus, additional computation is required to obtain distances in planar units (e.g., kilometers and miles).  Using a geographic coordinate system may introduce complications for the developer later on. For example, SpatiaLite does not have the capability to perform distance calculations between geometries using geographic coordinate systems, e.g. constructing a query to  find all points within 5 miles of a county boundary stored as WGS84. [5]Portions of the earth s surface may projected onto a two-dimensional, or Cartesian, plane.  Projected coordinate systems are especially convenient for region-specific applications, e.g., if you know that your database will only cover geometries in North Kansas, then you may consider using projection system specific to that region.  Moreover, projected coordinate systems are defined in Cartesian units (such as meters or feet), easing distance calculations.NoteIf you wish to perform arbitrary distance queries using non-point geometries in WGS84 in PostGIS and you want decent performance, enable the GeometryField.geography keyword so that geography database type is used instead.Additional Resources:Defaults to True.  Creates a spatial index for the given geometry field.NoteThis is different from the db_index field option because spatial indexes are created in a different manner than regular database indexes.  Specifically, spatial indexes are typically created using a variant of the R-Tree, while regular database indexes typically use B-Trees."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/model-api/#geometry-field-options", "para": "There are additional options available for Geometry fields. All the following options are optional.This option may be used for customizing the coordinate dimension of the geometry field.  By default, it is set to 2, for representing two-dimensional geometries.  For spatial backends that support it, it may be set to 3 for three-dimensional support.NoteAt this time 3D support is limited to the PostGIS spatial backend.If set to True, this option will create a database column of type geography, rather than geometry.  Please refer to the geography type section below for more details.NoteGeography support is limited to PostGIS and will force the SRID to be 4326.The geography type provides native support for spatial features represented with geographic coordinates (e.g., WGS84 longitude/latitude). [6] Unlike the plane used by a geometry type, the geography type uses a spherical representation of its data.  Distance and measurement operations performed on a geography column automatically employ great circle arc calculations and return linear units.  In other words, when ST_Distance is called on two geographies, a value in meters is returned (as opposed to degrees if called on a geometry column in WGS84).Because geography calculations involve more mathematics, only a subset of the PostGIS spatial lookups are available for the geography type. Practically, this means that in addition to the distance lookups only the following additional spatial lookups are available for geography columns:If you need to use a spatial lookup or aggregate that doesn t support the geography type as input, you can use the Cast database function to convert the geography column to a geometry type in the query:For more information, the PostGIS documentation contains a helpful section on determining when to use geography data type over geometry data type.Footnotes"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#path", "para": "Returns an element for inclusion in urlpatterns. For example:The route argument should be a string or gettext_lazy() (see Translating URL patterns) that contains a URL pattern. The string may contain angle brackets (like <username> above) to capture part of the URL and send it as a keyword argument to the view. The angle brackets may include a converter specification (like the int part of <int:section>) which limits the characters matched and may also change the type of the variable passed to the view. For example, <int:section> matches a string of decimal digits and converts the value to an int. See How Django processes a request for more details.The view argument is a view function or the result of as_view() for class-based views. It can also be an django.urls.include().The kwargs argument allows you to pass additional arguments to the view function or method. See Passing extra options to view functions for an example.See Naming URL patterns for why the name argument is useful."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#re-path", "para": "Returns an element for inclusion in urlpatterns. For example:The route argument should be a string or gettext_lazy() (see Translating URL patterns) that contains a regular expression compatible with Python s re module. Strings typically use raw string syntax (r'') so that they can contain sequences like \\d without the need to escape the backslash with another backslash. When a match is made, captured groups from the regular expression are passed to the view   as named arguments if the groups are named, and as positional arguments otherwise. The values are passed as strings, without any type conversion.The view, kwargs and name arguments are the same as for path()."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#include", "para": "A function that takes a full Python import path to another URLconf module that should be  included  in this place. Optionally, the application namespace and instance namespace where the entries will be included into can also be specified.Usually, the application namespace should be specified by the included module. If an application namespace is set, the namespace argument can be used to set a different instance namespace.include() also accepts as an argument either an iterable that returns URL patterns or a 2-tuple containing such iterable plus the names of the application namespaces.See Including other URLconfs and URL namespaces and included URLconfs."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#register-converter", "para": "The function for registering a converter for use in path() routes.The converter argument is a converter class, and type_name is the converter name to use in path patterns. See Registering custom path converters for an example."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#static", "para": "Helper function to return a URL pattern for serving files in debug mode:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#url", "para": "This function is an alias to django.urls.re_path(). It s likely to be deprecated in a future release."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#handler400", "para": "A callable, or a string representing the full Python import path to the view that should be called if the HTTP client has sent a request that caused an error condition and a response with a status code of 400.By default, this is django.views.defaults.bad_request(). If you implement a custom view, be sure it accepts request and exception arguments and returns an HttpResponseBadRequest."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#handler403", "para": "A callable, or a string representing the full Python import path to the view that should be called if the user doesn t have the permissions required to access a resource.By default, this is django.views.defaults.permission_denied(). If you implement a custom view, be sure it accepts request and exception arguments and returns an HttpResponseForbidden."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#handler404", "para": "A callable, or a string representing the full Python import path to the view that should be called if none of the URL patterns match.By default, this is django.views.defaults.page_not_found(). If you implement a custom view, be sure it accepts request and exception arguments and returns an HttpResponseNotFound."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/urls/#handler500", "para": "A callable, or a string representing the full Python import path to the view that should be called in case of server errors. Server errors happen when you have runtime errors in view code.By default, this is django.views.defaults.server_error(). If you implement a custom view, be sure it returns an HttpResponseServerError."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/db-api/#module-django.contrib.gis.db.backends", "para": "GeoDjango currently provides the following spatial database backends:MySQL s spatial extensions only support bounding box operations (what MySQL calls minimum bounding rectangles, or MBR).  Specifically, MySQL does not conform to the OGC standard:In other words, while spatial lookups such as contains are available in GeoDjango when using MySQL, the results returned are really equivalent to what would be returned when using bbcontains on a different spatial backend.WarningTrue spatial indexes (R-trees) are only supported with MyISAM tables on MySQL. [5] In other words, when using MySQL spatial extensions you have to choose between fast spatial lookups and the integrity of your data   MyISAM tables do not support transactions or foreign key constraints.RasterField is currently only implemented for the PostGIS backend. Spatial lookups are available for raster fields, but spatial database functions and aggregates aren t implemented for raster fields."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/db-api/#creating-and-saving-models-with-geometry-fields", "para": "Here is an example of how to create a geometry object (assuming the Zipcode model):GEOSGeometry objects may also be used to save geometric models:Moreover, if the GEOSGeometry is in a different coordinate system (has a different SRID value) than that of the field, then it will be implicitly transformed into the SRID of the model s field, using the spatial database s transform procedure:Thus, geometry parameters may be passed in using the GEOSGeometry object, WKT (Well Known Text [1]), HEXEWKB (PostGIS specific   a WKB geometry in hexadecimal [2]), and GeoJSON [3]. Essentially, if the input is not a GEOSGeometry object, the geometry field will attempt to create a GEOSGeometry instance from the input.For more information creating GEOSGeometry objects, refer to the GEOS tutorial."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/db-api/#creating-and-saving-models-with-raster-fields", "para": "When creating raster models, the raster field will implicitly convert the input into a GDALRaster using lazy-evaluation. The raster field will therefore accept any input that is accepted by the GDALRaster constructor.Here is an example of how to create a raster object from a raster file volcano.tif (assuming the Elevation model):GDALRaster objects may also be used to save raster models:Note that this equivalent to:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/db-api/#spatial-lookups", "para": "GeoDjango s lookup types may be used with any manager method like filter(), exclude(), etc.  However, the lookup types unique to GeoDjango are only available on spatial fields.Filters on  normal  fields (e.g. CharField) may be chained with those on geographic fields. Geographic lookups accept geometry and raster input on both sides and input types can be mixed freely.The general structure of geographic lookups is described below. A complete reference can be found in the spatial lookup reference.Geographic queries with geometries take the following general form (assuming the Zipcode model used in the GeoDjango Model API):For example:In this case, poly is the geographic field, contains is the spatial lookup type, pnt is the parameter (which may be a GEOSGeometry object or a string of GeoJSON , WKT, or HEXEWKB), and rst is a GDALRaster object.The raster lookup syntax is similar to the syntax for geometries. The only difference is that a band index can be specified as additional input. If no band index is specified, the first band is used by default (index 0). In that case the syntax is identical to the syntax for geometry lookups.To specify the band index, an additional parameter can be specified on both sides of the lookup. On the left hand side, the double underscore syntax is used to pass a band index. On the right hand side, a tuple of the raster and band index can be specified.This results in the following general form for lookups involving rasters (assuming the Elevation model used in the GeoDjango Model API):For example:On the left hand side of the example, rast is the geographic raster field and contains is the spatial lookup type. On the right hand side, geom is a geometry input and rst is a GDALRaster object. The band index defaults to 0 in the first two queries and is set to 1 on the others.While all spatial lookups can be used with raster objects on both sides, not all underlying operators natively accept raster input. For cases where the operator expects geometry input, the raster is automatically converted to a geometry. It s important to keep this in mind when interpreting the lookup results.The type of raster support is listed for all lookups in the compatibility table. Lookups involving rasters are currently only available for the PostGIS backend."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/db-api/#distance-queries", "para": "Distance calculations with spatial data is tricky because, unfortunately, the Earth is not flat.  Some distance queries with fields in a geographic coordinate system may have to be expressed differently because of limitations in PostGIS.  Please see the Selecting an SRID section in the GeoDjango Model API documentation for more details.Availability: PostGIS, Oracle, SpatiaLite, PGRaster (Native)The following distance lookups are available:NoteFor measuring, rather than querying on distances, use the Distance function.Distance lookups take a tuple parameter comprising:If a Distance object is used, it may be expressed in any units (the SQL generated will use units converted to those of the field); otherwise, numeric parameters are assumed to be in the units of the field.NoteIn PostGIS, ST_Distance_Sphere does not limit the geometry types geographic distance queries are performed with. [4]  However, these queries may take a long time, as great-circle distances must be calculated on the fly for every row in the query.  This is because the spatial index on traditional geometry fields cannot be used.For much better performance on WGS84 distance queries, consider using geography columns in your database instead because they are able to use their spatial index in distance queries. You can tell GeoDjango to use a geography column by setting geography=True in your field definition.For example, let s say we have a SouthTexasCity model (from the GeoDjango distance tests ) on a projected coordinate system valid for cities in southern Texas:Then distance queries may be performed as follows:Raster queries work the same way by simply replacing the geometry field point with a raster field, or the pnt object with a raster object, or both. To specify the band index of a raster input on the right hand side, a 3-tuple can be passed to the lookup as follows:Where the band with index 2 (the third band) of the raster rst would be used for the lookup."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/db-api/#compatibility-tables", "para": "The following table provides a summary of what spatial lookups are available for each spatial database backend. The PostGIS Raster (PGRaster) lookups are divided into the three categories described in the raster lookup details: native support N, bilateral native support B, and geometry conversion support C.The following table provides a summary of what geography-specific database functions are available on each spatial backend.The following table provides a summary of what GIS-specific aggregate functions are available on each spatial backend. Please note that MySQL does not support any of these aggregates, and is thus excluded from the table.FootnotesSee Creating Spatial Indexes in the MySQL Reference Manual:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/feeds/#example", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/feeds/#api-reference", "para": "In addition to methods provided by the django.contrib.syndication.views.Feed base class, GeoDjango s Feed class provides the following overrides. Note that these overrides may be done in multiple ways:Takes the object returned by get_object() and returns the feed s geometry. Typically this is a GEOSGeometry instance, or can be a tuple to represent a point or a box. For example:Set this to return the geometry for each item in the feed. This can be a GEOSGeometry instance, or a tuple that represents a point coordinate or bounding box. For example:The following django.utils.feedgenerator.SyndicationFeed subclasses are available:NoteW3C Geo formatted feeds only support PointField geometries."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/layermapping/#example", "para": "You need a GDAL-supported data source, like a shapefile (here we re using a simple polygon shapefile, test_poly.shp, with three features):Now we define our corresponding Django model (make sure to use migrate):Use LayerMapping to extract all the features and place them in the database:Here, LayerMapping just transformed the three geometries from the shapefile in their original spatial reference system (WGS84) to the spatial reference system of the GeoDjango model (NAD83).  If no spatial reference system is defined for the layer, use the source_srs keyword with a SpatialReference object to specify one."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/layermapping/#layermapping-api", "para": "The following are the arguments and keywords that may be used during instantiation of LayerMapping objects.The save() method also accepts keywords.  These keywords are used for controlling output logging, error handling, and for importing specific feature ranges."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/layermapping/#troubleshooting", "para": "As noted in the warning at the top of this section, Django stores all SQL queries when DEBUG=True.  Set DEBUG=False in your settings, and this should stop excessive memory use when running LayerMapping scripts.If you encounter the following error when using LayerMapping and MySQL:Then the solution is to increase the value of the max_allowed_packet setting in your MySQL configuration.  For example, the default value may be something low like one megabyte   the setting may be modified in MySQL s configuration file (my.cnf) in the [mysqld] section:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/ogrinspect/#ogrinspect", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/ogrinspect/#mapping", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/validators/#keysvalidator", "para": "Validates that the given keys are contained in the value. If strict is True, then it also checks that there are no other keys present.The messages passed should be a dict containing the keys missing_keys and/or extra_keys.NoteNote that this checks only for the existence of a given key, not that the value of a key is non-empty."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/validators/#range-validators", "para": "Validates that the upper bound of the range is not greater than limit_value.Validates that the lower bound of the range is not less than the limit_value."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/signals/#module-django.db.models.signals", "para": "The django.db.models.signals module defines a set of signals sent by the model system.WarningMany of these signals are sent by various model methods like __init__() or save() that you can override in your own code.If you override these methods on your model, you must call the parent class  methods for this signals to be sent.Note also that Django stores signal handlers as weak references by default, so if your handler is a local function, it may be garbage collected.  To prevent this, pass weak=False when you call the signal s connect().NoteModel signals sender model can be lazily referenced when connecting a receiver by specifying its full application label. For example, an Answer model defined in the polls application could be referenced as 'polls.Answer'. This sort of reference can be quite handy when dealing with circular import dependencies and swappable models.Whenever you instantiate a Django model, this signal is sent at the beginning of the model s __init__() method.Arguments sent with this signal:For example, the tutorial has this line:The arguments sent to a pre_init handler would be:Like pre_init, but this one is sent when the __init__() method finishes.Arguments sent with this signal:This is sent at the beginning of a model s save() method.Arguments sent with this signal:Like pre_save, but sent at the end of the save() method.Arguments sent with this signal:Sent at the beginning of a model s delete() method and a queryset s delete() method.Arguments sent with this signal:Like pre_delete, but sent at the end of a model s delete() method and a queryset s delete() method.Arguments sent with this signal:The actual instance being deleted.Note that the object will no longer be in the database, so be very careful what you do with this instance.Sent when a ManyToManyField is changed on a model instance. Strictly speaking, this is not a model signal since it is sent by the ManyToManyField, but since it complements the pre_save/post_save and pre_delete/post_delete when it comes to tracking changes to models, it is included here.Arguments sent with this signal:A string indicating the type of update that is done on the relation. This can be one of the following:For the pre_add, post_add, pre_remove and post_remove actions, this is a set of primary key values that have been added to or removed from the relation.For the pre_clear and post_clear actions, this is None.For example, if a Pizza can have multiple Topping objects, modeled like this:If we connected a handler like this:and then did something like this:the arguments sent to a m2m_changed handler (toppings_changed in the example above) would be:And if we would then do something like this:the arguments sent to a m2m_changed handler would be:Sent whenever a model class has been  prepared    that is, once model has been defined and registered with Django s model system. Django uses this signal internally; it s not generally used in third-party applications.Since this signal is sent during the app registry population process, and AppConfig.ready() runs after the app registry is fully populated, receivers cannot be connected in that method. One possibility is to connect them AppConfig.__init__() instead, taking care not to import models or trigger calls to the app registry.Arguments that are sent with this signal:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/signals/#management-signals", "para": "Signals sent by django-admin.Sent by the migrate command before it starts to install an application. It s not emitted for applications that lack a models module.Arguments sent with this signal:Indicates how much information manage.py is printing on screen. See the --verbosity flag for details.Functions which listen for pre_migrate should adjust what they output to the screen based on the value of this argument.If interactive is True, it s safe to prompt the user to input things on the command line. If interactive is False, functions which listen for this signal should not try to prompt for anything.For example, the django.contrib.auth app only prompts to create a superuser when interactive is True.Sent at the end of the migrate (even if no migrations are run) and flush commands. It s not emitted for applications that lack a models module.Handlers of this signal must not perform database schema alterations as doing so may cause the flush command to fail if it runs during the migrate command.Arguments sent with this signal:Indicates how much information manage.py is printing on screen. See the --verbosity flag for details.Functions which listen for post_migrate should adjust what they output to the screen based on the value of this argument.If interactive is True, it s safe to prompt the user to input things on the command line. If interactive is False, functions which listen for this signal should not try to prompt for anything.For example, the django.contrib.auth app only prompts to create a superuser when interactive is True.For example, you could register a callback in an AppConfig like this:NoteIf you provide an AppConfig instance as the sender argument, please ensure that the signal is registered in ready(). AppConfigs are recreated for tests that run with a modified set of INSTALLED_APPS (such as when settings are overridden) and such signals should be connected for each new AppConfig instance."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/signals/#module-django.core.signals", "para": "Signals sent by the core framework when processing a request.Sent when Django begins processing an HTTP request.Arguments sent with this signal:Sent when Django finishes delivering an HTTP response to the client.Arguments sent with this signal:This signal is sent whenever Django encounters an exception while processing an incoming HTTP request.Arguments sent with this signal:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/signals/#module-django.test.signals", "para": "Signals only sent when running tests.This signal is sent when the value of a setting is changed through the django.test.TestCase.settings() context manager or the django.test.override_settings() decorator/context manager.It s actually sent twice: when the new value is applied ( setup ) and when the original value is restored ( teardown ). Use the enter argument to distinguish between the two.You can also import this signal from django.core.signals to avoid importing from django.test in non-test situations.Arguments sent with this signal:Sent when the test system renders a template. This signal is not emitted during normal operation of a Django server   it is only available during testing.Arguments sent with this signal:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/signals/#module-django.db.backends", "para": "Signals sent by the database wrapper when a database connection is initiated.Sent when the database wrapper makes the initial connection to the database.  This is particularly useful if you d like to send any post connection commands to the SQL backend.Arguments sent with this signal:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/models/meta/#field-access-api", "para": "Returns the field instance given a name of a field.field_name can be the name of a field on the model, a field on an abstract or inherited model, or a field defined on another model that points to the model. In the latter case, the field_name will be (in order of preference) the related_query_name set by the user, the related_name set by the user, or the name automatically generated by Django.Hidden fields cannot be retrieved by name.If a field with the given name is not found a FieldDoesNotExist exception will be raised.Returns a tuple of fields associated with a model. get_fields() accepts two parameters that can be used to control which fields are returned:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/formsets/#formset-factory", "para": "Returns a FormSet class for the given form class.See formsets for example usage."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/models/#modelform-factory", "para": "Returns a ModelForm class for the given model. You can optionally pass a form argument to use as a starting point for constructing the ModelForm.fields is an optional list of field names. If provided, only the named fields will be included in the returned fields.exclude is an optional list of field names. If provided, the named fields will be excluded from the returned fields, even if they are listed in the fields argument.formfield_callback is a callable that takes a model field and returns a form field.widgets is a dictionary of model field names mapped to a widget.localized_fields is a list of names of fields which should be localized.labels is a dictionary of model field names mapped to a label.help_texts is a dictionary of model field names mapped to a help text.error_messages is a dictionary of model field names mapped to a dictionary of error messages.field_classes is a dictionary of model field names mapped to a form field class.See ModelForm factory function for example usage.You must provide the list of fields explicitly, either via keyword arguments fields or exclude, or the corresponding attributes on the form s inner Meta class. See Selecting the fields to use for more information. Omitting any definition of the fields to use will result in an ImproperlyConfigured exception."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/models/#modelformset-factory", "para": "Returns a FormSet class for the given model class.Arguments model, form, fields, exclude, formfield_callback, widgets, localized_fields, labels, help_texts, error_messages, and field_classes are all passed through to modelform_factory().Arguments formset, extra, max_num, can_order, can_delete and validate_max are passed through to formset_factory(). See formsets for details.See Model formsets for example usage."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/models/#inlineformset-factory", "para": "Returns an InlineFormSet using modelformset_factory() with defaults of formset=BaseInlineFormSet, can_delete=True, and extra=3.If your model has more than one ForeignKey to the parent_model, you must specify a fk_name.See Inline formsets for example usage."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/renderers/#the-low-level-render-api", "para": "The rendering of form templates is controlled by a customizable renderer class. A custom renderer can be specified by updating the FORM_RENDERER setting. It defaults to 'django.forms.renderers.DjangoTemplates'.You can also provide a custom renderer by setting the Form.default_renderer attribute or by using the renderer argument of Widget.render().Use one of the built-in template form renderers or implement your own. Custom renderers must implement a render(template_name, context, request=None) method. It should return a rendered templates (as a string) or raise TemplateDoesNotExist."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/renderers/#built-in-template-form-renderers", "para": "This renderer uses a standalone DjangoTemplates engine (unconnected to what you might have configured in the TEMPLATES setting). It loads templates first from the built-in form templates directory in django/forms/templates and then from the installed apps  templates directories using the app_directories loader.If you want to render templates with customizations from your TEMPLATES setting, such as context processors for example, use the TemplatesSetting renderer.This renderer is the same as the DjangoTemplates renderer except that it uses a Jinja2 backend. Templates for the built-in widgets are located in django/forms/jinja2 and installed apps can provide templates in a jinja2 directory.To use this backend, all the widgets in your project and its third-party apps must have Jinja2 templates. Unless you provide your own Jinja2 templates for widgets that don t have any, you can t use this renderer. For example, django.contrib.admin doesn t include Jinja2 templates for its widgets due to their usage of Django template tags.This renderer gives you complete control of how widget templates are sourced. It uses get_template() to find widget templates based on what s configured in the TEMPLATES setting.Using this renderer along with the built-in widget templates requires either:'django.forms' in INSTALLED_APPS and at least one engine with APP_DIRS=True.Adding the built-in widgets templates directory in DIRS of one of your template engines. To generate that path:Using this renderer requires you to make sure the form templates your project needs can be located."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/renderers/#context-available-in-widget-templates", "para": "Widget templates receive a context from Widget.get_context(). By default, widgets receive a single value in the context, widget. This is a dictionary that contains values like:Some widgets add further information to the context. For instance, all widgets that subclass Input defines widget['type'] and MultiWidget defines widget['subwidgets'] for looping purposes."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/forms/renderers/#overriding-built-in-widget-templates", "para": "Each widget has a template_name attribute with a value such as input.html. Built-in widget templates are stored in the django/forms/widgets path. You can provide a custom template for input.html by defining django/forms/widgets/input.html, for example. See Built-in widgets for the name of each widget s template.To override widget templates, you must use the TemplatesSetting renderer. Then overriding widget templates works the same as overriding any other template in your project."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/unit-tests/#running-the-unit-tests", "para": "First, fork Django on GitHub.Second, create and activate a virtual environment. If you re not familiar with how to do that, read our contributing tutorial.Next, clone your fork, install some requirements, and run the tests:Installing the requirements will likely require some operating system packages that your computer doesn t have installed. You can usually figure out which package to install by doing a Web search for the last line or so of the error message. Try adding your operating system to the search query if needed.If you have trouble installing the requirements, you can skip that step. See Running all the tests for details on installing the optional test dependencies. If you don t have an optional dependency installed, the tests that require it will be skipped.Running the tests requires a Django settings module that defines the databases to use. To make it easy to get started, Django provides and uses a sample settings module that uses the SQLite database. See Using another settings module to learn how to use a different settings module to run the tests with a different database.Windows usersWe recommend something like Git Bash to run the tests using the above approach.Having problems? See Troubleshooting for some common issues.Tox is a tool for running tests in different virtual environments. Django includes a basic tox.ini that automates some checks that our build server performs on pull requests. To run the unit tests and other checks (such as import sorting, the documentation spelling checker, and code formatting), install and run the tox command from any place in the Django source tree:By default, tox runs the test suite with the bundled test settings file for SQLite, flake8, isort, and the documentation spelling checker. In addition to the system dependencies noted elsewhere in this documentation, the command python3 must be on your path and linked to the appropriate version of Python. A list of default environments can be seen as follows:In addition to the default environments, tox supports running unit tests for other versions of Python and other database backends. Since Django s test suite doesn t bundle a settings file for database backends other than SQLite, however, you must create and provide your own test settings. For example, to run the tests on Python 3.5 using PostgreSQL:This command sets up a Python 3.5 virtual environment, installs Django s test suite dependencies (including those for PostgreSQL), and calls runtests.py with the supplied arguments (in this case, --settings=my_postgres_settings).The remainder of this documentation shows commands for running tests without tox, however, any option passed to runtests.py can also be passed to tox by prefixing the argument list with --, as above.Tox also respects the DJANGO_SETTINGS_MODULE environment variable, if set. For example, the following is equivalent to the command above:Django includes a set of JavaScript unit tests for functions in certain contrib apps. The JavaScript tests aren t run by default using tox because they require Node.js to be installed and aren t necessary for the majority of patches. To run the JavaScript tests using tox:This command runs npm install to ensure test requirements are up to date and then runs npm test.The included settings module (tests/test_sqlite.py) allows you to run the test suite using SQLite. If you want to run the tests using a different database, you ll need to define your own settings file. Some tests, such as those for contrib.postgres, are specific to a particular database backend and will be skipped if run with a different backend.To run the tests with different settings, ensure that the module is on your PYTHONPATH and pass the module with --settings.The DATABASES setting in any test settings module needs to define two databases:If you re using a backend that isn t SQLite, you will need to provide other details for each database:Test databases get their names by prepending test_ to the value of the NAME settings for the databases defined in DATABASES. These test databases are deleted when the tests are finished.You will also need to ensure that your database uses UTF-8 as the default character set. If your database server doesn t use UTF-8 as a default charset, you will need to include a value for CHARSET in the test settings dictionary for the applicable database.Django s entire test suite takes a while to run, and running every single test could be redundant if, say, you just added a test to Django that you want to run quickly without running everything else. You can run a subset of the unit tests by appending the names of the test modules to runtests.py on the command line.For example, if you d like to run tests only for generic relations and internationalization, type:How do you find out the names of individual tests? Look in tests/   each directory name there is the name of a test.If you just want to run a particular class of tests, you can specify a list of paths to individual test classes. For example, to run the TranslationTests of the i18n module, type:Going beyond that, you can specify an individual test method like this:Some tests require Selenium and a Web browser. To run these tests, you must install the selenium package and run the tests with the --selenium=<BROWSERS> option. For example, if you have Firefox and Google Chrome installed:See the selenium.webdriver package for the list of available browsers.Specifying --selenium automatically sets --tags=selenium to run only the tests that require selenium.If you want to run the full suite of tests, you ll need to install a number of dependencies:You can find these dependencies in pip requirements files inside the tests/requirements directory of the Django source tree and install them like so:If you encounter an error during the installation, your system might be missing a dependency for one or more of the Python packages. Consult the failing package s documentation or search the Web with the error message that you encounter.You can also install the database adapter(s) of your choice using oracle.txt, mysql.txt, or postgres.txt.If you want to test the memcached cache backend, you ll also need to define a CACHES setting that points at your memcached instance.To run the GeoDjango tests, you will need to setup a spatial database and install the Geospatial libraries.Each of these dependencies is optional. If you re missing any of them, the associated tests will be skipped.To run some of the autoreload tests, you ll need to install the Watchman service.Contributors are encouraged to run coverage on the test suite to identify areas that need additional tests. The coverage tool installation and use is described in testing code coverage.Coverage should be run in a single process to obtain accurate statistics. To run coverage on the Django test suite using the standard test settings:After running coverage, generate the html report by running:When running coverage for the Django tests, the included .coveragerc settings file  defines coverage_html as the output directory for the report and also excludes several directories not relevant to the results (test code or external code included in Django)."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/unit-tests/#contrib-apps", "para": "Tests for contrib apps can be found in the tests/ directory, typically under <app_name>_tests. For example, tests for contrib.auth are located in tests/auth_tests."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/unit-tests/#troubleshooting", "para": "If the locales package is not installed, some tests will fail with a UnicodeEncodeError.You can resolve this on Debian-based systems, for example, by running:You can resolve this for macOS systems by configuring your shell s locale:Run the locale command to confirm the change. Optionally, add those export commands to your shell s startup file (e.g. ~/.bashrc for Bash) to avoid having to retype them.In case a test passes when run in isolation but fails within the whole suite, we have some tools to help analyze the problem.The --bisect option of runtests.py will run the failing test while halving the test set it is run together with on each iteration, often making it possible to identify a small number of tests that may be related to the failure.For example, suppose that the failing test that works on its own is ModelTest.test_eq, then using:will try to determine a test that interferes with the given one. First, the test is run with the first half of the test suite. If a failure occurs, the first half of the test suite is split in two groups and each group is then run with the specified test. If there is no failure with the first half of the test suite, the second half of the test suite is run with the specified test and split appropriately as described earlier. The process repeats until the set of failing tests is minimized.The --pair option runs the given test alongside every other test from the suite, letting you check if another test has side-effects that cause the failure. So:will pair test_eq with every test label.With both --bisect and --pair, if you already suspect which cases might be responsible for the failure, you may limit tests to be cross-analyzed by specifying further test labels after the first one:You can also try running any set of tests in reverse using the --reverse option in order to verify that executing tests in a different order does not cause any trouble:If you wish to examine the SQL being run in failing tests, you can turn on SQL logging using the --debug-sql option. If you combine this with --verbosity=2, all SQL queries will be output:By default tests are run in parallel with one process per core. When the tests are run in parallel, however, you ll only see a truncated traceback for any test failures. You can adjust this behavior with the --parallel option:You can also use the DJANGO_TEST_PROCESSES environment variable for this purpose.To avoid polluting the global apps registry and prevent unnecessary table creation, models defined in a test method should be bound to a temporary Apps instance:Since this pattern involves a lot of boilerplate, Django provides the isolate_apps() decorator. It s used like this:Setting app_labelModels defined in a test method with no explicit app_label are automatically assigned the label of the app in which their test class is located.In order to make sure the models defined within the context of isolate_apps() instances are correctly installed, you should pass the set of targeted app_label as arguments:The decorator can also be applied to classes:The temporary Apps instance used to isolate model registration can be retrieved as an attribute when used as a class decorator by using the attr_name parameter:Or as an argument on the test method when used as a method decorator by using the kwarg_name parameter:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-display/#detailview", "para": "While this view is executing, self.object will contain the object that the view is operating upon.Ancestors (MRO)This view inherits methods and attributes from the following views:Method FlowchartExample myapp/views.py:Example myapp/urls.py:Example myapp/article_detail.html:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-display/#listview", "para": "A page representing a list of objects.While this view is executing, self.object_list will contain the list of objects (usually, but not necessarily a queryset) that the view is operating upon.Ancestors (MRO)This view inherits methods and attributes from the following views:Method FlowchartExample views.py:Example myapp/urls.py:Example myapp/article_list.html:If you re using pagination, you can adapt the example template from the pagination docs. Change instances of contacts in that example template to page_obj.A base view for displaying a list of objects. It is not intended to be used directly, but rather as a parent class of the django.views.generic.list.ListView or other views representing lists of objects.Ancestors (MRO)This view inherits methods and attributes from the following views:MethodsAdds object_list to the context. If allow_empty is True then display an empty list. If allow_empty is False then raise a 404 error."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-editing/#formview", "para": "A view that displays a form. On error, redisplays the form with validation errors; on success, redirects to a new URL.Ancestors (MRO)This view inherits methods and attributes from the following views:Example myapp/forms.py:Example myapp/views.py:Example myapp/contact.html:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-editing/#createview", "para": "A view that displays a form for creating an object, redisplaying the form with validation errors (if there are any) and saving the object.Ancestors (MRO)This view inherits methods and attributes from the following views:AttributesThe CreateView page displayed to a GET request uses a template_name_suffix of '_form'. For example, changing this attribute to '_create_form' for a view creating objects for the example Author model would cause the default template_name to be 'myapp/author_create_form.html'.When using CreateView you have access to self.object, which is the object being created. If the object hasn t been created yet, the value will be None.Example myapp/views.py:Example myapp/author_form.html:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-editing/#updateview", "para": "A view that displays a form for editing an existing object, redisplaying the form with validation errors (if there are any) and saving changes to the object. This uses a form automatically generated from the object s model class (unless a form class is manually specified).Ancestors (MRO)This view inherits methods and attributes from the following views:AttributesThe UpdateView page displayed to a GET request uses a template_name_suffix of '_form'. For example, changing this attribute to '_update_form' for a view updating objects for the example Author model would cause the default template_name to be 'myapp/author_update_form.html'.When using UpdateView you have access to self.object, which is the object being updated.Example myapp/views.py:Example myapp/author_update_form.html:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-editing/#deleteview", "para": "A view that displays a confirmation page and deletes an existing object. The given object will only be deleted if the request method is POST. If this view is fetched via GET, it will display a confirmation page that should contain a form that POSTs to the same URL.Ancestors (MRO)This view inherits methods and attributes from the following views:AttributesThe DeleteView page displayed to a GET request uses a template_name_suffix of '_confirm_delete'. For example, changing this attribute to '_check_delete' for a view deleting objects for the example Author model would cause the default template_name to be 'myapp/author_check_delete.html'.Example myapp/views.py:Example myapp/author_confirm_delete.html:"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7/#python-compatibility", "para": "Django 1.7 requires Python 2.7, 3.2, 3.3, or 3.4. We highly recommend and only officially support the latest release of each series.The Django 1.6 series is the last to support Python 2.6. Django 1.7 is the first release to support Python 3.4.This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.7 or newer as their default version. If you re still using Python 2.6, however, you ll need to stick to Django 1.6 until you can upgrade your Python version. Per our support policy, Django 1.6 will continue to receive security support until the release of Django 1.8."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7/#what-s-new-in-django-1-7", "para": "Django now has built-in support for schema migrations. It allows models to be updated, changed, and deleted by creating migration files that represent the model changes and which can be run on any development, staging or production database.Migrations are covered in their own documentation, but a few of the key features are:syncdb has been deprecated and replaced by migrate. Don t worry - calls to syncdb will still work as before.A new makemigrations command provides an easy way to autodetect changes to your models and make migrations for them.django.db.models.signals.pre_syncdb and django.db.models.signals.post_syncdb have been deprecated, to be replaced by pre_migrate and post_migrate respectively. These new signals have slightly different arguments. Check the documentation for details.The allow_syncdb method on database routers is now called allow_migrate, but still performs the same function. Routers with allow_syncdb methods will still work, but that method name is deprecated and you should change it as soon as possible (nothing more than renaming is required).initial_data fixtures are no longer loaded for apps with migrations; if you want to load initial data for an app, we suggest you create a migration for your application and define a RunPython or RunSQL operation in the operations section of the migration.Test rollback behavior is different for apps with migrations; in particular, Django will no longer emulate rollbacks on non-transactional databases or inside TransactionTestCase unless specifically requested.It is not advised to have apps without migrations depend on (have a ForeignKey or ManyToManyField to) apps with migrations.Historically, Django applications were tightly linked to models. A singleton known as the  app cache  dealt with both installed applications and models. The models module was used as an identifier for applications in many APIs.As the concept of Django applications matured, this code showed some shortcomings. It has been refactored into an  app registry  where models modules no longer have a central role and where it s possible to attach configuration data to applications.Improvements thus far include:To help power both schema migrations and to enable easier addition of composite keys in future releases of Django, the Field API now has a new required method: deconstruct().This method takes no arguments, and returns a tuple of four items:These four values allow any field to be serialized into a file, as well as allowing the field to be copied safely, both essential parts of these new features.This change should not affect you unless you write custom Field subclasses; if you do, you may need to reimplement the deconstruct() method if your subclass changes the method signature of __init__ in any way. If your field just inherits from a built-in Django field and doesn t override __init__, no changes are necessary.If you do need to override deconstruct(), a good place to start is the built-in Django fields (django/db/models/fields/__init__.py) as several fields, including DecimalField and DateField, override it and show how to call the method on the superclass and simply add or remove extra arguments.This also means that all arguments to fields must themselves be serializable; to see what we consider serializable, and to find out how to make your own classes serializable, read the migration serialization documentation.Historically, the recommended way to make reusable model queries was to create methods on a custom Manager class. The problem with this approach was that after the first method call, you d get back a QuerySet instance and couldn t call additional custom manager methods.Though not documented, it was common to work around this issue by creating a custom QuerySet so that custom methods could be chained; but the solution had a number of drawbacks:The QuerySet.as_manager() class method can now directly create Manager with QuerySet methods:It is now possible to specify a custom manager when traversing a reverse relationship:We ve added a new System check framework for detecting common problems (like invalid models) and providing hints for resolving those problems. The framework is extensible so you can add your own checks for your own apps and libraries.To perform system checks, you use the check management command. This command replaces the older validate management command.The new Prefetch object allows customizing prefetch operations.You can specify the QuerySet used to traverse a given relation or customize the storage location of prefetch results.This enables things like filtering prefetched relations, calling select_related() from a prefetched relation, or prefetching the same relation multiple times with different querysets. See prefetch_related() for more details.The  today  and  now  shortcuts next to date and time input widgets in the admin are now operating in the current time zone. Previously, they used the browser time zone, which could result in saving the wrong value when it didn t match the current time zone on the server.In addition, the widgets now display a help message when the browser and server time zone are different, to clarify how the value inserted in the field will be interpreted.Prior to Python 2.7, database cursors could be used as a context manager. The specific backend s cursor defined the behavior of the context manager. The behavior of magic method lookups was changed with Python 2.7 and cursors were no longer usable as context managers.Django 1.7 allows a cursor to be used as a context manager. That is, the following can be used:instead of:It is now possible to write custom lookups and transforms for the ORM. Custom lookups work just like Django s built-in lookups (e.g. lte, icontains) while transforms are a new concept.The django.db.models.Lookup class provides a way to add lookup operators for model fields. As an example it is possible to add day_lte operator for DateFields.The django.db.models.Transform class allows transformations of database values prior to the final lookup. For example it is possible to write a year transform that extracts year from the field s value. Transforms allow for chaining. After the year transform has been added to DateField it is possible to filter on the transformed value, for example qs.filter(author__birthdate__year__lte=1981).For more information about both custom lookups and transforms refer to the custom lookups documentation.Previously there were two main patterns for handling errors in forms:Using the former pattern was straightforward since the form can guess from the context (i.e. which method raised the exception) where the errors belong and automatically process them. This remains the canonical way of adding errors when possible. However the latter was fiddly and error-prone, since the burden of handling edge cases fell on the user.The new add_error() method allows adding errors to specific form fields from anywhere without having to worry about the details such as creating instances of django.forms.utils.ErrorList or dealing with Form.cleaned_data. This new API replaces manipulating Form._errors which now becomes a private API.See Cleaning and validating fields that depend on each other for an example using Form.add_error().The ValidationError constructor accepts metadata such as error code or params which are then available for interpolating into the error message (see Raising ValidationError for more details); however, before Django 1.7 those metadata were discarded as soon as the errors were added to Form.errors.Form.errors and django.forms.utils.ErrorList now store the ValidationError instances so these metadata can be retrieved at any time through the new Form.errors.as_data method.The retrieved ValidationError instances can then be identified thanks to their error code which enables things like rewriting the error s message or writing custom logic in a view when a given error is present. It can also be used to serialize the errors in a custom format such as XML.The new Form.errors.as_json() method is a convenience method which returns error messages along with error codes serialized as JSON. as_json() uses as_data() and gives an idea of how the new system could be extended.Heavy changes to the various error containers were necessary in order to support the features above, specifically Form.errors, django.forms.utils.ErrorList, and the internal storages of ValidationError. These containers which used to store error strings now store ValidationError instances and public APIs have been adapted to make this as transparent as possible, but if you ve been using private APIs, some of the changes are backwards incompatible; see ValidationError constructor and internal storage for more details.The static files storage classes may be subclassed to override the permissions that collected static files and directories receive by setting the file_permissions_mode and directory_permissions_mode parameters. See collectstatic for example usage.The CachedStaticFilesStorage backend gets a sibling class called ManifestStaticFilesStorage that doesn t use the cache system at all but instead a JSON file called staticfiles.json for storing the mapping between the original file name (e.g. css/styles.css) and the hashed file name (e.g. css/styles.55e7cbb9ba48.css). The staticfiles.json file is created when running the collectstatic management command and should be a less expensive alternative for remote storages such as Amazon S3.See the ManifestStaticFilesStorage docs for more information.findstatic now accepts verbosity flag level 2, meaning it will show the relative paths of the directories it searched. See findstatic for example output.The new --no-color option for django-admin disables the colorization of management command output.The new dumpdata --natural-foreign and dumpdata --natural-primary options, and the new use_natural_foreign_keys and use_natural_primary_keys arguments for serializers.serialize(), allow the use of natural primary keys when serializing.It is no longer necessary to provide the cache table name or the --database option for the createcachetable command. Django takes this information from your settings file. If you have configured multiple caches or multiple databases, all cache tables are created.The runserver command received several improvements:Management commands can now produce syntax colored output under Windows if the ANSICON third-party tool is installed and active.collectstatic command with symlink option is now supported on Windows NT 6 (Windows Vista and newer).Initial SQL data now works better if the sqlparse Python library is installed.Note that it s deprecated in favor of the RunSQL operation of migrations, which benefits from the improved behavior."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7/#backwards-incompatible-changes-in-1-7", "para": "WarningIn addition to the changes outlined in this section, be sure to review the deprecation plan for any features that have been removed. If you haven t updated your code within the deprecation timeline for a given feature, its removal may appear as a backwards incompatible change.While Django will still look at allow_syncdb methods even though they should be renamed to allow_migrate, there is a subtle difference in which models get passed to these methods.For apps with migrations, allow_migrate will now get passed historical models, which are special versioned models without custom attributes, methods or managers. Make sure your allow_migrate methods are only referring to fields or other items in model._meta.Apps with migrations will not load initial_data fixtures when they have finished migrating. Apps without migrations will continue to load these fixtures during the phase of migrate which emulates the old syncdb behavior, but any new apps will not have this support.Instead, you are encouraged to load initial data in migrations if you need it (using the RunPython operation and your model classes); this has the added advantage that your initial data will not need updating every time you change the schema.Additionally, like the rest of Django s old syncdb code, initial_data has been started down the deprecation path and will be removed in Django 1.9.Django now requires all Field classes and all of their constructor arguments to be serializable. If you modify the constructor signature in your custom Field in any way, you ll need to implement a deconstruct() method; we ve expanded the custom field documentation with instructions on implementing this method.The requirement for all field arguments to be serializable means that any custom class instances being passed into Field constructors - things like custom Storage subclasses, for instance - need to have a deconstruct method defined on them as well, though Django provides a handy class decorator that will work for most applications.Django 1.7 loads application configurations and models as soon as it starts. While this behavior is more straightforward and is believed to be more robust, regressions cannot be ruled out. See Troubleshooting for solutions to some problems you may encounter.If you re using Django in a plain Python script   rather than a management command   and you rely on the DJANGO_SETTINGS_MODULE environment variable, you must now explicitly initialize Django at the beginning of your script with:Otherwise, you will hit an AppRegistryNotReady exception.Until Django 1.3, the recommended way to create a WSGI application was:In Django 1.4, support for WSGI was improved and the API changed to:If you re still using the former style in your WSGI script, you need to upgrade to the latter, or you will hit an AppRegistryNotReady exception.It is no longer possible to have multiple installed applications with the same label. In previous versions of Django, this didn t always work correctly, but didn t crash outright either.If you have two apps with the same label, you should create an AppConfig for one of them and override its label there. You should then adjust your code wherever it references this application or its models with the old label.It isn t possible to import the same model twice through different paths any more. As of Django 1.6, this may happen only if you re manually putting a directory and a subdirectory on PYTHONPATH. Refer to the section on the new project layout in the 1.4 release notes for migration instructions.You should make sure that:Django will enforce these requirements as of version 1.9, after a deprecation period.Subclasses of AppCommand must now implement a handle_app_config() method instead of handle_app(). This method receives an AppConfig instance instead of a models module.Since INSTALLED_APPS now supports application configuration classes in addition to application modules, you should review code that accesses this setting directly and use the app registry (django.apps.apps) instead.The app registry has preserved some features of the old app cache. Even though the app cache was a private API, obsolete methods and arguments will be removed through a standard deprecation path, with the exception of the following changes that take effect immediately:When several applications provide management commands with the same name, Django loads the command from the application that comes first in INSTALLED_APPS. Previous versions loaded the command from the application that came last.This brings discovery of management commands in line with other parts of Django that rely on the order of INSTALLED_APPS, such as static files, templates, and translations.The behavior of the ValidationError constructor has changed when it receives a container of errors as an argument (e.g. a list or an ErrorList):This means that if you access the ValidationError internal storages, such as error_list; error_dict; or the return value of update_error_dict() you may find instances of ValidationError where you would have previously found strings.Also if you directly assigned the return value of update_error_dict() to Form._errors you may inadvertently add list instances where ErrorList instances are expected. This is a problem because unlike a simple list, an ErrorList knows how to handle instances of ValidationError.Most use-cases that warranted using these private APIs are now covered by the newly introduced Form.add_error() method:If you need both Django <= 1.6 and 1.7 compatibility you can t use Form.add_error() since it wasn t available before Django 1.7, but you can use the following workaround to convert any list into ErrorList:An inconsistency existed in previous versions of Django regarding how pickle errors are handled by different cache backends. django.core.cache.backends.locmem.LocMemCache used to fail silently when such an error occurs, which is inconsistent with other backends and leads to cache-specific errors. This has been fixed in Django 1.7, see #21200 for more details.Previous versions of Django generated cache keys using a request s path and query string but not the scheme or host. If a Django application was serving multiple subdomains or domains, cache keys could collide. In Django 1.7, cache keys vary by the absolute URL of the request including scheme, host, path, and query string. For example, the URL portion of a cache key is now generated from https://www.example.com/path/to/?key=val rather than /path/to/?key=val. The cache keys generated by Django 1.7 will be different from the keys generated by older versions of Django. After upgrading to Django 1.7, the first request to any previously cached URL will be a cache miss.In previous versions of Django, it was possible to use db_manager(using=None) on a model manager instance to obtain a manager instance using default routing behavior, overriding any manually specified database routing. In Django 1.7, a value of None passed to db_manager will produce a router that retains any manually assigned database routing   the manager will not be reset. This was necessary to resolve an inconsistency in the way routing information cascaded over joins. See #13724 for more details.If your project handles datetimes before 1970 or after 2037 and Django raises a ValueError when encountering them, you will have to install pytz. You may be affected by this problem if you use Django s time zone-related date formats or django.contrib.syndication.The remove() and clear() methods of the related managers created by ForeignKey, GenericForeignKey, and ManyToManyField suffered from a number of issues. Some operations ran multiple data modifying queries without wrapping them in a transaction, and some operations didn t respect default filtering when it was present (i.e. when the default manager on the related model implemented a custom get_queryset()).Fixing the issues introduced some backward incompatible changes:Historically, the Django admin site passed the request from an unauthorized or unauthenticated user directly to the login view, without HTTP redirection. In Django 1.7, this behavior changed to conform to a more traditional workflow where any unauthorized request to an admin page will be redirected (by HTTP status code 302) to the login page, with the next parameter set to the referring path. The user will be redirected there after a successful login.Note also that the admin login form has been updated to not contain the this_is_the_login_form field (now unused) and the ValidationError code has been set to the more regular invalid_login key.Historically, queries that use select_for_update() could be executed in autocommit mode, outside of a transaction. Before Django 1.6, Django s automatic transactions mode allowed this to be used to lock records until the next write operation. Django 1.6 introduced database-level autocommit; since then, execution in such a context voids the effect of select_for_update(). It is, therefore, assumed now to be an error and raises an exception.This change was made because such errors can be caused by including an app which expects global transactions (e.g. ATOMIC_REQUESTS set to True), or Django s old autocommit behavior, in a project which runs without them; and further, such errors may manifest as data-corruption bugs. It was also made in Django 1.6.3.This change may cause test failures if you use select_for_update() in a test class which is a subclass of TransactionTestCase rather than TestCase.The app-loading refactor deprecated using models from apps which are not part of the INSTALLED_APPS setting. This exposed an incompatibility between the default INSTALLED_APPS and MIDDLEWARE_CLASSES in the global defaults (django.conf.global_settings). To bring these settings in sync and prevent deprecation warnings when doing things like testing reusable apps with minimal settings, SessionMiddleware, AuthenticationMiddleware, and MessageMiddleware were removed from the defaults. These classes will still be included in the default settings generated by startproject. Most projects will not be affected by this change but if you were not previously declaring the MIDDLEWARE_CLASSES in your project settings and relying on the global default you should ensure that the new defaults are in line with your project s needs. You should also check for any code that accesses django.conf.global_settings.MIDDLEWARE_CLASSES directly.The django.core.files.uploadhandler.FileUploadHandler.new_file() method is now passed an additional content_type_extra parameter. If you have a custom FileUploadHandler that implements new_file(), be sure it accepts this new parameter.ModelFormSets no longer delete instances when save(commit=False) is called. See can_delete for instructions on how to manually delete objects from deleted forms.Loading empty fixtures emits a RuntimeWarning rather than raising CommandError.django.contrib.staticfiles.views.serve() will now raise an Http404 exception instead of ImproperlyConfigured when DEBUG is False. This change removes the need to conditionally add the view to your root URLconf, which in turn makes it safe to reverse by name. It also removes the ability for visitors to generate spurious HTTP 500 errors by requesting static files that don t exist or haven t been collected yet.The django.db.models.Model.__eq__() method is now defined in a way where instances of a proxy model and its base model are considered equal when primary keys match. Previously only instances of exact same class were considered equal on primary key match.The django.db.models.Model.__eq__() method has changed such that two Model instances without primary key values won t be considered equal (unless they are the same instance).The django.db.models.Model.__hash__() method will now raise TypeError when called on an instance without a primary key value. This is done to avoid mutable __hash__ values in containers.AutoField columns in SQLite databases will now be created using the AUTOINCREMENT option, which guarantees monotonic increments. This will cause primary key numbering behavior to change on SQLite, becoming consistent with most other SQL databases. This will only apply to newly created tables. If you have a database created with an older version of Django, you will need to migrate it to take advantage of this feature. For example, you could do the following:django.contrib.auth.models.AbstractUser no longer defines a get_absolute_url() method. The old definition returned  \"/users/%s/\" % urlquote(self.username) which was arbitrary since applications may or may not define such a url in urlpatterns. Define a get_absolute_url() method on your own custom user object or use ABSOLUTE_URL_OVERRIDES if you want a URL for your user.The static asset-serving functionality of the django.test.LiveServerTestCase class has been simplified: Now it s only able to serve content already present in STATIC_ROOT when tests are run. The ability to transparently serve all the static assets (similarly to what one gets with DEBUG = True at development-time) has been moved to a new class that lives in the staticfiles application (the one actually in charge of such feature): django.contrib.staticfiles.testing.StaticLiveServerTestCase. In other words, LiveServerTestCase itself is less powerful but at the same time has less magic.Rationale behind this is removal of dependency of non-contrib code on contrib applications.The old cache URI syntax (e.g. \"locmem://\") is no longer supported. It still worked, even though it was not documented or officially supported. If you re still using it, please update to the current CACHES syntax.The default ordering of Form fields in case of inheritance has changed to follow normal Python MRO. Fields are now discovered by iterating through the MRO in reverse with the topmost class coming last. This only affects you if you relied on the default field ordering while having fields defined on both the current class and on a parent Form.The required argument of SelectDateWidget has been removed. This widget now respects the form field s is_required attribute like other widgets.Widget.is_hidden is now a read-only property, getting its value by introspecting the presence of input_type == 'hidden'.select_related() now chains in the same way as other similar calls like prefetch_related. That is, select_related('foo', 'bar') is equivalent to select_related('foo').select_related('bar'). Previously the latter would have been equivalent to select_related('bar').GeoDjango dropped support for GEOS < 3.1.The init_connection_state method of database backends now executes in autocommit mode (unless you set AUTOCOMMIT to False). If you maintain a custom database backend, you should check that method.The django.db.backends.BaseDatabaseFeatures.allows_primary_key_0 attribute has been renamed to allows_auto_pk_0 to better describe it. It s True for all database backends included with Django except MySQL which does allow primary keys with value 0. It only forbids autoincrement primary keys with value 0.Shadowing model fields defined in a parent model has been forbidden as this creates ambiguity in the expected model behavior. In addition, clashing fields in the model inheritance hierarchy result in a system check error. For example, if you use multi-inheritance, you need to define custom primary key fields on parent models, otherwise the default id fields will clash. See Multiple inheritance for details.django.utils.translation.parse_accept_lang_header() now returns lowercase locales, instead of the case as it was provided. As locales should be treated case-insensitive this allows us to speed up locale detection.django.utils.translation.get_language_from_path() and django.utils.translation.trans_real.get_supported_language_variant() now no longer have a supported argument.The shortcut view in django.contrib.contenttypes.views now supports protocol-relative URLs (e.g. //example.com).GenericRelation now supports an optional related_query_name argument. Setting related_query_name adds a relation from the related object back to the content type for filtering, ordering and other query operations.When running tests on PostgreSQL, the USER will need read access to the built-in postgres database. This is in lieu of the previous behavior of connecting to the actual non-test database.As part of the System check framework, fields, models, and model managers all implement a check() method that is registered with the check framework. If you have an existing method called check() on one of these objects, you will need to rename it.As noted above in the  Cache  section of  Minor Features , defining the TIMEOUT argument of the CACHES setting as None will set the cache keys as  non-expiring . Previously, with the memcache backend, a TIMEOUT of 0 would set non-expiring keys, but this was inconsistent with the set-and-expire (i.e. no caching) behavior of set(\"key\", \"value\", timeout=0). If you want non-expiring keys, please update your settings to use None instead of 0 as the latter now designates set-and-expire in the settings as well.The sql* management commands now respect the allow_migrate() method of DATABASE_ROUTERS. If you have models synced to non-default databases, use the --database flag to get SQL for those models (previously they would always be included in the output).Decoding the query string from URLs now falls back to the ISO-8859-1 encoding when the input is not valid UTF-8.With the addition of the django.contrib.auth.middleware.SessionAuthenticationMiddleware to the default project template (pre-1.7.2 only), a database must be created before accessing a page using runserver.The addition of the schemes argument to URLValidator will appear as a backwards-incompatible change if you were previously using a custom regular expression to validate schemes. Any scheme not listed in schemes will fail validation, even if the regular expression matches the given URL."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7/#features-deprecated-in-1-7", "para": "django.core.cache.get_cache has been supplanted by django.core.cache.caches.django.utils.dictconfig and django.utils.importlib were copies of respectively logging.config and importlib provided for Python versions prior to 2.7. They have been deprecated.The current django.utils.module_loading.import_by_path function catches AttributeError, ImportError, and ValueError exceptions, and re-raises ImproperlyConfigured. Such exception masking makes it needlessly hard to diagnose circular import problems, because it makes it look like the problem comes from inside Django. It has been deprecated in favor of import_string().django.utils.tzinfo provided two tzinfo subclasses, LocalTimezone and FixedOffset. They ve been deprecated in favor of more correct alternatives provided by django.utils.timezone, django.utils.timezone.get_default_timezone() and django.utils.timezone.get_fixed_timezone().django.utils.unittest provided uniform access to the unittest2 library on all Python versions. Since unittest2 became the standard library s unittest module in Python 2.7, and Django 1.7 drops support for older Python versions, this module isn t useful anymore. It has been deprecated. Use unittest instead.As OrderedDict was added to the standard library in Python 2.7, SortedDict is no longer needed and has been deprecated.The two additional, deprecated methods provided by SortedDict (insert() and value_for_index()) have been removed. If you relied on these methods to alter structures like form fields, you should now treat these OrderedDicts as immutable objects and override them to change their content.For example, you might want to override MyFormClass.base_fields (although this attribute isn t considered a public API) to change the ordering of fields for all MyFormClass instances; or similarly, you could override self.fields from inside MyFormClass.__init__(), to change the fields for a particular form instance. For example (from Django itself):Previously, if models were organized in a package (myapp/models/) rather than simply myapp/models.py, Django would look for initial SQL data in myapp/models/sql/. This bug has been fixed so that Django will search myapp/sql/ as documented. After this issue was fixed, migrations were added which deprecates initial SQL data. Thus, while this change still exists, the deprecation is irrelevant as the entire feature will be removed in Django 1.9.django.contrib.sites provides reduced functionality when it isn t in INSTALLED_APPS. The app-loading refactor adds some constraints in that situation. As a consequence, two objects were moved, and the old locations are deprecated:ModelAdmin.declared_fieldsets has been deprecated. Despite being a private API, it will go through a regular deprecation path. This attribute was mostly used by methods that bypassed ModelAdmin.get_fieldsets() but this was considered a bug and has been addressed.Since django.contrib.contenttypes.generic defined both admin and model related objects, an import of this module could trigger unexpected side effects. As a consequence, its contents were split into contenttypes submodules and the django.contrib.contenttypes.generic module is deprecated:The syncdb command has been deprecated in favor of the new migrate command. migrate takes the same arguments as syncdb used to plus a few more, so it s safe to just change the name you re calling and nothing else.The following instances of util.py in the Django codebase have been renamed to utils.py in an effort to unify all util and utils references:ModelAdmin.get_formsets has been deprecated in favor of the new get_formsets_with_inlines(), in order to better handle the case of selectively showing inlines on a ModelAdmin.The django.db.models.IPAddressField and django.forms.IPAddressField fields have been deprecated in favor of django.db.models.GenericIPAddressField and django.forms.GenericIPAddressField.The BaseMemcachedCache._get_memcache_timeout() method has been renamed to get_backend_timeout(). Despite being a private API, it will go through the normal deprecation.The --natural and -n options for dumpdata have been deprecated. Use dumpdata --natural-foreign instead.Similarly, the use_natural_keys argument for serializers.serialize() has been deprecated. Use use_natural_foreign_keys instead.It was already strongly suggested that you use GET and POST instead of REQUEST, because the former are more explicit. The property REQUEST is deprecated and will be removed in Django 1.9.MergeDict exists primarily to support merging POST and GET arguments into a REQUEST property on WSGIRequest. To merge dictionaries, use dict.update() instead. The class MergeDict is deprecated and will be removed in Django 1.9.The currently used language codes for Simplified Chinese zh-cn, Traditional Chinese zh-tw and (Western) Frysian fy-nl are deprecated and should be replaced by the language codes zh-hans, zh-hant and fy respectively. If you use these language codes, you should rename the locale directories and update your settings to reflect these changes. The deprecated language codes will be removed in Django 1.9.The function memoize is deprecated and should be replaced by the functools.lru_cache decorator (available from Python 3.2 onwards).Django ships a backport of this decorator for older Python versions and it s available at django.utils.lru_cache.lru_cache. The deprecated function will be removed in Django 1.9.Google has retired support for the Geo Sitemaps format. Hence Django support for Geo Sitemaps is deprecated and will be removed in Django 1.8.Callable arguments for querysets were an undocumented feature that was unreliable. It s been deprecated and will be removed in Django 1.9.Callable arguments were evaluated when a queryset was constructed rather than when it was evaluated, thus this feature didn t offer any benefit compared to evaluating arguments before passing them to queryset and created confusion that the arguments may have been evaluated at query time.The ADMIN_FOR feature, part of the admindocs, has been removed. You can remove the setting from your configuration at your convenience.SplitDateTimeWidget support in DateTimeField is deprecated, use SplitDateTimeWidget with SplitDateTimeField instead.The validate management command is deprecated in favor of the check command.requires_model_validation is deprecated in favor of a new requires_system_checks flag. If the latter flag is missing, then the value of the former flag is used. Defining both requires_system_checks and requires_model_validation results in an error.The check() method has replaced the old validate() method.The ModelAdmin.validator_class and default_validator_class attributes are deprecated in favor of the new checks_class attribute.The ModelAdmin.validate() method is deprecated in favor of ModelAdmin.check().The django.contrib.admin.validation module is deprecated.This method is deprecated in favor of a new check_field method. The functionality required by check_field() is the same as that provided by validate_field(), but the output format is different. Third-party database backends needing this functionality should provide an implementation of check_field().Django 1.3 introduced {% load ssi from future %} and {% load url from future %} syntax for forward compatibility of the ssi and url template tags. This syntax is now deprecated and will be removed in Django 1.9. You can simply remove the {% load ... from future %} tags.javascript_quote() was an undocumented function present in django.utils.text. It was used internally in the javascript_catalog() view whose implementation was changed to make use of json.dumps() instead. If you were relying on this function to provide safe output from untrusted strings, you should use django.utils.html.escapejs or the escapejs template filter. If all you need is to generate valid JavaScript strings, you can simply use json.dumps().The django.utils.html.fix_ampersands method and the fix_ampersands template filter are deprecated, as the escaping of ampersands is already taken care of by Django s standard HTML escaping features. Combining this with fix_ampersands would either result in double escaping, or, if the output is assumed to be safe, a risk of introducing XSS vulnerabilities. Along with fix_ampersands, django.utils.html.clean_html is deprecated, an undocumented function that calls fix_ampersands. As this is an accelerated deprecation, fix_ampersands and clean_html will be removed in Django 1.8.All database settings with a TEST_ prefix have been deprecated in favor of entries in a TEST dictionary in the database settings. The old settings will be supported until Django 1.9. For backwards compatibility with older versions of Django, you can define both versions of the settings as long as they match.FastCGI support via the runfcgi management command will be removed in Django 1.9. Please deploy your project using WSGI.Following the app-loading refactor, two objects in django.contrib.sites.models needed to be moved because they must be available without importing django.contrib.sites.models when django.contrib.sites isn t installed. Import RequestSite from django.contrib.sites.requests and get_current_site() from django.contrib.sites.shortcuts. The old import locations will work until Django 1.9.Django no longer uses this functional internally. Even though it s a private API, it ll go through the normal deprecation cycle.Private APIs django.db.models.sql.where.WhereNode.make_atom() and django.db.models.sql.where.Constraint are deprecated in favor of the new custom lookups API."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7/#features-removed-in-1-7", "para": "These features have reached the end of their deprecation cycle and are removed in Django 1.7. See Features deprecated in 1.5 for details, including how to remove usage of these features."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/upgrade-version/#required-reading", "para": "If it s your first time doing an upgrade, it is useful to read the guide on the different release processes.Afterwards, you should familiarize yourself with the changes that were made in the new Django version(s):Pay particular attention to backwards incompatible changes to get a clear idea of what will be needed for a successful upgrade.If you re upgrading through more than one feature version (e.g. A.B to A.B+2), it s usually easier to upgrade through each feature release incrementally (A.B to A.B+1 to A.B+2) rather than to make all the changes for each feature release at once. For each feature release, use the latest patch release (A.B.C).The same incremental upgrade approach is recommended when upgrading from one LTS to the next."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/upgrade-version/#dependencies", "para": "In most cases it will be necessary to upgrade to the latest version of your Django-related dependencies as well. If the Django version was recently released or if some of your dependencies are not well-maintained, some of your dependencies may not yet support the new Django version. In these cases you may have to wait until new versions of your dependencies are released."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/upgrade-version/#resolving-deprecation-warnings", "para": "Before upgrading, it s a good idea to resolve any deprecation warnings raised by your project while using your current version of Django. Fixing these warnings before upgrading ensures that you re informed about areas of the code that need altering.In Python, deprecation warnings are silenced by default. You must turn them on using the -Wa Python command line option or the PYTHONWARNINGS environment variable. For example, to show warnings while running tests:If you re not using the Django test runner, you may need to also ensure that any console output is not captured which would hide deprecation warnings. For example, if you use py.test:Resolve any deprecation warnings with your current version of Django before continuing the upgrade process.Third party applications might use deprecated APIs in order to support multiple versions of Django, so deprecation warnings in packages you ve installed don t necessarily indicate a problem. If a package doesn t support the latest version of Django, consider raising an issue or sending a pull request for it."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/upgrade-version/#installation", "para": "Once you re ready, it is time to install the new Django version. If you are using virtualenv and it is a major upgrade, you might want to set up a new environment with all the dependencies first.If you installed Django with pip, you can use the --upgrade or -U flag:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/upgrade-version/#testing", "para": "When the new environment is set up, run the full test suite for your application. Again, it s useful to turn on deprecation warnings on so they re shown in the test output (you can also use the flag if you test your app manually using manage.py runserver):After you have run the tests, fix any failures. While you have the release notes fresh in your mind, it may also be a good time to take advantage of new features in Django by refactoring your code to eliminate any deprecation warnings."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/upgrade-version/#deployment", "para": "When you are sufficiently confident your app works with the new version of Django, you re ready to go ahead and deploy your upgraded Django project.If you are using caching provided by Django, you should consider clearing your cache after upgrading. Otherwise you may run into problems, for example, if you are caching pickled objects as these objects are not guaranteed to be pickle-compatible across Django versions. A past instance of incompatibility was caching pickled HttpResponse objects, either directly or indirectly via the cache_page() decorator."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/instrumentation/#connection-execute-wrapper", "para": "Returns a context manager which, when entered, installs a wrapper around database query executions, and when exited, removes the wrapper. The wrapper is installed on the thread-local connection object.wrapper is a callable taking five arguments.  It is called for every query execution in the scope of the context manager, with arguments execute, sql, params, many, and context as described above. It s expected to call execute(sql, params, many, context) and return the return value of that call."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/#the-search-lookup", "para": "The simplest way to use full text search is to search a single term against a single column in the database. For example:This creates a to_tsvector in the database from the body_text field and a plainto_tsquery from the search term 'Cheese', both using the default database search configuration. The results are obtained by matching the query and the vector.To use the search lookup, 'django.contrib.postgres' must be in your INSTALLED_APPS."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/#searchvector", "para": "Searching against a single field is great but rather limiting. The Entry instances we re searching belong to a Blog, which has a tagline field. To query against both fields, use a SearchVector:The arguments to SearchVector can be any Expression or the name of a field. Multiple arguments will be concatenated together using a space so that the search document includes them all.SearchVector objects can be combined together, allowing you to reuse them. For example:See Changing the search configuration and Weighting queries for an explanation of the config and weight parameters."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/#searchquery", "para": "SearchQuery translates the terms the user provides into a search query object that the database compares to a search vector. By default, all the words the user provides are passed through the stemming algorithms, and then it looks for matches for all of the resulting terms.If search_type is 'plain', which is the default, the terms are treated as separate keywords. If search_type is 'phrase', the terms are treated as a single phrase. If search_type is 'raw', then you can provide a formatted search query with terms and operators. Read PostgreSQL s Full Text Search docs to learn about differences and syntax. Examples:SearchQuery terms can be combined logically to provide more flexibility:See Changing the search configuration for an explanation of the config parameter.The search_type parameter was added."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/#searchrank", "para": "So far, we ve just returned the results for which any match between the vector and the query are possible. It s likely you may wish to order the results by some sort of relevancy. PostgreSQL provides a ranking function which takes into account how often the query terms appear in the document, how close together the terms are in the document, and how important the part of the document is where they occur. The better the match, the higher the value of the rank. To order by relevancy:See Weighting queries for an explanation of the weights parameter."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/#changing-the-search-configuration", "para": "You can specify the config attribute to a SearchVector and SearchQuery to use a different search configuration. This allows using different language parsers and dictionaries as defined by the database:The value of config could also be stored in another column:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/#weighting-queries", "para": "Every field may not have the same relevance in a query, so you can set weights of various vectors before you combine them:The weight should be one of the following letters: D, C, B, A. By default, these weights refer to the numbers 0.1, 0.2, 0.4, and 1.0, respectively. If you wish to weight them differently, pass a list of four floats to SearchRank as weights in the same order above:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/#performance", "para": "Special database configuration isn t necessary to use any of these functions, however, if you re searching more than a few hundred records, you re likely to run into performance problems. Full text search is a more intensive process than comparing the size of an integer, for example.In the event that all the fields you re querying on are contained within one particular model, you can create a functional index which matches the search vector you wish to use. The PostgreSQL documentation has details on creating indexes for full text search.If this approach becomes too slow, you can add a SearchVectorField to your model. You ll need to keep it populated with triggers, for example, as described in the PostgreSQL documentation. You can then query the field as if it were an annotated SearchVector:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/#trigram-similarity", "para": "Another approach to searching is trigram similarity. A trigram is a group of three consecutive characters. In addition to the trigram_similar lookup, you can use a couple of other expressions.To use them, you need to activate the pg_trgm extension on PostgreSQL. You can install it using the TrigramExtension migration operation.Accepts a field name or expression, and a string or expression. Returns the trigram similarity between the two arguments.Usage example:Accepts a field name or expression, and a string or expression. Returns the trigram distance between the two arguments.Usage example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/lookups/#trigram-similarity", "para": "The trigram_similar lookup allows you to perform trigram lookups, measuring the number of trigrams (three consecutive characters) shared, using a dedicated PostgreSQL extension. A trigram lookup is given an expression and returns results that have a similarity measurement greater than the current similarity threshold.To use it, add 'django.contrib.postgres' in your INSTALLED_APPS and activate the pg_trgm extension on PostgreSQL. You can install the extension using the TrigramExtension migration operation.The trigram_similar lookup can be used on CharField and TextField:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/lookups/#unaccent", "para": "The unaccent lookup allows you to perform accent-insensitive lookups using a dedicated PostgreSQL extension.This lookup is implemented using Transform, so it can be chained with other lookup functions. To use it, you need to add 'django.contrib.postgres' in your INSTALLED_APPS and activate the unaccent extension on PostgreSQL. The UnaccentExtension migration operation is available if you want to perform this activation using migrations).The unaccent lookup can be used on CharField and TextField:Warningunaccent lookups should perform fine in most use cases. However, queries using this filter will generally perform full table scans, which can be slow on large tables. In those cases, using dedicated full text indexing tools might be appropriate."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/whatsnext/#finding-documentation", "para": "Django s got a lot of documentation   almost 450,000 words and counting   so finding what you need can sometimes be tricky. A few good places to start are the Search Page and the Index.Or you can just browse around!"}, {"link": "https://docs.djangoproject.com/en/2.2/intro/whatsnext/#how-the-documentation-is-organized", "para": "Django s main documentation is broken up into  chunks  designed to fill different needs:The introductory material is designed for people new to Django   or to Web development in general. It doesn t cover anything in depth, but instead gives a high-level overview of how developing in Django  feels .The topic guides, on the other hand, dive deep into individual parts of Django. There are complete guides to Django s model system, template engine, forms framework, and much more.This is probably where you ll want to spend most of your time; if you work your way through these guides you should come out knowing pretty much everything there is to know about Django.Web development is often broad, not deep   problems span many domains. We ve written a set of how-to guides that answer common  How do I  ?  questions. Here you ll find information about generating PDFs with Django, writing custom template tags, and more.Answers to really common questions can also be found in the FAQ.The guides and how-to s don t cover every single class, function, and method available in Django   that would be overwhelming when you re trying to learn. Instead, details about individual classes, functions, methods, and modules are kept in the reference. This is where you ll turn to find the details of a particular function or whatever you need.If you are interested in deploying a project for public use, our docs have several guides for various deployment setups as well as a deployment checklist for some things you ll need to think about.Finally, there s some  specialized  documentation not usually relevant to most developers. This includes the release notes and internals documentation for those who want to add code to Django itself, and a few other things that simply don t fit elsewhere."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/whatsnext/#how-documentation-is-updated", "para": "Just as the Django code base is developed and improved on a daily basis, our documentation is consistently improving. We improve documentation for several reasons:Django s documentation is kept in the same source control system as its code. It lives in the docs directory of our Git repository. Each document online is a separate text file in the repository."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/whatsnext/#where-to-get-it", "para": "You can read Django documentation in several ways. They are, in order of preference:The most recent version of the Django documentation lives at https://docs.djangoproject.com/en/dev/. These HTML pages are generated automatically from the text files in source control. That means they reflect the  latest and greatest  in Django   they include the very latest corrections and additions, and they discuss the latest Django features, which may only be available to users of the Django development version. (See Differences between versions below.)We encourage you to help improve the docs by submitting changes, corrections and suggestions in the ticket system. The Django developers actively monitor the ticket system and use your feedback to improve the documentation for everybody.Note, however, that tickets should explicitly relate to the documentation, rather than asking broad tech-support questions. If you need help with your particular Django setup, try the django-users mailing list or the #django IRC channel instead.For offline reading, or just for convenience, you can read the Django documentation in plain text.If you re using an official release of Django, the zipped package (tarball) of the code includes a docs/ directory, which contains all the documentation for that release.If you re using the development version of Django (aka the master branch), the docs/ directory contains all of the documentation. You can update your Git checkout to get the latest changes.One low-tech way of taking advantage of the text documentation is by using the Unix grep utility to search for a phrase in all of the documentation. For example, this will show you each mention of the phrase  max_length  in any Django document:You can get a local copy of the HTML documentation following a few easy steps:Django s documentation uses a system called Sphinx to convert from plain text to HTML. You ll need to install Sphinx by either downloading and installing the package from the Sphinx website, or with pip:Then, just use the included Makefile to turn the documentation into HTML:You ll need GNU Make installed for this.If you re on Windows you can alternatively use the included batch file:The HTML documentation will be placed in docs/_build/html."}, {"link": "https://docs.djangoproject.com/en/2.2/intro/whatsnext/#differences-between-versions", "para": "The text documentation in the master branch of the Git repository contains the  latest and greatest  changes and additions. These changes include documentation of new features targeted for Django s next feature release. For that reason, it s worth pointing out our policy to highlight recent changes and additions to Django.We follow this policy:"}, {"link": "https://docs.djangoproject.com/en/2.2/topics/install/#install-python", "para": "Django is a Python Web framework. See What Python version can I use with Django? for details.Get the latest version of Python at https://www.python.org/downloads/ or with your operating system s package manager.Django on JythonJython (a Python implementation for the Java platform) is not compatible with Python 3, so Django   2.0 cannot run on Jython.Python on WindowsIf you are just starting with Django and using Windows, you may find How to install Django on Windows useful."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/install/#install-apache-and-mod-wsgi", "para": "If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight web server you can use for testing, so you won t need to set up Apache until you re ready to deploy Django in production.If you want to use Django on a production site, use Apache with mod_wsgi. mod_wsgi operates in one of two modes: embedded mode or daemon mode. In embedded mode, mod_wsgi is similar to mod_perl   it embeds Python within Apache and loads Python code into memory when the server starts. Code stays in memory throughout the life of an Apache process, which leads to significant performance gains over other server arrangements. In daemon mode, mod_wsgi spawns an independent daemon process that handles requests. The daemon process can run as a different user than the Web server, possibly leading to improved security. The daemon process can be restarted without restarting the entire Apache Web server, possibly making refreshing your codebase more seamless. Consult the mod_wsgi documentation to determine which mode is right for your setup. Make sure you have Apache installed with the mod_wsgi module activated. Django will work with any version of Apache that supports mod_wsgi.See How to use Django with mod_wsgi for information on how to configure mod_wsgi once you have it installed.If you can t use mod_wsgi for some reason, fear not: Django supports many other deployment options. One is uWSGI; it works very well with nginx. Additionally, Django follows the WSGI spec (PEP 3333), which allows it to run on a variety of server platforms."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/install/#get-your-database-running", "para": "If you plan to use Django s database API functionality, you ll need to make sure a database server is running. Django supports many different database servers and is officially supported with PostgreSQL, MySQL, Oracle and SQLite.If you are developing a simple project or something you don t plan to deploy in a production environment, SQLite is generally the simplest option as it doesn t require running a separate server. However, SQLite has many differences from other databases, so if you are working on something substantial, it s recommended to develop with the same database that you plan on using in production.In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django.In addition to a database backend, you ll need to make sure your Python database bindings are installed.If you plan to use Django s manage.py migrate command to automatically create database tables for your models (after first installing Django and creating a project), you ll need to ensure that Django has permission to create and alter tables in the database you re using; if you plan to manually create the tables, you can simply grant Django SELECT, INSERT, UPDATE and DELETE permissions. After creating a database user with these permissions, you ll specify the details in your project s settings file, see DATABASES for details.If you re using Django s testing framework to test database queries, Django will need permission to create a test database."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/install/#install-the-django-code", "para": "Installation instructions are slightly different depending on whether you re installing a distribution-specific package, downloading the latest official release, or fetching the latest development version.It s easy, no matter which way you choose.This is the recommended way to install Django.Install pip. The easiest is to use the standalone pip installer. If your distribution already has pip installed, you might need to update it if it s outdated. If it s outdated, you ll know because installation won t work.Take a look at virtualenv and virtualenvwrapper. These tools provide isolated Python environments, which are more practical than installing packages systemwide. They also allow installing packages without administrator privileges. The contributing tutorial walks through how to create a virtualenv.After you ve created and activated a virtual environment, enter the command:Check the distribution specific notes to see if your platform/distribution provides official Django packages/installers. Distribution-provided packages will typically allow for automatic installation of dependencies and easy upgrade paths; however, these packages will rarely contain the latest release of Django.Tracking Django developmentIf you decide to use the latest development version of Django, you ll want to pay close attention to the development timeline, and you ll want to keep an eye on the release notes for the upcoming release. This will help you stay on top of any new features you might want to use, as well as any changes you ll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)If you d like to be able to update your Django code occasionally with the latest bug fixes and improvements, follow these instructions:Make sure that you have Git installed and that you can run its commands from a shell. (Enter git help at a shell prompt to test this.)Check out Django s main development branch like so:This will create a directory django in your current directory.Make sure that the Python interpreter can load Django s code. The most convenient way to do this is to use virtualenv, virtualenvwrapper, and pip. The contributing tutorial walks through how to create a virtualenv.After setting up and activating the virtualenv, run the following command:This will make Django s code importable, and will also make the django-admin utility command available. In other words, you re all set!When you want to update your copy of the Django source code, just run the command git pull from within the django directory. When you do this, Git will automatically download any changes."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/tablespaces/#declaring-tablespaces-for-tables", "para": "A tablespace can be specified for the table generated by a model by supplying the db_tablespace option inside the model s class Meta. This option also affects tables automatically created for ManyToManyFields in the model.You can use the DEFAULT_TABLESPACE setting to specify a default value for db_tablespace. This is useful for setting a tablespace for the built-in Django apps and other applications whose code you cannot control."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/tablespaces/#declaring-tablespaces-for-indexes", "para": "You can pass the db_tablespace option to an Index constructor to specify the name of a tablespace to use for the index. For single field indexes, you can pass the db_tablespace option to a Field constructor to specify an alternate tablespace for the field s column index. If the column doesn t have an index, the option is ignored.You can use the DEFAULT_INDEX_TABLESPACE setting to specify a default value for db_tablespace.If db_tablespace isn t specified and you didn t set DEFAULT_INDEX_TABLESPACE, the index is created in the same tablespace as the tables."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/tablespaces/#an-example", "para": "In this example, the tables generated by the TablespaceExample model (i.e. the model table and the many-to-many table) would be stored in the tables tablespace. The index for the name field and the indexes on the many-to-many table would be stored in the indexes tablespace. The data field would also generate an index, but no tablespace for it is specified, so it would be stored in the model tablespace tables by default. The index for the shortcut field would be stored in the other_indexes tablespace."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/db/tablespaces/#database-support", "para": "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don t.When you use a backend that lacks support for tablespaces, Django ignores all tablespace-related options."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/#the-relationship-and-history-of-generic-views-class-based-views-and-class-based-generic-views", "para": "In the beginning there was only the view function contract, Django passed your function an HttpRequest and expected back an HttpResponse. This was the extent of what Django provided.Early on it was recognized that there were common idioms and patterns found in view development. Function-based generic views were introduced to abstract these patterns and ease view development for the common cases.The problem with function-based generic views is that while they covered the simple cases well, there was no way to extend or customize them beyond some simple configuration options, limiting their usefulness in many real-world applications.Class-based generic views were created with the same objective as function-based generic views, to make view development easier. However, the way the solution is implemented, through the use of mixins, provides a toolkit that results in class-based generic views being more extensible and flexible than their function-based counterparts.If you have tried function based generic views in the past and found them lacking, you should not think of class-based generic views as simply a class-based equivalent, but rather as a fresh approach to solving the original problems that generic views were meant to solve.The toolkit of base classes and mixins that Django uses to build class-based generic views are built for maximum flexibility, and as such have many hooks in the form of default method implementations and attributes that you are unlikely to be concerned with in the simplest use cases. For example, instead of limiting you to a class-based attribute for form_class, the implementation uses a get_form method, which calls a get_form_class method, which in its default implementation just returns the form_class attribute of the class. This gives you several options for specifying what form to use, from a simple attribute, to a fully dynamic, callable hook. These options seem to add hollow complexity for simple situations, but without them, more advanced designs would be limited."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/#using-class-based-views", "para": "At its core, a class-based view allows you to respond to different HTTP request methods with different class instance methods, instead of with conditionally branching code inside a single view function.So where the code to handle HTTP GET in a view function would look something like:In a class-based view, this would become:Because Django s URL resolver expects to send the request and associated arguments to a callable function, not a class, class-based views have an as_view() class method which returns a function that can be called when a request arrives for a URL matching the associated pattern. The function creates an instance of the class, calls setup() to initialize its attributes, and then calls its dispatch() method. dispatch looks at the request to determine whether it is a GET, POST, etc, and relays the request to a matching method if one is defined, or raises HttpResponseNotAllowed if not:It is worth noting that what your method returns is identical to what you return from a function-based view, namely some form of HttpResponse. This means that http shortcuts or TemplateResponse objects are valid to use inside a class-based view.While a minimal class-based view does not require any class attributes to perform its job, class attributes are useful in many class-based designs, and there are two ways to configure or set class attributes.The first is the standard Python way of subclassing and overriding attributes and methods in the subclass. So that if your parent class had an attribute greeting like this:You can override that in a subclass:Another option is to configure class attributes as keyword arguments to the as_view() call in the URLconf:NoteWhile your class is instantiated for each request dispatched to it, class attributes set through the as_view() entry point are configured only once at the time your URLs are imported."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/#using-mixins", "para": "Mixins are a form of multiple inheritance where behaviors and attributes of multiple parent classes can be combined.For example, in the generic class-based views there is a mixin called TemplateResponseMixin whose primary purpose is to define the method render_to_response(). When combined with the behavior of the View base class, the result is a TemplateView class that will dispatch requests to the appropriate matching methods (a behavior defined in the View base class), and that has a render_to_response() method that uses a template_name attribute to return a TemplateResponse object (a behavior defined in the TemplateResponseMixin).Mixins are an excellent way of reusing code across multiple classes, but they come with some cost. The more your code is scattered among mixins, the harder it will be to read a child class and know what exactly it is doing, and the harder it will be to know which methods from which mixins to override if you are subclassing something that has a deep inheritance tree.Note also that you can only inherit from one generic view - that is, only one parent class may inherit from View and the rest (if any) should be mixins. Trying to inherit from more than one class that inherits from View - for example, trying to use a form at the top of a list and combining ProcessFormView and ListView - won t work as expected."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/#handling-forms-with-class-based-views", "para": "A basic function-based view that handles forms may look something like this:A similar class-based view might look like:This is a very simple case, but you can see that you would then have the option of customizing this view by overriding any of the class attributes, e.g. form_class, via URLconf configuration, or subclassing and overriding one or more of the methods (or both!)."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/#decorating-class-based-views", "para": "The extension of class-based views isn t limited to using mixins. You can also use decorators. Since class-based views aren t functions, decorating them works differently depending on if you re using as_view() or creating a subclass.The simplest way of decorating class-based views is to decorate the result of the as_view() method. The easiest place to do this is in the URLconf where you deploy your view:This approach applies the decorator on a per-instance basis. If you want every instance of a view to be decorated, you need to take a different approach.To decorate every instance of a class-based view, you need to decorate the class definition itself. To do this you apply the decorator to the dispatch() method of the class.A method on a class isn t quite the same as a standalone function, so you can t just apply a function decorator to the method   you need to transform it into a method decorator first. The method_decorator decorator transforms a function decorator into a method decorator so that it can be used on an instance method. For example:Or, more succinctly, you can decorate the class instead and pass the name of the method to be decorated as the keyword argument name:If you have a set of common decorators used in several places, you can define a list or tuple of decorators and use this instead of invoking method_decorator() multiple times. These two classes are equivalent:The decorators will process a request in the order they are passed to the decorator. In the example, never_cache() will process the request before login_required().In this example, every instance of ProtectedView will have login protection. These examples use login_required, however, the same behavior can be obtained more simply using LoginRequiredMixin.Notemethod_decorator passes *args and **kwargs as parameters to the decorated method on the class. If your method does not accept a compatible set of parameters it will raise a TypeError exception."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/external-packages/#localflavor", "para": "django-localflavor is a collection of utilities for particular countries and cultures."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/external-packages/#comments", "para": "django-contrib-comments can be used to attach comments to any model, so you can use it for comments on blog entries, photos, book chapters, or anything else. Most users will be better served with a custom solution, or a hosted product like Disqus."}, {"link": "https://docs.djangoproject.com/en/2.2/topics/external-packages/#formtools", "para": "django-formtools is a collection of assorted utilities to work with forms."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/auth-remote-user/#configuration", "para": "First, you must add the django.contrib.auth.middleware.RemoteUserMiddleware to the MIDDLEWARE setting after the django.contrib.auth.middleware.AuthenticationMiddleware:Next, you must replace the ModelBackend with RemoteUserBackend in the AUTHENTICATION_BACKENDS setting:With this setup, RemoteUserMiddleware will detect the username in request.META['REMOTE_USER'] and will authenticate and auto-login that user using the RemoteUserBackend.Be aware that this particular setup disables authentication with the default ModelBackend. This means that if the REMOTE_USER value is not set then the user is unable to log in, even using Django s admin interface. Adding 'django.contrib.auth.backends.ModelBackend' to the AUTHENTICATION_BACKENDS list will use ModelBackend as a fallback if REMOTE_USER is absent, which will solve these issues.Django s user management, such as the views in contrib.admin and the createsuperuser management command, doesn t integrate with remote users. These interfaces work with users stored in the database regardless of AUTHENTICATION_BACKENDS.NoteSince the RemoteUserBackend inherits from ModelBackend, you will still have all of the same permissions checking that is implemented in ModelBackend.Users with is_active=False won t be allowed to authenticate. Use AllowAllUsersRemoteUserBackend if you want to allow them to.If your authentication mechanism uses a custom HTTP header and not REMOTE_USER, you can subclass RemoteUserMiddleware and set the header attribute to the desired request.META key.  For example:WarningBe very careful if using a RemoteUserMiddleware subclass with a custom HTTP header. You must be sure that your front-end web server always sets or strips that header based on the appropriate authentication checks, never permitting an end-user to submit a fake (or  spoofed ) header value. Since the HTTP headers X-Auth-User and X-Auth_User (for example) both normalize to the HTTP_X_AUTH_USER key in request.META, you must also check that your web server doesn t allow a spoofed header using underscores in place of dashes.This warning doesn t apply to RemoteUserMiddleware in its default configuration with header = 'REMOTE_USER', since a key that doesn t start with HTTP_ in request.META can only be set by your WSGI server, not directly from an HTTP request header.If you need more control, you can create your own authentication backend that inherits from RemoteUserBackend and override one or more of its attributes and methods."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/auth-remote-user/#using-remote-user-on-login-pages-only", "para": "The RemoteUserMiddleware authentication middleware assumes that the HTTP request header REMOTE_USER is present with all authenticated requests. That might be expected and practical when Basic HTTP Auth with htpasswd or other simple mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or other resource intensive authentication methods, the authentication in the front-end HTTP server is usually only set up for one or a few login URLs, and after successful authentication, the application is supposed to maintain the authenticated session itself.PersistentRemoteUserMiddleware provides support for this use case. It will maintain the authenticated session until explicit logout by the user. The class can be used as a drop-in replacement of RemoteUserMiddleware in the documentation above."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/#run-manage-py-check-deploy", "para": "Some of the checks described below can be automated using the check --deploy option. Be sure to run it against your production settings file as described in the option s documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/#critical-settings", "para": "The secret key must be a large random value and it must be kept secret.Make sure that the key used in production isn t used anywhere else and avoid committing it to source control. This reduces the number of vectors from which an attacker may acquire the key.Instead of hardcoding the secret key in your settings module, consider loading it from an environment variable:or from a file:You must never enable debug in production.You re certainly developing your project with DEBUG = True, since this enables handy features like full tracebacks in your browser.For a production environment, though, this is a really bad idea, because it leaks lots of information about your project: excerpts of your source code, local variables, settings, libraries used, etc."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/#environment-specific-settings", "para": "When DEBUG = False, Django doesn t work at all without a suitable value for ALLOWED_HOSTS.This setting is required to protect your site against some CSRF attacks. If you use a wildcard, you must perform your own validation of the Host HTTP header, or otherwise ensure that you aren t vulnerable to this category of attacks.You should also configure the Web server that sits in front of Django to validate the host. It should respond with a static error page or ignore requests for incorrect hosts instead of forwarding the request to Django. This way you ll avoid spurious errors in your Django logs (or emails if you have error reporting configured that way). For example, on nginx you might setup a default server to return  444 No Response  on an unrecognized host:If you re using a cache, connection parameters may be different in development and in production. Django defaults to per-process local-memory caching which may not be desirable.Cache servers often have weak authentication. Make sure they only accept connections from your application servers.If you re using Memcached, consider using cached sessions to improve performance.Database connection parameters are probably different in development and in production.Database passwords are very sensitive. You should protect them exactly like SECRET_KEY.For maximum security, make sure database servers only accept connections from your application servers.If you haven t set up backups for your database, do it right now!If your site sends emails, these values need to be set correctly.By default, Django sends email from webmaster@localhost and root@localhost. However, some mail providers reject email from these addresses. To use different sender addresses, modify the DEFAULT_FROM_EMAIL and SERVER_EMAIL settings.Static files are automatically served by the development server. In production, you must define a STATIC_ROOT directory where collectstatic will copy them.See Managing static files (e.g. images, JavaScript, CSS) for more information.Media files are uploaded by your users. They re untrusted! Make sure your web server never attempts to interpret them. For instance, if a user uploads a .php file, the web server shouldn t execute it.Now is a good time to check your backup strategy for these files.With the default file upload settings, files smaller than FILE_UPLOAD_MAX_MEMORY_SIZE may be stored with a different mode than larger files as described in FILE_UPLOAD_PERMISSIONS.Setting FILE_UPLOAD_PERMISSIONS ensures all files are uploaded with the same permissions."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/#https", "para": "Any website which allows users to log in should enforce site-wide HTTPS to avoid transmitting access tokens in clear. In Django, access tokens include the login/password, the session cookie, and password reset tokens. (You can t do much to protect password reset tokens if you re sending them by email.)Protecting sensitive areas such as the user account or the admin isn t sufficient, because the same session cookie is used for HTTP and HTTPS. Your web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS requests to Django.Once you ve set up HTTPS, enable the following settings.Set this to True to avoid transmitting the CSRF cookie over HTTP accidentally.Set this to True to avoid transmitting the session cookie over HTTP accidentally."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/#performance-optimizations", "para": "Setting DEBUG = False disables several features that are only useful in development. In addition, you can tune the following settings.Enabling persistent database connections can result in a nice speed-up when connecting to the database accounts for a significant part of the request processing time.This helps a lot on virtualized hosts with limited network performance.Enabling the cached template loader often improves performance drastically, as it avoids compiling each template every time it needs to be rendered. See the template loaders docs for more information."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/#error-reporting", "para": "By the time you push your code to production, it s hopefully robust, but you can t rule out unexpected errors. Thankfully, Django can capture errors and notify you accordingly.Review your logging configuration before putting your website in production, and check that it works as expected as soon as you have received some traffic.See Logging for details on logging.ADMINS will be notified of 500 errors by email.MANAGERS will be notified of 404 errors. IGNORABLE_404_URLS can help filter out spurious reports.See Error reporting for details on error reporting by email.Error reporting by email doesn t scale very wellConsider using an error monitoring system such as Sentry before your inbox is flooded by reports. Sentry can also aggregate logs.Django includes default views and templates for several HTTP error codes. You may want to override the default templates by creating the following templates in your root template directory: 404.html, 500.html, 403.html, and 400.html. The default error views that use these templates should suffice for 99% of Web applications, but you can customize them as well."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/overriding-templates/#overriding-from-the-project-s-templates-directory", "para": "First, we ll explore overriding templates by creating replacement templates in your project s templates directory.Let s say you re trying to override the templates for a third-party application called blog, which provides the templates blog/post.html and blog/list.html. The relevant settings for your project would look like:The TEMPLATES setting and BASE_DIR will already exist if you created your project using the default project template. The setting that needs to be modified is DIRS.These settings assume you have a templates directory in the root of your project. To override the templates for the blog app, create a folder in the templates directory, and add the template files to that folder:The template loader first looks for templates in the DIRS directory. When the views in the blog app ask for the blog/post.html and blog/list.html templates, the loader will return the files you just created."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/overriding-templates/#overriding-from-an-app-s-template-directory", "para": "Since you re overriding templates located outside of one of your project s apps, it s more common to use the first method and put template overrides in a project s templates folder. If you prefer, however, it s also possible to put the overrides in an app s template directory.First, make sure your template settings are checking inside app directories:If you want to put the template overrides in an app called myapp and the templates to override are named blog/list.html and blog/post.html, then your directory structure will look like:With APP_DIRS set to True, the template loader will look in the app s templates directory and find the templates."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/static-files/#configuring-static-files", "para": "Make sure that django.contrib.staticfiles is included in your INSTALLED_APPS.In your settings file, define STATIC_URL, for example:In your templates, use the static template tag to build the URL for the given relative path using the configured STATICFILES_STORAGE.Store your static files in a folder called static in your app. For example my_app/static/my_app/example.jpg.Serving the filesIn addition to these configuration steps, you ll also need to actually serve the static files.During development, if you use django.contrib.staticfiles, this will be done automatically by runserver when DEBUG is set to True (see django.contrib.staticfiles.views.serve()).This method is grossly inefficient and probably insecure, so it is unsuitable for production.See Deploying static files for proper strategies to serve static files in production environments.Your project will probably also have static assets that aren t tied to a particular app. In addition to using a static/ directory inside your apps, you can define a list of directories (STATICFILES_DIRS) in your settings file where Django will also look for static files. For example:See the documentation for the STATICFILES_FINDERS setting for details on how staticfiles finds your files.Static file namespacingNow we might be able to get away with putting our static files directly in my_app/static/ (rather than creating another my_app subdirectory), but it would actually be a bad idea. Django will use the first static file it finds whose name matches, and if you had a static file with the same name in a different application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the easiest way to ensure this is by namespacing them. That is, by putting those static files inside another directory named for the application itself."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/static-files/#serving-static-files-during-development", "para": "If you use django.contrib.staticfiles as explained above, runserver will do this automatically when DEBUG is set to True. If you don t have django.contrib.staticfiles in INSTALLED_APPS, you can still manually serve static files using the django.views.static.serve() view.This is not suitable for production use! For some common deployment strategies, see Deploying static files.For example, if your STATIC_URL is defined as /static/, you can do this by adding the following snippet to your urls.py:NoteThis helper function works only in debug mode and only if the given prefix is local (e.g. /static/) and not a URL (e.g. http://static.example.com/).Also this helper function only serves the actual STATIC_ROOT folder; it doesn t perform static files discovery like django.contrib.staticfiles."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/static-files/#serving-files-uploaded-by-a-user-during-development", "para": "During development, you can serve user-uploaded media files from MEDIA_ROOT using the django.views.static.serve() view.This is not suitable for production use! For some common deployment strategies, see Deploying static files.For example, if your MEDIA_URL is defined as /media/, you can do this by adding the following snippet to your urls.py:NoteThis helper function works only in debug mode and only if the given prefix is local (e.g. /media/) and not a URL (e.g. http://media.example.com/)."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/static-files/#testing", "para": "When running tests that use actual HTTP requests instead of the built-in testing client (i.e. when using the built-in LiveServerTestCase) the static assets need to be served along the rest of the content so the test environment reproduces the real one as faithfully as possible, but LiveServerTestCase has only very basic static file-serving functionality: It doesn t know about the finders feature of the staticfiles application and assumes the static content has already been collected under STATIC_ROOT.Because of this, staticfiles ships its own django.contrib.staticfiles.testing.StaticLiveServerTestCase, a subclass of the built-in one that has the ability to transparently serve all the assets during execution of these tests in a way very similar to what we get at development time with DEBUG = True, i.e. without having to collect them using collectstatic first."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/static-files/#deployment", "para": "django.contrib.staticfiles provides a convenience management command for gathering static files in a single directory so you can serve them easily.Set the STATIC_ROOT setting to the directory from which you d like to serve these files, for example:Run the collectstatic management command:This will copy all files from your static folders into the STATIC_ROOT directory.Use a web server of your choice to serve the files. Deploying static files covers some common deployment strategies for static files."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/static-files/#learn-more", "para": "This document has covered the basics and some common usage patterns. For complete details on all the settings, commands, template tags, and other pieces included in django.contrib.staticfiles, see the staticfiles reference."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/windows/#install-python", "para": "Django is a Python web framework, thus requiring Python to be installed on your machine. At the time of writing, Python 3.5 is the latest version.To install Python on your machine go to https://python.org/downloads/. The website should offer you a download button for the latest Python version. Download the executable installer and run it. Check the box next to Add Python 3.5 to PATH and then click Install Now.After installation, open the command prompt and check that the Python version matches the version you installed by executing:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/windows/#about-pip", "para": "pip is a package manage for Python. It makes installing and uninstalling Python packages (such as Django!) very easy. For the rest of the installation, we ll use pip to install Python packages from the command line.To install pip on your machine, go to https://pip.pypa.io/en/latest/installing/, and follow the Installing with get-pip.py instructions."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/windows/#install-virtualenv-and-virtualenvwrapper", "para": "virtualenv and virtualenvwrapper provide a dedicated environment for each Django project you create. While not mandatory, this is considered a best practice and will save you time in the future when you re ready to deploy your project. Simply type:Then create a virtual environment for your project:The virtual environment will be activated automatically and you ll see  (myproject)  next to the command prompt to designate that. If you start a new command prompt, you ll need to activate the environment again using:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/windows/#install-django", "para": "Django can be installed easily using pip within your virtual environment.In the command prompt, ensure your virtual environment is active, and execute the following command:This will download and install the latest Django release.After the installation has completed, you can verify your Django installation by executing django-admin --version in the command prompt.See Get your database running for information on database installation with Django."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/windows/#common-pitfalls", "para": "If django-admin only displays the help text no matter what arguments it is given, there is probably a problem with the file association in Windows. Check if there is more than one environment variable set for running Python scripts in PATH. This usually occurs when there is more than one Python version installed.If you are connecting to the internet behind a proxy, there might be problem in running the command pip install django. Set the environment variables for proxy configuration in the command prompt as follows:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#admin", "para": "The automatic Django administrative interface. For more information, see Tutorial 2 and the admin documentation.Requires the auth and contenttypes contrib packages to be installed."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#auth", "para": "Django s authentication framework.See User authentication in Django."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#contenttypes", "para": "A light framework for hooking into  types  of content, where each installed Django model is a separate content type.See the contenttypes documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#flatpages", "para": "A framework for managing simple  flat  HTML content in a database.See the flatpages documentation.Requires the sites contrib package to be installed as well."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#gis", "para": "A world-class geospatial framework built on top of Django, that enables storage, manipulation and display of spatial data.See the GeoDjango documentation for more."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#humanize", "para": "A set of Django template filters useful for adding a  human touch  to data.See the humanize documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#messages", "para": "A framework for storing and retrieving temporary cookie- or session-based messagesSee the messages documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#postgres", "para": "A collection of PostgreSQL specific features.See the contrib.postgres documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#redirects", "para": "A framework for managing redirects.See the redirects documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#sessions", "para": "A framework for storing data in anonymous sessions.See the sessions documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#sites", "para": "A light framework that lets you operate multiple websites off of the same database and Django installation. It gives you hooks for associating objects to one or more sites.See the sites documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#sitemaps", "para": "A framework for generating Google sitemap XML files.See the sitemaps documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#syndication", "para": "A framework for generating syndication feeds, in RSS and Atom, quite easily.See the syndication documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/#other-add-ons", "para": "If you have an idea for functionality to include in contrib, let us know! Code it up, and post it to the django-users mailing list."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/new-contributors/#first-steps", "para": "Start with these easy tasks to discover Django s development process.Sign the Contributor License AgreementThe code that you write belongs to you or your employer. If your contribution is more than one or two lines of code, you need to sign the CLA. See the Contributor License Agreement FAQ for a more thorough explanation.Triage ticketsIf an unreviewed ticket reports a bug, try and reproduce it. If you can reproduce it and it seems valid, make a note that you confirmed the bug and accept the ticket. Make sure the ticket is filed under the correct component area. Consider writing a patch that adds a test for the bug s behavior, even if you don t fix the bug itself. See more at How can I help with triaging?Look for tickets that are accepted and review patches to build familiarity with the codebase and the processMark the appropriate flags if a patch needs docs or tests. Look through the changes a patch makes, and keep an eye out for syntax that is incompatible with older but still supported versions of Python. Run the tests and make sure they pass. Where possible and relevant, try them out on a database other than SQLite. Leave comments and feedback!Keep old patches up to dateOftentimes the codebase will change between a patch being submitted and the time it gets reviewed. Make sure it still applies cleanly and functions as expected. Simply updating a patch is both useful and important! See more on Submitting patches.Write some documentationDjango s documentation is great but it can always be improved. Did you find a typo? Do you think that something should be clarified? Go ahead and suggest a documentation patch! See also the guide on Writing documentation.NoteThe reports page contains links to many useful Trac queries, including several that are useful for triaging tickets and reviewing patches as suggested above."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/new-contributors/#guidelines", "para": "As a newcomer on a large project, it s easy to experience frustration. Here s some advice to make your work on Django more useful and rewarding.Pick a subject area that you care about, that you are familiar with, or that you want to learn aboutYou don t already have to be an expert on the area you want to work on; you become an expert through your ongoing contributions to the code.Analyze tickets  context and historyTrac isn t an absolute; the context is just as important as the words. When reading Trac, you need to take into account who says things, and when they were said. Support for an idea two years ago doesn t necessarily mean that the idea will still have support. You also need to pay attention to who hasn t spoken   for example, if an experienced contributor hasn t been recently involved in a discussion, then a ticket may not have the support required to get into Django.Start smallIt s easier to get feedback on a little issue than on a big one. See the easy pickings.If you re going to engage in a big task, make sure that your idea has support firstThis means getting someone else to confirm that a bug is real before you fix the issue, and ensuring that there s consensus on a proposed feature before you go implementing it.Be bold! Leave feedback!Sometimes it can be scary to put your opinion out to the world and say  this ticket is correct  or  this patch needs work , but it s the only way the project moves forward. The contributions of the broad Django community ultimately have a much greater impact than that of any one person. We can t do it without you!Err on the side of caution when marking things Ready For Check-inIf you re really not certain if a ticket is ready, don t mark it as such. Leave a comment instead, letting others know your thoughts.  If you re mostly certain, but not completely certain, you might also try asking on IRC to see if someone else can confirm your suspicions.Wait for feedback, and respond to feedback that you receiveFocus on one or two tickets, see them through from start to finish, and repeat. The shotgun approach of taking on lots of tickets and letting some fall by the wayside ends up doing more harm than good.Be rigorousWhen we say  PEP 8, and must have docs and tests , we mean it. If a patch doesn t have docs and tests, there had better be a good reason. Arguments like  I couldn t find any existing tests of this feature  don t carry much weight while it may be true, that means you have the extra-important job of writing the very first tests for that feature, not that you get a pass from writing tests altogether."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/new-contributors/#faq", "para": "This ticket I care about has been ignored for days/weeks/months! What can I do to get it committed?First off, it s not personal. Django is entirely developed by volunteers (except the Django fellow), and sometimes folks just don t have time. The best thing to do is to send a gentle reminder to the django-developers mailing list asking for review on the ticket, or to bring it up in the #django-dev IRC channel.I m sure my ticket is absolutely 100% perfect, can I mark it as RFC myself?Short answer: No. It s always better to get another set of eyes on a ticket. If you re having trouble getting that second set of eyes, see question 1, above."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/bugs-and-features/#reporting-bugs", "para": "Well-written bug reports are incredibly helpful. However, there s a certain amount of overhead involved in working with any bug tracking system so your help in keeping our ticket tracker as useful as possible is appreciated. In particular:To understand the lifecycle of your ticket once you have created it, refer to Triaging tickets."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/bugs-and-features/#reporting-user-interface-bugs-and-features", "para": "If your bug or feature request touches on anything visual in nature, there are a few additional guidelines to follow:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/bugs-and-features/#requesting-features", "para": "We re always trying to make Django better, and your feature requests are a key part of that. Here are some tips on how to make a request most effectively:If there s a consensus agreement on the feature, then it s appropriate to create a ticket. Include a link the discussion on django-developers in the ticket description.As with most open-source projects, code talks. If you are willing to write the code for the feature yourself or, even better, if you ve already written it, it s much more likely to be accepted. Just fork Django on GitHub, create a feature branch, and show us your work!See also: Documenting new features."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/bugs-and-features/#how-we-make-decisions", "para": "Whenever possible, we strive for a rough consensus. To that end, we ll often have informal votes on django-developers about a feature. In these votes we follow the voting style invented by Apache and used on Python itself, where votes are given as +1, +0, -0, or -1. Roughly translated, these votes mean:Although these votes on django-developers are informal, they ll be taken very seriously. After a suitable voting period, if an obvious consensus arises we ll follow the votes.However, consensus is not always possible. If consensus cannot be reached, or if the discussion towards a consensus fizzles out without a concrete decision, the decision may be deferred to the technical board.Internally, the technical board will use the same voting mechanism. A proposition will be considered carried if:Votes should be submitted within a week.Since this process allows any technical board member to veto a proposal, a  -1  vote should be accompanied by an explanation of what it would take to convert that  -1  into at least a  +0 .Votes on technical matters should be announced and held in public on the django-developers mailing list."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/triaging-tickets/#triage-workflow", "para": "Unfortunately, not all bug reports and feature requests in the ticket tracker provide all the required details. A number of tickets have patches, but those patches don t meet all the requirements of a good patch.One way to help out is to triage tickets that have been created by other users.Most of the workflow is based around the concept of a ticket s triage stages. Each stage describes where in its lifetime a given ticket is at any time. Along with a handful of flags, this attribute easily tells us what and who each ticket is waiting on.Since a picture is worth a thousand words, let s start there:We ve got two roles in this diagram:By way of example, here we see the lifecycle of an average ticket:Some tickets require much less feedback than this, but then again some tickets require much much more."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/triaging-tickets/#triage-stages", "para": "Below we describe in more detail the various stages that a ticket may flow through during its lifetime.The ticket has not been reviewed by anyone who felt qualified to make a judgment about whether the ticket contained a valid issue, a viable feature, or ought to be closed for any of the various reasons.The big gray area! The absolute meaning of  accepted  is that the issue described in the ticket is valid and is in some stage of being worked on. Beyond that there are several considerations:Accepted + No FlagsThe ticket is valid, but no one has submitted a patch for it yet. Often this means you could safely start writing a patch for it. This is generally more true for the case of accepted bugs than accepted features. A ticket for a bug that has been accepted means that the issue has been verified by at least one triager as a legitimate bug - and should probably be fixed if possible. An accepted new feature may only mean that one triager thought the feature would be good to have, but this alone does not represent a consensus view or imply with any certainty that a patch will be accepted for that feature. Seek more feedback before writing an extensive patch if you are in doubt.Accepted + Has PatchThe ticket is waiting for people to review the supplied patch. This means downloading the patch and trying it out, verifying that it contains tests and docs, running the test suite with the included patch, and leaving feedback on the ticket.Accepted + Has Patch + Needs  This means the ticket has been reviewed, and has been found to need further work.  Needs tests  and  Needs documentation  are self-explanatory.  Patch needs improvement  will generally be accompanied by a comment on the ticket explaining what is needed to improve the code.The ticket was reviewed by any member of the community other than the person who supplied the patch and found to meet all the requirements for a commit-ready patch. A committer now needs to give the patch a final review prior to being committed. See the New contributors  FAQ for  My ticket has been in RFC forever! What should I do? This stage isn t shown on the diagram. It s used sparingly to keep track of high-level ideas or long term feature requests.These tickets are uncommon and overall less useful since they don t describe concrete actionable issues. They are enhancement requests that we might consider adding someday to the framework if an excellent patch is submitted. They are not a high priority."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/triaging-tickets/#other-triage-attributes", "para": "A number of flags, appearing as checkboxes in Trac, can be set on a ticket:This means the ticket has an associated patch. These will be reviewed to see if the patch is  good .The following three fields (Needs documentation, Needs tests, Patch needs improvement) apply only if a patch has been supplied.This flag is used for tickets with patches that need associated documentation. Complete documentation of features is a prerequisite before we can check them into the codebase.This flags the patch as needing associated unit tests. Again, this is a required part of a valid patch.This flag means that although the ticket has a patch, it s not quite ready for checkin. This could mean the patch no longer applies cleanly, there is a flaw in the implementation, or that the code doesn t meet our standards.Tickets that would require small, easy, patches.Tickets should be categorized by type between:Tickets should be classified into components indicating which area of the Django codebase they belong to. This makes tickets better organized and easier to find.The severity attribute is used to identify blockers, that is, issues which should get fixed before releasing the next version of Django. Typically those issues are bugs causing regressions from earlier versions or potentially causing severe data losses. This attribute is quite rarely used and the vast majority of tickets have a severity of  Normal .It is possible to use the version attribute to indicate in which version the reported bug was identified.This flag is used for tickets that relate to User Interface and User Experiences questions. For example, this flag would be appropriate for user-facing features in forms or the admin interface.You may add your username or email address to this field to be notified when new contributions are made to the ticket.With this field you may label a ticket with multiple keywords. This can be useful, for example, to group several tickets of a same theme. Keywords can either be comma or space separated. Keyword search finds the keyword string anywhere in the keywords. For example, clicking on a ticket with the keyword  form  will yield similar tickets tagged with keywords containing strings such as  formset ,  modelformset , and  ManagementForm ."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/triaging-tickets/#closing-tickets", "para": "When a ticket has completed its useful lifecycle, it s time for it to be closed. Closing a ticket is a big responsibility, though. You have to be sure that the issue is really resolved, and you need to keep in mind that the reporter of the ticket may not be happy to have their ticket closed (unless it s fixed, of course). If you re not certain about closing a ticket, just leave a comment with your thoughts instead.If you do close a ticket, you should always make sure of the following:A ticket can be resolved in a number of ways:If you believe that the ticket was closed in error   because you re still having the issue, or it s popped up somewhere else, or the triagers have made a mistake   please reopen the ticket and provide further information. Again, please do not reopen tickets that have been marked as  wontfix  and bring the issue to django-developers instead."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/triaging-tickets/#how-can-i-help-with-triaging", "para": "The triage process is primarily driven by community members. Really, ANYONE can help.To get involved, start by creating an account on Trac. If you have an account but have forgotten your password, you can reset it using the password reset page.Then, you can help out by:NoteThe Reports page contains links to many useful Trac queries, including several that are useful for triaging tickets and reviewing patches as suggested above.You can also find more Advice for new contributors.However, we do ask the following of all general community members working in the ticket database:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/triaging-tickets/#bisecting-a-regression", "para": "A regression is a bug that s present in some newer version of Django but not in an older one. An extremely helpful piece of information is the commit that introduced the regression. Knowing the commit that caused the change in behavior helps identify if the change was intentional or if it was an inadvertent side-effect. Here s how you can determine this.Begin by writing a regression test for Django s test suite for the issue. For example, we ll pretend we re debugging a regression in migrations. After you ve written the test and confirmed that it fails on the latest master, put it in a separate file that you can run standalone. For our example, we ll pretend we created tests/migrations/test_regression.py, which can be run with:Next, we mark the current point in history as being  bad  since the test fails:Now, we need to find a point in git history before the regression was introduced (i.e. a point where the test passes). Use something like git checkout HEAD~100 to checkout an earlier revision (100 commits earlier, in this case). Check if the test fails. If so, mark that point as  bad  (git bisect bad), then checkout an earlier revision and recheck. Once you find a revision where your test passes, mark it as  good :Now we re ready for the fun part: using git bisect run to automate the rest of the process:You should see git bisect use a binary search to automatically checkout revisions between the good and bad commits until it finds the first  bad  commit where the test fails.Now, report your results on the Trac ticket, and please include the regression test as an attachment. When someone writes a fix for the bug, they ll already have your test as a starting point."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/localizing/#translations", "para": "Translations are contributed by Django users worldwide. The translation work is coordinated at Transifex.If you find an incorrect translation or want to discuss specific translations, go to the Django project page. If you would like to help out with translating or add a language that isn t yet translated, here s what to do:Join the Django i18n mailing list and introduce yourself.Make sure you read the notes about Specialties of Django translation.Sign up at Transifex and visit the Django project page.On the Django project page, choose the language you want to work on, or   in case the language doesn t exist yet   request a new language team by clicking on the  Request language  link and selecting the appropriate language.Then, click the  Join this Team  button to become a member of this team. Every team has at least one coordinator who is responsible to review your membership request. You can of course also contact the team coordinator to clarify procedural problems and handle the actual translation process.Once you are a member of a team choose the translation resource you want to update on the team page. For example the  core  resource refers to the translation catalog that contains all non-contrib translations. Each of the contrib apps also have a resource (prefixed with  contrib ).NoteFor more information about how to use Transifex, read the Transifex User Guide.Translations from Transifex are only integrated into the Django repository at the time of a new feature release. We try to update them a second time during one of the following patch releases, but that depends on the translation manager s availability. So don t miss the string freeze period (between the release candidate and the feature release) to take the opportunity to complete and fix the translations for your language!"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/localizing/#formats", "para": "You can also review conf/locale/<locale>/formats.py. This file describes the date, time and numbers formatting particularities of your locale. See Format localization for details.The format files aren t managed by the use of Transifex. To change them, you must create a patch against the Django source tree, as for any code change:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/localizing/#documentation", "para": "There is also an opportunity to translate the documentation, though this is a huge undertaking to complete entirely (you have been warned!). We use the same Transifex tool. The translations will appear at https://docs.djangoproject.com/<language_code>/ when at least the docs/intro/* files are fully translated in your language."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/committing-code/#handling-pull-requests", "para": "Since Django is now hosted at GitHub, most patches are provided in the form of pull requests.When committing a pull request, make sure each individual commit matches the commit guidelines described below. Contributors are expected to provide the best pull requests possible. In practice however, committers - who will likely be more familiar with the commit guidelines - may decide to bring a commit up to standard themselves.You may want to have Jenkins test the pull request with one of the pull request builders that doesn t run automatically, such as Oracle or Selenium. See the Jenkins wiki page for instructions.An easy way to checkout a pull request locally is to add an alias to your ~/.gitconfig (upstream is assumed to be django/django):Now you can simply run git pr #### to checkout the corresponding pull request.At this point, you can work on the code. Use git rebase -i and git commit --amend to make sure the commits have the expected level of quality. Once you re ready:Force push to the branch after rebasing on master but before merging and pushing to upstream. This allows the commit hashes on master and the branch to match which automatically closes the pull request.If a pull request doesn t need to be merged as multiple commits, you can use GitHub s  Squash and merge  button on the website. Edit the commit message as needed to conform to the guidelines and remove the pull request number that s automatically appended to the message s first line.When rewriting the commit history of a pull request, the goal is to make Django s commit history as usable as possible:Practicality beats purity, so it is up to each committer to decide how much history mangling to do for a pull request. The main points are engaging the community, getting work done, and having a usable commit history."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/committing-code/#committing-guidelines", "para": "In addition, please follow the following guidelines when committing code to Django s Git repository:Never change the published history of django/django branches by force pushing. If you absolutely must (for security reasons for example), first discuss the situation with the team.For any medium-to-big changes, where  medium-to-big  is according to your judgment, please bring things up on the django-developers mailing list before making the change.If you bring something up on django-developers and nobody responds, please don t take that to mean your idea is great and should be implemented immediately because nobody contested it. Everyone doesn t always have a lot of time to read mailing list discussions immediately, so you may have to wait a couple of days before getting a response.Write detailed commit messages in the past tense, not present tense.The commit message should be in lines of 72 chars maximum. There should be a subject line, separated by a blank line and then paragraphs of 72 char lines. The limits are soft. For the subject line, shorter is better. In the body of the commit message more detail is better than less:If the patch wasn t a pull request, you should credit the contributors in the commit message:  Thanks A for report, B for the patch and C for the review. For commits to a branch, prefix the commit message with the branch name. For example:  [1.4.x] Fixed #xxxxx   Added support for mind reading. Limit commits to the most granular change that makes sense. This means, use frequent small commits rather than infrequent large commits. For example, if implementing feature X requires a small change to library Y, first commit the change to library Y, then commit feature X in a separate commit. This goes a long way in helping everyone follow your changes.Separate bug fixes from feature changes. Bugfixes may need to be backported to the stable branch, according to Supported versions.If your commit closes a ticket in the Django ticket tracker, begin your commit message with the text  Fixed #xxxxx , where  xxxxx  is the number of the ticket your commit fixes. Example:  Fixed #123   Added whizbang feature. . We ve rigged Trac so that any commit message in that format will automatically close the referenced ticket and post a comment to it with the full commit message.For the curious, we re using a Trac plugin for this.NoteNote that the Trac integration doesn t know anything about pull requests. So if you try to close a pull request with the phrase  closes #400  in your commit message, GitHub will close the pull request, but the Trac plugin will also close the same numbered ticket in Trac.If your commit references a ticket in the Django ticket tracker but does not close the ticket, include the phrase  Refs #xxxxx , where  xxxxx  is the number of the ticket your commit references. This will automatically post a comment to the appropriate ticket.Write commit messages for backports using this pattern:For example:There s a script on the wiki to automate this.If the commit fixes a regression, include this in the commit message:(use the commit hash where the regression was introduced)."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/committing-code/#reverting-commits", "para": "Nobody s perfect; mistakes will be committed.But try very hard to ensure that mistakes don t happen. Just because we have a reversion policy doesn t relax your responsibility to aim for the highest quality possible. Really: double-check your work, or have it checked by another committer, before you commit it in the first place!When a mistaken commit is discovered, please follow these guidelines:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/howto-release-django/#overview", "para": "There are three types of releases that you might need to make:The short version of the steps involved is:There are a lot of details, so please read on."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/howto-release-django/#prerequisites", "para": "You ll need a few things before getting started:A GPG key. If the key you want to use is not your default signing key, you ll need to add -u you@example.com to every GPG signing command below, where you@example.com is the email address associated with the key you want to use.An install of some required Python packages:Access to Django s record on PyPI. Create a file with your credentials:Access to the djangoproject.com server to upload files.Access to the admin on djangoproject.com as a  Site maintainer .Access to post to django-announce.If this is a security release, access to the pre-notification distribution list.If this is your first release, you ll need to coordinate with another releaser to get all these things lined up."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/howto-release-django/#pre-release-tasks", "para": "A few items need to be taken care of before even beginning the release process. This stuff starts about a week before the release; most of it can be done any time leading up to the actual release:If this is a security release, send out pre-notification one week before the release. The template for that email and a list of the recipients are in the private django-security GitHub wiki. BCC the pre-notification recipients. Sign the email with the key you ll use for the release and include CVE IDs (requested with Vendor: djangoproject, Product: django) and patches for each issue being fixed. Also, notify django-announce of the upcoming security release.As the release approaches, watch Trac to make sure no release blockers are left for the upcoming release.Check with the other committers to make sure they don t have any uncommitted changes for the release.Proofread the release notes, including looking at the online version to catch any broken links or reST errors, and make sure the release notes contain the correct date.Double-check that the release notes mention deprecation timelines for any APIs noted as deprecated, and that they mention any changes in Python version support.Double-check that the release notes index has a link to the notes for the new release; this will be in docs/releases/index.txt.If this is a feature release, ensure translations from Transifex have been integrated. This is typically done by a separate translation s manager rather than the releaser, but here are the steps. Provided you have an account on Transifex:and then commit the changed/added files (both .po and .mo). Sometimes there are validation errors which need to be debugged, so avoid doing this task immediately before a release is needed.Update the django-admin manual page:and then commit the changed man page."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/howto-release-django/#preparing-for-release", "para": "Write the announcement blog post for the release. You can enter it into the admin at any time and mark it as inactive. Here are a few examples: example security release announcement, example regular release announcement, example pre-release announcement."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/howto-release-django/#actually-rolling-the-release", "para": "OK, this is the fun part, where we actually push out a release!Check Jenkins is green for the version(s) you re putting out. You probably shouldn t issue a release until it s green.A release always begins from a release branch, so you should make sure you re on a stable branch and up-to-date. For example:If this is a security release, merge the appropriate patches from django-security. Rebase these patches as necessary to make each one a simple commit on the release branch rather than a merge commit. To ensure this, merge them with the --ff-only flag; for example:(This assumes security/1.5.x is a branch in the django-security repo containing the necessary security patches for the next release in the 1.5 series.)If git refuses to merge with --ff-only, switch to the security-patch branch and rebase it on the branch you are about to merge it into (git checkout security/1.5.x; git rebase stable/1.5.x) and then switch back and do the merge. Make sure the commit message for each security fix explains that the commit is a security fix and that an announcement will follow (example security commit).For a feature release, remove the UNDER DEVELOPMENT header at the top of the release notes and add the release date on the next line. For a patch release, replace *Under Development* with the release date. Make this change on all branches where the release notes for a particular version are located.Update the version number in django/__init__.py for the release. Please see notes on setting the VERSION tuple below for details on VERSION.If this is a pre-release package, update the  Development Status  trove classifier in setup.py to reflect this. Otherwise, make sure the classifier is set to Development Status :: 5 - Production/Stable.Tag the release using git tag. For example:You can check your work by running git tag --verify <tag>.Push your work, including the tag: git push --tags.Make sure you have an absolutely clean tree by running git clean -dfx.Run make -f extras/Makefile to generate the release packages. This will create the release packages in a dist/ directory.Generate the hashes of the release packages:Create a  checksums  file, Django-<<VERSION>>.checksum.txt containing the hashes and release information. Start with this template and insert the correct version, date, GPG key ID (from gpg --list-keys --keyid-format LONG), release URL, and checksums:Sign the checksum file (gpg --clearsign --digest-algo SHA256 Django-<version>.checksum.txt). This generates a signed document, Django-<version>.checksum.txt.asc which you can then verify using gpg --verify Django-<version>.checksum.txt.asc.If you re issuing multiple releases, repeat these steps for each release."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/howto-release-django/#making-the-release-s-available-to-the-public", "para": "Now you re ready to actually put the release out there. To do this:Upload the release package(s) to the djangoproject server, replacing A.B. with the appropriate version number, e.g. 1.5 for a 1.5.x release:Upload the checksum file(s):Test that the release packages install correctly using easy_install and pip. Here s one method (which requires virtualenvwrapper):This just tests that the tarballs are available (i.e. redirects are up) and that they install correctly, but it ll catch silly mistakes.Ask a few people on IRC to verify the checksums by visiting the checksums file (e.g. https://www.djangoproject.com/m/pgp/Django-1.5b1.checksum.txt) and following the instructions in it. For bonus points, they can also unpack the downloaded release tarball and verify that its contents appear to be correct (proper version numbers, no stray .pyc or other undesirable files).Upload the release packages to PyPI (for pre-releases, only upload the wheel file):Go to the Add release page in the admin, enter the new release number exactly as it appears in the name of the tarball (Django-<version>.tar.gz). So for example enter  1.5.1  or  1.4c2 , etc. If the release is part of an LTS branch, mark it so.Make the blog post announcing the release live.For a new version release (e.g. 1.5, 1.6), update the default stable version of the docs by flipping the is_default flag to True on the appropriate DocumentRelease object in the docs.djangoproject.com database (this will automatically flip it to False for all others); you can do this using the site s admin.Create new DocumentRelease objects for each language that has an entry for the previous release. Update djangoproject.com s robots.docs.txt file by copying entries from the previous release.Post the release announcement to the django-announce, django-developers, and django-users mailing lists. This should include a link to the announcement blog post. If this is a security release, also include oss-security@lists.openwall.com.Add a link to the blog post in the topic of the #django IRC channel: /msg chanserv TOPIC #django new topic goes here."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/howto-release-django/#post-release", "para": "You re almost done! All that s left to do now is:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/howto-release-django/#new-stable-branch-tasks", "para": "There are several items to do in the time following the creation of a new stable branch (often following an alpha release). Some of these tasks don t need to be done by the releaser."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/howto-release-django/#notes-on-setting-the-version-tuple", "para": "Django s version reporting is controlled by the VERSION tuple in django/__init__.py. This is a five-element tuple, whose elements are:For a final release, the status is always  final  and the series number is always 0. A series number of 0 with an  alpha  status will be reported as  pre-alpha .Some examples:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/submitting-patches/#typo-fixes-and-trivial-documentation-changes", "para": "If you are fixing a really trivial issue, for example changing a word in the documentation, the preferred way to provide the patch is using GitHub pull requests without a Trac ticket.See the Working with Git and GitHub for more details on how to use pull requests."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/submitting-patches/#claiming-tickets", "para": "In an open-source project with hundreds of contributors around the world, it s important to manage communication efficiently so that work doesn t get duplicated and contributors can be as effective as possible.Hence, our policy is for contributors to  claim  tickets in order to let other developers know that a particular bug or feature is being worked on.If you have identified a contribution you want to make and you re capable of fixing it (as measured by your coding ability, knowledge of Django internals and time availability), claim it by following these steps:NoteThe Django software foundation requests that anyone contributing more than a trivial patch to Django sign and submit a Contributor License Agreement, this ensures that the Django Software Foundation has clear license to all contributions allowing for a clear license for all users.Once you ve claimed a ticket, you have a responsibility to work on that ticket in a reasonably timely fashion. If you don t have time to work on it, either unclaim it or don t claim it in the first place!If there s no sign of progress on a particular claimed ticket for a week or two, another developer may ask you to relinquish the ticket claim so that it s no longer monopolized and somebody else can claim it.If you ve claimed a ticket and it s taking a long time (days or weeks) to code, keep everybody updated by posting comments on the ticket. If you don t provide regular updates, and you don t respond to a request for a progress report, your claim on the ticket may be revoked.As always, more communication is better than less communication!Of course, going through the steps of claiming tickets is overkill in some cases.In the case of small changes, such as typos in the documentation or small bugs that will only take a few minutes to fix, you don t need to jump through the hoops of claiming tickets. Just submit your patch and be done with it.Of course, it is always acceptable, regardless whether someone has claimed it or not, to submit patches to a ticket if you happen to have a patch ready."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/submitting-patches/#patch-style", "para": "Make sure that any contribution you do fulfills at least the following requirements:When you think your work is ready to be reviewed, send a GitHub pull request. Please review the patch yourself using our patch review checklist first.If you can t send a pull request for some reason, you can also use patches in Trac. When using this style, follow these guidelines.Regardless of the way you submit your work, follow these steps."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/submitting-patches/#non-trivial-patches", "para": "A  non-trivial  patch is one that is more than a simple bug fix. It s a patch that introduces Django functionality and makes some sort of design decision.If you provide a non-trivial patch, include evidence that alternatives have been discussed on django-developers.If you re not sure whether your patch should be considered non-trivial, just ask."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/submitting-patches/#deprecating-a-feature", "para": "There are a couple reasons that code in Django might be deprecated:As the deprecation policy describes, the first release of Django that deprecates a feature (A.B) should raise a RemovedInDjangoXXWarning (where XX is the Django version where the feature will be removed) when the deprecated feature is invoked. Assuming we have good test coverage, these warnings are converted to errors when running the test suite with warnings enabled: python -Wa runtests.py. Thus, when adding a RemovedInDjangoXXWarning you need to eliminate or silence any warnings generated when running the tests.The first step is to remove any use of the deprecated behavior by Django itself. Next you can silence warnings in tests that actually test the deprecated behavior by using the ignore_warnings decorator, either at the test or class level:In a particular test:For an entire test case:You can also add a test for the deprecation warning. You ll have to disable the  warning as error  behavior in your test by doing:Finally, there are a couple of updates to Django s documentation to make:Once you have completed these steps, you are finished with the deprecation. In each feature release, all RemovedInDjangoXXWarnings matching the new version are removed."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/submitting-patches/#javascript-patches", "para": "For information on JavaScript patches, see the JavaScript patches documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/submitting-patches/#patch-review-checklist", "para": "Use this checklist to review a pull request. If you are reviewing a pull request that is not your own and it passes all the criteria below, please set the  Triage Stage  on the corresponding Trac ticket to  Ready for checkin . If you ve left comments for improvement on the pull request, please tick the appropriate flags on the Trac ticket based on the results of your review:  Patch needs improvement ,  Needs documentation , and/or  Needs tests . As time and interest permits, committers do final reviews of  Ready for checkin  tickets and will either commit the patch or bump it back to  Accepted  if further works need to be done. If you re looking to become a committer, doing thorough reviews of patches is a great way to earn trust.Looking for a patch to review? Check out the  Patches needing review  section of the Django Development Dashboard. Looking to get your patch reviewed? Ensure the Trac flags on the ticket are set so that the ticket appears in that queue.See the Deprecating a feature guide."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/working-with-git/#installing-git", "para": "Django uses Git for its source control. You can download Git, but it s often easier to install with your operating system s package manager.Django s Git repository is hosted on GitHub, and it is recommended that you also work using GitHub.After installing Git, the first thing you should do is setup your name and email:Note that user.name should be your real name, not your GitHub nick. GitHub should know the email you use in the user.email field, as this will be used to associate your commits with your GitHub account."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/working-with-git/#setting-up-local-repository", "para": "When you have created your GitHub account, with the nick  GitHub_nick , and forked Django s repository, create a local copy of your fork:This will create a new directory  django , containing a clone of your GitHub repository. The rest of the git commands on this page need to be run within the cloned directory, so switch to it now:Your GitHub repository will be called  origin  in Git.You should also setup django/django as an  upstream  remote (that is, tell git that the reference Django repository was the source of your fork of it):You can add other remotes similarly, for example:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/working-with-git/#working-on-a-ticket", "para": "When working on a ticket, create a new branch for the work, and base that work on upstream/master:The -b flag creates a new branch for you locally. Don t hesitate to create new branches even for the smallest things - that s what they are there for.If instead you were working for a fix on the 1.4 branch, you would do:Assume the work is carried on the ticket_xxxxx branch. Make some changes and commit them:When writing the commit message, follow the commit message guidelines to ease the work of the committer. If you re uncomfortable with English, try at least to describe precisely what the commit does.If you need to do additional work on your branch, commit as often as necessary:You can publish your work on GitHub just by doing:When you go to your GitHub page, you will notice a new branch has been created.If you are working on a Trac ticket, you should mention in the ticket that your work is available from branch ticket_xxxxx of your GitHub repo. Include a link to your branch.Note that the above branch is called a  topic branch  in Git parlance. You are free to rewrite the history of this branch, by using git rebase for example. Other people shouldn t base their work on such a branch, because their clone would become corrupt when you edit commits.There are also  public branches . These are branches other people are supposed to fork, so the history of these branches should never change. Good examples of public branches are the master and stable/A.B.x branches in the django/django repository.When you think your work is ready to be pulled into Django, you should create a pull request at GitHub. A good pull request means:The test suite must pass and the documentation must build without warnings.Once you have created your pull request, you should add a comment in the related Trac ticket explaining what you ve done. In particular, you should note the environment in which you ran the tests, for instance:  all tests pass under SQLite and MySQL .Pull requests at GitHub have only two states: open and closed. The committer who will deal with your pull request has only two options: merge it or close it. For this reason, it isn t useful to make a pull request until the code is ready for merging   or sufficiently close that a committer will finish it himself.In the example above, you created two commits, the  Fixed ticket_xxxxx  commit and  Added two more tests  commit.We do not want to have the entire history of your working process in your repository. Your commit  Added two more tests  would be unhelpful noise. Instead, we would rather only have one commit containing all your work.To rework the history of your branch you can squash the commits into one by using interactive rebase:The HEAD~2 above is shorthand for two latest commits. The above command will open an editor showing the two commits, prefixed with the word  pick .Change  pick  on the second line to  squash  instead. This will keep the first commit, and squash the second commit into the first one. Save and quit the editor. A second editor window should open, so you can reword the commit message for the commit now that it includes both your steps.You can also use the  edit  option in rebase. This way you can change a single commit, for example to fix a typo in a docstring:If your topic branch is already published at GitHub, for example if you re making minor changes to take into account a review, you will need to force-push the changes:Note that this will rewrite history of ticket_xxxxx - if you check the commit hashes before and after the operation at GitHub you will notice that the commit hashes do not match anymore. This is acceptable, as the branch is merely a topic branch, and nobody should be basing their work on it.When upstream (django/django) has changed, you should rebase your work. To do this, use:The work is automatically rebased using the branch you forked on, in the example case using upstream/master.The rebase command removes all your local commits temporarily, applies the upstream commits, and then applies your local commits again on the work.If there are merge conflicts, you will need to resolve them and then use git rebase --continue. At any point you can use git rebase --abort to return to the original state.Note that you want to rebase on upstream, not merge the upstream.The reason for this is that by rebasing, your commits will always be on top of the upstream s work, not mixed in with the changes in the upstream. This way your branch will contain only commits related to its topic, which makes squashing easier.It is unusual to get any non-trivial amount of code into core without changes requested by reviewers. In this case, it is often a good idea to add the changes as one incremental commit to your work. This allows the reviewer to easily check what changes you have done.In this case, do the changes required by the reviewer. Commit as often as necessary. Before publishing the changes, rebase your work. If you added two commits, you would run:Squash the second commit into the first. Write a commit message along the lines of:Finally, push your work back to your GitHub repository. Since you didn t touch the public commits during the rebase, you should not need to force-push:Your pull request should now contain the new commit too.Note that the committer is likely to squash the review commit into the previous commit when committing the code."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/working-with-git/#working-on-a-patch", "para": "One of the ways that developers can contribute to Django is by reviewing patches. Those patches will typically exist as pull requests on GitHub and can be easily integrated into your local repository:This will create a new branch and then apply the changes from the pull request to it. At this point you can run the tests or do anything else you need to do to investigate the quality of the patch.For more detail on working with pull requests see the guidelines for committers."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/working-with-git/#summary", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/functions/#randomuuid", "para": "Returns a version 4 UUID.The pgcrypto extension must be installed. You can use the CryptoExtension migration operation to install it.Usage example:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/functions/#transactionnow", "para": "Returns the date and time on the database server that the current transaction started. If you are not in a transaction it will return the date and time of the current statement. This is a complement to django.db.models.functions.Now, which returns the date and time of the current statement.Note that only the outermost call to atomic() sets up a transaction and thus sets the time that TransactionNow() will return; nested calls create savepoints which do not affect the transaction time.Usage example:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/modwsgi/#basic-configuration", "para": "Once you ve got mod_wsgi installed and activated, edit your Apache server s httpd.conf file and add the following. If you are using a version of Apache older than 2.4, replace Require all granted with Allow from all and also add the line Order deny,allow above it.The first bit in the WSGIScriptAlias line is the base URL path you want to serve your application at (/ indicates the root url), and the second is the location of a  WSGI file    see below   on your system, usually inside of your project package (mysite in this example). This tells Apache to serve any request below the given URL using the WSGI application defined in that file.If you install your project s Python dependencies inside a virtualenv, add the path to the virtualenv using WSGIPythonHome. See the mod_wsgi virtualenv guide for more details.The WSGIPythonPath line ensures that your project package is available for import on the Python path; in other words, that import mysite works.The <Directory> piece just ensures that Apache can access your wsgi.py file.Next we ll need to ensure this wsgi.py with a WSGI application object exists. As of Django version 1.4, startproject will have created one for you; otherwise, you ll need to create it. See the WSGI overview documentation for the default contents you should put in this file, and what else you can add to it.WarningIf multiple Django sites are run in a single mod_wsgi process, all of them will use the settings of whichever one happens to run first. This can be solved by changing:in wsgi.py, to:or by using mod_wsgi daemon mode and ensuring that each site runs in its own daemon process.Fixing UnicodeEncodeError for file uploadsIf you get a UnicodeEncodeError when uploading files with file names that contain non-ASCII characters, make sure Apache is configured to accept non-ASCII file names:A common location to put this configuration is /etc/apache2/envvars.See the Files section of the Unicode reference guide for details."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/modwsgi/#using-mod-wsgi-daemon-mode", "para": " Daemon mode  is the recommended mode for running mod_wsgi (on non-Windows platforms). To create the required daemon process group and delegate the Django instance to run in it, you will need to add appropriate WSGIDaemonProcess and WSGIProcessGroup directives. A further change required to the above configuration if you use daemon mode is that you can t use WSGIPythonPath; instead you should use the python-path option to WSGIDaemonProcess, for example:If you want to serve your project in a subdirectory (https://example.com/mysite in this example), you can add WSGIScriptAlias to the configuration above:See the official mod_wsgi documentation for details on setting up daemon mode."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/modwsgi/#serving-files", "para": "Django doesn t serve files itself; it leaves that job to whichever Web server you choose.We recommend using a separate Web server   i.e., one that s not also running Django   for serving media. Here are some good choices:If, however, you have no option but to serve media files on the same Apache VirtualHost as Django, you can set up Apache to serve some URLs as static media, and others using the mod_wsgi interface to Django.This example sets up Django at the site root, but serves robots.txt, favicon.ico, and anything in the /static/ and /media/ URL space as a static file. All other URLs will be served using mod_wsgi:If you are using a version of Apache older than 2.4, replace Require all granted with Allow from all and also add the line Order deny,allow above it."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/modwsgi/#serving-the-admin-files", "para": "When django.contrib.staticfiles is in INSTALLED_APPS, the Django development server automatically serves the static files of the admin app (and any other installed apps). This is however not the case when you use any other server arrangement. You re responsible for setting up Apache, or whichever Web server you re using, to serve the admin files.The admin files live in (django/contrib/admin/static/admin) of the Django distribution.We strongly recommend using django.contrib.staticfiles to handle the admin files (along with a Web server as outlined in the previous section; this means using the collectstatic management command to collect the static files in STATIC_ROOT, and then configuring your Web server to serve STATIC_ROOT at STATIC_URL), but here are three other approaches:"}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/modwsgi/#authenticating-against-django-s-user-database-from-apache", "para": "Django provides a handler to allow Apache to authenticate users directly against Django s authentication backends. See the mod_wsgi authentication documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/apache-auth/#authentication-with-mod-wsgi", "para": "NoteThe use of WSGIApplicationGroup %{GLOBAL} in the configurations below presumes that your Apache instance is running only one Django application. If you are running more than one Django application, please refer to the Defining Application Groups section of the mod_wsgi docs for more information about this setting.Make sure that mod_wsgi is installed and activated and that you have followed the steps to setup Apache with mod_wsgi.Next, edit your Apache configuration to add a location that you want only authenticated users to be able to view:The WSGIAuthUserScript directive tells mod_wsgi to execute the check_password function in specified wsgi script, passing the user name and password that it receives from the prompt. In this example, the WSGIAuthUserScript is the same as the WSGIScriptAlias that defines your application that is created by django-admin startproject.Using Apache 2.2 with authenticationMake sure that mod_auth_basic and mod_authz_user are loaded.These might be compiled statically into Apache, or you might need to use LoadModule to load them dynamically in your httpd.conf:Finally, edit your WSGI script mysite.wsgi to tie Apache s authentication to your site s authentication mechanisms by importing the check_password function:Requests beginning with /secret/ will now require a user to authenticate.The mod_wsgi access control mechanisms documentation provides additional details and information about alternative methods of authentication.mod_wsgi also provides functionality to restrict a particular location to members of a group.In this case, the Apache configuration should look like this:To support the WSGIAuthGroupScript directive, the same WSGI script mysite.wsgi must also import the groups_for_user function which returns a list groups the given user belongs to.Requests for /secret/ will now also require user to be a member of the  secret-agents  group."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/gunicorn/#installing-gunicorn", "para": "Installing gunicorn is as easy as pip install gunicorn. For more details, see the gunicorn documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/gunicorn/#running-django-in-gunicorn-as-a-generic-wsgi-application", "para": "When Gunicorn is installed, a gunicorn command is available which starts the Gunicorn server process. At its simplest, gunicorn just needs to be called with the location of a module containing a WSGI application object named application. So for a typical Django project, invoking gunicorn would look like:This will start one process running one thread listening on 127.0.0.1:8000. It requires that your project be on the Python path; the simplest way to ensure that is to run this command from the same directory as your manage.py file.See Gunicorn s deployment documentation for additional tips."}, {"link": "https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/uwsgi/#prerequisite-uwsgi", "para": "The uWSGI wiki describes several installation procedures. Using pip, the Python package manager, you can install any uWSGI version with a single command. For example:uWSGI operates on a client-server model. Your Web server (e.g., nginx, Apache) communicates with a django-uwsgi  worker  process to serve dynamic content.uWSGI supports multiple ways to configure the process. See uWSGI s configuration documentation.Here s an example command to start a uWSGI server:This assumes you have a top-level project package named mysite, and within it a module mysite/wsgi.py that contains a WSGI application object. This is the layout you ll have if you ran django-admin startproject mysite (using your own project name in place of mysite) with a recent version of Django. If this file doesn t exist, you ll need to create it. See the How to deploy with WSGI documentation for the default contents you should put in this file and what else you can add to it.The Django-specific options here are:Example ini configuration file:Example ini configuration file usage:Fixing UnicodeEncodeError for file uploadsIf you get a UnicodeEncodeError when uploading files with file names that contain non-ASCII characters, make sure uWSGI is configured to accept non-ASCII file names by adding this to your uwsgi.ini:See the Files section of the Unicode reference guide for details.See the uWSGI docs on managing the uWSGI process for information on starting, stopping and reloading the uWSGI workers."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/admin/javascript/#inline-form-events", "para": "You may want to execute some JavaScript when an inline form is added or removed in the admin change form. The formset:added and formset:removed jQuery events allow this. The event handler is passed three arguments:The event is fired using the django.jQuery namespace.In your custom change_form.html template, extend the admin_change_form_document_ready block and add the event listener code:Two points to keep in mind:Sometimes you ll need to work with jQuery plugins that are not registered in the django.jQuery namespace. To do that, simply change how the code listens for events. Instead of wrapping the listener in the django.jQuery namespace, just listen to the event triggered from there. For example:"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/0.95/#suitability-and-api-stability", "para": "This release is intended to provide a stable reference point for developers wanting to work on production-level applications that use Django.However, it s not the 1.0 release, and we ll be introducing further changes before 1.0. For a clear look at which areas of the framework will change (and which ones will not change) before 1.0, see the api-stability.txt file, which lives in the docs/ directory of the distribution.You may have a need to use some of the features that are marked as  subject to API change  in that document, but that s OK with us as long as it s OK with you, and as long as you understand APIs may change in the future.Fortunately, most of Django s core APIs won t be changing before version 1.0. There likely won t be as big of a change between 0.95 and 1.0 versions as there was between 0.91 and 0.95."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/0.95/#changes-and-new-features", "para": "The major changes in this release (for developers currently using the 0.91 release) are a result of merging the  magic-removal  branch of development. This branch removed a number of constraints in the way Django code had to be written that were a consequence of decisions made in the early days of Django, prior to its open-source release. It s now possible to write more natural, Pythonic code that works as expected, and there s less  black magic  happening behind the scenes.Aside from that, another main theme of this release is a dramatic increase in usability. We ve made countless improvements in error messages, documentation, etc., to improve developers  quality of life.The new features and changes introduced in 0.95 include:The number of changes required to port from 0.91-compatible code to the 0.95 code base are significant in some cases. However, they are, for the most part, reasonably routine and only need to be done once. A list of the necessary changes is described in the Removing The Magic wiki page. There is also an easy checklist for reference when undertaking the porting operation."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/0.95/#problem-reports-and-getting-help", "para": "Need help resolving a problem with Django? The documentation in the distribution is also available online at the Django website. The FAQ document is especially recommended, as it contains a number of issues that come up time and again.For more personalized help, the django-users mailing list is a very active list, with more than 2,000 subscribers who can help you solve any sort of Django problem. We recommend you search the archives first, though, because many common questions appear with some regularity, and any particular problem may already have been answered.Finally, for those who prefer the more immediate feedback offered by IRC, there s a #django channel on irc.freenode.net that is regularly populated by Django users and developers from around the world. Friendly people are usually available at any hour of the day   to help, or just to chat.Thanks for using Django!The Django Team July 2006"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/tutorial/#introduction", "para": "GeoDjango is an included contrib module for Django that turns it into a world-class geographic Web framework.  GeoDjango strives to make it as simple as possible to create geographic Web applications, like location-based services. Its features include:This tutorial assumes familiarity with Django; thus, if you re brand new to Django, please read through the regular tutorial to familiarize yourself with Django first.NoteGeoDjango has additional requirements beyond what Django requires   please consult the installation documentation for more details.This tutorial will guide you through the creation of a geographic web application for viewing the world borders. [1] Some of the code used in this tutorial is taken from and/or inspired by the GeoDjango basic apps project. [2]NoteProceed through the tutorial sections sequentially for step-by-step instructions."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/tutorial/#setting-up", "para": "Typically no special setup is required, so you can create a database as you would for any other project. We provide some tips for selected databases:Use the standard django-admin script to create a project called geodjango:This will initialize a new project. Now, create a world Django application within the geodjango project:The geodjango project settings are stored in the geodjango/settings.py file. Edit the database connection settings to match your setup:In addition, modify the INSTALLED_APPS setting to include django.contrib.admin, django.contrib.gis, and world (your newly created application):"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/tutorial/#geographic-data", "para": "The world borders data is available in this zip file.  Create a data directory in the world application, download the world borders data, and unzip. On GNU/Linux platforms, use the following commands:The world borders ZIP file contains a set of data files collectively known as an ESRI Shapefile, one of the most popular geospatial data formats.  When unzipped, the world borders dataset includes files with the following extensions:The GDAL ogrinfo utility allows examining the metadata of shapefiles or other vector data sources:ogrinfo tells us that the shapefile has one layer, and that this layer contains polygon data.  To find out more, we ll specify the layer name and use the -so option to get only the important summary information:This detailed summary information tells us the number of features in the layer (246), the geographic bounds of the data, the spatial reference system ( SRS WKT ), as well as type information for each attribute field. For example, FIPS: String (2.0) indicates that the FIPS character field has a maximum length of 2.  Similarly, LON: Real (8.3) is a floating-point field that holds a maximum of 8 digits up to three decimal places."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/tutorial/#geographic-models", "para": "Now that you ve examined your dataset using ogrinfo, create a GeoDjango model to represent this data:Note that the models module is imported from django.contrib.gis.db.The default spatial reference system for geometry fields is WGS84 (meaning the SRID is 4326)   in other words, the field coordinates are in longitude, latitude pairs in units of degrees.  To use a different coordinate system, set the SRID of the geometry field with the srid argument. Use an integer representing the coordinate system s EPSG code.After defining your model, you need to sync it with the database. First, create a database migration:Let s look at the SQL that will generate the table for the WorldBorder model:This command should produce the following output:If this looks correct, run migrate to create this table in the database:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/tutorial/#importing-spatial-data", "para": "This section will show you how to import the world borders shapefile into the database via GeoDjango models using the LayerMapping data import utility.There are many different ways to import data into a spatial database   besides the tools included within GeoDjango, you may also use the following:Earlier, you used ogrinfo to examine the contents of the world borders shapefile.  GeoDjango also includes a Pythonic interface to GDAL s powerful OGR library that can work with all the vector data sources that OGR supports.First, invoke the Django shell:If you downloaded the World Borders data earlier in the tutorial, then you can determine its path using Python s built-in os module:Now, open the world borders shapefile using GeoDjango s DataSource interface:Data source objects can have different layers of geospatial features; however, shapefiles are only allowed to have one layer:You can see the layer s geometry type and how many features it contains:NoteUnfortunately, the shapefile data format does not allow for greater specificity with regards to geometry types.  This shapefile, like many others, actually includes MultiPolygon geometries, not Polygons. It s important to use a more general field type in models: a GeoDjango MultiPolygonField will accept a Polygon geometry, but a PolygonField will not accept a MultiPolygon type geometry.  This is why the WorldBorder model defined above uses a MultiPolygonField.The Layer may also have a spatial reference system associated with it.  If it does, the srs attribute will return a SpatialReference object:This shapefile is in the popular WGS84 spatial reference system   in other words, the data uses longitude, latitude pairs in units of degrees.In addition, shapefiles also support attribute fields that may contain additional data.  Here are the fields on the World Borders layer:The following code will let you examine the OGR types (e.g. integer or string) associated with each of the fields:You can iterate over each feature in the layer and extract information from both the feature s geometry (accessed via the geom attribute) as well as the feature s attribute fields (whose values are accessed via get() method):Layer objects may be sliced:And individual features may be retrieved by their feature ID:Boundary geometries may be exported as WKT and GeoJSON:To import the data, use a LayerMapping in a Python script. Create a file called load.py inside the world application, with the following code:A few notes about what s going on:Afterwards, invoke the Django shell from the geodjango project directory:Next, import the load module, call the run routine, and watch LayerMapping do the work:Now that you ve seen how to define geographic models and import data with the LayerMapping data import utility, it s possible to further automate this process with use of the ogrinspect management command.  The ogrinspect command  introspects a GDAL-supported vector data source (e.g., a shapefile) and generates a model definition and LayerMapping dictionary automatically.The general usage of the command goes as follows:data_source is the path to the GDAL-supported data source and model_name is the name to use for the model.  Command-line options may be used to further define how the model is generated.For example, the following command nearly reproduces the WorldBorder model and mapping dictionary created above, automatically:A few notes about the command-line options given above:The command produces the following output, which may be copied directly into the models.py of a GeoDjango application:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/tutorial/#spatial-queries", "para": "GeoDjango adds spatial lookups to the Django ORM.  For example, you can find the country in the WorldBorder table that contains a particular point.  First, fire up the management shell:Now, define a point of interest [3]:The pnt_wkt string represents the point at -95.3385 degrees longitude, 29.7245 degrees latitude.  The geometry is in a format known as Well Known Text (WKT), a standard issued by the Open Geospatial Consortium (OGC). [4]  Import the WorldBorder model, and perform a contains lookup using the pnt_wkt as the parameter:Here, you retrieved a QuerySet with only one model: the border of the United States (exactly what you would expect).Similarly, you may also use a GEOS geometry object. Here, you can combine the intersects spatial lookup with the get method to retrieve only the WorldBorder instance for San Marino instead of a queryset:The contains and intersects lookups are just a subset of the available queries   the GeoDjango Database API documentation has more.When doing spatial queries, GeoDjango automatically transforms geometries if they re in a different coordinate system.  In the following example, coordinates will be expressed in EPSG SRID 32140, a coordinate system specific to south Texas only and in units of meters, not degrees:Note that pnt may also be constructed with EWKT, an  extended  form of WKT that includes the SRID:GeoDjango s ORM will automatically wrap geometry values in transformation SQL, allowing the developer to work at a higher level of abstraction:Raw queriesWhen using raw queries, you must wrap your geometry fields so that the field value can be recognized by GEOS:You should only use raw queries when you know exactly what you re doing.GeoDjango loads geometries in a standardized textual representation.  When the geometry field is first accessed, GeoDjango creates a GEOSGeometry object, exposing powerful functionality, such as serialization properties for popular geospatial formats:This includes access to all of the advanced geometric operations provided by the GEOS library:GeoDjango also offers a set of geographic annotations to compute distances and several other operations (intersection, difference, etc.). See the Geographic Database Functions documentation."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/tutorial/#putting-your-data-on-the-map", "para": "GeoDjango extends Django s admin application with support for editing geometry fields.GeoDjango also supplements the Django admin by allowing users to create and modify geometries on a JavaScript slippy map (powered by OpenLayers).Let s dive right in.  Create a file called admin.py inside the world application with the following code:Next, edit your urls.py in the geodjango application folder as follows:Create an admin user:Next, start up the Django development server:Finally, browse to http://localhost:8000/admin/, and log in with the user you just created. Browse to any of the WorldBorder entries   the borders may be edited by clicking on a polygon and dragging the vertices to the desired position.With the OSMGeoAdmin, GeoDjango uses a Open Street Map layer in the admin. This provides more context (including street and thoroughfare details) than available with the GeoModelAdmin (which uses the Vector Map Level 0 WMS dataset hosted at OSGeo).The PROJ.4 datum shifting files must be installed (see the PROJ.4 installation instructions for more details).If you meet this requirement, then just substitute the OSMGeoAdmin option class in your admin.py file:Footnotes"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/#overview", "para": "In general, GeoDjango installation requires:Details for each of the requirements and installation instructions are provided in the sections below. In addition, platform-specific instructions are available for:Use the SourceBecause GeoDjango takes advantage of the latest in the open source geospatial software technology, recent versions of the libraries are necessary. If binary packages aren t available for your platform, installation from source may be required. When compiling the libraries from source, please follow the directions closely, especially if you re a beginner."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/#requirements", "para": "Because GeoDjango is included with Django, please refer to Django s installation instructions for details on how to install.PostgreSQL (with PostGIS), MySQL (mostly with MyISAM engine), Oracle, and SQLite (with SpatiaLite) are the spatial databases currently supported.NotePostGIS is recommended, because it is the most mature and feature-rich open source spatial database.The geospatial libraries required for a GeoDjango installation depends on the spatial database used.  The following lists the library requirements, supported versions, and any notes for each of the supported database backends:See also this comparison matrix on the OSGeo Wiki for PostgreSQL/PostGIS/GEOS/GDAL possible combinations."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/#installation", "para": "Set the ENGINE setting to one of the spatial backends.Like other Django contrib applications, you will only need to add django.contrib.gis to INSTALLED_APPS in your settings. This is so that the gis templates can be located   if not done, then features such as the geographic admin or KML sitemaps will not function properly."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/#troubleshooting", "para": "If you can t find the solution to your problem here then participate in the community!  You can:By far, the most common problem when installing GeoDjango is that the external shared libraries (e.g., for GEOS and GDAL) cannot be located. [1] Typically, the cause of this problem is that the operating system isn t aware of the directory where the libraries built from source were installed.In general, the library path may be set on a per-user basis by setting an environment variable, or by configuring the library path for the entire system.A user may set this environment variable to customize the library paths they want to use.  The typical library directory for software built from source is /usr/local/lib.  Thus, /usr/local/lib needs to be included in the LD_LIBRARY_PATH variable.  For example, the user could place the following in their bash profile:On GNU/Linux systems, there is typically a file in /etc/ld.so.conf, which may include additional paths from files in another directory, such as /etc/ld.so.conf.d. As the root user, add the custom library path (like /usr/local/lib) on a new line in ld.so.conf.  This is one example of how to do so:For OpenSolaris users, the system library path may be modified using the crle utility.  Run crle with no options to see the current configuration and use crle -l to set with the new library path.  Be very careful when modifying the system library path:GeoDjango uses the find_library function (from the ctypes.util Python module) to discover libraries.  The find_library routine uses a program called objdump (part of the binutils package) to verify a shared library on GNU/Linux systems.  Thus, if binutils is not installed on your Linux system then Python s ctypes may not be able to find your library even if your library path is set correctly and geospatial libraries were built perfectly.The binutils package may be installed on Debian and Ubuntu systems using the following command:Similarly, on Red Hat and CentOS systems:"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/install/#platform-specific-instructions", "para": "Because of the variety of packaging systems available for macOS, users have several different options for installing GeoDjango. These options are:This section also includes instructions for installing an upgraded version of Python from packages provided by the Python Software Foundation, however, this is not required.Although macOS comes with Python installed, users can use framework installers provided by the Python Software Foundation.  An advantage to using the installer is that macOS s Python will remain  pristine  for internal operating system use.NoteYou will need to modify the PATH environment variable in your .profile file so that the new version of Python is used when python is entered at the command-line:Postgres.app is a standalone PostgreSQL server that includes the PostGIS extension. You will also need to install gdal and libgeoip with Homebrew.After installing Postgres.app, add the following to your .bash_profile so you can run the package s programs from the command-line. Replace X.Y with the version of PostgreSQL in the Postgres.app you installed:You can check if the path is set up correctly by typing which psql at a terminal prompt.Homebrew provides  recipes  for building binaries and packages from source. It provides recipes for the GeoDjango prerequisites on Macintosh computers running macOS. Because Homebrew still builds the software from source, Xcode is required.Summary:William Kyngesburye provides a number of geospatial library binary packages that make it simple to get GeoDjango installed on macOS without compiling them from source.  However, Xcode is still necessary for compiling the Python database adapters psycopg2 (for PostGIS).NoteSpatiaLite users should consult the macOS-specific instructions section after installing the packages for additional instructions.Download the framework packages for:Install the packages in the order they are listed above, as the GDAL and SQLite packages require the packages listed before them.Afterwards, you can also install the KyngChaos binary packages for PostgreSQL and PostGIS.After installing the binary packages, you ll want to add the following to your .profile to be able to run the package programs from the command-line:After you ve installed the KyngChaos binaries and modified your PATH, as described above, psycopg2 may be installed using the following command:NoteIf you don t have pip, follow the installation instructions to install it.Kurt Schwehr has been gracious enough to create GeoDjango packages for users of the Fink package system. Different packages are available (starting with django-gis), depending on which version of Python you want to use.MacPorts may be used to install GeoDjango prerequisites on computers running macOS.  Because MacPorts still builds the software from source, Xcode is required.Summary:NoteYou will also have to modify the PATH in your .profile so that the MacPorts programs are accessible from the command-line:In addition, add the DYLD_FALLBACK_LIBRARY_PATH setting so that the libraries can be found by Python:Proceed through the following sections sequentially in order to install GeoDjango on Windows.Install Python.First, download the latest PostgreSQL 9.x installer from the EnterpriseDB website.  After downloading, simply run the installer, follow the on-screen directions, and keep the default options unless you know the consequences of changing them.NoteThe PostgreSQL installer creates both a new Windows user to be the  postgres service account  and a postgres database superuser You will be prompted once to set the password for both accounts   make sure to remember it!When the installer completes, it will ask to launch the Application Stack Builder (ASB) on exit   keep this checked, as it is necessary to install PostGIS.NoteIf installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A PostgreSQL 9.x start menu group will created and contains shortcuts for the ASB as well as the  SQL Shell , which will launch a psql command window.From within the Application Stack Builder (to run outside of the installer, Start   Programs   PostgreSQL 9.x), select PostgreSQL Database Server 9.x on port 5432 from the drop down menu.  Next, expand the Categories   Spatial Extensions menu tree and select PostGIS X.Y for PostgreSQL 9.x.After clicking next, you will be prompted to select your mirror, PostGIS will be downloaded, and the PostGIS installer will begin.  Select only the default options during install (e.g., do not uncheck the option to create a default PostGIS database).NoteYou will be prompted to enter your postgres database superuser password in the  Database Connection Information  dialog.The psycopg2 Python module provides the interface between Python and the PostgreSQL database.  Download the latest Windows installer for your version of Python and PostgreSQL and run using the default settings. [2]The OSGeo4W installer makes it simple to install the PROJ.4, GDAL, and GEOS libraries required by GeoDjango.  First, download the OSGeo4W installer, and run it.  Select Express Web-GIS Install and click next. In the  Select Packages  list, ensure that GDAL is selected; MapServer and Apache are also enabled by default, but are not required by GeoDjango and may be unchecked safely.  After clicking next, the packages will be automatically downloaded and installed, after which you may exit the installer.In order to use GeoDjango, you will need to add your Python and OSGeo4W directories to your Windows system Path, as well as create GDAL_DATA and PROJ_LIB environment variables.  The following set of commands, executable with cmd.exe, will set this up:NoteAdministrator privileges are required to execute these commands. To do this, create a bat script with the commands, right-click it, and select Run as administrator. You need to log out and log back in again for the settings to take effect.NoteIf you customized the Python or OSGeo4W installation directories, then you will need to modify the OSGEO4W_ROOT and/or PYTHON_ROOT variables accordingly.Finally, install Django on your system.Footnotes"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/sitemaps/#example", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/sitemaps/#reference", "para": "Footnotes"}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/testing/#postgis", "para": "NoteThe settings below have sensible defaults, and shouldn t require manual setting.When GeoDjango s spatial backend initializes on PostGIS, it has to perform an SQL query to determine the version in order to figure out what features are available. Advanced users wishing to prevent this additional query may set the version manually using a 3-tuple of integers specifying the major, minor, and micro version numbers for PostGIS. For example, to configure for PostGIS X.Y.Z you would use:Depending on your configuration, this section describes several methods to configure a database user with sufficient privileges to run tests for GeoDjango applications on PostgreSQL. If your spatial database template was created like in the instructions, then your testing database user only needs to have the ability to create databases. In other configurations, you may be required to use a database superuser.To make a database user with the ability to create databases, use the following command:The -R -S flags indicate that we do not want the user to have the ability to create additional users (roles) or to be a superuser, respectively.Alternatively, you may alter an existing user s role from the SQL shell (assuming this is done from an existing superuser account):This may be done at the time the user is created, for example:Or you may alter the user s role from the SQL shell (assuming this is done from an existing superuser account):On Windows platforms the pgAdmin III utility may also be used as a simple way to add superuser privileges to your database user.By default, the PostGIS installer on Windows includes a template spatial database entitled template_postgis."}, {"link": "https://docs.djangoproject.com/en/2.2/ref/contrib/gis/testing/#geodjango-tests", "para": "To have the GeoDjango tests executed when running the Django test suite with runtests.py all of the databases in the settings file must be using one of the spatial database backends.The following is an example bare-bones settings file with spatial backends that can be used to run the entire Django test suite, including those in django.contrib.gis:Assuming the settings above were in a postgis.py file in the same directory as runtests.py, then all Django and GeoDjango tests would be performed when executing the command:To run only the GeoDjango test suite, specify gis_tests:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/#python-style", "para": "Please conform to the indentation style dictated in the .editorconfig file. We recommend using a text editor with EditorConfig support to avoid indentation and whitespace issues. The Python files use 4 spaces for indentation and the HTML files use 2 spaces.Unless otherwise specified, follow PEP 8.Use flake8 to check for problems in this area. Note that our setup.cfg file contains some excluded files (deprecated modules we don t care about cleaning up and some third-party code that Django vendors) as well as some excluded errors that we don t consider as gross violations. Remember that PEP 8 is only a guide, so respect the style of the surrounding code as a primary goal.An exception to PEP 8 is our rules on line lengths. Don t limit lines of code to 79 characters if it means the code looks significantly uglier or is harder to read. We allow up to 119 characters as this is the width of GitHub code review; anything longer requires horizontal scrolling which makes review more difficult. This check is included when you run flake8. Documentation, comments, and docstrings should be wrapped at 79 characters, even though PEP 8 suggests 72.Use four spaces for indentation.Use four space hanging indentation rather than vertical alignment:Instead of:This makes better use of space and avoids having to realign strings if the length of the first line changes.Use single quotes for strings, or a double quote if the string contains a single quote. Don t waste time doing unrelated refactoring of existing code to conform to this style.Avoid use of  we  in comments, e.g.  Loop over  rather than  We loop over .Use underscores, not camelCase, for variable, function and method names (i.e. poll.get_unique_voters(), not poll.getUniqueVoters()).Use InitialCaps for class names (or for factory functions that return classes).In docstrings, follow the style of existing docstrings and PEP 257.In tests, use assertRaisesMessage() and assertWarnsMessage() instead of assertRaises() and assertWarns() so you can check the exception or warning message. Use assertRaisesRegex() and assertWarnsRegex() only if you need regular expression matching.In test docstrings, state the expected behavior that each test demonstrates. Don t include preambles such as  Tests that  or  Ensures that .Reserve ticket references for obscure issues where the ticket has additional details that can t be easily described in docstrings or comments. Include the ticket number at the end of a sentence like this:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/#imports", "para": "Use isort to automate import sorting using the guidelines below.Quick start:This runs isort recursively from your current directory, modifying any files that don t conform to the guidelines. If you need to have imports out of order (to avoid a circular import, for example) use a comment like this:Put imports in these groups: future, standard library, third-party libraries, other Django components, local Django component, try/excepts. Sort lines in each group alphabetically by the full module name. Place all import module statements before from module import objects in each section. Use absolute imports for other Django components and relative imports for local components.On each line, alphabetize the items with the upper case items grouped before the lowercase items.Break long lines using parentheses and indent continuation lines by 4 spaces. Include a trailing comma after the last import and put the closing parenthesis on its own line.Use a single blank line between the last import and any module level code, and use two blank lines above the first function or class.For example (comments are for explanatory purposes only):Use convenience imports whenever available. For example, do this:instead of:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/#template-style", "para": "In Django template code, put one (and only one) space between the curly brackets and the tag contents.Do this:Don t do this:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/#view-style", "para": "In Django views, the first parameter in a view function should be called request.Do this:Don t do this:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/#model-style", "para": "Field names should be all lowercase, using underscores instead of camelCase.Do this:Don t do this:The class Meta should appear after the fields are defined, with a single blank line separating the fields and the class definition.Do this:Don t do this:Don t do this, either:The order of model inner classes and standard methods should be as follows (noting that these are not all required):If choices is defined for a given model field, define each choice as a tuple of tuples, with an all-uppercase name as a class attribute on the model. Example:"}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/#use-of-django-conf-settings", "para": "Modules should not in general use settings stored in django.conf.settings at the top level (i.e. evaluated when the module is imported). The explanation for this is as follows:Manual configuration of settings (i.e. not relying on the DJANGO_SETTINGS_MODULE environment variable) is allowed and possible as follows:However, if any setting is accessed before the settings.configure line, this will not work. (Internally, settings is a LazyObject which configures itself automatically when the settings are accessed if it has not already been configured).So, if there is a module containing some code as follows: then importing this module will cause the settings object to be configured. That means that the ability for third parties to import the module at the top level is incompatible with the ability to configure the settings object manually, or makes it very difficult in some circumstances.Instead of the above code, a level of laziness or indirection must be used, such as django.utils.functional.LazyObject, django.utils.functional.lazy() or lambda."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/#miscellaneous", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/#javascript-style", "para": "For details about the JavaScript code style used by Django, see JavaScript."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/javascript/#code-style", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/javascript/#javascript-patches", "para": "Django s admin system leverages the jQuery framework to increase the capabilities of the admin interface. In conjunction, there is an emphasis on admin JavaScript performance and minimizing overall admin media file size. Serving compressed or  minified  versions of JavaScript files is considered best practice in this regard.To that end, patches for JavaScript files should include both the original code for future development (e.g. foo.js), and a compressed version for production use (e.g. foo.min.js). Any links to the file in the codebase should point to the compressed version.To simplify the process of providing optimized JavaScript code, Django includes a handy Python script which should be used to create a  minified  version. To run it:Behind the scenes, compress.py is a front-end for Google s Closure Compiler which is written in Java. The Closure Compiler library is not bundled with Django, but you can install it using pip as done above. The Closure Compiler library requires Java 7 or higher.Please don t forget to run compress.py and include the diff of the minified scripts when submitting patches for Django s JavaScript."}, {"link": "https://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/javascript/#javascript-tests", "para": "Django s JavaScript tests can be run in a browser or from the command line. The tests are located in a top level js_tests directory.Django s JavaScript tests use QUnit. Here is an example test module:Please consult the QUnit documentation for information on the types of assertions supported by QUnit.The JavaScript tests may be run from a web browser or from the command line.To run the tests from a web browser, open up js_tests/tests.html in your browser.To measure code coverage when running the tests, you need to view that file over HTTP. To view code coverage:To run the tests from the command line, you need to have Node.js installed.After installing Node.js, install the JavaScript test dependencies by running the following from the root of your Django checkout:Then run the tests with:"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.2.1/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.2/#python-compatibility", "para": "Django 2.2 supports Python 3.5, 3.6, and 3.7. We highly recommend and only officially support the latest release of each series."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.2/#what-s-new-in-django-2-2", "para": "The new CheckConstraint and UniqueConstraint classes enable adding custom database constraints. Constraints are added to models using the Meta.constraints option."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.2/#backwards-incompatible-changes-in-2-2", "para": "This section describes changes that may be needed in third-party database backends.For example, in older versions of Django:SubAdmin would have actions 'a' and 'b'.Now actions follows standard Python inheritance. To get the same result as before:Initial data migrations are now loaded in TransactionTestCase at the end of the test, after the database flush. In older versions, this data was loaded at the beginning of the test, but this prevents the test --keepdb option from working properly (the database was empty at the end of the whole test suite). This change shouldn t have an impact on your tests unless you ve customized TransactionTestCase s internals.To simplify a few parts of Django s database handling, sqlparse is now a required dependency. It s automatically installed along with Django.In usage like:alias is not cached. Where the problem can be detected (Python 3.6 and later), such usage now raises TypeError: Cannot assign the same cached_property to two different names ('base' and 'alias').Use this instead:Permissions for proxy models are now created using the content type of the proxy model rather than the content type of the concrete model. A migration will update existing permissions when you run migrate.In the admin, the change is transparent for proxy models having the same app_label as their concrete model. However, in older versions, users with permissions for a proxy model with a different app_label than its concrete model couldn t access the model in the admin. That s now fixed, but you might want to audit the permissions assignments for such proxy models ([add|view|change|delete]_myproxy) prior to upgrading to ensure the new access is appropriate.Finally, proxy model permission strings must be updated to use their own app_label. For example, for app.MyProxyModel inheriting from other_app.ConcreteModel, update user.has_perm('other_app.add_myproxymodel') to user.has_perm('app.add_myproxymodel').Form Media assets are now merged using a topological sort algorithm, as the old pairwise merging algorithm is insufficient for some cases. CSS and JavaScript files which don t include their dependencies may now be sorted incorrectly (where the old algorithm produced results correctly by coincidence).Audit all Media classes for any missing dependencies. For example, widgets depending on django.jQuery must specify js=['admin/js/jquery.init.js', ...] when declaring form media assets."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.2/#features-deprecated-in-2-2", "para": "A model s Meta.ordering affecting GROUP BY queries (such as .annotate().values()) is a common source of confusion. Such queries now issue a deprecation warning with the advice to add an order_by() to retain the current query. Meta.ordering will be ignored in such queries starting in Django 3.1."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1.8/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1.7/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1.6/#cve-2019-6975-memory-exhaustion-in-django-utils-numberformat-format", "para": "If django.utils.numberformat.format()   used by contrib.admin as well as the the floatformat, filesizeformat, and intcomma templates filters   received a Decimal with a large number of digits or a large exponent, it could lead to significant memory usage due to a call to '{:f}'.format().To avoid this, decimals with more than 200 digits are now formatted using scientific notation."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1.5/#cve-2019-3498-content-spoofing-possibility-in-the-default-404-page", "para": "An attacker could craft a malicious URL that could make spoofed content appear on the default page generated by the django.views.defaults.page_not_found() view.The URL path is no longer displayed in the default 404 template and the request_path context variable is now quoted to fix the issue for custom templates that use the path."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1.4/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1.3/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1.2/#cve-2018-16984-password-hash-disclosure-to-view-only-admin-users", "para": "If an admin user has the change permission to the user model, only part of the password hash is displayed in the change form. Admin users with the view (but not change) permission to the user model were displayed the entire hash. While it s typically infeasible to reverse a strong password hash, if your site uses weaker password hashing algorithms such as MD5 or SHA1, it could be a problem."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1.2/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1.1/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1/#python-compatibility", "para": "Django 2.1 supports Python 3.5, 3.6, and 3.7. Django 2.0 is the last version to support Python 3.4.  We highly recommend and only officially support the latest release of each series."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1/#what-s-new-in-django-2-1", "para": "A  view  permission is added to the model Meta.default_permissions. The new permissions will be created automatically when running migrate.This allows giving users read-only access to models in the admin. ModelAdmin.has_view_permission() is new. The implementation is backwards compatible in that there isn t a need to assign the  view  permission to allow users who have the  change  permission to edit objects.There are a couple of backwards incompatible considerations."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1/#backwards-incompatible-changes-in-2-1", "para": "This section describes changes that may be needed in third-party database backends.The end of upstream support for MySQL 5.5 is December 2018. Django 2.1 supports MySQL 5.6 and higher.The end of upstream support for PostgreSQL 9.3 is September 2018. Django 2.1 supports PostgreSQL 9.4 and higher.If you used bcrypt with Django 1.4 or 1.5 (before BCryptSHA256PasswordHasher was added in Django 1.6), you might have some passwords that use the BCryptPasswordHasher hasher.You can check if that s the case like this:If you want to continue to allow those passwords to be used, you ll have to define the PASSWORD_HASHERS setting (if you don t already) and include 'django.contrib.auth.hashers.BCryptPasswordHasher'.To fix the lack of <label> when using RadioSelect and CheckboxSelectMultiple with MultiWidget, the wrap_label context variable now appears as an attribute of each option. For example, in a custom input_option.html template, change {% if wrap_label %} to {% if widget.wrap_label %}.The cookies used for django.contrib.sessions, django.contrib.messages, and Django s CSRF protection now set the SameSite flag to Lax by default. Browsers that respect this flag won t send these cookies on cross-origin requests. If you rely on the old behavior, set the SESSION_COOKIE_SAMESITE and/or CSRF_COOKIE_SAMESITE setting to None.With the new  view  permission, existing custom admin forms may raise errors when a user doesn t have the change permission because the form might access nonexistent fields. Fix this by overriding ModelAdmin.get_form() and checking if the user has the  change  permissions and returning the default form if not:If you have a custom permission with a codename of the form view_<modelname>, the new view permission handling in the admin will allow view access to the changelist and detail pages for those models. If this is unwanted, you must change your custom permission codename."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1/#features-deprecated-in-2-1", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.1/#features-removed-in-2-1", "para": "These features have reached the end of their deprecation cycle and are removed in Django 2.1. See Features deprecated in 1.11 for details, including how to remove usage of these features."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.13/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.12/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.11/#cve-2019-6975-memory-exhaustion-in-django-utils-numberformat-format", "para": "If django.utils.numberformat.format()   used by contrib.admin as well as the the floatformat, filesizeformat, and intcomma templates filters   received a Decimal with a large number of digits or a large exponent, it could lead to significant memory usage due to a call to '{:f}'.format().To avoid this, decimals with more than 200 digits are now formatted using scientific notation."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.10/#cve-2019-3498-content-spoofing-possibility-in-the-default-404-page", "para": "An attacker could craft a malicious URL that could make spoofed content appear on the default page generated by the django.views.defaults.page_not_found() view.The URL path is no longer displayed in the default 404 template and the request_path context variable is now quoted to fix the issue for custom templates that use the path."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.9/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.8/#cve-2018-14574-open-redirect-possibility-in-commonmiddleware", "para": "If the CommonMiddleware and the APPEND_SLASH setting are both enabled, and if the project has a URL pattern that accepts any path ending in a slash (many content management systems have such a pattern), then a request to a maliciously crafted URL of that site could lead to a redirect to another site, enabling phishing and other attacks.CommonMiddleware now escapes leading slashes to prevent redirects to other domains."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.8/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.7/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.6/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.5/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.4/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.3/#cve-2018-7536-denial-of-service-possibility-in-urlize-and-urlizetrunc-template-filters", "para": "The django.utils.html.urlize() function was extremely slow to evaluate certain inputs due to catastrophic backtracking vulnerabilities in two regular expressions. The urlize() function is used to implement the urlize and urlizetrunc template filters, which were thus vulnerable.The problematic regular expressions are replaced with parsing logic that behaves similarly."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.3/#cve-2018-7537-denial-of-service-possibility-in-truncatechars-html-and-truncatewords-html-template-filters", "para": "If django.utils.text.Truncator s chars() and words() methods were passed the html=True argument, they were extremely slow to evaluate certain inputs due to a catastrophic backtracking vulnerability in a regular expression. The chars() and words() methods are used to implement the truncatechars_html and truncatewords_html template filters, which were thus vulnerable.The backtracking problem in the regular expression is fixed."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.3/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.2/#cve-2018-6188-information-leakage-in-authenticationform", "para": "A regression in Django 1.11.8 made AuthenticationForm run its confirm_login_allowed() method even if an incorrect password is entered. This can leak information about a user, depending on what messages confirm_login_allowed() raises. If confirm_login_allowed() isn t overridden, an attacker enter an arbitrary username and see if that user has been set to is_active=False. If confirm_login_allowed() is overridden, more sensitive details could be leaked.This issue is fixed with the caveat that AuthenticationForm can no longer raise the  This account is inactive.  error if the authentication backend rejects inactive users (the default authentication backend, ModelBackend, has done that since Django 1.10). This issue will be revisited for Django 2.1 as a fix to address the caveat will likely be too invasive for inclusion in older versions."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.2/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0.1/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0/#python-compatibility", "para": "Django 2.0 supports Python 3.4, 3.5, 3.6, and 3.7. We highly recommend and only officially support the latest release of each series.The Django 1.11.x series is the last to support Python 2.7.Django 2.0 will be the last release series to support Python 3.4. If you plan a deployment of Python 3.4 beyond the end-of-life for Django 2.0 (April 2019), stick with Django 1.11 LTS (supported until April 2020) instead. Note, however, that the end-of-life for Python 3.4 is March 2019."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0/#third-party-library-support-for-older-version-of-django", "para": "Following the release of Django 2.0, we suggest that third-party app authors drop support for all versions of Django prior to 1.11. At that time, you should be able to run your package s tests using python -Wd so that deprecation warnings do appear. After making the deprecation warning fixes, your app should be compatible with Django 2.0."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0/#what-s-new-in-django-2-0", "para": "The new django.urls.path() function allows a simpler, more readable URL routing syntax. For example, this example from previous Django releases:could be written as:The new syntax supports type coercion of URL parameters. In the example, the view will receive the year keyword argument as an integer rather than as a string. Also, the URLs that will match are slightly less constrained in the rewritten example. For example, the year 10000 will now match since the year integers aren t constrained to be exactly four digits long as they are in the regular expression.The django.conf.urls.url() function from previous versions is now available as django.urls.re_path(). The old location remains for backwards compatibility, without an imminent deprecation. The old django.conf.urls.include() function is now importable from django.urls so you can use from django.urls import include, path, re_path in your URLconfs.The URL dispatcher document is rewritten to feature the new syntax and provide more details.The admin is now responsive and supports all major mobile devices. Older browsers may experience varying levels of graceful degradation.The new Window expression allows adding an OVER clause to querysets. You can use window functions and aggregate functions in the expression."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0/#backwards-incompatible-changes-in-2-0", "para": "To support native Python 2 strings, older Django versions had to accept both bytestrings and unicode strings. Now that Python 2 support is dropped, bytestrings should only be encountered around input/output boundaries (handling of binary fields or HTTP streams, for example). You might have to update your code to limit bytestring usage to a minimum, as Django no longer accepts bytestrings in certain code paths. Python s -b option may help detect that mistake in your code.For example, reverse() now uses str() instead of force_text() to coerce the args and kwargs it receives, prior to their placement in the URL. For bytestrings, this creates a string with an undesired b prefix as well as additional quotes (str(b'foo') is \"b'foo'\"). To adapt, call decode() on the bytestring before passing it to reverse().This section describes changes that may be needed in third-party database backends.The end of upstream support for Oracle 11.2 is Dec. 2020. Django 1.11 will be supported until April 2020 which almost reaches this date. Django 2.0 officially supports Oracle 12.1+.MySQL s default isolation level, repeatable read, may cause data loss in typical Django usage. To prevent that and for consistency with other databases, the default isolation level is now read committed. You can use the DATABASES setting to use a different isolation level, if needed.A migration for django.contrib.auth.models.User.last_name is included. If you have a custom user model inheriting from AbstractUser, you ll need to generate and apply a database migration for your user model.If you want to preserve the 30 character limit for last names, use a custom form:If you wish to keep this restriction in the admin when editing users, set UserAdmin.form to use this form:Calling QuerySet.reverse() or last() on a sliced queryset leads to unexpected results due to the slice being applied after reordering. This is now prohibited, e.g.:To help prevent runtime errors due to incorrect ordering of form field arguments, optional arguments of built-in form fields are no longer accepted as positional arguments. For example:raises an exception and should be replaced with:call_command() now validates that the argument parser of the command being called defines all of the options passed to call_command().For custom management commands that use options not created using parser.add_argument(), add a stealth_options attribute on the command:For example:raises an exception and should be replaced with:This will appear as a backwards-incompatible change (IntegrityError: FOREIGN KEY constraint failed) if attempting to save an existing model instance that s violating a foreign key constraint.Foreign keys are now created with DEFERRABLE INITIALLY DEFERRED instead of DEFERRABLE IMMEDIATE. Thus, tables may need to be rebuilt to recreate foreign keys with the new definition, particularly if you re using a pattern like this:If you don t recreate the foreign key as DEFERRED, the first create() would fail now that foreign key constraints are enforced.Backup your database first! After upgrading to Django 2.0, you can then rebuild tables using a script similar to this:This script hasn t received extensive testing and needs adaption for various cases such as multiple databases. Feel free to contribute improvements.In addition, because of a table alteration limitation of SQLite, it s prohibited to perform RenameModel and RenameField operations on models or fields referenced by other models in a transaction. In order to allow migrations containing these operations to be applied, you must set the Migration.atomic attribute to False.The SessionAuthenticationMiddleware class is removed. It provided no functionality since session authentication is unconditionally enabled in Django 1.10.The default HTTP error handlers (handler404, etc.) are now callables instead of dotted Python path strings. Django favors callable references since they provide better performance and debugging experience.RedirectView no longer silences NoReverseMatch if the pattern_name doesn t exist.When USE_L10N is off, FloatField and DecimalField now respect DECIMAL_SEPARATOR and THOUSAND_SEPARATOR during validation. For example, with the settings:an input of \"1.345\" is now converted to 1345 instead of 1.345.Subclasses of AbstractBaseUser are no longer required to implement get_short_name() and get_full_name(). (The base implementations that raise NotImplementedError are removed.) django.contrib.admin uses these methods if implemented but doesn t require them. Third-party apps that use these methods may want to adopt a similar approach.The FIRST_DAY_OF_WEEK and NUMBER_GROUPING format settings are now kept as integers in JavaScript and JSON i18n view outputs.assertNumQueries() now ignores connection configuration queries. Previously, if a test opened a new database connection, those queries could be included as part of the assertNumQueries() count.The default size of the Oracle test tablespace is increased from 20M to 50M and the default autoextend size is increased from 10M to 25M.To improve performance when streaming large result sets from the database, QuerySet.iterator() now fetches 2000 rows at a time instead of 100. The old behavior can be restored using the chunk_size parameter. For example:Providing unknown package names in the packages argument of the JavaScriptCatalog view now raises ValueError instead of passing silently.A model instance s primary key now appears in the default Model.__str__() method, e.g. Question object (1).makemigrations now detects changes to the model field limit_choices_to option. Add this to your existing migrations or accept an auto-generated migration for fields that use it.Performing queries that require automatic spatial transformations now raises NotImplementedError on MySQL instead of silently using non-transformed geometries.django.core.exceptions.DjangoRuntimeWarning is removed. It was only used in the cache backend as an intermediate class in CacheKeyWarning s inheritance of RuntimeWarning.Renamed BaseExpression._output_field to output_field. You may need to update custom expressions.In older versions, forms and formsets combine their Media with widget Media by concatenating the two. The combining now tries to preserve the relative order of elements in each list. MediaOrderConflictWarning is issued if the order can t be preserved.django.contrib.gis.gdal.OGRException is removed. It s been an alias for GDALException since Django 1.8.Support for GEOS 3.3.x is dropped.The way data is selected for GeometryField is changed to improve performance, and in raw SQL queries, those fields must now be wrapped in connection.ops.select. See the Raw queries note in the GIS tutorial for an example."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0/#features-deprecated-in-2-0", "para": "The context argument of Field.from_db_value() and Expression.convert_value() is unused as it s always an empty dictionary. The signature of both methods is now:instead of:Support for the old signature in custom fields and expressions remains until Django 3.0."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/2.0/#features-removed-in-2-0", "para": "These features have reached the end of their deprecation cycle and are removed in Django 2.0.See Features deprecated in 1.9 for details on these changes, including how to remove usage of these features.See Features deprecated in 1.10 for details on these changes."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.20/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.19/#cve-2019-6975-memory-exhaustion-in-django-utils-numberformat-format", "para": "If django.utils.numberformat.format()   used by contrib.admin as well as the the floatformat, filesizeformat, and intcomma templates filters   received a Decimal with a large number of digits or a large exponent, it could lead to significant memory usage due to a call to '{:f}'.format().To avoid this, decimals with more than 200 digits are now formatted using scientific notation."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.18/#cve-2019-3498-content-spoofing-possibility-in-the-default-404-page", "para": "An attacker could craft a malicious URL that could make spoofed content appear on the default page generated by the django.views.defaults.page_not_found() view.The URL path is no longer displayed in the default 404 template and the request_path context variable is now quoted to fix the issue for custom templates that use the path."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.17/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.16/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.15/#cve-2018-14574-open-redirect-possibility-in-commonmiddleware", "para": "If the CommonMiddleware and the APPEND_SLASH setting are both enabled, and if the project has a URL pattern that accepts any path ending in a slash (many content management systems have such a pattern), then a request to a maliciously crafted URL of that site could lead to a redirect to another site, enabling phishing and other attacks.CommonMiddleware now escapes leading slashes to prevent redirects to other domains."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.14/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.13/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.12/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.11/#cve-2018-7536-denial-of-service-possibility-in-urlize-and-urlizetrunc-template-filters", "para": "The django.utils.html.urlize() function was extremely slow to evaluate certain inputs due to catastrophic backtracking vulnerabilities in two regular expressions. The urlize() function is used to implement the urlize and urlizetrunc template filters, which were thus vulnerable.The problematic regular expressions are replaced with parsing logic that behaves similarly."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.11/#cve-2018-7537-denial-of-service-possibility-in-truncatechars-html-and-truncatewords-html-template-filters", "para": "If django.utils.text.Truncator s chars() and words() methods were passed the html=True argument, they were extremely slow to evaluate certain inputs due to a catastrophic backtracking vulnerability in a regular expression. The chars() and words() methods are used to implement the truncatechars_html and truncatewords_html template filters, which were thus vulnerable.The backtracking problem in the regular expression is fixed."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.10/#cve-2018-6188-information-leakage-in-authenticationform", "para": "A regression in Django 1.11.8 made AuthenticationForm run its confirm_login_allowed() method even if an incorrect password is entered. This can leak information about a user, depending on what messages confirm_login_allowed() raises. If confirm_login_allowed() isn t overridden, an attacker enter an arbitrary username and see if that user has been set to is_active=False. If confirm_login_allowed() is overridden, more sensitive details could be leaked.This issue is fixed with the caveat that AuthenticationForm can no longer raise the  This account is inactive.  error if the authentication backend rejects inactive users (the default authentication backend, ModelBackend, has done that since Django 1.10). This issue will be revisited for Django 2.1 as a fix to address the caveat will likely be too invasive for inclusion in older versions."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.10/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.9/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.8/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.7/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.6/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.5/#cve-2017-12794-possible-xss-in-traceback-section-of-technical-500-debug-page", "para": "In older versions, HTML autoescaping was disabled in a portion of the template for the technical 500 debug page. Given the right circumstances, this allowed a cross-site scripting attack. This vulnerability shouldn t affect most production sites since you shouldn t run with DEBUG = True (which makes this page accessible) in your production settings."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.5/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.4/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.3/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.2/#minor-feature", "para": "The new LiveServerTestCase.port attribute reallows the use case of binding to a specific port following the bind to port zero change in Django 1.11."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.2/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.1/#allowed-disabling-server-side-cursors-on-postgresql", "para": "The change in Django 1.11 to make QuerySet.iterator() use server-side cursors on PostgreSQL prevents running Django with pgBouncer in transaction pooling mode. To reallow that, use the DISABLE_SERVER_SIDE_CURSORS setting in DATABASES.See Transaction pooling and server-side cursors for more discussion."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11.1/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11/#python-compatibility", "para": "Django 1.11 requires Python 2.7, 3.4, 3.5, 3.6, or 3.7 (as of 1.11.17). We highly recommend and only officially support the latest release of each series.The Django 1.11.x series is the last to support Python 2. The next major release, Django 2.0, will only support Python 3.4+."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11/#deprecating-warnings-are-no-longer-loud-by-default", "para": "Unlike older versions of Django, Django s own deprecation warnings are no longer displayed by default. This is consistent with Python s default behavior.This change allows third-party apps to support both Django 1.11 LTS and Django 1.8 LTS without having to add code to avoid deprecation warnings.Following the release of Django 2.0, we suggest that third-party app authors drop support for all versions of Django prior to 1.11. At that time, you should be able run your package s tests using python -Wd so that deprecation warnings do appear. After making the deprecation warning fixes, your app should be compatible with Django 2.0."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11/#what-s-new-in-django-1-11", "para": "The new django.db.models.indexes module contains classes which ease creating database indexes. Indexes are added to models using the Meta.indexes option.The Index class creates a b-tree index, as if you used db_index on the model field or index_together on the model Meta class. It can be subclassed to support different index types, such as GinIndex. It also allows defining the order (ASC/DESC) for the columns of the index.To ease customizing widgets, form widget rendering is now done using the template system rather than in Python. See The form rendering API.You may need to adjust any custom widgets that you ve written for a few backwards incompatible changes.The new Subquery and Exists database expressions allow creating explicit subqueries. Subqueries may refer to fields from the outer queryset using the OuterRef class."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11/#backwards-incompatible-changes-in-1-11", "para": "This section describes changes that may be needed in third-party database backends.Upstream support for PostgreSQL 9.2 ends in September 2017. As a consequence, Django 1.11 sets PostgreSQL 9.3 as the minimum version it officially supports.Support for PostGIS 2.0 is also removed as PostgreSQL 9.2 is the last version to support it.Also, the minimum supported version of psycopg2 is increased from 2.4.5 to 2.5.4.Rather than taking a port range and iterating to find a free port, LiveServerTestCase binds to port zero and relies on the operating system to assign a free port. The DJANGO_LIVE_TEST_SERVER_ADDRESS environment variable is no longer used, and as it s also no longer used, the manage.py test --liveserver option is removed.If you need to bind LiveServerTestCase to a specific port, use the port attribute added in Django 1.11.2.LoginView, LogoutView (and the deprecated function-based equivalents), and set_language() protect users from being redirected to non-HTTPS next URLs when the app is running over HTTPS.To prevent typos from passing silently, get_or_create() and update_or_create() check that their arguments are model fields. This should be backwards-incompatible only in the fact that it might expose a bug in your project.To simplify Django s timezone handling, pytz is now a required dependency. It s automatically installed along with Django.Support for settings.TIME_ZONE = None is removed as the behavior isn t commonly used and is questionably useful. If you want to automatically detect the timezone based on the system timezone, you can use tzlocal:This works similar to settings.TIME_ZONE = None except that it also sets os.environ['TZ']. Let us know if there s a use case where you find you can t adapt your code to set a TIME_ZONE.<p class=\"help\"> is replaced with a <div> tag to allow including lists inside help text.Read-only fields are wrapped in <div class=\"readonly\">...</div> instead of <p>...</p> to allow any kind of HTML as the field s content.Some undocumented classes in django.forms.widgets are removed:The undocumented Select.render_option() method is removed.The Widget.format_output() method is removed. Use a custom widget template instead.Some widget values, such as <select> options, are now localized if settings.USE_L10N=True. You could revert to the old behavior with custom widget templates that uses the localize template tag to turn off localization.For compatibility with multiple template engines, django.template.backends.django.Template.render() (returned from high-level template loader APIs such as loader.get_template()) must receive a dictionary of context rather than Context or RequestContext. If you were passing either of the two classes, pass a dictionary instead   doing so is backwards-compatible with older versions of Django.To improve the speed of applying migrations, rendering of related models is delayed until an operation that needs them (e.g. RunPython). If you have a custom operation that works with model classes or model instances from the from_state argument in database_forwards() or database_backwards(), you must render model states using the clear_delayed_apps_cache() method as described in writing your own migration operation.The change to make QuerySet.iterator() use server-side cursors on PostgreSQL prevents running Django with pgBouncer in transaction pooling mode. To reallow that, use the DISABLE_SERVER_SIDE_CURSORS setting (added in Django 1.11.1) in DATABASES.See Transaction pooling and server-side cursors for more discussion.If no items in the feed have a pubdate or updateddate attribute, SyndicationFeed.latest_post_date() now returns the current UTC date/time, instead of a datetime without any timezone information.CSRF failures are logged to the django.security.csrf logger instead of django.request.ALLOWED_HOSTS validation is no longer disabled when running tests. If your application includes tests with custom host names, you must include those host names in ALLOWED_HOSTS. See Tests and multiple host names.Using a foreign key s id (e.g. 'field_id') in ModelAdmin.list_display displays the related object s ID. Remove the _id suffix if you want the old behavior of the string representation of the object.In model forms, CharField with null=True now saves NULL for blank values instead of empty strings.On Oracle, Model.validate_unique() no longer checks empty strings for uniqueness as the database interprets the value as NULL.If you subclass AbstractUser and override clean(), be sure it calls super(). BaseUserManager.normalize_email() is called in a new AbstractUser.clean() method so that normalization is applied in cases like model form validation.EmailField and URLField no longer accept the strip keyword argument. Remove it because it doesn t have an effect in older versions of Django as these fields always strip whitespace.The checked and selected attribute rendered by form widgets now uses HTML5 boolean syntax rather than XHTML s checked='checked' and selected='selected'.RelatedManager.add(), remove(), clear(), and set() now clear the prefetch_related() cache.To prevent possible loss of saved settings, setup_test_environment() now raises an exception if called a second time before calling teardown_test_environment().The undocumented DateTimeAwareJSONEncoder alias for DjangoJSONEncoder (renamed in Django 1.0) is removed.The cached template loader is now enabled if OPTIONS['loaders'] isn t specified and OPTIONS['debug'] is False (the latter option defaults to the value of DEBUG). This could be backwards-incompatible if you have some template tags that aren t thread safe.The prompt for stale content type deletion no longer occurs after running the migrate command. Use the new remove_stale_contenttypes command instead.The admin s widget for IntegerField uses type=\"number\" rather than type=\"text\".Conditional HTTP headers are now parsed and compared according to the RFC 7232 Conditional Requests specification rather than the older RFC 2616.patch_response_headers() no longer adds a Last-Modified header. According to the RFC 7234#section-4.2.2, this header is useless alongside other caching headers that provide an explicit expiration time, e.g. Expires or Cache-Control. UpdateCacheMiddleware and add_never_cache_headers() call patch_response_headers() and therefore are also affected by this change.In the admin templates, <p class=\"help\"> is replaced with a <div> tag to allow including lists inside help text.ConditionalGetMiddleware no longer sets the Date header as Web servers set that header. It also no longer sets the Content-Length header as this is now done by CommonMiddleware.If you have a middleware that modifies a response s content and appears before CommonMiddleware in the MIDDLEWARE or MIDDLEWARE_CLASSES settings, you must reorder your middleware so that responses aren t modified after Content-Length is set, or have the response modifying middleware reset the Content-Length header.get_model() and get_models() now raise AppRegistryNotReady if they re called before models of all applications have been loaded. Previously they only required the target application s models to be loaded and thus could return models without all their relations set up. If you need the old behavior of get_model(), set the require_ready argument to False.The unused BaseCommand.can_import_settings attribute is removed.The undocumented django.utils.functional.lazy_property is removed.For consistency with non-multipart requests, MultiPartParser.parse() now leaves request.POST immutable. If you re modifying that QueryDict, you must now first copy it, e.g. request.POST.copy().Support for cx_Oracle < 5.2 is removed.Support for IPython < 1.0 is removed from the shell command.The signature of private API Widget.build_attrs() changed from extra_attrs=None, **kwargs to base_attrs, extra_attrs=None.File-like objects (e.g., StringIO and BytesIO) uploaded to an ImageField using the test client now require a name attribute with a value that passes the validate_image_file_extension validator. See the note in Client.post().FileField now moves rather than copies the file it receives. With the default file upload settings, files larger than FILE_UPLOAD_MAX_MEMORY_SIZE now have the same permissions as temporary files (often 0o600) rather than the system s standard umask (often 0o6644). Set the FILE_UPLOAD_PERMISSIONS if you need the same permission regardless of file size."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.11/#features-deprecated-in-1-11", "para": "Use django.urls.reverse() instead. For example:becomes:"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.8/#cve-2017-12794-possible-xss-in-traceback-section-of-technical-500-debug-page", "para": "In older versions, HTML autoescaping was disabled in a portion of the template for the technical 500 debug page. Given the right circumstances, this allowed a cross-site scripting attack. This vulnerability shouldn t affect most production sites since you shouldn t run with DEBUG = True (which makes this page accessible) in your production settings."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.7/#cve-2017-7233-open-redirect-and-possible-xss-attack-via-user-supplied-numeric-redirect-urls", "para": "Django relies on user input in some cases  (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security check for these redirects (namely django.utils.http.is_safe_url()) considered some numeric URLs (e.g. http:999999999)  safe  when they shouldn t be.Also, if a developer relies on is_safe_url() to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.7/#cve-2017-7234-open-redirect-vulnerability-in-django-views-static-serve", "para": "A maliciously crafted URL to a Django site using the serve() view could redirect to any other domain. The view no longer does any redirects as they don t provide any known, useful functionality.Note, however, that this view has always carried a warning that it is not hardened for production use and should be used only as a development aid."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.7/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.6/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.5/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.4/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.3/#user-with-hardcoded-password-created-when-running-tests-on-oracle", "para": "When running tests with an Oracle database, Django creates a temporary database user. In older versions, if a password isn t manually specified in the database settings TEST dictionary, a hardcoded password is used. This could allow an attacker with network access to the database server to connect.This user is usually dropped after the test suite completes, but not when using the manage.py test --keepdb option or if the user has an active session (such as an attacker s connection).A randomly generated password is now used for each test run."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.3/#dns-rebinding-vulnerability-when-debug-true", "para": "Older versions of Django don t validate the Host header against settings.ALLOWED_HOSTS when settings.DEBUG=True. This makes them vulnerable to a DNS rebinding attack.While Django doesn t ship a module that allows remote code execution, this is at least a cross-site scripting vector, which could be quite serious if developers load a copy of the production database in development or connect to some production services for which there s no development instance, for example. If a project uses a package like the django-debug-toolbar, then the attacker could execute arbitrary SQL, which could be especially bad if the developers connect to the database with a superuser account.settings.ALLOWED_HOSTS is now validated regardless of DEBUG. For convenience, if ALLOWED_HOSTS is empty and DEBUG=True, the following variations of localhost are allowed ['localhost', '127.0.0.1', '::1']. If your local settings file has your production ALLOWED_HOSTS value, you must now omit it to get those fallback values."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.3/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.2/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10.1/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10/#python-compatibility", "para": "Like Django 1.9, Django 1.10 requires Python 2.7, 3.4, or 3.5. We highly recommend and only officially support the latest release of each series."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10/#what-s-new-in-django-1-10", "para": "django.contrib.postgres now includes a collection of database functions to allow the use of the full text search engine. You can search across multiple fields in your relational database, combine the searches with other lookups, use different language configurations and weightings, and rank the results by relevance.It also now includes trigram support, using the trigram_similar lookup, and the TrigramSimilarity and TrigramDistance expressions.A new style of middleware is introduced to solve the lack of strict request/response layering of the old-style of middleware described in DEP 0005. You ll need to adapt old, custom middleware and switch from the MIDDLEWARE_CLASSES setting to the new MIDDLEWARE setting to take advantage of the improvements.The User model in django.contrib.auth originally only accepted ASCII letters and numbers in usernames. Although it wasn t a deliberate choice, Unicode characters have always been accepted when using Python 3.The username validator now explicitly accepts Unicode characters by default on Python 3 only. This default behavior can be overridden by changing the username_validator attribute of the User model, or to any proxy of that model, using either ASCIIUsernameValidator or UnicodeUsernameValidator. Custom user models may also use those validators."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10/#backwards-incompatible-changes-in-1-10", "para": "WarningIn addition to the changes outlined in this section, be sure to review the Features removed in 1.10 for the features that have reached the end of their deprecation cycle and therefore been removed. If you haven t updated your code within the deprecation timeline for a given feature, its removal may appear as a backwards incompatible change.Django 1.8 added validation for non-relational fields in select_related():But it didn t prohibit nested non-relation fields as it does now:Before Django 1.10, the get_fields() method returned different reverse fields when called on a proxy model compared to its proxied concrete class. This inconsistency was fixed by returning the full set of fields pointing to a concrete class or one of its proxies in both cases.A migration for django.contrib.auth.models.User.username is included. If you have a custom user model inheriting from AbstractUser, you ll need to generate and apply a database migration for your user model.We considered an increase to 254 characters to more easily allow the use of email addresses (which are limited to 254 characters) as usernames but rejected it due to a MySQL limitation.  When using the utf8mb4 encoding (recommended for proper Unicode support), MySQL can only create unique indexes with 191 characters by default. Therefore, if you need a longer length, please use a custom user model.If you want to preserve the 30 character limit for usernames, use a custom form when creating a user or changing usernames:If you wish to keep this restriction in the admin, set UserAdmin.add_form to use this form:Upstream support for PostgreSQL 9.1 ends in September 2016. As a consequence, Django 1.10 sets PostgreSQL 9.2 as the minimum version it officially supports.Request and response handling of the runserver command is sent to the django.server logger instead of to sys.stderr. If you disable Django s logging configuration or override it with your own, you ll need to add the appropriate logging configuration if you want to see that output:Since the introduction of migrations for the contrib apps in Django 1.8, the tables of these custom user test models were not created anymore making them unusable in a testing context.The apps registry is no longer auto-populated when unpickling models. This was added in Django 1.7.2 as an attempt to allow unpickling models outside of Django, such as in an RQ worker, without calling django.setup(), but it creates the possibility of a deadlock. To adapt your code in the case of RQ, you can provide your own worker script that calls django.setup().In older versions, assigning None to a non-nullable ForeignKey or OneToOneField raised ValueError('Cannot assign None: \"model.field\" does not allow null values.'). For consistency with other model fields which don t have a similar check, this check is removed.Django 0.90 stored passwords as unsalted MD5. Django 0.91 added support for salted SHA1 with automatic upgrade of passwords when a user logs in. Django 1.4 added PBKDF2 as the default password hasher.If you have an old Django project with MD5 or SHA1 (even salted) encoded passwords, be aware that these can be cracked fairly easily with today s hardware. To make Django users acknowledge continued use of weak hashers, the following hashers are removed from the default PASSWORD_HASHERS setting:Consider using a wrapped password hasher to strengthen the hashes in your database. If that s not feasible, add the PASSWORD_HASHERS setting to your project and add back any hashers that you need.You can check if your database has any of the removed hashers like this:If you have a custom field that implements either of these methods, register a custom lookup for it. For example:Two new settings help mitigate denial-of-service attacks via large requests:Applications that receive unusually large form posts may need to tune these settings."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10/#features-deprecated-in-1-10", "para": "Instead of assigning related objects using direct assignment:Use the set() method added in Django 1.9:This prevents confusion about an assignment resulting in an implicit save.The old, non-timezone-aware methods accessed_time(), created_time(), and modified_time() are deprecated in favor of the new get_*_time() methods.Third-party storage backends should implement the new methods and mark the old ones as deprecated. Until then, the new get_*_time() methods on the base Storage class convert datetimes from the old methods as required and emit a deprecation warning as they do so.Third-party storage backends may retain the old methods as long as they wish to support earlier versions of Django.CommaSeparatedIntegerField is deprecated in favor of CharField with the validate_comma_separated_integer_list() validator:If you re using Oracle, CharField uses a different database field  type (NVARCHAR2) than CommaSeparatedIntegerField (VARCHAR2). Depending on your database settings, this might imply a different encoding, and thus a different length (in bytes) for the same contents. If your stored values are longer than the 4000 byte limit of NVARCHAR2, you should use TextField (NCLOB) instead. In this case, if you have any queries that group by the field (e.g. annotating the model with an aggregation or using distinct()) you ll need to change them (to defer the field).Assume the following models:In older versions, default_related_name couldn t be used as a query lookup. This is fixed and support for the old lookup name is deprecated. For example, since default_related_name is set in model Bar, instead of using the model name bar as the lookup:use the default_related_name bars:The search lookup, which supports MySQL only and is extremely limited in features, is deprecated. Replace it with a custom lookup:The is_authenticated() and is_anonymous() methods of AbstractBaseUser and AnonymousUser classes are now properties. They will still work as methods until Django 2.0, but all usage in Django now uses attribute access.For example, if you use AuthenticationMiddleware and want to know whether the user is currently logged-in you would use:instead of request.user.is_authenticated().This change avoids accidental information leakage if you forget to call the method, e.g.:If you override these methods in a custom user model, you must change them to properties or attributes.Django uses a CallableBool object to allow these attributes to work as both a property and a method. Thus, until the deprecation period ends, you cannot compare these properties using the is operator. That is, the following won t work:If you defined a custom manager class available through prefetch_related() you must make sure it defines a _apply_rel_filters() method.This method must accept a QuerySet instance as its single argument and return a filtered version of the queryset for the model instance the manager is bound to.The mark_for_escaping() function and the classes it uses: EscapeData, EscapeBytes, EscapeText, EscapeString, and EscapeUnicode are deprecated.As a result, the  lazy  behavior of the escape filter (where it would always be applied as the last filter no matter where in the filter chain it appeared) is deprecated. The filter will change to immediately apply conditional_escape() in Django 2.0.Manager.use_for_related_fields is deprecated in favor of setting Meta.base_manager_name on the model.Model Manager inheritance will follow MRO inheritance rules in Django 2.0, changing the current behavior where managers defined on non-abstract base classes aren t inherited by child classes. A deprecating warning with instructions on how to adapt your code is raised if you have any affected managers. You ll either redeclare a manager from an abstract model on the child class to override the manager from the concrete model, or you ll set the model s Meta.manager_inheritance_from_future=True option to opt-in to the new inheritance behavior.During the deprecation period, use_for_related_fields will be honored and raise a warning, even if a base_manager_name is set. This allows third-party code to preserve legacy behavior while transitioning to the new API. The warning can be silenced by setting silence_use_for_related_fields_deprecation=True on the manager."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.10/#features-removed-in-1-10", "para": "These features have reached the end of their deprecation cycle and are removed in Django 1.10. See Features deprecated in 1.8 for details, including how to remove usage of these features."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.13/#cve-2017-7233-open-redirect-and-possible-xss-attack-via-user-supplied-numeric-redirect-urls", "para": "Django relies on user input in some cases  (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security check for these redirects (namely django.utils.http.is_safe_url()) considered some numeric URLs (e.g. http:999999999)  safe  when they shouldn t be.Also, if a developer relies on is_safe_url() to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.13/#cve-2017-7234-open-redirect-vulnerability-in-django-views-static-serve", "para": "A maliciously crafted URL to a Django site using the serve() view could redirect to any other domain. The view no longer does any redirects as they don t provide any known, useful functionality.Note, however, that this view has always carried a warning that it is not hardened for production use and should be used only as a development aid."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.13/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.12/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.11/#user-with-hardcoded-password-created-when-running-tests-on-oracle", "para": "When running tests with an Oracle database, Django creates a temporary database user. In older versions, if a password isn t manually specified in the database settings TEST dictionary, a hardcoded password is used. This could allow an attacker with network access to the database server to connect.This user is usually dropped after the test suite completes, but not when using the manage.py test --keepdb option or if the user has an active session (such as an attacker s connection).A randomly generated password is now used for each test run."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.11/#dns-rebinding-vulnerability-when-debug-true", "para": "Older versions of Django don t validate the Host header against settings.ALLOWED_HOSTS when settings.DEBUG=True. This makes them vulnerable to a DNS rebinding attack.While Django doesn t ship a module that allows remote code execution, this is at least a cross-site scripting vector, which could be quite serious if developers load a copy of the production database in development or connect to some production services for which there s no development instance, for example. If a project uses a package like the django-debug-toolbar, then the attacker could execute arbitrary SQL, which could be especially bad if the developers connect to the database with a superuser account.settings.ALLOWED_HOSTS is now validated regardless of DEBUG. For convenience, if ALLOWED_HOSTS is empty and DEBUG=True, the following variations of localhost are allowed ['localhost', '127.0.0.1', '::1']. If your local settings file has your production ALLOWED_HOSTS value, you must now omit it to get those fallback values."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.10/#csrf-protection-bypass-on-a-site-with-google-analytics", "para": "An interaction between Google Analytics and Django s cookie parsing could allow an attacker to set arbitrary cookies leading to a bypass of CSRF protection.The parser for request.COOKIES is simplified to better match the behavior of browsers and to mitigate this attack. request.COOKIES may now contain cookies that are invalid according to RFC 6265 but are possible to set via document.cookie."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.9/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.8/#xss-in-admin-s-add-change-related-popup", "para": "Unsafe usage of JavaScript s Element.innerHTML could result in XSS in the admin s add/change related popup. Element.textContent is now used to prevent execution of the data.The debug view also used innerHTML. Although a security issue wasn t identified there, out of an abundance of caution it s also updated to use textContent."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.8/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.7/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.6/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.5/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.3/#cve-2016-2512-malicious-redirect-and-possible-xss-attack-via-user-supplied-redirect-urls-containing-basic-auth", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security check for these redirects (namely django.utils.http.is_safe_url()) considered some URLs with basic authentication credentials  safe  when they shouldn t be.For example, a URL like http://mysite.example.com\\@attacker.com would be considered safe if the request s host is http://mysite.example.com, but redirecting to this URL sends the user to attacker.com.Also, if a developer relies on is_safe_url() to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.3/#cve-2016-2513-user-enumeration-through-timing-difference-on-password-hasher-work-factor-upgrade", "para": "In each major version of Django since 1.6, the default number of iterations for the PBKDF2PasswordHasher and its subclasses has increased. This improves the security of the password as the speed of hardware increases, however, it also creates a timing difference between a login request for a user with a password encoded in an older number of iterations and login request for a nonexistent user (which runs the default hasher s default number of iterations since Django 1.6).This only affects users who haven t logged in since the iterations were increased. The first time a user logs in after an iterations increase, their password is updated with the new iterations and there is no longer a timing difference.The new BasePasswordHasher.harden_runtime() method allows hashers to bridge the runtime gap between the work factor (e.g. iterations) supplied in existing encoded passwords and the default work factor of the hasher. This method is implemented for PBKDF2PasswordHasher  and BCryptPasswordHasher. The number of rounds for the latter hasher hasn t changed since Django 1.4, but some projects may subclass it and increase the work factor as needed.A warning will be emitted for any third-party password hashers that don t implement a harden_runtime() method.If you have different password hashes in your database (such as SHA1 hashes from users who haven t logged in since the default hasher switched to PBKDF2 in Django 1.4), the timing difference on a login request for these users may be even greater and this fix doesn t remedy that difference (or any difference when changing hashers). You may be able to upgrade those hashes to prevent a timing attack for that case."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.3/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.2/#security-issue-user-with-change-but-not-add-permission-can-create-objects-for-modeladmins-with-save-as-true", "para": "If a ModelAdmin uses save_as=True (not the default), the admin provides an option when editing objects to  Save as new . A regression in Django 1.9 prevented that form submission from raising a  Permission Denied  error for users without the  add  permission."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.2/#backwards-incompatible-change-py-tpl-files-rewritten-in-project-app-templates", "para": "The addition of some Django template language syntax to the default app template in Django 1.9 means those files now have some invalid Python syntax. This causes difficulties for packaging systems that unconditionally byte-compile *.py files.To remedy this, a .py-tpl suffix is now used for the project and app template files included in Django. The .py-tpl suffix is replaced with .py by the startproject and startapp commands. For example, a template with the filename manage.py-tpl will be created as manage.py.Please file a ticket if you have a custom project template containing .py-tpl files and find this behavior problematic."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.2/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9.1/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9/#python-compatibility", "para": "Django 1.9 requires Python 2.7, 3.4, or 3.5. We highly recommend and only officially support the latest release of each series.The Django 1.8 series is the last to support Python 3.2 and 3.3."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9/#what-s-new-in-django-1-9", "para": "The new on_commit() hook allows performing actions after a database transaction is successfully committed. This is useful for tasks such as sending notification emails, creating queued tasks, or invalidating caches.This functionality from the django-transaction-hooks package has been integrated into Django.Django now offers password validation to help prevent the usage of weak passwords by users. The validation is integrated in the included password change and reset forms and is simple to integrate in any other code. Validation is performed by one or more validators, configured in the new AUTH_PASSWORD_VALIDATORS setting.Four validators are included in Django, which can enforce a minimum length, compare the password to the user s attributes like their name, ensure passwords aren t entirely numeric, or check against an included list of common passwords. You can combine multiple validators, and some validators have custom configuration options. For example, you can choose to provide a custom list of common passwords. Each validator provides a help text to explain its requirements to the user.By default, no validation is performed and all passwords are accepted, so if you don t set AUTH_PASSWORD_VALIDATORS, you will not see any change. In new projects created with the default startproject template, a simple set of validators is enabled. To enable basic validation in the included auth forms for your project, you could set, for example:See Password validation for more details.Django now ships with the mixins AccessMixin, LoginRequiredMixin, PermissionRequiredMixin, and UserPassesTestMixin to provide the functionality of the django.contrib.auth.decorators for class-based views. These mixins have been taken from, or are at least inspired by, the django-braces project.There are a few differences between Django s and django-braces  implementation, though:The admin sports a modern, flat design with new SVG icons which look perfect on HiDPI screens. It still provides a fully-functional experience to YUI s A-grade browsers. Older browser may experience varying levels of graceful degradation.The test command now supports a --parallel option to run a project s tests in multiple processes in parallel.Each process gets its own database. You must ensure that different test cases don t access the same resources. For instance, test cases that touch the filesystem should create a temporary directory for their own use.This option is enabled by default for Django s own test suite provided:Initial migrations are now marked with an initial = True class attribute which allows migrate --fake-initial to more easily detect initial migrations.Added support for serialization of functools.partial and LazyObject instances.When supplying None as a value in MIGRATION_MODULES, Django will consider the app an app without migrations.When applying migrations, the  Rendering model states  step that s displayed when running migrate with verbosity 2 or higher now computes only the states for the migrations that have already been applied. The model states for migrations being applied are generated on demand, drastically reducing the amount of required memory.However, this improvement is not available when unapplying migrations and therefore still requires the precomputation and storage of the intermediate migration states.This improvement also requires that Django no longer supports mixed migration plans. Mixed plans consist of a list of migrations where some are being applied and others are being unapplied. This was never officially supported and never had a public API that supports this behavior.The squashmigrations command now supports specifying the starting migration from which migrations will be squashed."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9/#backwards-incompatible-changes-in-1-9", "para": "WarningIn addition to the changes outlined in this section, be sure to review the Features removed in 1.9 for the features that have reached the end of their deprecation cycle and therefore been removed. If you haven t updated your code within the deprecation timeline for a given feature, its removal may appear as a backwards incompatible change.A couple of new tests rely on the ability of the backend to introspect column defaults (returning the result as Field.default). You can set the can_introspect_default database feature to False if your backend doesn t implement this. You may want to review the implementation on the backends that Django includes for reference (#24245).Registering a global adapter or converter at the level of the DB-API module to handle time zone information of datetime values passed as query parameters or returned as query results on databases that don t support time zones is discouraged. It can conflict with other libraries.The recommended way to add a time zone to datetime values fetched from the database is to register a converter for DateTimeField in DatabaseOperations.get_db_converters().The needs_datetime_string_cast database feature was removed. Database backends that set it must register a converter instead, as explained above.The DatabaseOperations.value_to_db_<type>() methods were renamed to adapt_<type>field_value() to mirror the convert_<type>field_value() methods.To use the new date lookup, third-party database backends may need to implement the DatabaseOperations.datetime_cast_date_sql() method.The DatabaseOperations.time_extract_sql() method was added. It calls the existing date_extract_sql() method. This method is overridden by the SQLite backend to add time lookups (hour, minute, second) to TimeField, and may be needed by third-party database backends.The DatabaseOperations.datetime_cast_sql() method (not to be confused with DatabaseOperations.datetime_cast_date_sql() mentioned above) has been removed. This method served to format dates on Oracle long before 1.0, but hasn t been overridden by any core backend in years and hasn t been called anywhere in Django s code or tests.In order to support test parallelization, you must implement the DatabaseCreation._clone_test_db() method and set DatabaseFeatures.can_clone_databases = True. You may have to adjust DatabaseCreation.get_test_db_clone_settings().The default settings in django.conf.global_settings were a combination of lists and tuples. All settings that were formerly tuples are now lists.Django template loaders previously required an is_usable attribute to be defined. If a loader was configured in the template settings and this attribute was False, the loader would be silently ignored. In practice, this was only used by the egg loader to detect if setuptools was installed. The is_usable attribute is now removed and the egg loader instead fails at runtime if setuptools is not installed.Direct assignment of related objects in the ORM used to perform a clear() followed by a call to add(). This caused needlessly large data changes and prevented using the m2m_changed signal to track individual changes in many-to-many relations.Direct assignment now relies on the new set() method on related managers which by default only processes changes between the existing related set and the one that s newly assigned. The previous behavior can be restored by replacing direct assignment by a call to set() with the keyword argument clear=True.ModelForm, and therefore ModelAdmin, internally rely on direct assignment for many-to-many relations and as a consequence now use the new behavior.When using the filesystem.Loader or app_directories.Loader template loaders, earlier versions of Django raised a TemplateDoesNotExist error if a template source existed but was unreadable. This could happen under many circumstances, such as if Django didn t have permissions to open the file, or if the template source was a directory. Now, Django only silences the exception if the template source does not exist. All other situations result in the original IOError being raised.Relative redirects are no longer converted to absolute URIs. RFC 2616 required the Location header in redirect responses to be an absolute URI, but it has been superseded by RFC 7231 which allows relative URIs in Location, recognizing the actual practice of user agents, almost all of which support them.Consequently, the expected URLs passed to assertRedirects should generally no longer include the scheme and domain part of the URLs. For example, self.assertRedirects(response, 'http://testserver/some-url/') should be replaced by self.assertRedirects(response, '/some-url/') (unless the redirection specifically contained an absolute URL, of course).In the rare case that you need the old behavior (discovered with an ancient version of Apache with mod_scgi that interprets a relative redirect as an  internal redirect ), you can restore it by writing a custom middleware:Upstream support for PostgreSQL 9.0 ended in September 2015. As a consequence, Django 1.9 sets 9.1 as the minimum PostgreSQL version it officially supports.Upstream support for Oracle 11.1 ended in August 2015. As a consequence, Django 1.9 sets 11.2 as the minimum Oracle version it officially supports.To improve performance, the add() methods of the related managers created by ForeignKey and GenericForeignKey changed from a series of Model.save() calls to a single QuerySet.update() call. The change means that pre_save and post_save signals aren t sent anymore. You can use the bulk=False keyword argument to revert to the previous behavior.In previous versions of Django, when a template engine was initialized with debug as True, an instance of django.template.loader.LoaderOrigin or django.template.base.StringOrigin was set as the origin attribute on the template object. These classes have been combined into Origin and is now always set regardless of the engine debug setting. For a minimal level of backwards compatibility, the old class names will be kept as aliases to the new Origin class until Django 2.0.To make it easier to write custom logging configurations, Django s default logging configuration no longer defines django.request and django.security loggers. Instead, it defines a single django logger, filtered at the INFO level, with two handlers:If you aren t overriding Django s default logging, you should see minimal changes in behavior, but you might see some new logging to the runserver console, for example.If you are overriding Django s default logging, you should check to see how your configuration merges with the new defaults.It was redundant to display the full details of the HttpRequest each time it appeared as a stack frame variable in the HTML version of the debug page and error email. Thus, the HTTP request will now display the same standard representation as other variables (repr(request)). As a result, the ExceptionReporterFilter.get_request_repr() method and the undocumented django.http.build_request_repr() function were removed.The contents of the text version of the email were modified to provide a traceback of the same structure as in the case of AJAX requests. The traceback details are rendered by the ExceptionReporter.get_traceback_text() method.Django no longer registers global adapters and converters for managing time zone information on datetime values sent to the database as query parameters or read from the database in query results. This change affects projects that meet all the following conditions:If you re passing aware datetime parameters to such queries, you should turn them into naive datetimes in UTC:If you fail to do so, the conversion will be performed as in earlier versions (with a deprecation warning) up until Django 1.11. Django 2.0 won t perform any conversion, which may result in data corruption.If you re reading datetime values from the results, they will be naive instead of aware. You can compensate as follows:You don t need any of this if you re querying the database through the ORM, even if you re using raw() queries. The ORM takes care of managing time zone information.The DjangoTemplates backend now performs discovery on installed template tag modules when instantiated. This update enables libraries to be provided explicitly via the 'libraries' key of OPTIONS when defining a DjangoTemplates backend. Import or syntax errors in template tag modules now fail early at instantiation time rather than when a template with a {% load %} tag is first compiled.Although it was a private API, projects commonly used add_to_builtins() to make template tags and filters available without using the {% load %} tag. This API has been formalized. Projects should now define built-in libraries via the 'builtins' key of OPTIONS when defining a DjangoTemplates backend.In general, template tags do not autoescape their contents, and this behavior is documented. For tags like inclusion_tag, this is not a problem because the included template will perform autoescaping. For assignment_tag(), the output will be escaped when it is used as a variable in the template.For the intended use cases of simple_tag, however, it is very easy to end up with incorrect HTML and possibly an XSS exploit. For example:In older versions of Django, this will be an XSS issue because user.first_name is not escaped.In Django 1.9, this is fixed: if the template context has autoescape=True set (the default), then simple_tag will wrap the output of the tag function with conditional_escape().To fix your simple_tags, it is best to apply the following practices:Tags that follow these rules will be correct and safe whether they are run on Django 1.9+ or earlier.Paginator.page_range is now an iterator instead of a list.In versions of Django previous to 1.8, Paginator.page_range returned a list in Python 2 and a range in Python 3. Django 1.8 consistently returned a list, but an iterator is more efficient.Existing code that depends on list specific features, such as indexing, can be ported by converting the iterator into a list using list().In earlier versions, queries such as:would implicitly convert to:resulting in SQL like \"related_id IN (SELECT id FROM ...)\".This implicit __in no longer happens so the  IN  SQL is now  = , and if the subquery returns multiple results, at least some databases will throw an error.The admin no longer supports Internet Explorer 8 and below, as these browsers have reached end-of-life.CSS and images to support Internet Explorer 6 and 7 have been removed. PNG and GIF icons have been replaced with SVG icons, which are not supported by Internet Explorer 8 and earlier.The jQuery library embedded in the admin has been upgraded from version 1.11.2 to 2.1.4. jQuery 2.x has the same API as jQuery 1.x, but does not support Internet Explorer 6, 7, or 8, allowing for better performance and a smaller file size. If you need to support IE8 and must also use the latest version of Django, you can override the admin s copy of jQuery with your own by creating a Django application with this structure:When installing Django 1.9 or 1.9.1 with setuptools 5.5.x, you ll see:It s safe to ignore these errors (Django will still install just fine), but you can avoid them by upgrading setuptools to a more recent version. If you re using pip, you can upgrade pip using pip install -U pip which will also upgrade setuptools. This is resolved in later versions of Django as described in the Django 1.9.2 release notes."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9/#features-deprecated-in-1-9", "para": "Django 1.4 added the assignment_tag helper to ease the creation of template tags that store results in a template variable. The simple_tag() helper has gained this same ability, making the assignment_tag obsolete. Tags that use assignment_tag should be updated to use simple_tag.The cycle tag supports an inferior old syntax from previous Django versions:Its parsing caused bugs with the current syntax, so support for the old syntax will be removed in Django 1.10 following an accelerated deprecation.In order to increase awareness about cascading model deletion, the on_delete argument of ForeignKey and OneToOneField will be required in Django 2.0.Update models and existing migrations to explicitly set the argument. Since the default is models.CASCADE, add on_delete=models.CASCADE to all ForeignKey and OneToOneFields that don t use a different option. You can also pass it as the second positional argument if you don t care about compatibility with older versions of Django.Field.rel and its methods and attributes have changed to match the related fields API. The Field.rel attribute is renamed to remote_field and many of its methods and attributes are either changed or renamed.The aim of these changes is to provide a documented API for relation fields.All custom GeoQuerySet methods (area(), distance(), gml(),  ) have been replaced by equivalent geographic expressions in annotations (see in new features). Hence the need to set a custom GeoManager to GIS-enabled models is now obsolete. As soon as your code doesn t call any of the deprecated methods, you can simply remove the objects = GeoManager() lines from your models.Django template loaders have been updated to allow recursive template extending. This change necessitated a new template loader API. The old load_template() and load_template_sources() methods are now deprecated. Details about the new API can be found in the template loader documentation.The instance namespace part of passing a tuple as an argument to include() has been replaced by passing the namespace argument to include(). For example:becomes:The app_name argument to include() has been replaced by passing a 2-tuple (as above), or passing an object or module with an app_name attribute (as below). If the app_name is set in this new way, the namespace argument is no longer required. It will default to the value of app_name. For example, the URL patterns in the tutorial are changed from:to:This change also means that the old way of including an AdminSite instance is deprecated. Instead, pass admin.site.urls directly to url():In the past, an instance namespace without an application namespace would serve the same purpose as the application namespace, but it was impossible to reverse the patterns if there was an application namespace with the same name. Includes that specify an instance namespace require that the included URLconf sets an application namespace.All views in django.contrib.auth.views have the following structure:As of Django 1.8, current_app is set on the request object. For consistency, these views will require the caller to set current_app on the request instead of passing it in a separate argument.The django.contrib.gis.geoip2 module supersedes django.contrib.gis.geoip. The new module provides a similar API except that it doesn t provide the legacy GeoIP-Python API compatibility methods."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.9/#features-removed-in-1-9", "para": "These features have reached the end of their deprecation cycle and are removed in Django 1.9. See Features deprecated in 1.7 for details, including how to remove usage of these features."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.19/#cve-2018-7536-denial-of-service-possibility-in-urlize-and-urlizetrunc-template-filters", "para": "The django.utils.html.urlize() function was extremely slow to evaluate certain inputs due to a catastrophic backtracking vulnerability in a regular expression. The urlize() function is used to implement the urlize and urlizetrunc template filters, which were thus vulnerable.The problematic regular expression is replaced with parsing logic that behaves similarly."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.19/#cve-2018-7537-denial-of-service-possibility-in-truncatechars-html-and-truncatewords-html-template-filters", "para": "If django.utils.text.Truncator s chars() and words() methods were passed the html=True argument, they were extremely slow to evaluate certain inputs due to a catastrophic backtracking vulnerability in a regular expression. The chars() and words() methods are used to implement the truncatechars_html and truncatewords_html template filters, which were thus vulnerable.The backtracking problem in the regular expression is fixed."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.18/#cve-2017-7233-open-redirect-and-possible-xss-attack-via-user-supplied-numeric-redirect-urls", "para": "Django relies on user input in some cases  (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security check for these redirects (namely django.utils.http.is_safe_url()) considered some numeric URLs (e.g. http:999999999)  safe  when they shouldn t be.Also, if a developer relies on is_safe_url() to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.18/#cve-2017-7234-open-redirect-vulnerability-in-django-views-static-serve", "para": "A maliciously crafted URL to a Django site using the serve() view could redirect to any other domain. The view no longer does any redirects as they don t provide any known, useful functionality.Note, however, that this view has always carried a warning that it is not hardened for production use and should be used only as a development aid."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.17/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.16/#user-with-hardcoded-password-created-when-running-tests-on-oracle", "para": "When running tests with an Oracle database, Django creates a temporary database user. In older versions, if a password isn t manually specified in the database settings TEST dictionary, a hardcoded password is used. This could allow an attacker with network access to the database server to connect.This user is usually dropped after the test suite completes, but not when using the manage.py test --keepdb option or if the user has an active session (such as an attacker s connection).A randomly generated password is now used for each test run."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.16/#dns-rebinding-vulnerability-when-debug-true", "para": "Older versions of Django don t validate the Host header against settings.ALLOWED_HOSTS when settings.DEBUG=True. This makes them vulnerable to a DNS rebinding attack.While Django doesn t ship a module that allows remote code execution, this is at least a cross-site scripting vector, which could be quite serious if developers load a copy of the production database in development or connect to some production services for which there s no development instance, for example. If a project uses a package like the django-debug-toolbar, then the attacker could execute arbitrary SQL, which could be especially bad if the developers connect to the database with a superuser account.settings.ALLOWED_HOSTS is now validated regardless of DEBUG. For convenience, if ALLOWED_HOSTS is empty and DEBUG=True, the following variations of localhost are allowed ['localhost', '127.0.0.1', '::1']. If your local settings file has your production ALLOWED_HOSTS value, you must now omit it to get those fallback values."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.15/#csrf-protection-bypass-on-a-site-with-google-analytics", "para": "An interaction between Google Analytics and Django s cookie parsing could allow an attacker to set arbitrary cookies leading to a bypass of CSRF protection.The parser for request.COOKIES is simplified to better match the behavior of browsers and to mitigate this attack. request.COOKIES may now contain cookies that are invalid according to RFC 6265 but are possible to set via document.cookie."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.14/#xss-in-admin-s-add-change-related-popup", "para": "Unsafe usage of JavaScript s Element.innerHTML could result in XSS in the admin s add/change related popup. Element.textContent is now used to prevent execution of the data.The debug view also used innerHTML. Although a security issue wasn t identified there, out of an abundance of caution it s also updated to use textContent."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.14/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.13/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.12/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.10/#cve-2016-2512-malicious-redirect-and-possible-xss-attack-via-user-supplied-redirect-urls-containing-basic-auth", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security check for these redirects (namely django.utils.http.is_safe_url()) considered some URLs with basic authentication credentials  safe  when they shouldn t be.For example, a URL like http://mysite.example.com\\@attacker.com would be considered safe if the request s host is http://mysite.example.com, but redirecting to this URL sends the user to attacker.com.Also, if a developer relies on is_safe_url() to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.10/#cve-2016-2513-user-enumeration-through-timing-difference-on-password-hasher-work-factor-upgrade", "para": "In each major version of Django since 1.6, the default number of iterations for the PBKDF2PasswordHasher and its subclasses has increased. This improves the security of the password as the speed of hardware increases, however, it also creates a timing difference between a login request for a user with a password encoded in an older number of iterations and login request for a nonexistent user (which runs the default hasher s default number of iterations since Django 1.6).This only affects users who haven t logged in since the iterations were increased. The first time a user logs in after an iterations increase, their password is updated with the new iterations and there is no longer a timing difference.The new BasePasswordHasher.harden_runtime() method allows hashers to bridge the runtime gap between the work factor (e.g. iterations) supplied in existing encoded passwords and the default work factor of the hasher. This method is implemented for PBKDF2PasswordHasher  and BCryptPasswordHasher. The number of rounds for the latter hasher hasn t changed since Django 1.4, but some projects may subclass it and increase the work factor as needed.A warning will be emitted for any third-party password hashers that don t implement a harden_runtime() method.If you have different password hashes in your database (such as SHA1 hashes from users who haven t logged in since the default hasher switched to PBKDF2 in Django 1.4), the timing difference on a login request for these users may be even greater and this fix doesn t remedy that difference (or any difference when changing hashers). You may be able to upgrade those hashes to prevent a timing attack for that case."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.10/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.9/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.8/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.7/#fixed-settings-leak-possibility-in-date-template-filter", "para": "If an application allows users to specify an unvalidated format for dates and passes this format to the date filter, e.g. {{ last_updated|date:user_date_format }}, then a malicious user could obtain any secret in the application s settings by specifying a settings key instead of a date format. e.g. \"SECRET_KEY\" instead of \"j/m/Y\".To remedy this, the underlying function used by the date template filter, django.utils.formats.get_format(), now only allows accessing the date/time formatting settings."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.7/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.6/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.5/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.4/#denial-of-service-possibility-in-logout-view-by-filling-session-store", "para": "Previously, a session could be created when anonymously accessing the django.contrib.auth.views.logout() view (provided it wasn t decorated with login_required() as done in the admin). This could allow an attacker to easily create many new session records by sending repeated requests, potentially filling up the session store or causing other users  session records to be evicted.The SessionMiddleware has been modified to no longer create empty session records, including when SESSION_SAVE_EVERY_REQUEST is active."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.4/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.3/#denial-of-service-possibility-by-filling-session-store", "para": "In previous versions of Django, the session backends created a new empty record in the session storage anytime request.session was accessed and there was a session key provided in the request cookies that didn t already have a session record. This could allow an attacker to easily create many new session records simply by sending repeated requests with unknown session keys, potentially filling up the session store or causing other users  session records to be evicted.The built-in session backends now create a session record only if the session is actually modified; empty session records are not created. Thus this potential DoS is now only possible if the site chooses to expose a session-modifying view to anonymous users.As each built-in session backend was fixed separately (rather than a fix in the core sessions framework), maintainers of third-party session backends should check whether the same vulnerability is present in their backend and correct it if so."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.3/#header-injection-possibility-since-validators-accept-newlines-in-input", "para": "Some of Django s built-in validators (EmailValidator, most seriously) didn t prohibit newline characters (due to the usage of $ instead of \\Z in the regular expressions). If you use values with newlines in HTTP response or email headers, you can suffer from header injection attacks. Django itself isn t vulnerable because HttpResponse and the mail sending utilities in django.core.mail prohibit newlines in HTTP and SMTP headers, respectively. While the validators have been fixed in Django, if you re creating HTTP responses or email messages in other ways, it s a good idea to ensure that those methods prohibit newlines as well. You might also want to validate that any existing data in your application doesn t contain unexpected newlines.validate_ipv4_address(), validate_slug(), and URLValidator are also affected, however, as of Django 1.6 the GenericIPAddresseField, IPAddressField, SlugField, and URLField form fields which use these validators all strip the input, so the possibility of newlines entering your data only exists if you are using these validators outside of the form fields.The undocumented, internally unused validate_integer() function is now stricter as it validates using a regular expression instead of simply casting the value using int() and checking if an exception was raised."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.3/#denial-of-service-possibility-in-url-validation", "para": "URLValidator included a regular expression that was extremely slow to evaluate against certain invalid inputs. This regular expression has been simplified and optimized."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.3/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.2/#fixed-session-flushing-in-the-cached-db-backend", "para": "A change to session.flush() in the cached_db session backend in Django 1.8 mistakenly sets the session key to an empty string rather than None. An empty string is treated as a valid session key and the session cookie is set accordingly. Any users with an empty string in their session cookie will use the same session store. session.flush() is called by django.contrib.auth.logout() and, more seriously, by django.contrib.auth.login() when a user switches accounts. If a user is logged in and logs in again to a different account (without logging out) the session is flushed to avoid reuse. After the session is flushed (and its session key becomes '') the account details are set on the session and the session is saved. Any users with an empty string in their session cookie will now be logged into that account."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.2/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.1/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8.1/#optimizations", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8/#python-compatibility", "para": "Django 1.8 requires Python 2.7, 3.2, 3.3, 3.4, or 3.5. We highly recommend and only officially support the latest release of each series.Django 1.8 is the first release to support Python 3.5.Due to the end of upstream support for Python 3.2 in February 2016, we won t test Django 1.8.x on Python 3.2 after the end of 2016."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8/#what-s-new-in-django-1-8", "para": "Django now has a formalized API for Model._meta, providing an officially supported way to retrieve fields and filter fields based on their attributes.The Model._meta object has been part of Django since the days of pre-0.96  Magic Removal    it just wasn t an official, stable API. In recognition of this, we ve endeavored to maintain backwards-compatibility with the old API endpoint where possible. However, API endpoints that aren t part of the new official API have been deprecated and will eventually be removed.Django 1.8 defines a stable API for integrating template backends. It includes built-in support for the Django template language and for Jinja2. It supports rendering templates with multiple engines within the same project. Learn more about the new features in the topic guide and check the upgrade instructions in older versions of the documentation.Several features of the django-secure third-party library have been integrated into Django. django.middleware.security.SecurityMiddleware provides several security enhancements to the request/response cycle. The new check --deploy option allows you to check your production settings file for ways to increase the security of your site.Django now has a module with extensions for PostgreSQL specific features, such as ArrayField, HStoreField, Range Fields, and unaccent lookup. A full breakdown of the features is available in the documentation.Query Expressions allow you to create, customize, and compose complex SQL expressions. This has enabled annotate to accept expressions other than aggregates. Aggregates are now able to reference multiple fields, as well as perform arithmetic, similar to F() objects. order_by() has also gained the ability to accept expressions.Conditional Expressions allow you to use if   elif   else logic within queries.A collection of database functions is also included with functionality such as Coalesce, Concat, and Substr.TestCase has been refactored to allow for data initialization at the class level using transactions and savepoints. Database backends which do not support transactions, like MySQL with the MyISAM storage engine, will still be able to run these tests but won t benefit from the improvements. Tests are now run within two nested atomic() blocks: one for the whole class and one for each test."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8/#backwards-incompatible-changes-in-1-8", "para": "WarningIn addition to the changes outlined in this section, be sure to review the deprecation plan for any features that have been removed. If you haven t updated your code within the deprecation timeline for a given feature, its removal may appear as a backwards incompatible change.Some operations on related objects such as add() or direct assignment ran multiple data modifying queries without wrapping them in transactions. To reduce the risk of data corruption, all data modifying methods that affect multiple related objects (i.e. add(), remove(), clear(), and direct assignment) now perform their data modifying queries from within a transaction, provided your database supports transactions.This has one backwards incompatible side effect, signal handlers triggered from these methods are now executed within the method s transaction and any exception in a signal handler will prevent the whole operation.NoteTo more easily allow in-memory usage of models, this change was reverted in Django 1.8.4 and replaced with a check during model.save(). For example:A similar check on assignment to reverse one-to-one relations was removed in Django 1.8.5.Assigning unsaved objects to a ForeignKey, GenericForeignKey, and OneToOneField now raises a ValueError.Previously, the assignment of an unsaved object would be silently ignored. For example:Now, an error will be raised to prevent data loss:If you require allowing the assignment of unsaved instances (the old behavior) and aren t concerned about the data loss possibility (e.g. you never save the objects to the database), you can disable this check by using the ForeignKey.allow_unsaved_instance_assignment attribute. (This attribute was removed in 1.8.4 as it s no longer relevant.)If you have written a custom management command that only accepts positional arguments and you didn t specify the args command variable, you might get an error like Error: unrecognized arguments: ..., as variable parsing is now based on argparse which doesn t implicitly accept positional arguments. You can make your command backwards compatible by simply setting the args class variable. However, if you don t have to keep compatibility with older Django versions, it s better to implement the new add_arguments() method as described in Writing custom django-admin commands.The method to add custom arguments to the test management command through the test runner has changed. Previously, you could provide an option_list class variable on the test runner to add more arguments (  la optparse). Now to implement the same behavior, you have to create an add_arguments(cls, parser) class method on the test runner and call parser.add_argument to add any custom arguments, as parser is now an argparse.ArgumentParser instance.A field name that s longer than the column name length supported by a database can create problems. For example, with MySQL you ll get an exception trying to create the column, and with PostgreSQL the column name is truncated by the database (you may see a warning in the PostgreSQL logs).A model check has been introduced to better alert users to this scenario before the actual creation of database tables.If you have an existing model where this check seems to be a false positive, for example on PostgreSQL where the name was already being truncated, simply use db_column to specify the name that s being used.The check also applies to the columns generated in an implicit ManyToManyField.through model. If you run into an issue there, use through to create an explicit model and then specify db_column on its column(s) as needed.Querying for model lookups now checks if the object passed is of correct type and raises a ValueError if not. Previously, Django didn t care if the object was of correct type; it just used the object s related field attribute (e.g. id) for the lookup. Now, an error is raised to prevent incorrect lookups:select_related() now validates that the given fields actually exist. Previously, nonexistent fields were silently ignored. Now, an error is raised:The validation also makes sure that the given field is relational:The old default 75 character max_length was not capable of storing all possible RFC3696/5321-compliant email addresses. In order to store all possible valid email addresses, the max_length has been increased to 254 characters. You will need to generate and apply database migrations for your affected models (or add max_length=75 if you wish to keep the length on your current fields). A migration for django.contrib.auth.models.User.email is included.The end of upstream support periods was reached in July 2014 for PostgreSQL 8.4. As a consequence, Django 1.8 sets 9.0 as the minimum PostgreSQL version it officially supports.This also includes dropping support for PostGIS 1.3 and 1.4 as these versions are not supported on versions of PostgreSQL later than 8.4.Django also now requires the use of Psycopg2 version 2.4.5 or higher (or 2.5+ if you want to use django.contrib.postgres).The end of upstream support periods was reached in January 2012 for MySQL 5.0 and December 2013 for MySQL 5.1. As a consequence, Django 1.8 sets 5.5 as the minimum MySQL version it officially supports.The end of upstream support periods was reached in July 2010 for Oracle 9.2, January 2012 for Oracle 10.1, and July 2013 for Oracle 10.2. As a consequence, Django 1.8 sets 11.1 as the minimum Oracle version it officially supports.Earlier versions of Django granted the CONNECT and RESOURCE roles to the test user on Oracle. These roles have been deprecated, so Django 1.8 uses the specific underlying privileges instead. This changes the privileges required of the main user for running tests (unless the project is configured to avoid creating a test user). The exact privileges required now are detailed in Oracle notes.The AbstractUser.last_login field now allows null values. Previously, it defaulted to the time when the user was created which was misleading if the user never logged in. If you are using the default user (django.contrib.auth.models.User), run the database migration included in contrib.auth.If you are using a custom user model that inherits from AbstractUser, you ll need to run makemigrations and generate a migration for your app that contains that model. Also, if wish to set last_login to NULL for users who haven t logged in, you can run this query:The TemplateResponse constructor is designed to be a drop-in replacement for the render() function. However, it had a slight incompatibility, in that for TemplateResponse, context data from the passed in context dictionary could be shadowed by context data returned from context processors, whereas for render it was the other way around. This was a bug, and the behavior of render is more appropriate, since it allows the globally defined context processors to be overridden locally in the view. If you were relying on the fact context data in a TemplateResponse could be overridden using a context processor, you will need to change your code.The decorators override_settings() and modify_settings() now act at the class level when used as class decorators. As a consequence, when overriding setUpClass() or tearDownClass(), the super implementation should always be called.The formtools contrib app has been moved to a separate package and the relevant documentation pages have been updated or removed.The new package is available on GitHub and on PyPI.Django previously closed database connections between each test within a TestCase. This is no longer the case as Django now wraps the whole TestCase within a transaction. If some of your tests relied on the old behavior, you should have them inherit from TransactionTestCase instead.If you ve been relying on private APIs exposed in the django.template module, you may have to import them from django.template.base instead.Also private APIs django.template.base.compile_string(), django.template.loader.find_template(), and django.template.loader.get_template_from_string() were removed.In earlier versions of Django, on a model with a reverse foreign key relationship (for example), model._meta.get_all_related_objects() returned the relationship as a django.db.models.related.RelatedObject with the model attribute set to the source of the relationship. Now, this method returns the relationship as django.db.models.fields.related.ManyToOneRel (private API RelatedObject has been removed), and the model attribute is set to the target of the relationship instead of the source. The source model is accessible on the related_model attribute instead.Consider this example from the tutorial in Django 1.8:and compare it to the behavior on older versions:To access the source model, you can use a pattern like this to write code that will work with both Django 1.8 and older versions:Also note that get_all_related_objects() is deprecated in 1.8.The following changes to the database backend API are documented to assist those writing third-party backends in updating their code:BaseDatabaseXXX classes have been moved to django.db.backends.base. Please import them from the new locations:The data_types, data_types_suffix, and data_type_check_constraints attributes have moved from the DatabaseCreation class to DatabaseWrapper.The SQLCompiler.as_sql() method now takes a subquery parameter (#24164).The BaseDatabaseOperations.date_interval_sql() method now only takes a timedelta parameter.In order to make built-in template filters that output HTML  safe by default  when calling them in Python code, the following functions in django.template.defaultfilters have been changed to automatically escape their input value:You can revert to the old behavior by specifying autoescape=False if you are passing trusted content. This change doesn t have any effect when using the corresponding filters in templates.connections.queries is now a read-only attribute.Database connections are considered equal only if they re the same object. They aren t hashable any more.GZipMiddleware used to disable compression for some content types when the request is from Internet Explorer, in order to work around a bug in IE6 and earlier. This behavior could affect performance on IE7 and later. It was removed.URLField.to_python no longer adds a trailing slash to pathless URLs.The length template filter now returns 0 for an undefined variable, rather than an empty string.ForeignKey.default_error_message['invalid'] has been changed from '%(model)s instance with pk %(pk)r does not exist.' to '%(model)s instance with %(field)s %(value)r does not exist.' If you are using this message in your own code, please update the list of interpolated parameters. Internally, Django will continue to provide the pk parameter in params for backwards compatibility.UserCreationForm.error_messages['duplicate_username'] is no longer used. If you wish to customize that error message, override it on the form using the 'unique' key in Meta.error_messages['username'] or, if you have a custom form field for 'username', using the 'unique' key in its error_messages argument.The block usertools in the base.html template of django.contrib.admin now requires the has_permission context variable to be set. If you have any custom admin views that use this template, update them to pass AdminSite.has_permission() as this new variable s value or simply include AdminSite.each_context(request) in the context.Internal changes were made to the ClearableFileInput widget to allow more customization. The undocumented url_markup_template attribute was removed in favor of template_with_initial.For consistency with other major vendors, the en_GB locale now has Monday as the first day of the week.Seconds have been removed from any locales that had them in TIME_FORMAT, DATETIME_FORMAT, or SHORT_DATETIME_FORMAT.The default max size of the Oracle test tablespace has increased from 300M (or 200M, before 1.7.2) to 500M.reverse() and reverse_lazy() now return Unicode strings instead of bytestrings.The CacheClass shim has been removed from all cache backends. These aliases were provided for backwards compatibility with Django 1.3. If you are still using them, please update your project to use the real class name found in the BACKEND key of the CACHES setting.By default, call_command() now always skips the check framework (unless you pass it skip_checks=False).When iterating over lines, File now uses universal newlines. The following are recognized as ending a line: the Unix end-of-line convention '\\n', the Windows convention '\\r\\n', and the old Macintosh convention '\\r'.The Memcached cache backends MemcachedCache and PyLibMCCache will delete a key if set() fails. This is necessary to ensure the cache_db session store always fetches the most current session data.Private APIs override_template_loaders and override_with_test_loader in django.test.utils were removed. Override TEMPLATES with override_settings instead.Warnings from the MySQL database backend are no longer converted to exceptions when DEBUG is True.HttpRequest now has a simplified repr (e.g. <WSGIRequest: GET '/somepath/'>). This won t change the behavior of the SafeExceptionReporterFilter class.Class-based views that use ModelFormMixin will raise an ImproperlyConfigured exception when both the fields and form_class attributes are specified. Previously, fields was silently ignored.When following redirects, the test client now raises RedirectCycleError if it detects a loop or hits a maximum redirect limit (rather than passing silently).Translatable strings set as the default parameter of the field are cast to concrete strings later, so the return type of Field.get_default() is different in some cases. There is no change to default values which are the result of a callable.GenericIPAddressField.empty_strings_allowed is now False. Database backends that interpret empty strings as null (only Oracle among the backends that Django includes) will no longer convert null values back to an empty string. This is consistent with other backends.When the BaseCommand.leave_locale_alone attribute is False, translations are now deactivated instead of forcing the  en-us  locale. In the case your models contained non-English strings and you counted on English translations to be activated in management commands, this will not happen any longer. It might be that new database migrations are generated (once) after migrating to 1.8.django.utils.translation.get_language() now returns None instead of LANGUAGE_CODE when translations are temporarily deactivated.When a translation doesn t exist for a specific literal, the fallback is now taken from the LANGUAGE_CODE language (instead of from the untranslated msgid message).The name field of django.contrib.contenttypes.models.ContentType has been removed by a migration and replaced by a property. That means it s not possible to query or filter a ContentType by this field any longer.Be careful if you upgrade to Django 1.8 and skip Django 1.7. If you run manage.py migrate --fake, this migration will be skipped and you ll see a RuntimeError: Error creating new content types. exception because the name column won t be dropped from the database. Use manage.py migrate --fake-initial to fake only the initial migration instead.The new migrate --fake-initial option allows faking initial migrations. In 1.7, initial migrations were always automatically faked if all tables created in an initial migration already existed.An app without migrations with a ForeignKey to an app with migrations may now result in a foreign key constraint error when migrating the database or running tests. In Django 1.7, this could fail silently and result in a missing constraint. To resolve the error, add migrations to the app without them."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8/#features-deprecated-in-1-8", "para": "As part of the formalization of the Model._meta API (from the django.db.models.options.Options class), a number of methods have been deprecated and will be removed in Django 1.10:Django 1.6 introduced {% load cycle from future %} and {% load firstof from future %} syntax for forward compatibility of the cycle and firstof template tags. This syntax is now deprecated and will be removed in Django 1.10. You can simply remove the {% load ... from future %} tags.In the olden days of Django, it was encouraged to reference views as strings in urlpatterns:and Django would magically import myapp.views.myview internally and turn the string into a real function reference. In order to reduce repetition when referencing many views from the same module, the patterns() function takes a required initial prefix argument which is prepended to all views-as-strings in that set of urlpatterns:In the modern era, we have updated the tutorial to instead recommend importing your views module and referencing your view functions (or classes) directly. This has a number of advantages, all deriving from the fact that we are using normal Python in place of  Django String Magic : the errors when you mistype a view name are less obscure, IDEs can help with autocompletion of view names, etc.So these days, the above use of the prefix arg is much more likely to be written (and is better written) as:Thus patterns() serves little purpose and is a burden when teaching new users (answering the newbie s question  why do I need this empty string as the first argument to patterns()? ). For these reasons, we are deprecating it. Updating your code is as simple as ensuring that urlpatterns is a list of django.conf.urls.url() instances. For example:Related to the previous item, referencing views as strings in the url() function is deprecated. Pass the callable view as described in the previous section instead.As a consequence of the multiple template engines refactor, several settings are deprecated in favor of TEMPLATES:Built-in template context processors have been moved to django.template.context_processors.The attribute SimpleTestCase.urls for specifying URLconf configuration in tests has been deprecated and will be removed in Django 1.10. Use @override_settings(ROOT_URLCONF=...) instead.Related to the previous item, the prefix argument to django.conf.urls.i18n.i18n_patterns() has been deprecated. Simply pass a list of django.conf.urls.url() instances instead.Using an incorrect count of unpacked values in for tag will raise an exception rather than fail silently in Django 1.10.Reversing URLs by Python path is an expensive operation as it causes the path being reversed to be imported. This behavior has also resulted in a security issue. Use named URL patterns for reversing instead.If you are using django.contrib.sitemaps, add the name argument to the url that references django.contrib.sitemaps.views.sitemap():to ensure compatibility when reversing by Python path is removed in Django 1.10.Similarly for GIS sitemaps, add name='django.contrib.gis.sitemaps.views.kml' or name='django.contrib.gis.sitemaps.views.kmz'.If you are using a Python path for the LOGIN_URL or LOGIN_REDIRECT_URL setting, use the name of the url() instead.The django.db.models.sql.aggregates and django.contrib.gis.db.models.sql.aggregates modules (both private API), have been deprecated as django.db.models.aggregates and django.contrib.gis.db.models.aggregates are now also responsible for SQL generation. The old modules will be removed in Django 1.10.If you were using the old modules, see Query Expressions for instructions on rewriting custom aggregates using the new stable API.The following methods and properties of django.db.models.sql.query.Query have also been deprecated and the backwards compatibility shims will be removed in Django 1.10:Management commands now use argparse instead of optparse to parse command-line arguments passed to commands. This also means that the way to add custom arguments to commands has changed: instead of extending the option_list class list, you should now override the add_arguments() method and add arguments through argparse.add_argument(). See this example for more details.The class NoArgsCommand is now deprecated and will be removed in Django 1.10. Use BaseCommand instead, which takes no arguments by default.The --list option of the migrate management command is deprecated and will be removed in Django 1.10. Use showmigrations instead.ModelChoiceField and ModelMultipleChoiceField took an undocumented, untested option cache_choices. This cached querysets between multiple renderings of the same Form object. This option is subject to an accelerated deprecation and will be removed in Django 1.9.The function has been informally marked as  Deprecated  for some time. Replace resolve_variable(path, context) with django.template.Variable(path).resolve(context).It provided the lorem template tag which is now included in the built-in tags. Simply remove 'django.contrib.webdesign' from INSTALLED_APPS and {% load webdesign %} from your templates.It provided backwards compatibility for pre-1.0 code, but its functionality is redundant. Use Field.error_messages['invalid'] instead.An older (pre-1.0), more restrictive and verbose input format for the unordered_list template filter has been deprecated:Using the new syntax, this becomes:Rename this method to has_changed() by removing the leading underscore. The old name will still work until Django 1.10.django.utils.html.remove_tags() as well as the template filter removetags have been deprecated as they cannot guarantee safe output. Their existence is likely to lead to their use in security-sensitive contexts where they are not actually safe.The unused and undocumented django.utils.html.strip_entities() function has also been deprecated.It s a legacy option that should no longer be necessary.django.db.models.fields.subclassing.SubfieldBase has been deprecated and will be removed in Django 1.10. Historically, it was used to handle fields where type conversion was needed when loading from the database, but it was not used in .values() calls or in aggregates. It has been replaced with from_db_value().The new approach doesn t call the to_python() method on assignment as was the case with SubfieldBase. If you need that behavior, reimplement the Creator class from Django s source code in your project.The django.utils.checksums module has been deprecated and will be removed in Django 1.10. The functionality it provided (validating checksum using the Luhn algorithm) was undocumented and not used in Django. The module has been moved to the django-localflavor package (version 1.1+).The original_content_type_id attribute on InlineAdminForm has been deprecated and will be removed in Django 1.10. Historically, it was used to construct the  view on site  URL. This URL is now accessible using the absolute_url attribute of the form.FormMixin subclasses that override the get_form() method should make sure to provide a default value for the form_class argument since it s now optional.The return type of get_template() has changed in Django 1.8: instead of a django.template.Template, it returns a Template instance whose exact type depends on which backend loaded it.Both classes provide a render() method, however, the former takes a django.template.Context as an argument while the latter expects a dict. This change is enforced through a deprecation path for Django templates.All this also applies to select_template().Some methods of SimpleTemplateResponse and TemplateResponse accepted django.template.Context and django.template.Template objects as arguments. They should now receive dict and backend-dependent template objects respectively.This also applies to the return types if you have subclassed either template response class.Check the template response API documentation for details.The following functions and classes will no longer accept a current_app parameter to set an URL namespace in Django 1.10:Set request.current_app instead, where request is the first argument to these functions or classes. If you re using a plain Context, use a RequestContext instead.The following functions will no longer accept the dictionary and context_instance parameters in Django 1.10:Use the context parameter instead. When dictionary is passed as a positional argument, which is the most common idiom, no changes are needed.If you re passing a Context in context_instance, pass a dict in the context parameter instead. If you re passing a RequestContext, pass the request separately in the request parameter.The following functions will no longer accept a dirs parameter to override TEMPLATE_DIRS in Django 1.10:The parameter didn t work consistently across different template loaders and didn t work for included templates.django.template.loader.BaseLoader was renamed to django.template.loaders.base.Loader. If you ve written a custom template loader that inherits BaseLoader, you must inherit Loader instead.Private API django.test.utils.TestTemplateLoader is deprecated in favor of django.template.loaders.locmem.Loader and will be removed in Django 1.9.Storage subclasses should add max_length=None as a parameter to get_available_name() and/or save() if they override either method. Support for storages that do not accept this argument will be removed in Django 1.10.In previous Django versions, various internal ORM methods (mostly as_sql methods) accepted a qn (for  quote name ) argument, which was a reference to a function that quoted identifiers for sending to the database. In Django 1.8, that argument has been renamed to compiler and is now a full SQLCompiler instance. For backwards-compatibility, calling a SQLCompiler instance performs the same name-quoting that the qn function used to. However, this backwards-compatibility shim is immediately deprecated: you should rename your qn arguments to compiler, and call compiler.quote_name_unless_alias(...) where you previously called qn(...).The default value of the RedirectView.permanent attribute will change from True to False in Django 1.9.django.contrib.auth.middleware.SessionAuthenticationMiddleware was added in Django 1.7. In Django 1.7.2, its functionality was moved to auth.get_user() and, for backwards compatibility, enabled only if 'django.contrib.auth.middleware.SessionAuthenticationMiddleware' appears in MIDDLEWARE_CLASSES.In Django 1.10, session verification will be enabled regardless of whether or not SessionAuthenticationMiddleware is enabled (at which point SessionAuthenticationMiddleware will have no significance). You can add it to your MIDDLEWARE_CLASSES sometime before then to opt-in. Please read the upgrade considerations first.django.contrib.sitemaps.FlatPageSitemap has moved to django.contrib.flatpages.sitemaps.FlatPageSitemap. The old import location is deprecated and will be removed in Django 1.9.Private attribute django.db.models.Field.related is deprecated in favor of Field.rel.  The latter is an instance of django.db.models.fields.related.ForeignObjectRel which replaces django.db.models.related.RelatedObject. The django.db.models.related module has been removed and the Field.related attribute will be removed in Django 1.10.The ssi template tag allows files to be included in a template by absolute path. This is of limited use in most deployment situations, and the include tag often makes more sense. This tag is now deprecated and will be removed in Django 1.10.Using a single equals sign with the {% if %} template tag for equality testing was undocumented and untested. It s now deprecated in favor of ==.The legacy %(<foo>)s syntax in ModelFormMixin.success_url is deprecated and will be removed in Django 1.10.The collect(), extent(), extent3d(), make_line(), and unionagg() aggregate methods are deprecated and should be replaced by their function-based aggregate equivalents (Collect, Extent, Extent3D, MakeLine, and Union).The signature of the allow_migrate() method of database routers has changed from allow_migrate(db, model) to allow_migrate(db, app_label, model_name=None, **hints).When model_name is set, the value that was previously given through the model positional argument may now be found inside the hints dictionary under the key 'model'.After switching to the new signature the router will also be called by the RunPython and RunSQL operations."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.8/#features-removed-in-1-8", "para": "These features have reached the end of their deprecation cycle and are removed in Django 1.8. See Features deprecated in 1.6 for details, including how to remove usage of these features."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.11/#fixed-settings-leak-possibility-in-date-template-filter", "para": "If an application allows users to specify an unvalidated format for dates and passes this format to the date filter, e.g. {{ last_updated|date:user_date_format }}, then a malicious user could obtain any secret in the application s settings by specifying a settings key instead of a date format. e.g. \"SECRET_KEY\" instead of \"j/m/Y\".To remedy this, the underlying function used by the date template filter, django.utils.formats.get_format(), now only allows accessing the date/time formatting settings."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.11/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.10/#denial-of-service-possibility-in-logout-view-by-filling-session-store", "para": "Previously, a session could be created when anonymously accessing the django.contrib.auth.views.logout() view (provided it wasn t decorated with login_required() as done in the admin). This could allow an attacker to easily create many new session records by sending repeated requests, potentially filling up the session store or causing other users  session records to be evicted.The SessionMiddleware has been modified to no longer create empty session records, including when SESSION_SAVE_EVERY_REQUEST is active.Additionally, the contrib.sessions.backends.base.SessionBase.flush() and cache_db.SessionStore.flush() methods have been modified to avoid creating a new empty session. Maintainers of third-party session backends should check if the same vulnerability is present in their backend and correct it if so."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.9/#denial-of-service-possibility-by-filling-session-store", "para": "In previous versions of Django, the session backends created a new empty record in the session storage anytime request.session was accessed and there was a session key provided in the request cookies that didn t already have a session record. This could allow an attacker to easily create many new session records simply by sending repeated requests with unknown session keys, potentially filling up the session store or causing other users  session records to be evicted.The built-in session backends now create a session record only if the session is actually modified; empty session records are not created. Thus this potential DoS is now only possible if the site chooses to expose a session-modifying view to anonymous users.As each built-in session backend was fixed separately (rather than a fix in the core sessions framework), maintainers of third-party session backends should check whether the same vulnerability is present in their backend and correct it if so."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.9/#header-injection-possibility-since-validators-accept-newlines-in-input", "para": "Some of Django s built-in validators (EmailValidator, most seriously) didn t prohibit newline characters (due to the usage of $ instead of \\Z in the regular expressions). If you use values with newlines in HTTP response or email headers, you can suffer from header injection attacks. Django itself isn t vulnerable because HttpResponse and the mail sending utilities in django.core.mail prohibit newlines in HTTP and SMTP headers, respectively. While the validators have been fixed in Django, if you re creating HTTP responses or email messages in other ways, it s a good idea to ensure that those methods prohibit newlines as well. You might also want to validate that any existing data in your application doesn t contain unexpected newlines.validate_ipv4_address(), validate_slug(), and URLValidator are also affected, however, as of Django 1.6 the GenericIPAddresseField, IPAddressField, SlugField, and URLField form fields which use these validators all strip the input, so the possibility of newlines entering your data only exists if you are using these validators outside of the form fields.The undocumented, internally unused validate_integer() function is now stricter as it validates using a regular expression instead of simply casting the value using int() and checking if an exception was raised."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.9/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.7/#denial-of-service-possibility-with-strip-tags", "para": "Last year strip_tags()  was changed to work iteratively. The problem is that the size of the input it s processing can increase on each iteration which results in an infinite loop in strip_tags(). This issue only affects versions of Python that haven t received  a bugfix in HTMLParser; namely Python < 2.7.7 and 3.3.5. Some operating system vendors have also backported the fix for the Python bug into their packages of earlier versions.To remedy this issue, strip_tags() will now return the original input if it detects the length of the string it s processing increases. Remember that absolutely NO guarantee is provided about the results of strip_tags() being HTML safe. So NEVER mark safe the result of a strip_tags() call without escaping it first, for example with escape()."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.7/#mitigated-possible-xss-attack-via-user-supplied-redirect-urls", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) accepted URLs with leading control characters and so considered URLs like \\x08javascript:... safe. This issue doesn t affect Django currently, since we only put this URL into the Location response header and browsers seem to ignore JavaScript there. Browsers we tested also treat URLs prefixed with control characters such as %08//example.com as relative paths so redirection to an unsafe target isn t a problem either.However, if a developer relies on is_safe_url() to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack as some browsers such as Google Chrome ignore control characters at the start of a URL in an anchor href."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.7/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.6/#mitigated-an-xss-attack-via-properties-in-modeladmin-readonly-fields", "para": "The ModelAdmin.readonly_fields attribute in the Django admin allows displaying model fields and model attributes. While the former were correctly escaped, the latter were not. Thus untrusted content could be injected into the admin, presenting an exploitation vector for XSS attacks.In this vulnerability, every model attribute used in readonly_fields that is not an actual model field (e.g. a property) will fail to be escaped even if that attribute is not marked as safe. In this release, autoescaping is now correctly applied."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.6/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.5/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.4/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.3/#wsgi-header-spoofing-via-underscore-dash-conflation", "para": "When HTTP headers are placed into the WSGI environ, they are normalized by converting to uppercase, converting all dashes to underscores, and prepending HTTP_. For instance, a header X-Auth-User would become HTTP_X_AUTH_USER in the WSGI environ (and thus also in Django s request.META dictionary).Unfortunately, this means that the WSGI environ cannot distinguish between headers containing dashes and headers containing underscores: X-Auth-User and X-Auth_User both become HTTP_X_AUTH_USER. This means that if a header is used in a security-sensitive way (for instance, passing authentication information along from a front-end proxy), even if the proxy carefully strips any incoming value for X-Auth-User, an attacker may be able to provide an X-Auth_User header (with underscore) and bypass this protection.In order to prevent such attacks, both Nginx and Apache 2.4+ strip all headers containing underscores from incoming requests by default. Django s built-in development server now does the same. Django s development server is not recommended for production use, but matching the behavior of common production servers reduces the surface area for behavior changes during deployment."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.3/#mitigated-possible-xss-attack-via-user-supplied-redirect-urls", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) didn t strip leading whitespace on the tested URL and as such considered URLs like \\njavascript:... safe. If a developer relied on is_safe_url() to provide safe redirect targets and put such a URL into a link, they could suffer from a XSS attack. This bug doesn t affect Django currently, since we only put this URL into the Location response header and browsers seem to ignore JavaScript there."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.3/#denial-of-service-attack-against-django-views-static-serve", "para": "In older versions of Django, the django.views.static.serve() view read the files it served one line at a time. Therefore, a big file with no newlines would result in memory usage equal to the size of that file. An attacker could exploit this and launch a denial-of-service attack by simultaneously requesting many large files. This view now reads the file in chunks to prevent large memory usage.Note, however, that this view has always carried a warning that it is not hardened for production use and should be used only as a development aid. Now may be a good time to audit your project and serve your files in production using a real front-end web server if you are not doing so."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.3/#database-denial-of-service-with-modelmultiplechoicefield", "para": "Given a form that uses ModelMultipleChoiceField and show_hidden_initial=True (not a documented API), it was possible for a user to cause an unreasonable number of SQL queries by submitting duplicate values for the field s data. The validation logic in ModelMultipleChoiceField now deduplicates submitted values to address this issue."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.3/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.2/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.7.1/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.11/#denial-of-service-possibility-with-strip-tags", "para": "Last year strip_tags()  was changed to work iteratively. The problem is that the size of the input it s processing can increase on each iteration which results in an infinite loop in strip_tags(). This issue only affects versions of Python that haven t received  a bugfix in HTMLParser; namely Python < 2.7.7 and 3.3.5. Some operating system vendors have also backported the fix for the Python bug into their packages of earlier versions.To remedy this issue, strip_tags() will now return the original input if it detects the length of the string it s processing increases. Remember that absolutely NO guarantee is provided about the results of strip_tags() being HTML safe. So NEVER mark safe the result of a strip_tags() call without escaping it first, for example with escape()."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.11/#mitigated-possible-xss-attack-via-user-supplied-redirect-urls", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) accepted URLs with leading control characters and so considered URLs like \\x08javascript:... safe. This issue doesn t affect Django currently, since we only put this URL into the Location response header and browsers seem to ignore JavaScript there. Browsers we tested also treat URLs prefixed with control characters such as %08//example.com as relative paths so redirection to an unsafe target isn t a problem either.However, if a developer relies on is_safe_url() to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack as some browsers such as Google Chrome ignore control characters at the start of a URL in an anchor href."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.10/#wsgi-header-spoofing-via-underscore-dash-conflation", "para": "When HTTP headers are placed into the WSGI environ, they are normalized by converting to uppercase, converting all dashes to underscores, and prepending HTTP_. For instance, a header X-Auth-User would become HTTP_X_AUTH_USER in the WSGI environ (and thus also in Django s request.META dictionary).Unfortunately, this means that the WSGI environ cannot distinguish between headers containing dashes and headers containing underscores: X-Auth-User and X-Auth_User both become HTTP_X_AUTH_USER. This means that if a header is used in a security-sensitive way (for instance, passing authentication information along from a front-end proxy), even if the proxy carefully strips any incoming value for X-Auth-User, an attacker may be able to provide an X-Auth_User header (with underscore) and bypass this protection.In order to prevent such attacks, both Nginx and Apache 2.4+ strip all headers containing underscores from incoming requests by default. Django s built-in development server now does the same. Django s development server is not recommended for production use, but matching the behavior of common production servers reduces the surface area for behavior changes during deployment."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.10/#mitigated-possible-xss-attack-via-user-supplied-redirect-urls", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) didn t strip leading whitespace on the tested URL and as such considered URLs like \\njavascript:... safe. If a developer relied on is_safe_url() to provide safe redirect targets and put such a URL into a link, they could suffer from a XSS attack. This bug doesn t affect Django currently, since we only put this URL into the Location response header and browsers seem to ignore JavaScript there."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.10/#denial-of-service-attack-against-django-views-static-serve", "para": "In older versions of Django, the django.views.static.serve() view read the files it served one line at a time. Therefore, a big file with no newlines would result in memory usage equal to the size of that file. An attacker could exploit this and launch a denial-of-service attack by simultaneously requesting many large files. This view now reads the file in chunks to prevent large memory usage.Note, however, that this view has always carried a warning that it is not hardened for production use and should be used only as a development aid. Now may be a good time to audit your project and serve your files in production using a real front-end web server if you are not doing so."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.10/#database-denial-of-service-with-modelmultiplechoicefield", "para": "Given a form that uses ModelMultipleChoiceField and show_hidden_initial=True (not a documented API), it was possible for a user to cause an unreasonable number of SQL queries by submitting duplicate values for the field s data. The validation logic in ModelMultipleChoiceField now deduplicates submitted values to address this issue."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.9/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.8/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.7/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.6/#reverse-could-generate-urls-pointing-to-other-hosts", "para": "In certain situations, URL reversing could generate scheme-relative URLs  (URLs starting with two slashes), which could unexpectedly redirect a user  to a different host. An attacker could exploit this, for example, by redirecting users to a phishing site designed to ask for user s passwords.To remedy this, URL reversing now ensures that no URL starts with two slashes (//), replacing the second slash with its URL encoded counterpart (%2F). This approach ensures that semantics stay the same, while making the URL relative to the domain and not to the scheme."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.6/#file-upload-denial-of-service", "para": "Before this release, Django s file upload handing in its default configuration may degrade to producing a huge number of os.stat() system calls when a duplicate filename is uploaded. Since stat() may invoke IO, this may produce a huge data-dependent slowdown that slowly worsens over time. The net result is that given enough time, a user with the ability to upload files can cause poor performance in the upload handler, eventually causing it to become very slow simply by uploading 0-byte files. At this point, even a slow network connection and few HTTP requests would be all that is necessary to make a site unavailable.We ve remedied the issue by changing the algorithm for generating file names if a file with the uploaded name already exists. Storage.get_available_name() now appends an underscore plus a random 7 character alphanumeric string (e.g. \"_x3a1gho\"), rather than iterating through an underscore followed by a number (e.g. \"_1\", \"_2\", etc.)."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.6/#remoteusermiddleware-session-hijacking", "para": "When using the RemoteUserMiddleware and the RemoteUserBackend, a change to the REMOTE_USER header between requests without an intervening logout could result in the prior user s session being co-opted by the subsequent user. The middleware now logs the user out on a failed login attempt."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.6/#data-leakage-via-query-string-manipulation-in-contrib-admin", "para": "In older versions of Django it was possible to reveal any field s data by modifying the  popup  and  to_field  parameters of the query string on an admin change form page. For example, requesting a URL like /admin/auth/user/?_popup=1&t=password and viewing the page s HTML allowed viewing the password hash of each user. While the admin requires users to have permissions to view the change form pages in the first place, this could leak data if you rely on users having access to view only certain fields on a model.To address the issue, an exception will now be raised if a to_field value that isn t a related field to a model that has been registered with the admin is specified."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.6/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.5/#issue-caches-may-incorrectly-be-allowed-to-store-and-serve-private-data", "para": "In certain situations, Django may allow caches to store private data related to a particular session and then serve that data to requests with a different session, or no session at all. This can lead to information disclosure and can be a vector for cache poisoning.When using Django sessions, Django will set a Vary: Cookie header to ensure caches do not serve cached data to requests from other sessions. However, older versions of Internet Explorer (most likely only Internet Explorer 6, and Internet Explorer 7 if run on Windows XP or Windows Server 2003) are unable to handle the Vary header in combination with many content types. Therefore, Django would remove the header if the request was made by Internet Explorer.To remedy this, the special behavior for these older Internet Explorer versions has been removed, and the Vary header is no longer stripped from the response. In addition, modifications to the Cache-Control header for all Internet Explorer requests with a Content-Disposition header have also been removed as they were found to have similar issues."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.5/#issue-malformed-redirect-urls-from-user-input-not-correctly-validated", "para": "The validation for redirects did not correctly validate some malformed URLs, which are accepted by some browsers. This allows a user to be redirected to an unsafe URL unexpectedly.Django relies on user input in some cases (e.g. django.contrib.auth.views.login(), django.contrib.comments, and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) did not correctly validate some malformed URLs, such as http:\\\\djangoproject.com, which are accepted by some browsers with more liberal URL parsing.To remedy this, the validation in is_safe_url() has been tightened to be able to handle and correctly validate these malformed URLs."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.5/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.4/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.3/#unexpected-code-execution-using-reverse", "para": "Django s URL handling is based on a mapping of regex patterns (representing the URLs) to callable views, and Django s own processing consists of matching a requested URL against those patterns to determine the appropriate view to invoke.Django also provides a convenience function   reverse()   which performs this process in the opposite direction. The reverse() function takes information about a view and returns a URL which would invoke that view. Use of reverse() is encouraged for application developers, as the output of reverse() is always based on the current URL patterns, meaning developers do not need to change other code when making changes to URLs.One argument signature for reverse() is to pass a dotted Python path to the desired view. In this situation, Django will import the module indicated by that dotted path as part of generating the resulting URL. If such a module has import-time side effects, those side effects will occur.Thus it is possible for an attacker to cause unexpected code execution, given the following conditions:To remedy this, reverse() will now only accept and import dotted paths based on the view-containing modules listed in the project s URL pattern configuration, so as to ensure that only modules the developer intended to be imported in this fashion can or will be imported."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.3/#caching-of-anonymous-pages-could-reveal-csrf-token", "para": "Django includes both a caching framework and a system for preventing cross-site request forgery (CSRF) attacks. The CSRF-protection system is based on a random nonce sent to the client in a cookie which must be sent by the client on future requests and, in forms, a hidden value which must be submitted back with the form.The caching framework includes an option to cache responses to anonymous (i.e., unauthenticated) clients.When the first anonymous request to a given page is by a client which did not have a CSRF cookie, the cache framework will also cache the CSRF cookie and serve the same nonce to other anonymous clients who do not have a CSRF cookie. This can allow an attacker to obtain a valid CSRF cookie value and perform attacks which bypass the check for the cookie.To remedy this, the caching framework will no longer cache such responses. The heuristic for this will be:"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.3/#mysql-typecasting", "para": "The MySQL database is known to  typecast  on certain queries; for example, when querying a table which contains string values, but using a query which filters based on an integer value, MySQL will first silently coerce the strings to integers and return a result based on that.If a query is performed without first converting values to the appropriate type, this can produce unexpected results, similar to what would occur if the query itself had been manipulated.Django s model field classes are aware of their own types and most such classes perform explicit conversion of query arguments to the correct database-level type before querying. However, three model field classes did not correctly convert their arguments:These three fields have been updated to convert their arguments to the correct types before querying.Additionally, developers of custom model fields are now warned via documentation to ensure their custom field classes will perform appropriate type conversions, and users of the raw() and extra() query methods   which allow the developer to supply raw SQL or SQL fragments   will be advised to ensure they perform appropriate manual type conversions prior to executing queries."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.3/#select-for-update-requires-a-transaction", "para": "Historically, queries that use select_for_update() could be executed in autocommit mode, outside of a transaction. Before Django 1.6, Django s automatic transactions mode allowed this to be used to lock records until the next write operation. Django 1.6 introduced database-level autocommit; since then, execution in such a context voids the effect of select_for_update(). It is, therefore, assumed now to be an error and raises an exception.This change was made because such errors can be caused by including an app which expects global transactions (e.g. ATOMIC_REQUESTS set to True), or Django s old autocommit behavior, in a project which runs without them; and further, such errors may manifest as data-corruption bugs.This change may cause test failures if you use select_for_update() in a test class which is a subclass of TransactionTestCase rather than TestCase."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.3/#other-bugfixes-and-changes", "para": "Additionally, Django s vendored version of six, django.utils.six has been upgraded to the latest release (1.6.1)."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6.1/#bug-fixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6/#python-compatibility", "para": "Django 1.6, like Django 1.5, requires Python 2.6.5 or above. Python 3 is also officially supported. We highly recommend the latest minor release for each supported Python series (2.6.X, 2.7.X, 3.2.X, and 3.3.X).Django 1.6 will be the final release series to support Python 2.6; beginning with Django 1.7, the minimum supported Python version will be 2.7.Python 3.4 is not supported, but support will be added in Django 1.7."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6/#what-s-new-in-django-1-6", "para": "The default templates used by startproject and startapp have been simplified and modernized. The admin is now enabled by default in new projects; the sites framework no longer is. clickjacking prevention is now on and the database defaults to SQLite.If the default templates don t suit your tastes, you can use custom project and app templates.Django s transaction management was overhauled. Database-level autocommit is now turned on by default. This makes transaction handling more explicit and should improve performance. The existing APIs were deprecated, and new APIs were introduced, as described in the transaction management docs.Django now supports reusing the same database connection for several requests. This avoids the overhead of re-establishing a connection at the beginning of each request. For backwards compatibility, this feature is disabled by default. See Persistent connections for details.Django 1.6 ships with a new test runner that allows more flexibility in the location of tests. The previous runner (django.test.simple.DjangoTestSuiteRunner) found tests only in the models.py and tests.py modules of a Python package in INSTALLED_APPS.The new runner (django.test.runner.DiscoverRunner) uses the test discovery features built into unittest2 (the version of unittest in the Python 2.7+ standard library, and bundled with Django). With test discovery, tests can be located in any module whose name matches the pattern test*.py.In addition, the test labels provided to ./manage.py test to nominate specific tests to run must now be full Python dotted paths (or directory paths), rather than applabel.TestCase.test_method_name pseudo-paths. This allows running tests located anywhere in your codebase, rather than only in INSTALLED_APPS. For more details, see Testing in Django.This change is backwards-incompatible; see the backwards-incompatibility notes.The support for time zones introduced in Django 1.4 didn t work well with QuerySet.dates(): aggregation was always performed in UTC. This limitation was lifted in Django 1.6. Use QuerySet.datetimes() to perform time zone aware aggregation on a DateTimeField.Django 1.6 adds support for savepoints in SQLite, with some limitations.A new django.db.models.BinaryField model field allows storage of raw binary data in the database.GeoDjango now provides form fields and widgets for its geo-specialized fields. They are OpenLayers-based by default, but they can be customized to use any other JS framework.A check management command was added, enabling you to verify if your current configuration (currently oriented at settings) is compatible with the current version of Django.The Model.save() method now tries to directly UPDATE the database if the instance has a primary key value. Previously SELECT was performed to determine if UPDATE or INSERT were needed. The new algorithm needs only one query for updating an existing row while the old algorithm needed two. See Model.save() for more details.In some rare cases the database doesn t report that a matching row was found when doing an UPDATE. An example is the PostgreSQL ON UPDATE trigger which returns NULL. In such cases it is possible to set django.db.models.Options.select_on_save flag to force saving to use the old algorithm."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6/#backwards-incompatible-changes-in-1-6", "para": "WarningIn addition to the changes outlined in this section, be sure to review the deprecation plan for any features that have been removed. If you haven t updated your code within the deprecation timeline for a given feature, its removal may appear as a backwards incompatible change.Database-level autocommit is enabled by default in Django 1.6. While this doesn t change the general spirit of Django s transaction management, there are a few backwards-incompatibilities.The changes in transaction management may result in additional statements to create, release or rollback savepoints. This is more likely to happen with SQLite, since it didn t support savepoints until this release.If tests using assertNumQueries() fail because of a higher number of queries than expected, check that the extra queries are related to savepoints, and adjust the expected number of queries accordingly.In previous versions, database-level autocommit was only an option for PostgreSQL, and it was disabled by default. This option is now ignored and can be removed.In order to maintain greater consistency with Python s unittest module, the new test runner (django.test.runner.DiscoverRunner) does not automatically support some types of tests that were supported by the previous runner:Django bundles a modified version of the doctest module from the Python standard library (in django.test._doctest) and includes some additional doctest utilities. These utilities are deprecated and will be removed in Django 1.8; doctest suites should be updated to work with the standard library s doctest module (or converted to unittest-compatible tests).If you wish to delay updates to your test suite, you can set your TEST_RUNNER setting to django.test.simple.DjangoTestSuiteRunner to fully restore the old test behavior. DjangoTestSuiteRunner is deprecated but will not be removed from Django until version 1.8.This is for developers working on the GeoDjango application itself and related to the item above about changes in the test runners:The django.contrib.gis.tests.GeoDjangoTestSuiteRunner test runner has been removed and the standalone GeoDjango tests execution setup it implemented isn t supported anymore. To run the GeoDjango tests simply use the new DiscoverRunner and specify the django.contrib.gis app.The introduction of the new test runner has also slightly changed the way that test models are imported. As a result, any test that overrides AUTH_USER_MODEL to test behavior with one of Django s test user models ( django.contrib.auth.tests.custom_user.CustomUser and django.contrib.auth.tests.custom_user.ExtensionUser) must now explicitly import the User model in your test module:This import forces the custom user model to be registered. Without this import, the test will be unable to swap in the custom user model, and you will get an error reporting:Django 1.6 introduces time zone support for day, month, and week_day lookups when USE_TZ is True. These lookups were previously performed in UTC regardless of the current time zone.This requires time zone definitions in the database. If you re using SQLite, you must install pytz. If you re using MySQL, you must install pytz and load the time zone tables with mysql_tzinfo_to_sql.When the time zone support added in Django 1.4 was active, QuerySet.dates() lookups returned unexpected results, because the aggregation was performed in UTC. To fix this, Django 1.6 introduces a new API, QuerySet.datetimes(). This requires a few changes in your code.QuerySet.dates() now returns a list of date. It used to return a list of datetime.QuerySet.datetimes() returns a list of datetime.QuerySet.dates() raises an error if it s used on DateTimeField when time zone support is active. Use QuerySet.datetimes() instead.The date_hierarchy feature of the admin now relies on QuerySet.datetimes() when it s used on a DateTimeField.This requires time zone definitions in the database when USE_TZ is True. Learn more.For the same reason, accessing date_list in the context of a date-based generic view requires time zone definitions in the database when the view is based on a DateTimeField and USE_TZ is True. Learn more.Django 1.6 introduces hour, minute, and second lookups on DateTimeField. If you had model fields called hour, minute, or second, the new lookups will clash with you field names. Append an explicit exact lookup if this is an issue.When a BooleanField doesn t have an explicit default, the implicit default value is None. In previous version of Django, it was False, but that didn t represent accurately the lack of a value.Code that relies on the default value being False may raise an exception when saving new model instances to the database, because None isn t an acceptable value for a BooleanField. You should either specify default=False in the field definition, or ensure the field is set to True or False before saving the object.Extraction of translatable literals from templates with the makemessages command now correctly detects i18n constructs when they are located after a {# / #}-type comment on the same line. E.g.:Comments for translators in templates specified using {# / #} need to be at the end of a line. If they are not, the comments are ignored and makemessages will generate a warning. For example:When reversing URLs, Django didn t apply django.utils.http.urlquote to arguments before interpolating them in URL patterns. This bug is fixed in Django 1.6. If you worked around this bug by applying URL quoting before passing arguments to reverse(), this may result in double-quoting. If this happens, simply remove the URL quoting from your code. You will also have to replace special characters in URLs used in assertRedirects() with their encoded versions.The comments app now uses a GenericIPAddressField for storing commenters  IP addresses, to support comments submitted from IPv6 addresses. Until now, it stored them in an IPAddressField, which is only meant to support IPv4. When saving a comment made from an IPv6 address, the address would be silently truncated on MySQL databases, and raise an exception on Oracle. You will need to change the column type in your database to benefit from this change.For MySQL, execute this query on your project s database:For Oracle, execute this query:If you do not apply this change, the behavior is unchanged: on MySQL, IPv6 addresses are silently truncated; on Oracle, an exception is generated. No database change is needed for SQLite or PostgreSQL databases.When you are running raw SQL queries through the cursor.execute method, the rule about doubling percent literals (%) inside the query has been unified. Past behavior depended on the database backend. Now, across all backends, you only need to double literal percent characters if you are also providing replacement parameters. For example:SQLite users need to check and update such queries.HTML rendering of model form fields corresponding to ManyToManyField model fields used to get the hard-coded sentence:(or its translation to the active locale) imposed as the help legend shown along them if neither model nor form help_text attributes were specified by the user (or this string was appended to any help_text that was provided).Since this happened at the model layer, there was no way to prevent the text from appearing in cases where it wasn t applicable such as form fields that implement user interactions that don t involve a keyboard and/or a mouse.Starting with Django 1.6, as an ad-hoc temporary backward-compatibility provision, the logic to add the  Hold down   sentence has been moved to the model form field layer and modified to add the text only when the associated widget is SelectMultiple or selected subclasses.The change can affect you in a backward incompatible way if you employ custom model form fields and/or widgets for ManyToManyField model fields whose UIs do rely on the automatic provision of the mentioned hard-coded sentence. These form field implementations need to adapt to the new scenario by providing their own handling of the help_text attribute.Applications that use Django model form facilities together with Django built-in form fields and widgets aren t affected but need to be aware of what s described in Munging of help text of model form fields for ManyToManyField fields below.The QuerySet iteration was changed to immediately convert all fetched rows to Model objects. In Django 1.5 and earlier the fetched rows were converted to Model objects in chunks of 100.Existing code will work, but the amount of rows converted to objects might change in certain use cases. Such usages include partially looping over a queryset or any usage which ends up doing __bool__ or __contains__.Notably most database backends did fetch all the rows in one go already in 1.5.It is still possible to convert the fetched rows to Model objects lazily by using the iterator() method.This is consistent with how methods like Form.as_p and Form.as_ul render labels.If you manually render label_tag in your templates:you ll want to remove the colon (or whatever other separator you may be using) to avoid duplicating it when upgrading to Django 1.6. The following template in Django 1.6 will render identically to the above template in Django 1.5, except that the colon will appear inside the <label> element.will render something like:If you want to keep the current behavior of rendering label_tag without the label_suffix, instantiate the form label_suffix=''. You can also customize the label_suffix on a per-field basis using the new label_suffix parameter on label_tag().To achieve preserving and restoring list view filters, admin views now pass around the _changelist_filters GET parameter. It s important that you account for that change if you have custom admin templates or if your tests rely on the previous URLs. If you want to revert to the original behavior you can set the preserve_filters attribute to False.Past versions of Django used base 36 encoding of the User primary key in the password reset views and URLs (django.contrib.auth.views.password_reset_confirm()). Base 36 encoding is sufficient if the user primary key is an integer, however, with the introduction of custom user models in Django 1.5, that assumption may no longer be true.django.contrib.auth.views.password_reset_confirm() has been modified to take a uidb64 parameter instead of uidb36. If you are reversing this view, for example in a custom password_reset_email.html template, be sure to update your code.A temporary shim for django.contrib.auth.views.password_reset_confirm() that will allow password reset links generated prior to Django 1.6 to continue to work has been added to provide backwards compatibility; this will be removed in Django 1.7. Thus, as long as your site has been running Django 1.6 for more than PASSWORD_RESET_TIMEOUT_DAYS, this change will have no effect. If not (for example, if you upgrade directly from Django 1.5 to Django 1.7), then any password reset links generated before you upgrade to Django 1.7 or later won t work after the upgrade.In addition, if you have any custom password reset URLs, you will need to update them by replacing uidb36 with uidb64 and the dash that follows that pattern with a slash. Also add _\\- to the list of characters that may match the uidb64 pattern.For example:becomes:You may also want to add the shim to support the old style reset links. Using the example above, you would modify the existing url by replacing django.contrib.auth.views.password_reset_confirm with django.contrib.auth.views.password_reset_confirm_uidb36 and also remove the name argument so it doesn t conflict with the new url:You can remove this URL pattern after your app has been deployed with Django 1.6 for PASSWORD_RESET_TIMEOUT_DAYS.Historically, django.contrib.sessions used pickle to serialize session data before storing it in the backend. If you re using the signed cookie session backend and SECRET_KEY is known by an attacker (there isn t an inherent vulnerability in Django that would cause it to leak), the attacker could insert a string into his session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily available on the internet. Although the cookie session storage signs the cookie-stored data to prevent tampering, a SECRET_KEY leak immediately escalates to a remote code execution vulnerability.This attack can be mitigated by serializing session data using JSON rather than pickle. To facilitate this, Django 1.5.3 introduced a new setting, SESSION_SERIALIZER, to customize the session serialization format. For backwards compatibility, this setting defaulted to using pickle in Django 1.5.3, but we ve changed the default to JSON in 1.6. If you upgrade and switch from pickle to JSON, sessions created before the upgrade will be lost. While JSON serialization does not support all Python objects like pickle does, we highly recommend using JSON-serialized sessions. Be aware of the following when checking your code to determine if JSON serialization will work for your application:See the Session serialization documentation for more details.Django 1.6 contains many changes to the ORM. These changes fall mostly in three categories:These changes can result in some compatibility problems. For example, some queries will now generate different table aliases. This can affect QuerySet.extra(). In addition some queries will now produce different results. An example is exclude(condition) where the condition is a complex one (referencing multijoins inside Q objects). In many cases the affected queries didn t produce correct results in Django 1.5 but do now. Unfortunately there are also cases that produce different results, but neither Django 1.5 nor 1.6 produce correct results.Finally, there have been many changes to the ORM internal APIs.The django.db.models.query.EmptyQuerySet can t be instantiated any more - it is only usable as a marker class for checking if none() has been called: isinstance(qs.none(), EmptyQuerySet)If your CSS/JavaScript code used to access HTML input widgets by type, you should review it as type='text' widgets might be now output as type='email', type='url' or type='number' depending on their corresponding field type.Form field s error_messages that contain a placeholder should now always use a named placeholder (\"Value '%(value)s' is too big\" instead of \"Value '%s' is too big\"). See the corresponding field documentation for details about the names of the placeholders. The changes in 1.6 particularly affect DecimalField and ModelMultipleChoiceField.Some error_messages for IntegerField, EmailField, IPAddressField, GenericIPAddressField, and SlugField have been suppressed because they duplicated error messages already provided by validators tied to the fields.Due to a change in the form validation workflow, TypedChoiceField coerce method should always return a value present in the choices field attribute. That limitation should be lift again in Django 1.7.There have been changes in the way timeouts are handled in cache backends. Explicitly passing in timeout=None no longer results in using the default timeout. It will now set a non-expiring timeout. Passing 0 into the memcache backend no longer uses the default timeout, and now will set-and-expire-immediately the value.The django.contrib.flatpages app used to set custom HTTP headers for debugging purposes. This functionality was not documented and made caching ineffective so it has been removed, along with its generic implementation, previously available in django.core.xheaders.The XViewMiddleware has been moved from django.middleware.doc to django.contrib.admindocs.middleware because it is an implementation detail of admindocs, proven not to be reusable in general.GenericIPAddressField will now only allow blank values if null values are also allowed. Creating a GenericIPAddressField where blank is allowed but null is not will trigger a model validation error because blank values are always stored as null. Previously, storing a blank value in a field which did not allow null would cause a database exception at runtime.If a NoReverseMatch exception is raised from a method when rendering a template, it is not silenced. For example, {{ obj.view_href }} will cause template rendering to fail if view_href() raises NoReverseMatch. There is no change to the {% url %} tag, it causes template rendering to fail like always when NoReverseMatch is raised.django.test.Client.logout() now calls django.contrib.auth.logout() which will send the user_logged_out() signal.Authentication views are now reversed by name, not their locations in django.contrib.auth.views. If you are using the views without a name, you should update your urlpatterns to use url() with the name parameter. For example:becomes:RedirectView now has a pattern_name attribute which allows it to choose the target by reversing the URL.In Django 1.4 and 1.5, a blank string was unintentionally not considered to be a valid password. This meant set_password() would save a blank password as an unusable password like set_unusable_password() does, and thus check_password() always returned False for blank passwords. This has been corrected in this release: blank passwords are now valid.The admin changelist_view previously accepted a pop GET parameter to signify it was to be displayed in a popup. This parameter has been renamed to _popup to be consistent with the rest of the admin views. You should update your custom templates if they use the previous parameter name.validate_email() now accepts email addresses with localhost as the domain.The new makemessages --keep-pot option prevents deleting the temporary .pot file generated before creating the .po file.The undocumented django.core.servers.basehttp.WSGIServerException has been removed. Use socket.error provided by the standard library instead. This change was also released in Django 1.5.5.The signature of django.views.generic.base.RedirectView.get_redirect_url() has changed and now accepts positional arguments as well (*args, **kwargs). Any unnamed captured group will now be passed to get_redirect_url() which may result in a TypeError if you don t update the signature of your custom method."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.6/#features-deprecated-in-1-6", "para": "Transaction management was completely overhauled in Django 1.6, and the current APIs are deprecated:Django s comment framework has been deprecated and is no longer supported. It will be available in Django 1.6 and 1.7, and removed in Django 1.8. Most users will be better served with a custom solution, or a hosted product like Disqus.The code formerly known as django.contrib.comments is still available in an external repository.The end of upstream support periods was reached in December 2011 for PostgreSQL 8.2 and in February 2013 for 8.3. As a consequence, Django 1.6 sets 8.4 as the minimum PostgreSQL version it officially supports.You re strongly encouraged to use the most recent version of PostgreSQL available, because of performance improvements and to take advantage of the native streaming replication available in PostgreSQL 9.x.The template system generally escapes all variables to avoid XSS attacks. However, due to an accident of history, the cycle and firstof tags render their arguments as-is.Django 1.6 starts a process to correct this inconsistency. The future template library provides alternate implementations of cycle and firstof that autoescape their inputs. If you re using these tags, you re encouraged to include the following line at the top of your templates to enable the new behavior:or:The tags implementing the old behavior have been deprecated, and in Django 1.8, the old behavior will be replaced with the new behavior. To ensure compatibility with future versions of Django, existing templates should be modified to use the future versions.If necessary, you can temporarily disable auto-escaping with mark_safe() or {% autoescape off %}.CacheMiddleware and UpdateCacheMiddleware used to provide a way to cache requests only if they weren t made by a logged-in user. This mechanism was largely ineffective because the middleware correctly takes into account the Vary: Cookie HTTP header, and this header is being set on a variety of occasions, such as:This makes the cache effectively work on a per-session basis regardless of the CACHE_MIDDLEWARE_ANONYMOUS_ONLY setting.CommonMiddleware used to provide basic reporting of broken links by email when SEND_BROKEN_LINK_EMAILS is set to True.Because of intractable ordering problems between CommonMiddleware and LocaleMiddleware, this feature was split out into a new middleware: BrokenLinkEmailsMiddleware.If you re relying on this feature, you should add 'django.middleware.common.BrokenLinkEmailsMiddleware' to your MIDDLEWARE_CLASSES setting and remove SEND_BROKEN_LINK_EMAILS from your settings.If you defined your own form widgets and defined the _has_changed method on a widget, you should now define this method on the form field itself.Model._meta.module_name was renamed to model_name. Despite being a private API, it will go through a regular deprecation path.Model._meta.get_(add|change|delete)_permission methods were deprecated. Even if they were not part of the public API they ll also go through a regular deprecation path. You can replace them with django.contrib.auth.get_permission_codename('action', Model._meta) where 'action' is 'add', 'change', or 'delete'.Methods that return a QuerySet such as Manager.get_query_set or ModelAdmin.queryset have been renamed to get_queryset.If you are writing a library that implements, for example, a Manager.get_query_set method, and you need to support old Django versions, you should rename the method and conditionally add an alias with the old name:If you are writing a library that needs to call the get_queryset method and must support old Django versions, you should write:In the general case of a custom manager that both implements its own get_queryset method and calls that method, and needs to work with older Django versions, and libraries that have not been updated yet, it is useful to define a get_queryset_compat method as below and use it internally to your manager:This helps to minimize the changes that are needed, but also works correctly in the case of subclasses (such as RelatedManagers from Django 1.5) which might override either get_query_set or get_queryset.The shortcut view was moved from django.views.defaults to django.contrib.contenttypes.views shortly after the 1.0 release, but the old location was never deprecated. This oversight was corrected in Django 1.6 and you should now use the new location.The URLconf django.conf.urls.shortcut was also deprecated. If you re including it in an URLconf, simply replace:with:Previously, if you wanted a ModelForm to use all fields on the model, you could simply omit the Meta.fields attribute, and all fields would be used.This can lead to security problems where fields are added to the model and, unintentionally, automatically become editable by end users. In some cases, particular with boolean fields, it is possible for this problem to be completely invisible. This is a form of Mass assignment vulnerability.For this reason, this behavior is deprecated, and using the Meta.exclude option is strongly discouraged. Instead, all fields that are intended for inclusion in the form should be listed explicitly in the fields attribute.If this security concern really does not apply in your case, there is a shortcut to explicitly indicate that all fields should be used - use the special value \"__all__\" for the fields attribute:If you have custom ModelForms that only need to be used in the admin, there is another option. The admin has its own methods for defining fields (fieldsets etc.), and so adding a list of fields to the ModelForm is redundant. Instead, simply omit the Meta inner class of the ModelForm, or omit the Meta.model attribute. Since the ModelAdmin subclass knows which model it is for, it can add the necessary attributes to derive a functioning ModelForm. This behavior also works for earlier Django versions.The generic views CreateView and UpdateView, and anything else derived from ModelFormMixin, are vulnerable to the security problem described in the section above, because they can automatically create a ModelForm that uses all fields for a model.For this reason, if you use these views for editing models, you must also supply the fields attribute (new in Django 1.6), which is a list of model fields and works in the same way as the ModelForm Meta.fields attribute. Alternatively, you can set the form_class attribute to a ModelForm that explicitly defines the fields to be used. Defining an UpdateView or CreateView subclass to be used with a model but without an explicit list of fields is deprecated.All special handling of the help_text attribute of ManyToManyField model fields performed by standard model or model form fields as described in Help text of model form fields for ManyToManyField fields above is deprecated and will be removed in Django 1.8.Help text of these fields will need to be handled either by applications, custom form fields or widgets, just like happens with the rest of the model field types."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.12/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.11/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.10/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.9/#reverse-could-generate-urls-pointing-to-other-hosts", "para": "In certain situations, URL reversing could generate scheme-relative URLs  (URLs starting with two slashes), which could unexpectedly redirect a user  to a different host. An attacker could exploit this, for example, by redirecting users to a phishing site designed to ask for user s passwords.To remedy this, URL reversing now ensures that no URL starts with two slashes (//), replacing the second slash with its URL encoded counterpart (%2F). This approach ensures that semantics stay the same, while making the URL relative to the domain and not to the scheme."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.9/#file-upload-denial-of-service", "para": "Before this release, Django s file upload handing in its default configuration may degrade to producing a huge number of os.stat() system calls when a duplicate filename is uploaded. Since stat() may invoke IO, this may produce a huge data-dependent slowdown that slowly worsens over time. The net result is that given enough time, a user with the ability to upload files can cause poor performance in the upload handler, eventually causing it to become very slow simply by uploading 0-byte files. At this point, even a slow network connection and few HTTP requests would be all that is necessary to make a site unavailable.We ve remedied the issue by changing the algorithm for generating file names if a file with the uploaded name already exists. Storage.get_available_name() now appends an underscore plus a random 7 character alphanumeric string (e.g. \"_x3a1gho\"), rather than iterating through an underscore followed by a number (e.g. \"_1\", \"_2\", etc.)."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.9/#remoteusermiddleware-session-hijacking", "para": "When using the RemoteUserMiddleware and the RemoteUserBackend, a change to the REMOTE_USER header between requests without an intervening logout could result in the prior user s session being co-opted by the subsequent user. The middleware now logs the user out on a failed login attempt."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.9/#data-leakage-via-query-string-manipulation-in-contrib-admin", "para": "In older versions of Django it was possible to reveal any field s data by modifying the  popup  and  to_field  parameters of the query string on an admin change form page. For example, requesting a URL like /admin/auth/user/?pop=1&t=password and viewing the page s HTML allowed viewing the password hash of each user. While the admin requires users to have permissions to view the change form pages in the first place, this could leak data if you rely on users having access to view only certain fields on a model.To address the issue, an exception will now be raised if a to_field value that isn t a related field to a model that has been registered with the admin is specified."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.8/#caches-may-incorrectly-be-allowed-to-store-and-serve-private-data", "para": "In certain situations, Django may allow caches to store private data related to a particular session and then serve that data to requests with a different session, or no session at all. This can lead to information disclosure and can be a vector for cache poisoning.When using Django sessions, Django will set a Vary: Cookie header to ensure caches do not serve cached data to requests from other sessions. However, older versions of Internet Explorer (most likely only Internet Explorer 6, and Internet Explorer 7 if run on Windows XP or Windows Server 2003) are unable to handle the Vary header in combination with many content types. Therefore, Django would remove the header if the request was made by Internet Explorer.To remedy this, the special behavior for these older Internet Explorer versions has been removed, and the Vary header is no longer stripped from the response. In addition, modifications to the Cache-Control header for all Internet Explorer requests with a Content-Disposition header have also been removed as they were found to have similar issues."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.8/#malformed-redirect-urls-from-user-input-not-correctly-validated", "para": "The validation for redirects did not correctly validate some malformed URLs, which are accepted by some browsers. This allows a user to be redirected to an unsafe URL unexpectedly.Django relies on user input in some cases (e.g. django.contrib.auth.views.login(), django.contrib.comments, and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) did not correctly validate some malformed URLs, such as http:\\\\djangoproject.com, which are accepted by some browsers with more liberal URL parsing.To remedy this, the validation in is_safe_url() has been tightened to be able to handle and correctly validate these malformed URLs."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.7/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.6/#unexpected-code-execution-using-reverse", "para": "Django s URL handling is based on a mapping of regex patterns (representing the URLs) to callable views, and Django s own processing consists of matching a requested URL against those patterns to determine the appropriate view to invoke.Django also provides a convenience function   reverse()   which performs this process in the opposite direction. The reverse() function takes information about a view and returns a URL which would invoke that view. Use of reverse() is encouraged for application developers, as the output of reverse() is always based on the current URL patterns, meaning developers do not need to change other code when making changes to URLs.One argument signature for reverse() is to pass a dotted Python path to the desired view. In this situation, Django will import the module indicated by that dotted path as part of generating the resulting URL. If such a module has import-time side effects, those side effects will occur.Thus it is possible for an attacker to cause unexpected code execution, given the following conditions:To remedy this, reverse() will now only accept and import dotted paths based on the view-containing modules listed in the project s URL pattern configuration, so as to ensure that only modules the developer intended to be imported in this fashion can or will be imported."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.6/#caching-of-anonymous-pages-could-reveal-csrf-token", "para": "Django includes both a caching framework and a system for preventing cross-site request forgery (CSRF) attacks. The CSRF-protection system is based on a random nonce sent to the client in a cookie which must be sent by the client on future requests and, in forms, a hidden value which must be submitted back with the form.The caching framework includes an option to cache responses to anonymous (i.e., unauthenticated) clients.When the first anonymous request to a given page is by a client which did not have a CSRF cookie, the cache framework will also cache the CSRF cookie and serve the same nonce to other anonymous clients who do not have a CSRF cookie. This can allow an attacker to obtain a valid CSRF cookie value and perform attacks which bypass the check for the cookie.To remedy this, the caching framework will no longer cache such responses. The heuristic for this will be:"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.6/#mysql-typecasting", "para": "The MySQL database is known to  typecast  on certain queries; for example, when querying a table which contains string values, but using a query which filters based on an integer value, MySQL will first silently coerce the strings to integers and return a result based on that.If a query is performed without first converting values to the appropriate type, this can produce unexpected results, similar to what would occur if the query itself had been manipulated.Django s model field classes are aware of their own types and most such classes perform explicit conversion of query arguments to the correct database-level type before querying. However, three model field classes did not correctly convert their arguments:These three fields have been updated to convert their arguments to the correct types before querying.Additionally, developers of custom model fields are now warned via documentation to ensure their custom field classes will perform appropriate type conversions, and users of the raw() and extra() query methods   which allow the developer to supply raw SQL or SQL fragments   will be advised to ensure they perform appropriate manual type conversions prior to executing queries."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.6/#bugfixes", "para": "Additionally, Django s vendored version of six, django.utils.six, has been upgraded to the latest release (1.6.1)."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.5/#readdressed-denial-of-service-via-password-hashers", "para": "Django 1.5.4 imposes a 4096-byte limit on passwords in order to mitigate a denial-of-service attack through submission of bogus but extremely large passwords. In Django 1.5.5, we ve reverted this change and instead improved the speed of our PBKDF2 algorithm by not rehashing the key on every iteration."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.5/#properly-rotate-csrf-token-on-login", "para": "This behavior introduced as a security hardening measure in Django 1.5.2 did not work properly and is now fixed."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.5/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.5/#backwards-incompatible-changes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.4/#denial-of-service-via-password-hashers", "para": "In previous versions of Django, no limit was imposed on the plaintext length of a password. This allowed a denial-of-service attack through submission of bogus but extremely large passwords, tying up server resources performing the (expensive, and increasingly expensive with the length of the password) calculation of the corresponding hash.As of 1.5.4, Django s authentication framework imposes a 4096-byte limit on passwords, and will fail authentication with any submitted password of greater length."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.4/../../howto/error-reporting/#django.views.decorators.debug.sensitive_post_parameters", "para": "The decoration of the add_view and user_change_password user admin views with sensitive_post_parameters() did not include method_decorator() (required since the views are methods) resulting in the decorator not being properly applied. This usage has been fixed and sensitive_post_parameters() will now throw an exception if it s improperly used."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.4/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.3/#directory-traversal-vulnerability-in-ssi-template-tag", "para": "In previous versions of Django it was possible to bypass the ALLOWED_INCLUDE_ROOTS setting used for security with the ssi template tag by specifying a relative path that starts with one of the allowed roots. For example, if ALLOWED_INCLUDE_ROOTS = (\"/var/www\",) the following would be possible:In practice this is not a very common problem, as it would require the template author to put the ssi file in a user-controlled variable, but it s possible in principle."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.3/../../topics/http/sessions/#module-django.contrib.sessions", "para": "django.contrib.sessions currently uses pickle to serialize session data before storing it in the backend. If you re using the signed cookie session backend and SECRET_KEY is known by an attacker (there isn t an inherent vulnerability in Django that would cause it to leak), the attacker could insert a string into his session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily available on the internet. Although the cookie session storage signs the cookie-stored data to prevent tampering, a SECRET_KEY leak immediately escalates to a remote code execution vulnerability.This attack can be mitigated by serializing session data using JSON rather than pickle. To facilitate this, Django 1.5.3 introduces a new setting, SESSION_SERIALIZER, to customize the session serialization format. For backwards compatibility, this setting defaults to using pickle. While JSON serialization does not support all Python objects like pickle does, we highly recommend switching to JSON-serialized values. Also, as JSON requires string keys, you will likely run into problems if you are using non-string keys in request.session. See the Session serialization documentation for more details."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.2/#mitigated-possible-xss-attack-via-user-supplied-redirect-urls", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login(), django.contrib.comments, and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) didn t check if the scheme is http(s) and as such allowed javascript:... URLs to be entered. If a developer relied on is_safe_url() to provide safe redirect targets and put such a URL into a link, they could suffer from a XSS attack. This bug doesn t affect Django currently, since we only put this URL into the Location response header and browsers seem to ignore JavaScript there."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.2/../../ref/contrib/admin/#module-django.contrib.admin", "para": "If a URLField is used in Django 1.5, it displays the current value of the field and a link to the target on the admin change page. The display routine of this widget was flawed and allowed for XSS."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5.2/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5/#overview", "para": "The biggest new feature in Django 1.5 is the configurable User model. Before Django 1.5, applications that wanted to use Django s auth framework (django.contrib.auth) were forced to use Django s definition of a  user . In Django 1.5, you can now swap out the User model for one that you write yourself. This could be a simple extension to the existing User model   for example, you could add a Twitter or Facebook ID field   or you could completely replace the User with one totally customized for your site.Django 1.5 is also the first release with Python 3 support! We re labeling this support  experimental  because we don t yet consider it production-ready, but everything s in place for you to start porting your apps to Python 3. Our next release, Django 1.6, will support Python 3 without reservations.Other notable new features in Django 1.5 include:Wherever possible we try to introduce new features in a backwards-compatible manner per our API stability policy. However, as with previous releases, Django 1.5 ships with some minor backwards incompatible changes; people upgrading from previous versions of Django should read that list carefully.One deprecated feature worth noting is the shift to  new-style  url tag. Prior to Django 1.3, syntax like {% url myview %} was interpreted incorrectly (Django considered \"myview\" to be a literal name of a view, not a template variable named myview). Django 1.3 and above introduced the {% load url from future %} syntax to bring in the corrected behavior where myview was seen as a variable.The upshot of this is that if you are not using {% load url from future %} in your templates, you ll need to change tags like {% url myview %} to {% url \"myview\" %}. If you were using {% load url from future %} you can simply remove that line under Django 1.5"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5/#python-compatibility", "para": "Django 1.5 requires Python 2.6.5 or above, though we highly recommend Python 2.7.3 or above. Support for Python 2.5 and below has been dropped.This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.6 or newer as their default version. If you re still using Python 2.5, however, you ll need to stick to Django 1.4 until you can upgrade your Python version. Per our support policy, Django 1.4 will continue to receive security support until the release of Django 1.6.Django 1.5 does not run on a Jython final release, because Jython s latest release doesn t currently support Python 2.6. However, Jython currently does offer an alpha release featuring 2.7 support, and Django 1.5 supports that alpha release.Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and above. This comes in the form of a single codebase; you don t need to install a different version of Django on Python 3. This means that you can write applications targeted for just Python 2, just Python 3, or single applications that support both platforms.However, we re labeling this support  experimental  for now: although it s received extensive testing via our automated test suite, it s received very little real-world testing. We ve done our best to eliminate bugs, but we can t be sure we covered all possible uses of Django.Some features of Django aren t available because they depend on third-party software that hasn t been ported to Python 3 yet, including:Further, Django s more than a web framework; it s an ecosystem of pluggable components. At this point, very few third-party applications have been ported to Python 3, so it s unlikely that a real-world application will have all its dependencies satisfied under Python 3.Thus, we re recommending that Django 1.5 not be used in production under Python 3. Instead, use this opportunity to begin porting applications to Python 3. If you re an author of a pluggable component, we encourage you to start porting now.We plan to offer first-class, production-ready support for Python 3 in our next release, Django 1.6."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5/#what-s-new-in-django-1-5", "para": "In Django 1.5, you can now use your own model as the store for user-related data. If your project needs a username with more than 30 characters, or if you want to store user s names in a format other than first name/last name, or you want to put custom profile information onto your User object, you can now do so.If you have a third-party reusable application that references the User model, you may need to make some changes to the way you reference User instances. You should also document any specific features of the User model that your application relies upon.See the documentation on custom user models for more details.The method Model.save() has a new keyword argument update_fields. By using this argument it is possible to save only a select list of model s fields. This can be useful for performance reasons or when trying to avoid overwriting concurrent changes.Deferred instances (those loaded by .only() or .defer()) will automatically save just the loaded fields. If any field is set manually after load, that field will also get updated on save.See the Model.save() documentation for more details.When traversing relations, the ORM will avoid re-fetching objects that were previously loaded. For example, with the tutorial s models:In Django 1.5, the third line no longer triggers a new SQL query to fetch first_choice.poll; it was set by the second line.For one-to-one relationships, both sides can be cached. For many-to-one relationships, only the single side of the relationship can be cached. This is particularly helpful in combination with prefetch_related.Before Django 1.5, it was possible to create a streaming response by passing an iterator to HttpResponse. But this was unreliable: any middleware that accessed the content attribute would consume the iterator prematurely.You can now explicitly generate a streaming response with the new StreamingHttpResponse class. This class exposes a streaming_content attribute which is an iterator.Since StreamingHttpResponse does not have a content attribute, middleware that needs access to the response content must test for streaming responses and behave accordingly.To make it easier to deal with JavaScript templates which collide with Django s syntax, you can now use the verbatim block tag to avoid parsing the tag s content.The methods ContentTypeManager.get_for_model() and ContentTypeManager.get_for_models() have a new keyword argument   respectively for_concrete_model and for_concrete_models. By passing False using this argument it is now possible to retrieve the ContentType associated with proxy models.In all generic class-based views (or any class-based view inheriting from ContextMixin), the context dictionary contains a view variable that points to the View instance.Additions to the docs include a revamped Tutorial 3 and a new tutorial on testing. A new section,  Advanced Tutorials , offers How to write reusable apps as well as a step-by-step guide for new contributors in Writing your first patch for Django.Django 1.5 also includes several smaller improvements worth noting:The template engine now interprets True, False and None as the corresponding Python objects.django.utils.timezone provides a helper for converting aware datetimes between time zones. See localtime().The generic views support OPTIONS requests.Management commands do not raise SystemExit any more when called by code from call_command(). Any exception raised by the command (mostly CommandError) is propagated.Moreover, when you output errors or messages in your custom commands, you should now use self.stdout.write('message') and self.stderr.write('error') (see the note on management commands output).The dumpdata management command outputs one row at a time, preventing out-of-memory errors when dumping large datasets.In the localflavor for Canada,  pq  was added to the acceptable codes for Quebec. It s an old abbreviation.The receiver decorator is now able to connect to more than one signal by supplying a list of signals.In the admin, you can now filter users by groups which they are members of.QuerySet.bulk_create() now has a batch_size argument. By default the batch_size is unlimited except for SQLite where single batch is limited so that 999 parameters per query isn t exceeded.The LOGIN_URL and LOGIN_REDIRECT_URL settings now also accept view function names and named URL patterns. This allows you to reduce configuration duplication. More information can be found in the login_required() documentation.Django now provides a mod_wsgi auth handler.The QuerySet.delete() and Model.delete() can now take fast-path in some cases. The fast-path allows for less queries and less objects fetched into memory. See QuerySet.delete() for details.An instance of ResolverMatch is stored on the request as resolver_match.By default, all logging messages reaching the django logger when DEBUG is True are sent to the console (unless you redefine the logger in your LOGGING setting).When using RequestContext, it is now possible to look up permissions by using {% if 'someapp.someperm' in perms %} in templates.It s not required any more to have 404.html and 500.html templates in the root templates directory. Django will output some basic error messages for both situations when those templates are not found. Of course, it s still recommended as good practice to provide those templates in order to present pretty error pages to the user.django.contrib.auth provides a new signal that is emitted whenever a user fails to login successfully. See user_login_failedThe new loaddata --ignorenonexistent option ignore data for fields that no longer exist.assertXMLEqual() and assertXMLNotEqual() new assertions allow you to test equality for XML content at a semantic level, without caring for syntax differences (spaces, attribute order, etc.).RemoteUserMiddleware now forces logout when the REMOTE_USER header disappears during the same browser session.The cache-based session backend can store session data in a non-default cache.Multi-column indexes can now be created on models. Read the index_together documentation for more information.During Django s logging configuration verbose Deprecation warnings are enabled and warnings are captured into the logging system. Logged warnings are routed through the console logging handler, which by default requires DEBUG to be True for output to be generated. The result is that DeprecationWarnings should be printed to the console in development environments the way they have been in Python versions < 2.7.The API for django.contrib.admin.ModelAdmin.message_user() method has been modified to accept additional arguments adding capabilities similar to django.contrib.messages.add_message(). This is useful for generating error messages from admin actions.The admin s list filters can now be customized per-request thanks to the new django.contrib.admin.ModelAdmin.get_list_filter() method."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5/#backwards-incompatible-changes-in-1-5", "para": "WarningIn addition to the changes outlined in this section, be sure to review the deprecation plan for any features that have been removed. If you haven t updated your code within the deprecation timeline for a given feature, its removal may appear as a backwards incompatible change.The new ALLOWED_HOSTS setting validates the request s Host header and protects against host-poisoning attacks. This setting is now required whenever DEBUG is False, or else django.http.HttpRequest.get_host() will raise SuspiciousOperation. For more details see the full documentation for the new setting.Abstract models are able to define a custom manager, and that manager will be inherited by any concrete models extending the abstract model. However, if you try to use the abstract model to call a method on the manager, an exception will now be raised. Previously, the call would have been permitted, but would have failed as soon as any database operation was attempted (usually with a  table does not exist  error from the database).If you have functionality on a manager that you have been invoking using the abstract class, you should migrate that logic to a Python staticmethod or classmethod on the abstract class.For consistency with the other date-based generic views, YearArchiveView now passes year in the context as a datetime.date rather than a string.  If you are using {{ year }} in your templates, you must replace it with {{ year|date:\"Y\" }}.next_year and previous_year were also added in the context. They are calculated according to allow_empty and allow_future.YearArchiveView and MonthArchiveView were documented to provide a date_list sorted in ascending order in the context, like their function-based predecessors, but it actually was in descending order. In 1.5, the documented order was restored. You may want to add (or remove) the reversed keyword when you re iterating on date_list in a template:ArchiveIndexView still provides a date_list in descending order.For consistency with the design of the other generic views, TemplateView no longer passes a params dictionary into the context, instead passing the variables from the URLconf directly into the context.request.POST will no longer include data posted via HTTP requests with non form-specific content-types in the header. In prior versions, data posted with content-types other than multipart/form-data or application/x-www-form-urlencoded would still end up represented in the request.POST attribute. Developers wishing to access the raw POST data for these cases, should use the request.body attribute instead.Django used to send the request_finished signal as soon as the view function returned a response. This interacted badly with streaming responses that delay content generation.This signal is now sent after the content is fully consumed by the WSGI gateway. This might be backwards incompatible if you rely on the signal being fired before sending the response content to the client. If you do, you should consider using middleware instead.NoteSome WSGI servers and middleware do not always call close on the response object after handling a request, most notably uWSGI prior to 1.2.6 and Sentry s error reporting middleware up to 2.0.7. In those cases the request_finished signal isn t sent at all. This can result in idle connections to database and memcache servers.Unlike GET and POST, these HTTP methods aren t implemented by web browsers. Rather, they re used in APIs, which transfer data in various formats such as JSON or XML. Since such requests may contain arbitrary data, Django doesn t attempt to decode their body.However, the test client used to build a query string for OPTIONS and DELETE requests like for GET, and a request body for PUT requests like for POST. This encoding was arbitrary and inconsistent with Django s behavior when it receives the requests, so it was removed in Django 1.5.If you were using the data parameter in an OPTIONS or a DELETE request, you must convert it to a query string and append it to the path parameter.If you were using the data parameter in a PUT request without a content_type, you must encode your data before passing it to the test client and set the content_type argument.As explained below, Django 1.5 deprecates django.utils.simplejson in favor of Python 2.6 s built-in json module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of simplejson, it may trigger errors in some circumstances.JSON-related features in Django 1.4 always used django.utils.simplejson. This module was actually:In Django 1.5, those features use Python s json module, which is based on version 2.0.9 of simplejson.There are no known incompatibilities between Django s copy of version 2.0.7 and Python s copy of version 2.0.9. However, there are some incompatibilities between other versions of simplejson:More information on these incompatibilities is available in ticket #18023.The net result is that, if you have installed simplejson and your code uses Django s serialization internals directly   for instance django.core.serializers.json.DjangoJSONEncoder, the switch from simplejson to json could break your code. (In general, changes to internals aren t documented; we re making an exception here.)At this point, the maintainers of Django believe that using json from the standard library offers the strongest guarantee of backwards-compatibility. They recommend to use it from now on.If you have written a custom password hasher, your encode(), verify() or safe_summary() methods should accept Unicode parameters (password, salt or encoded). If any of the hashing methods need bytestrings, you can use the force_bytes() utility to encode the strings.When using object pagination, the previous_page_number() and next_page_number() methods of the Page object did not check if the returned number was inside the existing page range. It does check it now and raises an InvalidPage exception when the number is either too low or too high.PostgreSQL s autocommit option didn t work as advertised previously. It did work for single transaction block, but after the first block was left the autocommit behavior was never restored. This bug is now fixed in 1.5. While this is only a bug fix, it is worth checking your applications behavior if you are using PostgreSQL together with the autocommit option.Django s session middleware will skip saving the session data if the response s status code is 500.Prior to Django 1.5, if you attempted to log into the admin interface and mistakenly used your email address instead of your username, the admin interface would provide a warning advising that your email address was not your username. In Django 1.5, the introduction of custom user models has required the removal of this warning. This doesn t change the login behavior of the admin site; it only affects the warning message that is displayed under one particular mode of login failure.Some changes have been introduced in the execution of tests that might be backward-incompatible for some testing setups:Previously, the test database was truncated before each test run in a TransactionTestCase.In order to be able to run unit tests in any order and to make sure they are always isolated from each other, TransactionTestCase will now reset the database after each test run instead.TransactionTestCase tests used to reset primary key sequences automatically together with the database flushing actions described above.This has been changed so no sequences are implicitly reset. This can cause TransactionTestCase tests that depend on hard-coded primary key values to break.The new reset_sequences attribute can be used to force the old behavior for TransactionTestCase that might need it.In order to make sure all TestCase code starts with a clean database, tests are now executed in the following order:This should not cause any problems unless you have existing doctests which assume a TransactionTestCase executed earlier left some database state behind or unit tests that rely on some form of state being preserved after the execution of other tests. Such tests are already very fragile, and must now be changed to be able to run independently.The cleaned_data dictionary is now always present after form validation. When the form doesn t validate, it contains only the fields that passed validation. You should test the success of the validation with the is_valid() method and not with the presence or absence of the cleaned_data attribute on the form.syncdb now queries the database routers to determine if content types (when contenttypes is enabled) and permissions (when auth is enabled) should be created in the target database. Previously, it created them in the default database, even when another database was specified with the --database option.If you use syncdb on multiple databases, you should ensure that your routers allow synchronizing content types and permissions to only one of them. See the docs on the behavior of contrib apps with multiple databases for more information.In order to prevent exposure to denial-of-service attacks related to external entity references and entity expansion, the XML model deserializer now refuses to parse XML documents containing a DTD (DOCTYPE definition). Since the XML serializer does not output a DTD, this will not impact typical usage, only cases where custom-created XML documents are passed to Django s model deserializer.A (default) value of None for the max_num argument to a formset factory no longer defaults to allowing any number of forms in the formset. Instead, in order to prevent memory-exhaustion attacks, it now defaults to a limit of 1000 forms. This limit can be raised by explicitly setting a higher value for max_num."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.5/#features-deprecated-in-1-5", "para": "The localflavor contrib app has been split into separate packages. django.contrib.localflavor itself will be removed in Django 1.6, after an accelerated deprecation.The new packages are available on GitHub. The core team cannot efficiently maintain these packages in the long term   it spans just a dozen countries at this time; similar to translations, maintenance will be handed over to interested members of the community.The markup contrib module has been deprecated and will follow an accelerated deprecation schedule. Direct use of Python markup libraries or 3rd party tag libraries is preferred to Django maintaining this functionality in the framework.With the introduction of custom user models, there is no longer any need for a built-in mechanism to store user profile data.You can still define user profiles models that have a one-to-one relation with the User model - in fact, for many applications needing to associate data with a User account, this will be an appropriate design pattern to follow. However, the AUTH_PROFILE_MODULE setting, and the django.contrib.auth.models.User.get_profile() method for accessing the user profile model, should not be used any longer.Django 1.5 deprecates the ability to stream a response by passing an iterator to HttpResponse. If you rely on this behavior, switch to StreamingHttpResponse. See Explicit support for streaming responses above.In Django 1.7 and above, the iterator will be consumed immediately by HttpResponse.Since Django 1.5 drops support for Python 2.5, we can now rely on the json module being available in Python s standard library, so we ve removed our own copy of simplejson. You should now import json instead of django.utils.simplejson.Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of simplejson   see the backwards-incompatible changes section. If you rely on features added to simplejson after it became Python s json, you should import simplejson explicitly.The django.utils.encoding.StrAndUnicode mix-in has been deprecated. Define a __str__ method and apply the python_2_unicode_compatible() decorator instead.The django.utils.itercompat.product function has been deprecated. Use the built-in itertools.product() instead.The cleanup management command has been deprecated and replaced by clearsessions.The undocumented daily_cleanup.py script has been deprecated. Use the clearsessions management command instead.The depth keyword argument in select_related() has been deprecated. You should use field names instead."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.22/#denial-of-service-possibility-in-logout-view-by-filling-session-store", "para": "Previously, a session could be created when anonymously accessing the django.contrib.auth.views.logout() view (provided it wasn t decorated with login_required() as done in the admin). This could allow an attacker to easily create many new session records by sending repeated requests, potentially filling up the session store or causing other users  session records to be evicted.The SessionMiddleware has been modified to no longer create empty session records, including when SESSION_SAVE_EVERY_REQUEST is active.Additionally, the contrib.sessions.backends.base.SessionBase.flush() and cache_db.SessionStore.flush() methods have been modified to avoid creating a new empty session. Maintainers of third-party session backends should check if the same vulnerability is present in their backend and correct it if so."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.21/#denial-of-service-possibility-by-filling-session-store", "para": "In previous versions of Django, the session backends created a new empty record in the session storage anytime request.session was accessed and there was a session key provided in the request cookies that didn t already have a session record. This could allow an attacker to easily create many new session records simply by sending repeated requests with unknown session keys, potentially filling up the session store or causing other users  session records to be evicted.The built-in session backends now create a session record only if the session is actually modified; empty session records are not created. Thus this potential DoS is now only possible if the site chooses to expose a session-modifying view to anonymous users.As each built-in session backend was fixed separately (rather than a fix in the core sessions framework), maintainers of third-party session backends should check whether the same vulnerability is present in their backend and correct it if so."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.21/#header-injection-possibility-since-validators-accept-newlines-in-input", "para": "Some of Django s built-in validators (EmailValidator, most seriously) didn t prohibit newline characters (due to the usage of $ instead of \\Z in the regular expressions). If you use values with newlines in HTTP response or email headers, you can suffer from header injection attacks. Django itself isn t vulnerable because HttpResponse and the mail sending utilities in django.core.mail prohibit newlines in HTTP and SMTP headers, respectively. While the validators have been fixed in Django, if you re creating HTTP responses or email messages in other ways, it s a good idea to ensure that those methods prohibit newlines as well. You might also want to validate that any existing data in your application doesn t contain unexpected newlines.validate_ipv4_address(), validate_slug(), and URLValidator and their usage in the corresponding form fields GenericIPAddresseField, IPAddressField, SlugField, and URLField are also affected.The undocumented, internally unused validate_integer() function is now stricter as it validates using a regular expression instead of simply casting the value using int() and checking if an exception was raised."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.20/#mitigated-possible-xss-attack-via-user-supplied-redirect-urls", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) accepted URLs with leading control characters and so considered URLs like \\x08javascript:... safe. This issue doesn t affect Django currently, since we only put this URL into the Location response header and browsers seem to ignore JavaScript there. Browsers we tested also treat URLs prefixed with control characters such as %08//example.com as relative paths so redirection to an unsafe target isn t a problem either.However, if a developer relies on is_safe_url() to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack as some browsers such as Google Chrome ignore control characters at the start of a URL in an anchor href."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.19/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.18/#wsgi-header-spoofing-via-underscore-dash-conflation", "para": "When HTTP headers are placed into the WSGI environ, they are normalized by converting to uppercase, converting all dashes to underscores, and prepending HTTP_. For instance, a header X-Auth-User would become HTTP_X_AUTH_USER in the WSGI environ (and thus also in Django s request.META dictionary).Unfortunately, this means that the WSGI environ cannot distinguish between headers containing dashes and headers containing underscores: X-Auth-User and X-Auth_User both become HTTP_X_AUTH_USER. This means that if a header is used in a security-sensitive way (for instance, passing authentication information along from a front-end proxy), even if the proxy carefully strips any incoming value for X-Auth-User, an attacker may be able to provide an X-Auth_User header (with underscore) and bypass this protection.In order to prevent such attacks, both Nginx and Apache 2.4+ strip all headers containing underscores from incoming requests by default. Django s built-in development server now does the same. Django s development server is not recommended for production use, but matching the behavior of common production servers reduces the surface area for behavior changes during deployment."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.18/#mitigated-possible-xss-attack-via-user-supplied-redirect-urls", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login() and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) didn t strip leading whitespace on the tested URL and as such considered URLs like \\njavascript:... safe. If a developer relied on is_safe_url() to provide safe redirect targets and put such a URL into a link, they could suffer from a XSS attack. This bug doesn t affect Django currently, since we only put this URL into the Location response header and browsers seem to ignore JavaScript there."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.18/#denial-of-service-attack-against-django-views-static-serve", "para": "In older versions of Django, the django.views.static.serve() view read the files it served one line at a time. Therefore, a big file with no newlines would result in memory usage equal to the size of that file. An attacker could exploit this and launch a denial-of-service attack by simultaneously requesting many large files. This view now reads the file in chunks to prevent large memory usage.Note, however, that this view has always carried a warning that it is not hardened for production use and should be used only as a development aid. Now may be a good time to audit your project and serve your files in production using a real front-end web server if you are not doing so."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.18/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.17/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.16/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.15/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.14/#reverse-could-generate-urls-pointing-to-other-hosts", "para": "In certain situations, URL reversing could generate scheme-relative URLs  (URLs starting with two slashes), which could unexpectedly redirect a user  to a different host. An attacker could exploit this, for example, by redirecting users to a phishing site designed to ask for user s passwords.To remedy this, URL reversing now ensures that no URL starts with two slashes (//), replacing the second slash with its URL encoded counterpart (%2F). This approach ensures that semantics stay the same, while making the URL relative to the domain and not to the scheme."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.14/#file-upload-denial-of-service", "para": "Before this release, Django s file upload handing in its default configuration may degrade to producing a huge number of os.stat() system calls when a duplicate filename is uploaded. Since stat() may invoke IO, this may produce a huge data-dependent slowdown that slowly worsens over time. The net result is that given enough time, a user with the ability to upload files can cause poor performance in the upload handler, eventually causing it to become very slow simply by uploading 0-byte files. At this point, even a slow network connection and few HTTP requests would be all that is necessary to make a site unavailable.We ve remedied the issue by changing the algorithm for generating file names if a file with the uploaded name already exists. Storage.get_available_name() now appends an underscore plus a random 7 character alphanumeric string (e.g. \"_x3a1gho\"), rather than iterating through an underscore followed by a number (e.g. \"_1\", \"_2\", etc.)."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.14/#remoteusermiddleware-session-hijacking", "para": "When using the RemoteUserMiddleware and the RemoteUserBackend, a change to the REMOTE_USER header between requests without an intervening logout could result in the prior user s session being co-opted by the subsequent user. The middleware now logs the user out on a failed login attempt."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.14/#data-leakage-via-query-string-manipulation-in-contrib-admin", "para": "In older versions of Django it was possible to reveal any field s data by modifying the  popup  and  to_field  parameters of the query string on an admin change form page. For example, requesting a URL like /admin/auth/user/?pop=1&t=password and viewing the page s HTML allowed viewing the password hash of each user. While the admin requires users to have permissions to view the change form pages in the first place, this could leak data if you rely on users having access to view only certain fields on a model.To address the issue, an exception will now be raised if a to_field value that isn t a related field to a model that has been registered with the admin is specified."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.13/#caches-may-incorrectly-be-allowed-to-store-and-serve-private-data", "para": "In certain situations, Django may allow caches to store private data related to a particular session and then serve that data to requests with a different session, or no session at all. This can lead to information disclosure and can be a vector for cache poisoning.When using Django sessions, Django will set a Vary: Cookie header to ensure caches do not serve cached data to requests from other sessions. However, older versions of Internet Explorer (most likely only Internet Explorer 6, and Internet Explorer 7 if run on Windows XP or Windows Server 2003) are unable to handle the Vary header in combination with many content types. Therefore, Django would remove the header if the request was made by Internet Explorer.To remedy this, the special behavior for these older Internet Explorer versions has been removed, and the Vary header is no longer stripped from the response. In addition, modifications to the Cache-Control header for all Internet Explorer requests with a Content-Disposition header have also been removed as they were found to have similar issues."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.13/#malformed-redirect-urls-from-user-input-not-correctly-validated", "para": "The validation for redirects did not correctly validate some malformed URLs, which are accepted by some browsers. This allows a user to be redirected to an unsafe URL unexpectedly.Django relies on user input in some cases (e.g. django.contrib.auth.views.login(), django.contrib.comments, and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) did not correctly validate some malformed URLs, such as http:\\\\djangoproject.com, which are accepted by some browsers with more liberal URL parsing.To remedy this, the validation in is_safe_url() has been tightened to be able to handle and correctly validate these malformed URLs."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.12/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.11/#unexpected-code-execution-using-reverse", "para": "Django s URL handling is based on a mapping of regex patterns (representing the URLs) to callable views, and Django s own processing consists of matching a requested URL against those patterns to determine the appropriate view to invoke.Django also provides a convenience function   reverse()   which performs this process in the opposite direction. The reverse() function takes information about a view and returns a URL which would invoke that view. Use of reverse() is encouraged for application developers, as the output of reverse() is always based on the current URL patterns, meaning developers do not need to change other code when making changes to URLs.One argument signature for reverse() is to pass a dotted Python path to the desired view. In this situation, Django will import the module indicated by that dotted path as part of generating the resulting URL. If such a module has import-time side effects, those side effects will occur.Thus it is possible for an attacker to cause unexpected code execution, given the following conditions:To remedy this, reverse() will now only accept and import dotted paths based on the view-containing modules listed in the project s URL pattern configuration, so as to ensure that only modules the developer intended to be imported in this fashion can or will be imported."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.11/#caching-of-anonymous-pages-could-reveal-csrf-token", "para": "Django includes both a caching framework and a system for preventing cross-site request forgery (CSRF) attacks. The CSRF-protection system is based on a random nonce sent to the client in a cookie which must be sent by the client on future requests and, in forms, a hidden value which must be submitted back with the form.The caching framework includes an option to cache responses to anonymous (i.e., unauthenticated) clients.When the first anonymous request to a given page is by a client which did not have a CSRF cookie, the cache framework will also cache the CSRF cookie and serve the same nonce to other anonymous clients who do not have a CSRF cookie. This can allow an attacker to obtain a valid CSRF cookie value and perform attacks which bypass the check for the cookie.To remedy this, the caching framework will no longer cache such responses. The heuristic for this will be:"}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.11/#mysql-typecasting", "para": "The MySQL database is known to  typecast  on certain queries; for example, when querying a table which contains string values, but using a query which filters based on an integer value, MySQL will first silently coerce the strings to integers and return a result based on that.If a query is performed without first converting values to the appropriate type, this can produce unexpected results, similar to what would occur if the query itself had been manipulated.Django s model field classes are aware of their own types and most such classes perform explicit conversion of query arguments to the correct database-level type before querying. However, three model field classes did not correctly convert their arguments:These three fields have been updated to convert their arguments to the correct types before querying.Additionally, developers of custom model fields are now warned via documentation to ensure their custom field classes will perform appropriate type conversions, and users of the raw() and extra() query methods   which allow the developer to supply raw SQL or SQL fragments   will be advised to ensure they perform appropriate manual type conversions prior to executing queries."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.10/#python-compatibility", "para": "Django 1.4.9 inadvertently introduced issues with Python 2.5 compatibility. Django 1.4.10 restores Python 2.5 compatibility. This was issue #21362 in Django s Trac."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.9/#readdressed-denial-of-service-via-password-hashers", "para": "Django 1.4.8 imposes a 4096-byte limit on passwords in order to mitigate a denial-of-service attack through submission of bogus but extremely large passwords. In Django 1.4.9, we ve reverted this change and instead improved the speed of our PBKDF2 algorithm by not rehashing the key on every iteration."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.9/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.8/#denial-of-service-via-password-hashers", "para": "In previous versions of Django, no limit was imposed on the plaintext length of a password. This allowed a denial-of-service attack through submission of bogus but extremely large passwords, tying up server resources performing the (expensive, and increasingly expensive with the length of the password) calculation of the corresponding hash.As of 1.4.8, Django s authentication framework imposes a 4096-byte limit on passwords and will fail authentication with any submitted password of greater length."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.8/../../howto/error-reporting/#django.views.decorators.debug.sensitive_post_parameters", "para": "The decoration of the add_view and user_change_password user admin views with sensitive_post_parameters() did not include method_decorator() (required since the views are methods) resulting in the decorator not being properly applied. This usage has been fixed and sensitive_post_parameters() will now throw an exception if it s improperly used."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.7/#directory-traversal-vulnerability-in-ssi-template-tag", "para": "In previous versions of Django it was possible to bypass the ALLOWED_INCLUDE_ROOTS setting used for security with the ssi template tag by specifying a relative path that starts with one of the allowed roots. For example, if ALLOWED_INCLUDE_ROOTS = (\"/var/www\",) the following would be possible:In practice this is not a very common problem, as it would require the template author to put the ssi file in a user-controlled variable, but it s possible in principle."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.6/#mitigated-possible-xss-attack-via-user-supplied-redirect-urls", "para": "Django relies on user input in some cases (e.g. django.contrib.auth.views.login(), django.contrib.comments, and i18n) to redirect the user to an  on success  URL. The security checks for these redirects (namely django.utils.http.is_safe_url()) didn t check if the scheme is http(s) and as such allowed javascript:... URLs to be entered. If a developer relied on is_safe_url() to provide safe redirect targets and put such a URL into a link, they could suffer from a XSS attack. This bug doesn t affect Django currently, since we only put this URL into the Location response header and browsers seem to ignore JavaScript there."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.6/#bugfixes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.4/#host-header-poisoning", "para": "Some parts of Django   independent of end-user-written applications   make use of full URLs, including domain name, which are generated from the HTTP Host header. Django s documentation has for some time contained notes advising users on how to configure Web servers to ensure that only valid Host headers can reach the Django application. However, it has been reported to us that even with the recommended Web server configurations there are still techniques available for tricking many common Web servers into supplying the application with an incorrect and possibly malicious Host header.For this reason, Django 1.4.4 adds a new setting, ALLOWED_HOSTS, containing an explicit list of valid host/domain names for this site. A request with a Host header not matching an entry in this list will raise SuspiciousOperation if request.get_host() is called. For full details see the documentation for the ALLOWED_HOSTS setting.The default value for this setting in Django 1.4.4 is ['*'] (matching any host), for backwards-compatibility, but we strongly encourage all sites to set a more restrictive value.This host validation is disabled when DEBUG is True or when running tests."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.4/#xml-deserialization", "para": "The XML parser in the Python standard library is vulnerable to a number of attacks via external entities and entity expansion. Django uses this parser for deserializing XML-formatted database fixtures. This deserializer is not intended for use with untrusted data, but in order to err on the side of safety in Django 1.4.4 the XML deserializer refuses to parse an XML document with a DTD (DOCTYPE definition), which closes off these attack avenues.These issues in the Python standard library are CVE-2013-1664 and CVE-2013-1665. More information available from the Python security team.Django s XML serializer does not create documents with a DTD, so this should not cause any issues with the typical round-trip from dumpdata to loaddata, but if you feed your own XML documents to the loaddata management command, you will need to ensure they do not contain a DTD."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.4/#formset-memory-exhaustion", "para": "Previous versions of Django did not validate or limit the form-count data provided by the client in a formset s management form, making it possible to exhaust a server s available memory by forcing it to create very large numbers of forms.In Django 1.4.4, all formsets have a strictly-enforced maximum number of forms (1000 by default, though it can be set higher via the max_num formset factory argument)."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.4/#admin-history-view-information-leakage", "para": "In previous versions of Django, an admin user without change permission on a model could still view the unicode representation of instances via their admin history log. Django 1.4.4 now limits the admin history log view for an object to users with change permission for that model."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.4/#other-bugfixes-and-changes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.3/#host-header-poisoning", "para": "Several earlier Django security releases focused on the issue of poisoning the HTTP Host header, causing Django to generate URLs pointing to arbitrary, potentially-malicious domains.In response to further input received and reports of continuing issues following the previous release, we re taking additional steps to tighten Host header validation. Rather than attempt to accommodate all features HTTP supports here, Django s Host header validation attempts to support a smaller, but far more common, subset:Any deviation from this will now be rejected, raising the exception django.core.exceptions.SuspiciousOperation."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.3/#redirect-poisoning", "para": "Also following up on a previous issue: in July of this year, we made changes to Django s HTTP redirect classes, performing additional validation of the scheme of the URL to redirect to (since, both within Django s own supplied applications and many third-party applications, accepting a user-supplied redirect target is a common pattern).Since then, two independent audits of the code turned up further potential problems. So, similar to the Host-header issue, we are taking steps to provide tighter validation in response to reported problems (primarily with third-party applications, but to a certain extent also within Django itself). This comes in two parts:1. A new utility function, django.utils.http.is_safe_url, is added; this function takes a URL and a hostname, and checks that the URL is either relative, or if absolute matches the supplied hostname. This function is intended for use whenever user-supplied redirect targets are accepted, to ensure that such redirects cannot lead to arbitrary third-party sites.2. All of Django s own built-in views   primarily in the authentication system   which allow user-supplied redirect targets now use is_safe_url to validate the supplied URL."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.2/#host-header-poisoning", "para": "Some parts of Django   independent of end-user-written applications   make use of full URLs, including domain name, which are generated from the HTTP Host header. Some attacks against this are beyond Django s ability to control, and require the web server to be properly configured; Django s documentation has for some time contained notes advising users on such configuration.Django s own built-in parsing of the Host header is, however, still vulnerable, as was reported to us recently. The Host header parsing in Django 1.3.3 and Django 1.4.1   specifically, django.http.HttpRequest.get_host()   was incorrectly handling username/password information in the header. Thus, for example, the following Host header would be accepted by Django when running on  validsite.com :Using this, an attacker can cause parts of Django   particularly the password-reset mechanism   to generate and display arbitrary URLs to users.To remedy this, the parsing in HttpRequest.get_host() is being modified; Host headers which contain potentially dangerous content (such as username/password pairs) now raise the exception django.core.exceptions.SuspiciousOperation.Details of this issue were initially posted online as a security advisory."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.2/#backwards-incompatible-changes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4.2/#other-bugfixes-and-changes", "para": ""}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4/#overview", "para": "The biggest new feature in Django 1.4 is support for time zones when handling date/times. When enabled, this Django will store date/times in UTC, use timezone-aware objects internally, and translate them to users  local timezones for display.If you re upgrading an existing project to Django 1.4, switching to the timezone aware mode may take some care: the new mode disallows some rather sloppy behavior that used to be accepted. We encourage anyone who s upgrading to check out the timezone migration guide and the timezone FAQ for useful pointers.Other notable new features in Django 1.4 include:Wherever possible we try to introduce new features in a backwards-compatible manner per our API stability policy policy. However, as with previous releases, Django 1.4 ships with some minor backwards incompatible changes; people upgrading from previous versions of Django should read that list carefully."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4/#python-compatibility", "para": "Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum required Python version. Django is tested and supported on Python 2.5, 2.6 and 2.7.This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.5 or newer as their default version. If you re still using Python 2.4, however, you ll need to stick to Django 1.3 until you can upgrade. Per our support policy, Django 1.3 will continue to receive security support until the release of Django 1.5.Django does not support Python 3.x at this time. At some point before the release of Django 1.4, we plan to publish a document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4/#what-s-new-in-django-1-4", "para": "In previous versions, Django used  naive  date/times (that is, date/times without an associated time zone), leaving it up to each developer to interpret what a given date/time  really means . This can cause all sorts of subtle timezone-related bugs.In Django 1.4, you can now switch Django into a more correct, time-zone aware mode. In this mode, Django stores date and  time information in UTC in the database, uses time-zone-aware datetime objects internally and translates them to the end user s time zone in templates and forms. Reasons for using this feature include:Time zone support is enabled by default in new projects created with startproject. If you want to use this feature in an existing project, read the migration guide. If you encounter problems, there s a helpful FAQ.Django 1.4 supports integration with in-browser testing frameworks like Selenium. The new django.test.LiveServerTestCase base class lets you test the interactions between your site s front and back ends more comprehensively. See the documentation for more details and concrete examples.Django 1.4 ships with an updated default project layout and manage.py file for the startproject management command. These fix some issues with the previous manage.py handling of Python import paths that caused double imports, trouble moving from development to deployment, and other difficult-to-debug path issues.The previous manage.py called functions that are now deprecated, and thus projects upgrading to Django 1.4 should update their manage.py. (The old-style manage.py will continue to work as before until Django 1.6. In 1.5 it will raise DeprecationWarning).The new recommended manage.py file should look like this:{{ project_name }} should be replaced with the Python package name of the actual project.If settings, URLconfs and apps within the project are imported or referenced using the project name prefix (e.g. myproject.settings, ROOT_URLCONF = \"myproject.urls\", etc.), the new manage.py will need to be moved one directory up, so it is outside the project package rather than adjacent to settings.py and urls.py.For instance, with the following layout:You could import mysite.settings, mysite.urls, and mysite.myapp, but not settings, urls, or myapp as top-level modules.Anything imported as a top-level module can be placed adjacent to the new manage.py. For instance, to decouple  myapp  from the project module and import it as just myapp, place it outside the mysite/ directory:If the same code is imported inconsistently (some places with the project prefix, some places without it), the imports will need to be cleaned up when switching to the new manage.py.The startapp and startproject management commands now have a --template option for specifying a path or URL to a custom app or project template.For example, Django will use the /path/to/my_project_template directory when you run the following command:You can also now provide a destination directory as the second argument to both startapp and startproject:For more information, see the startapp and startproject documentation.The startproject management command now adds a wsgi.py module to the initial project layout, containing a simple WSGI application that can be used for deploying with WSGI app servers.The built-in development server now supports using an externally-defined WSGI callable, which makes it possible to run runserver with the same WSGI configuration that is used for deployment. The new WSGI_APPLICATION setting lets you configure which WSGI callable runserver uses.(The runfcgi management command also internally wraps the WSGI callable configured via WSGI_APPLICATION.)Django 1.4 includes a QuerySet.select_for_update() method, which generates a SELECT ... FOR UPDATE SQL query. This will lock rows until the end of the transaction, meaning other transactions cannot modify or delete rows matched by a FOR UPDATE query.For more details, see the documentation for select_for_update().This method lets you create multiple objects more efficiently. It can result in significant performance increases if you have many objects.Django makes use of this internally, meaning some operations (such as database setup for test suites) have seen a performance benefit as a result.See the bulk_create() docs for more information.Similar to select_related() but with a different strategy and broader scope, prefetch_related() has been added to QuerySet. This method returns a new QuerySet that will prefetch each of the specified related lookups in a single batch as soon as the query begins to be evaluated. Unlike select_related, it does the joins in Python, not in the database, and supports many-to-many relationships, GenericForeignKey and more. This allows you to fix a very common performance problem in which your code ends up doing O(n) database queries (or worse) if objects on your primary QuerySet each have many related objects that you also need to fetch.Django s auth system (django.contrib.auth) stores passwords using a one-way algorithm. Django 1.3 uses the SHA1 algorithm, but increasing processor speeds and theoretical attacks have revealed that SHA1 isn t as secure as we d like. Thus, Django 1.4 introduces a new password storage system: by default Django now uses the PBKDF2 algorithm (as recommended by NIST). You can also easily choose a different algorithm (including the popular bcrypt algorithm). For more details, see How Django stores passwords.We ve switched the admin and other bundled templates to use the HTML5 doctype. While Django will be careful to maintain compatibility with older browsers, this change means that you can use any HTML5 features you need in admin pages without having to lose HTML validity or override the provided templates to change the doctype.Prior to Django 1.4, the admin app let you specify change list filters by specifying a field lookup, but it didn t allow you to create custom filters. This has been rectified with a simple API (previously used internally and known as  FilterSpec ). For more details, see the documentation for list_filter.The admin change list now supports sorting on multiple columns. It respects all elements of the ordering attribute, and sorting on multiple columns by clicking on headers is designed to mimic the behavior of desktop GUIs. We also added a get_ordering() method for specifying the ordering dynamically (i.e., depending on the request).We added a save_related() method to ModelAdmin to ease customization of how related objects are saved in the admin.Two other new ModelAdmin methods, get_list_display() and get_list_display_links() enable dynamic customization of fields and links displayed on the admin change list.Admin inlines now only allow those actions for which the user has permission. For ManyToMany relationships with an auto-created intermediate model (which does not have its own permissions), the change permission for the related model determines if the user has the permission to add, change or delete relationships.Django 1.4 adds both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications.See the cryptographic signing docs for more information.Django 1.4 introduces a cookie-based session backend that uses the tools for cryptographic signing to store the session data in the client s browser.WarningSession data is signed and validated by the server, but it s not encrypted. This means a user can view any data stored in the session but cannot change it. Please read the documentation for further clarification before using this backend.See the cookie-based session backend docs for more information.The previous FormWizard from django.contrib.formtools has been replaced with a new implementation based on the class-based views introduced in Django 1.3. It features a pluggable storage API and doesn t require the wizard to pass around hidden fields for every previous step.Django 1.4 ships with a session-based storage backend and a cookie-based storage backend. The latter uses the tools for cryptographic signing also introduced in Django 1.4 to store the wizard s state in the user s cookies.A lazily evaluated version of reverse() was added to allow using URL reversals before the project s URLconf gets loaded.Django can now look for a language prefix in the URLpattern when using the new i18n_patterns() helper function. It s also now possible to define translatable URL patterns using ugettext_lazy(). See Internationalization: in URL patterns for more information about the language prefix and how to internationalize URL patterns.The contextual translation support introduced in Django 1.3 via the pgettext function has been extended to the trans and blocktrans template tags using the new context keyword.Two new attributes, pk_url_kwarg and slug_url_kwarg, have been added to SingleObjectMixin to enable the customization of URLconf keyword arguments used for single object generic views.A new assignment_tag helper function was added to template.Library to ease the creation of template tags that store data in a specified context variable.The simple_tag, inclusion_tag and newly introduced assignment_tag template helper functions may now accept any number of positional or keyword arguments. For example:Then, in the template, any number of arguments may be passed to the template tag. For example:In previous versions of Django, whenever the TEMPLATE_DEBUG setting was True, any exception raised during template rendering (even exceptions unrelated to template syntax) were wrapped in TemplateSyntaxError and re-raised. This was done in order to provide detailed template source location information in the debug 500 page.In Django 1.4, exceptions are no longer wrapped. Instead, the original exception is annotated with the source information. This means that catching exceptions from template rendering is now consistent regardless of the value of TEMPLATE_DEBUG, and there s no need to catch and unwrap TemplateSyntaxError in order to catch other errors.This new filter truncates a string to be no longer than the specified number of characters. Truncated strings end with a translatable ellipsis sequence (   ). See the documentation for truncatechars for more details.The staticfiles contrib app has a new static template tag to refer to files saved with the STATICFILES_STORAGE storage backend. It uses the storage backend s url method and therefore supports advanced features such as serving files from a cloud service.The staticfiles contrib app now has a django.contrib.staticfiles.storage.CachedStaticFilesStorage backend that caches the files it saves (when running the collectstatic management command) by appending the MD5 hash of the file s content to the filename. For example, the file css/styles.css would also be saved as css/styles.55e7cbb9ba48.cssWe ve added a middleware to provide easy protection against clickjacking using the X-Frame-Options header. It s not enabled by default for backwards compatibility reasons, but you ll almost certainly want to enable it to help plug that security hole for browsers that support the header.We ve made various improvements to our CSRF features, including the ensure_csrf_cookie() decorator, which can help with AJAX-heavy sites; protection for PUT and DELETE requests; and the CSRF_COOKIE_SECURE and CSRF_COOKIE_PATH settings, which can improve the security and usefulness of CSRF protection. See the CSRF docs for more information.We added two function decorators, sensitive_variables() and sensitive_post_parameters(), to allow designating the local variables and POST parameters that may contain sensitive information and should be filtered out of error reports.All POST parameters are now systematically filtered out of error reports for certain views (login, password_reset_confirm, password_change and add_view in django.contrib.auth.views, as well as user_change_password in the admin app) to prevent the leaking of sensitive information such as user passwords.You can override or customize the default filtering by writing a custom filter. For more information see the docs on Filtering error reports.Django 1.4 can now better handle IPv6 addresses with the new GenericIPAddressField model field, GenericIPAddressField form field and the validators validate_ipv46_address and validate_ipv6_address.The base classes in django.test now have some helpers to compare HTML without tripping over irrelevant differences in whitespace, argument quoting/ordering and closing of self-closing tags. You can either compare HTML directly with the new assertHTMLEqual() and assertHTMLNotEqual() assertions, or use the html=True flag with assertContains() and assertNotContains() to test whether the client s response contains a given HTML fragment. See the assertions documentation for more.Two new date formats were added for use in template filters, template tags and Format localization:Please make sure to update your custom format files if they contain either e or o in a format string. For example a Spanish localization format previously only escaped the d format character:But now it needs to also escape e and o:For more information, see the date documentation.Django 1.4 also includes several smaller improvements worth noting:The trans template tag now takes an optional as argument to be able to retrieve a translation string without displaying it but setting a template context variable instead.The if template tag now supports {% elif %} clauses.If your Django app is behind a proxy, you might find the new SECURE_PROXY_SSL_HEADER setting useful. It solves the problem of your proxy  eating  the fact that a request came in via HTTPS. But only use this setting if you know what you re doing.A new, plain-text, version of the HTTP 500 status code internal error page served when DEBUG is True is now sent to the client when Django detects that the request has originated in JavaScript code. (is_ajax() is used for this.)Like its HTML counterpart, it contains a collection of different pieces of information about the state of the application.This should make it easier to read when debugging interaction with client-side JavaScript.Added the makemessages --no-location option.Changed the locmem cache backend to use pickle.HIGHEST_PROTOCOL for better compatibility with the other cache backends.Added support in the ORM for generating SELECT queries containing DISTINCT ON.The distinct() QuerySet method now accepts an optional list of model field names. If specified, then the DISTINCT statement is limited to these fields. This is only supported in PostgreSQL.For more details, see the documentation for distinct().The admin login page will add a password reset link if you include a URL with the name  admin_password_reset  in your urls.py, so plugging in the built-in password reset mechanism and making it available is now much easier. For details, see Adding a password reset feature.The MySQL database backend can now make use of the savepoint feature implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine.It s now possible to pass initial values to the model forms that are part of both model formsets and inline model formsets as returned from factory functions modelformset_factory and inlineformset_factory respectively just like with regular formsets. However, initial values only apply to extra forms, i.e. those which are not bound to an existing model instance.The sitemaps framework can now handle HTTPS links using the new Sitemap.protocol class attribute.A new django.test.SimpleTestCase subclass of unittest.TestCase that s lighter than django.test.TestCase and company. It can be useful in tests that don t need to hit a database. See Hierarchy of Django unit testing classes."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4/#backwards-incompatible-changes-in-1-4", "para": "Running Django with an empty or known SECRET_KEY disables many of Django s security protections and can lead to remote-code-execution vulnerabilities. No Django site should ever be run without a SECRET_KEY.In Django 1.4, starting Django with an empty SECRET_KEY will raise a DeprecationWarning. In Django 1.5, it will raise an exception and Django will refuse to start. This is slightly accelerated from the usual deprecation path due to the severity of the consequences of running Django with no SECRET_KEY.The included administration app django.contrib.admin has for a long time shipped with a default set of static files such as JavaScript, images and stylesheets. Django 1.3 added a new contrib app django.contrib.staticfiles to handle such files in a generic way and defined conventions for static files included in apps.Starting in Django 1.4, the admin s static files also follow this convention, to make the files easier to deploy. In previous versions of Django, it was also common to define an ADMIN_MEDIA_PREFIX setting to point to the URL where the admin s static files live on a Web server. This setting has now been deprecated and replaced by the more general setting STATIC_URL. Django will now expect to find the admin static files under the URL <STATIC_URL>/admin/.If you ve previously used a URL path for ADMIN_MEDIA_PREFIX (e.g. /media/) simply make sure STATIC_URL and STATIC_ROOT are configured and your Web server serves those files correctly. The development server continues to serve the admin files just like before. Read the static files howto for more details.If your ADMIN_MEDIA_PREFIX is set to an specific domain (e.g. http://media.example.com/admin/), make sure to also set your STATIC_URL setting to the correct URL   for example, http://media.example.com/.WarningIf you re implicitly relying on the path of the admin static files within Django s source code, you ll need to update that path. The files were moved from django/contrib/admin/media/ to django/contrib/admin/static/admin/.Django hasn t had a clear policy on which browsers are supported by the admin app. Our new policy formalizes existing practices: YUI s A-grade browsers should provide a fully-functional admin experience, with the notable exception of Internet Explorer 6, which is no longer supported.Released over 10 years ago, IE6 imposes many limitations on modern Web development. The practical implications of this policy are that contributors are free to improve the admin without consideration for these limitations.Obviously, this new policy has no impact on sites you develop using Django. It only applies to the Django admin. Feel free to develop apps compatible with any range of browsers.As part of an effort to improve the performance and usability of the admin s change-list sorting interface and horizontal and vertical  filter  widgets, some icon files were removed and grouped into two sprite files.Specifically: selector-add.gif, selector-addall.gif, selector-remove.gif, selector-removeall.gif, selector_stacked-add.gif and selector_stacked-remove.gif were combined into selector-icons.gif; and arrow-up.gif and arrow-down.gif were combined into sorting-icons.gif.If you used those icons to customize the admin, then you ll need to replace them with your own icons or get the files from a previous release.To avoid conflicts with other common CSS class names (e.g.  button ), we added a prefix ( field- ) to all CSS class names automatically generated from the form field names in the main admin forms, stacked inline forms and tabular inline cells. You ll need to take that prefix into account in your custom style sheets or JavaScript files if you previously used plain field names as selectors for custom styles or JavaScript transformations.Django 1.3 changed the cryptographic signing mechanisms used in a number of places in Django. While Django 1.3 kept fallbacks that would accept hashes produced by the previous methods, these fallbacks are removed in Django 1.4.So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/invalidate certain pieces of data that have been cryptographically signed using an old method. To avoid this, use Django 1.3 first for a period of time to allow the signed data to expire naturally. The affected parts are detailed below, with 1) the consequences of ignoring this advice and 2) the amount of time you need to run Django 1.3 for the data to expire or become irrelevant.Form-related hashes: these have a are much shorter lifetime and are relevant only for the short window where a user might fill in a form generated by the pre-upgrade Django instance and try to submit it to the upgraded Django instance:Starting in 1.4, the FlatpageFallbackMiddleware only adds a trailing slash and redirects if the resulting URL refers to an existing flatpage. For example, requesting /notaflatpageoravalidurl in a previous version would redirect to /notaflatpageoravalidurl/, which would subsequently raise a 404. Requesting /notaflatpageoravalidurl now will immediately raise a 404.Also, redirects returned by flatpages are now permanent (with 301 status code), to match the behavior of CommonMiddleware.As a consequence of time-zone support, and according to the ECMA-262 specification, we made changes to the JSON serializer:We changed the XML serializer to use the ISO8601 format for datetimes. The letter T is used to separate the date part from the time part, instead of a space. Time zone information is included in the [+-]HH:MM format.Though the serializers now use these new formats when creating fixtures, they can still load fixtures that use the old format.The database feature supports_timezone used to be True for SQLite. Indeed, if you saved an aware datetime object, SQLite stored a string that included an UTC offset. However, this offset was ignored when loading the value back from the database, which could corrupt the data.In the context of time-zone support, this flag was changed to False, and datetimes are now stored without time-zone information in SQLite. When USE_TZ is False, if you attempt to save an aware datetime object, Django raises an exception.The MySQL backend historically has raised MySQLdb.OperationalError when a query triggered an exception. We ve fixed this bug, and we now raise django.db.DatabaseError instead. If you were testing for MySQLdb.OperationalError, you ll need to update your except clauses.DatabaseWrapper objects (i.e. the connection objects referenced by django.db.connection and django.db.connections[\"some_alias\"]) used to be thread-local. They are now global objects in order to be potentially shared between multiple threads. While the individual connection objects are now global, the django.db.connections dictionary referencing those objects is still thread-local. Therefore if you just use the ORM or DatabaseWrapper.cursor() then the behavior is still the same as before. Note, however, that django.db.connection does not directly reference the default DatabaseWrapper object anymore and is now a proxy to access that object s attributes. If you need to access the actual DatabaseWrapper object, use django.db.connections[DEFAULT_DB_ALIAS] instead.As part of this change, all underlying SQLite connections are now enabled for potential thread-sharing (by passing the check_same_thread=False attribute to pysqlite). DatabaseWrapper however preserves the previous behavior by disabling thread-sharing by default, so this does not affect any existing code that purely relies on the ORM or on DatabaseWrapper.cursor().Finally, while it s now possible to pass connections between threads, Django doesn t make any effort to synchronize access to the underlying backend. Concurrency behavior is defined by the underlying backend implementation. Check their documentation for details.Django s comments has historically supported excluding the comments of a special user group, but we ve never documented the feature properly and didn t enforce the exclusion in other parts of the app such as the template tags. To fix this problem, we removed the code from the feed class.If you rely on the feature and want to restore the old behavior, use a custom comment model manager to exclude the user group, like this:Save this model manager in your custom comment app (e.g., in my_comments_app/managers.py) and add it your custom comment app model:Until Django 1.3, it was possible to exclude some URLs from Django s 404 error reporting by adding prefixes to IGNORABLE_404_STARTS and suffixes to IGNORABLE_404_ENDS.In Django 1.4, these two settings are superseded by IGNORABLE_404_URLS, which is a list of compiled regular expressions. Django won t send an email for 404 errors on URLs that match any of them.Furthermore, the previous settings had some rather arbitrary default values:It s not Django s role to decide if your website has a legacy /cgi-bin/ section or a favicon.ico. As a consequence, the default values of IGNORABLE_404_URLS, IGNORABLE_404_STARTS, and IGNORABLE_404_ENDS are all now empty.If you have customized IGNORABLE_404_STARTS or IGNORABLE_404_ENDS, or if you want to keep the old default value, you should add the following lines in your settings file:Don t forget to escape characters that have a special meaning in a regular expression, such as periods.Previously, Django s CSRF protection provided protection only against POST requests. Since use of PUT and DELETE methods in AJAX applications is becoming more common, we now protect all methods not defined as safe by RFC 2616   i.e., we exempt GET, HEAD, OPTIONS and TRACE, and we enforce protection on everything else.If you re using PUT or DELETE methods in AJAX applications, please see the instructions about using AJAX and CSRF.The password_reset view in django.contrib.auth now accepts a subject_template_name parameter, which is passed to the password save form as a keyword argument. If you are using this view with a custom password reset form, then you will need to ensure your form s save() method accepts this keyword argument.This was an alias to django.template.loader since 2005, and we ve removed it without emitting a warning due to the length of the deprecation. If your code still referenced this, please use django.template.loader instead.This functionality has been removed due to intractable performance and security issues. Any existing usage of verify_exists should be removed.The open method of the base Storage class used to take an obscure parameter mixin that allowed you to dynamically change the base classes of the returned file object. This has been removed. In the rare case you relied on the mixin parameter, you can easily achieve the same by overriding the open method, like this:yaml.load is able to construct any Python object, which may trigger arbitrary code execution if you process a YAML document that comes from an untrusted source. This feature isn t necessary for Django s YAML deserializer, whose primary use is to load fixtures consisting of simple objects. Even though fixtures are trusted data, the YAML deserializer now uses yaml.safe_load for additional security.Session cookies now include the httponly attribute by default to help reduce the impact of potential XSS attacks. As a consequence of this change, session cookie data, including sessionid, is no longer accessible from JavaScript in many browsers. For strict backwards compatibility, use SESSION_COOKIE_HTTPONLY = False in your settings file.When a URL contains a %xx sequence, where xx are two hexadecimal digits, urlize now assumes that the URL is already escaped and doesn t apply URL escaping again. This is wrong for URLs whose unquoted form contains a %xx sequence, but such URLs are very unlikely to happen in the wild, because they would confuse browsers too.It s now possible to check whether a template was used within a block of code with assertTemplateUsed() and assertTemplateNotUsed(). And they can be used as a context manager:See the assertion documentation for more.The default test runner no longer restores the database connections after tests  execution. This prevents the production database from being exposed to potential threads that would still be running and attempting to create new connections.If your code relied on connections to the production database being created after tests  execution, then you can restore the previous behavior by subclassing DjangoTestRunner and overriding its teardown_databases() method.manage.py help now groups available commands by application. If you depended on the output of this command   if you parsed it, for example   then you ll need to update your code. To get a list of all available management commands in a script, use manage.py help --commands instead.Previously, the extends tag used a buggy method of parsing arguments, which could lead to it erroneously considering an argument as a string literal when it wasn t. It now uses parser.compile_filter, like other tags.The internals of the tag aren t part of the official stable API, but in the interests of full disclosure, the ExtendsNode.__init__ definition has changed, which may break any custom tags that use this class.Prior to 1.4, a default value was inserted for fixture objects that were missing a specific date or datetime value when auto_now or auto_now_add was set for the field. This was something that should not have worked, and in 1.4 loading such incomplete fixtures will fail. Because fixtures are a raw import, they should explicitly specify all field values, regardless of field options on the model.The development server is now is multithreaded by default. Use the runserver --nothreading option to disable the use of threading in the development server:Prior to Django 1.4, attributes were included in any markdown output regardless of safe mode setting of the filter. With version > 2.1 of the Python-Markdown library, an enable_attributes option was added. When the safe argument is passed to the markdown filter, both the safe_mode=True and enable_attributes=False options are set. If using a version of the Python-Markdown library less than 2.1, a warning is issued that the output is insecure.In Django 1.3, the get_initial method of the django.views.generic.edit.FormMixin class was returning the class initial dictionary. This has been fixed to return a copy of this dictionary, so form instances can modify their initial data without messing with the class variable."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.4/#features-deprecated-in-1-4", "para": "Some legacy ways of calling cache_page() have been deprecated. Please see the documentation for the correct way to use this decorator.Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we suggested using a more recent version because of performance improvements and, more importantly, the end of upstream support periods for 8.0 and 8.1 was near (November 2010).Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL version it officially supports.When we added logging support in Django in 1.3, the admin error email support was moved into the django.utils.log.AdminEmailHandler, attached to the 'django.request' logger. In order to maintain the established behavior of error emails, the 'django.request' logger was called only when DEBUG was False.To increase the flexibility of error logging for requests, the 'django.request' logger is now called regardless of the value of DEBUG, and the default settings file for new projects now includes a separate filter attached to django.utils.log.AdminEmailHandler to prevent admin error emails in DEBUG mode:If your project was created prior to this change, your LOGGING setting will not include this new filter. In order to maintain backwards-compatibility, Django will detect that your 'mail_admins' handler configuration includes no 'filters' section and will automatically add this filter for you and issue a pending-deprecation warning. This will become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-compatibility shim will be removed entirely.The existence of any 'filters' key under the 'mail_admins' handler will disable this backward-compatibility shim and deprecation warning.Until Django 1.3, the include(), patterns(), and url() functions, plus handler404 and handler500 were located in a django.conf.urls.defaults module.In Django 1.4, they live in django.conf.urls.Databrowse has not seen active development for some time, and this does not show any sign of changing. There had been a suggestion for a GSOC project to integrate the functionality of databrowse into the admin, but no progress was made. While Databrowse has been deprecated, an enhancement of django.contrib.admin providing a similar feature set is still possible.The code that powers Databrowse is licensed under the same terms as Django itself, so it s available to be adopted by an individual or group as a third-party project.This function temporarily modified sys.path in order to make the parent  project  directory importable under the old flat startproject layout. This function is now deprecated, as its path workarounds are no longer needed with the new manage.py and default project layout.This function was never documented or part of the public API, but it was widely recommended for use in setting up a  Django environment  for a user script. These uses should be replaced by setting the DJANGO_SETTINGS_MODULE environment variable or using django.conf.settings.configure().This function was previously used by manage.py to execute a management command. It is identical to django.core.management.execute_from_command_line, except that it first calls setup_environ, which is now deprecated. As such, execute_manager is also deprecated; execute_from_command_line can be used instead. Neither of these functions is documented as part of the public API, but a deprecation path is needed due to use in existing manage.py files.Two flags, is_safe and needs_autoescape, define how each template filter interacts with Django s auto-escaping behavior. They used to be attributes of the filter function:However, this technique caused some problems in combination with decorators, especially @stringfilter. Now, the flags are keyword arguments of @register.filter:See filters and auto-escaping for more information.Until Django 1.3, INSTALLED_APPS accepted wildcards in application names, like django.contrib.*. The expansion was performed by a filesystem-based implementation of from <package> import *. Unfortunately, this can t be done reliably.This behavior was never documented. Since it is unpythonic and not obviously useful, it was removed in Django 1.4. If you relied on it, you must edit your settings file to list all your applications explicitly.This attribute was confusingly named HttpRequest.raw_post_data, but it actually provided the body of the HTTP request. It s been renamed to HttpRequest.body, and HttpRequest.raw_post_data has been deprecated.In previous versions, Paginator objects used in sitemap classes were cached, which could result in stale site maps. We ve removed the caching, so each request to a site map now creates a new Paginator object and calls the items() method of the Sitemap subclass. Depending on what your items() method is doing, this may have a negative performance impact. To mitigate the performance impact, consider using the caching framework within your Sitemap subclass.Versions of Python-Markdown earlier than 2.1 do not support the option to disable attributes. As a security issue, earlier versions of this library will not be supported by the markup contrib app in 1.5 under an accelerated deprecation timeline."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.3.6/#host-header-poisoning", "para": "Some parts of Django   independent of end-user-written applications   make use of full URLs, including domain name, which are generated from the HTTP Host header. Django s documentation has for some time contained notes advising users on how to configure Web servers to ensure that only valid Host headers can reach the Django application. However, it has been reported to us that even with the recommended Web server configurations there are still techniques available for tricking many common Web servers into supplying the application with an incorrect and possibly malicious Host header.For this reason, Django 1.3.6 adds a new setting, ALLOWED_HOSTS, which should contain an explicit list of valid host/domain names for this site. A request with a Host header not matching an entry in this list will raise SuspiciousOperation if request.get_host() is called. For full details see the documentation for the ALLOWED_HOSTS setting.The default value for this setting in Django 1.3.6 is ['*'] (matching any host), for backwards-compatibility, but we strongly encourage all sites to set a more restrictive value.This host validation is disabled when DEBUG is True or when running tests."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.3.6/#xml-deserialization", "para": "The XML parser in the Python standard library is vulnerable to a number of attacks via external entities and entity expansion. Django uses this parser for deserializing XML-formatted database fixtures. The fixture deserializer is not intended for use with untrusted data, but in order to err on the side of safety in Django 1.3.6 the XML deserializer refuses to parse an XML document with a DTD (DOCTYPE definition), which closes off these attack avenues.These issues in the Python standard library are CVE-2013-1664 and CVE-2013-1665. More information available from the Python security team.Django s XML serializer does not create documents with a DTD, so this should not cause any issues with the typical round-trip from dumpdata to loaddata, but if you feed your own XML documents to the loaddata management command, you will need to ensure they do not contain a DTD."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.3.6/#formset-memory-exhaustion", "para": "Previous versions of Django did not validate or limit the form-count data provided by the client in a formset s management form, making it possible to exhaust a server s available memory by forcing it to create very large numbers of forms.In Django 1.3.6, all formsets have a strictly-enforced maximum number of forms (1000 by default, though it can be set higher via the max_num formset factory argument)."}, {"link": "https://docs.djangoproject.com/en/2.2/releases/1.3.6/#admin-history-view-information-leakage", "para": "In previous versions of Django, an admin user without change permission on a model could still view the unicode representation of instances via their admin history log. Django 1.3.6 now limits the admin history log view for an object to users with change permission for that model."}]